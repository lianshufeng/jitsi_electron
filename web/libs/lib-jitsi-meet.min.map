{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/./node_modules/strophe.js/strophe.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./node_modules/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/js-utils/index.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/(webpack)/buildin/global.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./node_modules/bowser/src/bowser.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/./node_modules/process/browser.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./node_modules/async/lib/async.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/DTMF/JitsiDTMFManager.js","webpack://JitsiMeetJS/./modules/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/TalkMutedDetection.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedNotification.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/rttmonitor/rttmonitor.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/(webpack)/buildin/module.js","webpack://JitsiMeetJS/(webpack)/buildin/amd-define.js","webpack://JitsiMeetJS/(webpack)/buildin/amd-options.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/./node_modules/strophejs-plugin-disco/lib/strophe.disco.js","webpack://JitsiMeetJS/./node_modules/timers-browserify/main.js","webpack://JitsiMeetJS/./node_modules/setimmediate/setImmediate.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/array-equals.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONFERENCE_SETUP_FAILED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","JINGLE_ERROR","JINGLE_FATAL_ERROR","KICKED","LOCAL_ROLE_CHANGED","MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTCIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PEERCONNECTION_READY","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","requirejs","require","undef","main","req","makeMap","handlers","defined","waiting","config","defining","hasOwn","aps","slice","jsSuffixRegExp","hasProp","obj","prop","normalize","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","j","part","baseParts","split","map","starMap","length","nodeIdCompat","test","replace","charAt","concat","splice","join","makeRequire","relName","forceSync","args","arguments","push","apply","makeLoad","depName","callDep","Error","splitPrefix","prefix","index","indexOf","substring","makeRelParts","makeConfig","relParts","plugin","parts","relResourceName","f","pr","e","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","alt","setTimeout","cfg","_defined","jQuery","this","Function","func","_slice","Array","_concat","_args","isArray","arg","toString","elt","len","from","Number","Math","ceil","floor","forEach","thisArg","T","k","TypeError","O","kValue","keyStr","btoa","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","charCodeAt","isNaN","atob","String","fromCharCode","core_sha1","x","olda","oldb","oldc","oldd","olde","w","a","b","rol","safe_add","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","hash","y","lsw","num","cnt","str","bin","binb2str","binb2b64","binarray","triplet","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","str2binl","md5_cmn","q","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","hexdigest","binl2hex","binl2str","utf16to8","out","addCookies","cookies","cookieName","cookieObj","isObj","cookieValue","expires","domain","path","escape","unescape","document","cookie","SHA1","MD5","utils","Strophe","$build","attrs","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","blockquote","br","cite","em","img","li","ol","span","strong","ul","body","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","childNode","childNodes","nodeType","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","xmlTextNode","attr","setAttribute","xmlescape","text","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","createHtml","cssAttrs","cssName","cssValue","toLowerCase","getAttribute","cssText","createDocumentFragment","escapeNode","unescapeNode","getNodeFromJid","jid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","result","tree","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","options","matchBareFromJid","ignoreNamespaceFragment","matchBare","user","getNamespace","elNamespace","namespaceMatch","nsMatch","that","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","HTTP","websocket","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","random","addProtocolErrorHandler","status_code","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","iqtype","element","_sendRestart","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","statusChanged","err","_dataRecv","raw","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","mech","matched","authenticate","_no_auth_received","sortMechanismsByPriority","higher","swap","priority","_attemptSASLAuth","mechanism_found","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","_attemptLegacyAuth","_auth1_cb","to","challenge","iq","_auth2_cb","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_sasl_auth1_cb","_sasl_bind_cb","resource","jidNode","_sasl_session_cb","onFailure","now","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","iter","Hi","U","U_old","clientKey","serverKey","clientSignature","responseText","authMessage","attribMatch","substr","_quote","realm","host","digest_uri","cred","A1","A2","$msg","core","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","xml:lang","content","ver","xmpp:version","xmlns:xmpp","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","err_callback","reqStatus","_getRequestStatus","_hitError","xmpp:restart","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","self","primaryTimeout","secondaryTimeout","requestCompletedWithServerError","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","new_service","location","pathname","_buildStream","version","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","__webpack_exports__","AUTH_STATUS_CHANGED","AVATAR_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","DATA_CHANNEL_OPENED","DOMINANT_SPEAKER_CHANGED","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","JVB121_STATUS","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","PARTICIPANT_CONN_STATUS_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","_BrowserCapabilities__WEBPACK_IMPORTED_MODULE_0__","BrowserCapabilities","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","getLogger","transports","format","logger","setLogLevelById","setLevel","setLogLevel","_instances","__filename","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","userName","Settings","callStatsUserName","initBackend","callStatsID","callStatsSecret","swapUserNameAndAlias","callStatsAliasName","aliasName","applicationName","getWiFiStatsMethod","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","disableThirdPartyRequests","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","loadCallStatsAPI","callStatsConfIDNamespace","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","audioLevelsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","dispose","size","emit","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","values","iterator","next","done","callStats","stopCallStats","tpc","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","keys","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","confID","_getCallStatsConfID","_getAllCallStatsInstances","csInstances","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","statistics","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","cs","roomName","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","sendDominantSpeakerEvent","roomJid","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","sendActiveDeviceListEvent","devicesData","globalSet","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","stats","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","eventToLog","properties","_typeof","sendAnalytics","eventName","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","array","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferVideoCodec","codecName","payloadType","rtp","codec","payload","payloadTypes","payloads","payloadIndex","unshift","stripVideoCodec","removePts","rtxApts","item","rtxPts","fmtp","_toConsumableArray","keepPts","rtcpFb","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","GRANTED_PERMISSIONS","IS_SELECTED_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","_objectSpread","error_type","error_message","createConnectionStageReachedEvent","stage","source","createE2eRttEvent","participantId","region","rtt","participant_id","createFocusLeftEvent","createGetUserMediaEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","media_type","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createRttByRegionEvent","createTtfmEvent","AUDIO","VIDEO","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","_len","_key","GlobalOnErrorHandler","callErrorHandler","errHandler","callUnhandledRejectionHandler","usesAdapter","availableDevices","availableDevicesPollTimer","OLD_GUM_DEFAULT_DEVICES","DEFAULT_CONSTRAINTS","video","aspectRatio","height","ideal","max","SS_DEFAULT_FRAME_RATE","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","getConstraints","um","audio","isNewStyleConstraintsSupported","isSafariWithVP8","isEdge","mandatory","optional","cameraDeviceId","deviceId","sourceId","facingMode","CameraFacingMode","USER","minFps","maxFps","fps","minFrameRate","maxFrameRate","resolution","Resolutions","width","minWidth","minHeight","maxWidth","maxHeight","setResolutionConstraints","micDeviceId","echoCancellation","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googNoiseSuppression2","googEchoCancellation2","googAutoGainControl2","isChrome","getSSConstraints","mozMediaSource","mediaSource","frameRate","errmsg","bandwidth","firefox_fake_device","fake","desktopStream","_options$frameRate","chromeMediaSource","screen","chromeMediaSourceId","getTrackSSConstraints","desktopSharingFrameRate","updateGrantedPermissions","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","audio_input_device_count","audio_output_device_count","video_input_device_count","video_output_device_count","device_id","device_group_id","groupId","device_kind","device_label","label","rtcUtils","RTCUtils","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","Listenable","_this","clearInterval","enumerateDevices","navigator","mediaDevices","then","initEnumerateDevicesWithCallback","usesNewGumFlow","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","wrapAttachMediaStream","srcObject","getStreamID","_ref","getTrackID","_ref2","isChromiumBased","src","srcObjectPropertyName","jitsiObjectURL","URL","createObjectURL","defaultSetVideoSrc","_ref3","_ref4","MediaStream","videoTracks","audioTracks","_initPCConstraints","screenObtainer","getUserMediaWithConstraints","isDeviceListAvailable","ds","updateKnownDevices","pds","devicesReceived","newDevices","mediaDeviceInfoToJSON","sort","facing","compareAvailableMediaDevices","supportsDeviceChangeEvent","addEventListener","setInterval","pcConstraints","googHighStartBitrate","googPayloadPadding","googScreencastMinBitrate","googCpuOveruseDetection","googCpuOveruseEncodeUsage","googCpuUnderuseThreshold","googCpuOveruseThreshold","useIPv6","googIPv6","p2pPcConstraints","disableSuspendVideo","googSuspendBelowMinBitrate","Promise","resolve","reject","getUserMedia","catch","umDevices","_this2","isSupported","supportsVideo","obtainStream","_parseDesktopSharingOptions","devices","includes","supportsMediaStreamConstructor","_getAudioAndVideoStreams","_getAudioAndVideoStreamsSeparately","streams","audioStream","videoStream","res","audioVideo","addTrack","desktop","_desktopStream","sourceType","track","MediaType","videoType","VideoType","DESKTOP","CAMERA","handleLocalStream","_this3","requestingDesktop","avStream","missingTracks","_getMissingTracks","stopMediaStream","desktopSharingSourceDevice","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","_this4","obtainDevices","context","successCallback","deviceGUM","errorCallback","_len2","_key2","_len3","_key3","desktopSharingExtensionExternalInstallation","desktopSharingSources","gumOptions","trackOptions","_this5","mediaStreamsMetaData","maybeRequestDesktopDevice","matchingDevice","_this$_parseDesktopSh","exact","_newGetUserMediaWithConstraints","getTracks","applyConstraints","_newGetDesktopMedia","maybeRequestCaptureDevices","requestedCaptureDevices","newGetConstraints","_ref5","deviceType","mediaStream","release","url","revokeObjectURL","isDeviceChangeAvailable","deviceData","enable","origAttachMediaStream","getAudioOutputDevice","ex","promise","CHROME_EXTENSION_GENERIC_ERROR","CHROME_EXTENSION_INSTALLATION_ERROR","CHROME_EXTENSION_USER_GESTURE_REQUIRED","CHROME_EXTENSION_USER_CANCELED","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","FIREFOX_EXTENSION_NEEDED","GENERAL","NOT_FOUND","PERMISSION_DENIED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","NO_DATA_FROM_SOURCE","peerConnectionIdCounter","rtcTrackIdCounter","createLocalTracks","tracksInfo","newTracks","trackInfo","safeCounterIncrement","localTrack","JitsiLocalTrack","rtcId","_newCreateLocalTracks","metaData","_track$getSettings","getSettings","RTC","conference","peerConnections","localTracks","_channel","_channelOpen","_lastN","_lastNEndpoints","_maxFrameHeight","_pinnedEndpoint","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_assertThisInitialized","_onDeviceListChanged","_updateAudioOutputForAudioTracks","addListener","newObtainAudioAndVideoPermissions","obtainAudioAndVideoPermissions","tracks","some","_isReceivingData","JitsiTrackErrors","eventType","isP2P","elSelector","getCurrentlyAvailableMediaDevices","getEventDataForActiveDevice","setAudioOutputDevice","isUserStreamById","streamId","isDesktopSharingEnabled","_channelOpenListener","wsUrl","BridgeChannel","sendPinnedEndpointMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","_selectedEndpoint","sendSetLastNMessage","leavingLastNEndpoints","enteringLastNEndpoints","lastNEndpoints","oldLastNEndpoints","isInLastN","JitsiConferenceEvents","maxFrameHeight","ids","signaling","iceConfig","getPCConstraints","abtestSuspendVideo","setSuspendVideo","addPermanentProperties","supportsSdpSemantics","sdpSemantics","newConnection","TraceablePeerConnection","traceablePeerConnection","localVideo","getLocalTracks","localAudio","getType","remoteTracks","pcRemoteTracks","getRemoteTracks","mutePromises","audioTrack","mute","unmute","all","pos","owner","removedTracks","pcRemovedTracks","removeRemoteTracks","audioLevel","getTrackBySSRC","isAudioTrack","setAudioLevel","sendMessage","remoteAudioTracks","setAudioOutput","TRACK_ERROR_TO_MESSAGE_MAP","constraint","failedConstraintName","getResolutionFromFailedConstraint","constructor","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","tmp","mediaSSRCs","_loop","mediaindex","mid","linessrc","idx","containsSSRC","medias","mangle","newdesc","rtpmap","removeSessionLines","removeMediaLines","toJingle","thecreator","assrcline","creator","amidline","afmtpline","rtcpFbToJingle","crypto","required","ssrcMap","_step$value","_slicedToArray","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","rids","ridLine","ridInfo","senders","transportToJingle","sctpmap","sctpAttrs","number","setup","payloadtype","subtype","rtcpFbFromJingle","each","$","fromJingle","jingle","groups","contents","_","jingle2media","sctp","streamCount","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","EDGE","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","Chrome","Chromium","Opera","Firefox","Internet Explorer","Microsoft Edge","Safari","_detectElectron","userAgent","_detectNWJS","_detectReactNative","product","_detect","browserInfo","detectors","bowser","chrome","_detectChromiumBased","BrowserDetection","detectedBrowserInfo","_name","_version","compareVersions","compareVersion","BrowserDetection_BrowserDetection","browsers_namespaceObject","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","NOT_ALLOWED_ERROR","INCOMPATIBLE_SERVER_VERSIONS","PASSWORD_NOT_SUPPORTED","SETUP_FAILED","VIDEOBRIDGE_NOT_AVAILABLE","WRONG_STATE","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","removeEventListener","off","_callStatsUserName","_machineId","jitsi_meet_logger__WEBPACK_IMPORTED_MODULE_0__","_util_UsernameGenerator__WEBPACK_IMPORTED_MODULE_1__","_util_UsernameGenerator__WEBPACK_IMPORTED_MODULE_1___default","getLocalStorage","storage","localStorage","_p8","username","UsernameGenerator","generateUsername","machineId","jitsiMeetId","sessionId","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","ssrcNumber","attrName","ssrcObj","ssrcNum","primarySSRC","msid","findGroup","fecGroup","findGroupByPrimarySSRC","videoSSRCs","getSSRCs","ssrcGroupInfo","secondarySsrc","groupInfo","oldSSRC","newSSRC","SdpTransformWrap","rawSDP","parsedSDP","transform","_createClass","selectedMLine","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","$getMaxListeners","_addListener","prepend","events","existing","warning","newListener","warned","emitter","count","_onceWrap","state","fired","wrapFn","wrapped","_listeners","unwrap","evlistener","arr","unwrapListeners","arrayClone","listenerCount","copy","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","listeners","prependListener","once","prependOnceListener","list","position","originalListener","spliceOne","rawListeners","eventNames","1080","order","fullhd","720","hd","960","360","640","vga","180","320","PENDING","ACTIVE","ENDED","_fabrics","wrtcFuncNames","fabricEvent","DEFAULT_REMOTE_USER","reportType","hasFabric","fabrics","backendInitialized","_addNewFabric","_emptyReportQueue","backend","atLeastOneFabric","defaultInstance","csInstance","defaultConfID","defaultPC","reportsQueue","report","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","methodName","_tryCatchMethods","_i","originalMethod","theArguments","_loop2","_debugMethods","_i2","originalReportError","exception","configParams","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","applicationVersion","getName","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","getConnectionPluginDefinition","base","_class","_base","_class2","_getPrototypeOf2","_inherits","ConnectionPluginListenable","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","_initStrophePlugins","bosh","conn","createConnection","caps","Caps","clientNode","initFeaturesList","addFeature","disableRtx","supportsRtx","enableLipSync","rayo","_pingSupported","credentials","performance","statusStr","getStatusString","useStunTurn","p2p","getStunAndTurnCredentials","pingJid","getFeaturesAndIdentities","identities","PING","ping","startInterval","identity","speakerStatsComponentAddress","_onPrivateMessage","password","JitsiConnectionEvents","anonymousConnectionFailed","connectionFailed","lastErrorMsg","JitsiConnectionErrors","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","connectionHandler","attaching","_this$options$hosts","hosts","anonymousdomain","configDomain","hostname","mucNickname","roomjid","muc","cfgNickname","useNicks","nick","randomHexString","emuc","createRoom","getLog","_this$connection$rayo","dial","isPingSupported","moderate","setMute","eject","sessions","ev","evType","jvb","iceServers","p2pStunServers","stunServers","iceTransportPolicy","initEmuc","initJingle","initStropheUtil","initPing","initRayo","initStropheLogger","deploymentInfo","shard","headersArr","trim","shard_changed","suspend_time","getPingSuspendTime","room","jsonString","json","jsonMessage","parsedJson","tryParseJSONAndVerify","users","XMPPEvents","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","chromeExtInstalled","chromeExtUpdateRequired","gumFunction","ScreenObtainer","intChromeExtPromise","desktopSharingChromeDisabled","desktopSharingChromeExtId","desktopSharingFirefoxDisabled","_createObtainStreamMethod","isNWJS","JitsiMeetNW","obtainDesktopStream","jitsiError","isElectron","obtainScreenOnElectron","isOpera","supportsGetDisplayMedia","obtainScreenFromGetDisplayMedia","append","getWebStoreInstallUrl","initInlineInstalls","checkChromeExtInstalled","installed","updateRequired","initChromeExtension","obtainScreenFromExtension","obtainScreenOnFirefox","streamCallback","failCallback","obtainWebRTCScreen","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingChromeSources","streamType","onGetStreamResponse","_this$options","doGetStreamFromExtensionOptions","runtime","getStream","sources","lastError","doGetStreamFromExtension","alert","handleExternalInstall","webStoreInstallUrl","checkForChromeExtensionOnInterval","checkAgain","waitInterval","retries","currentRetries","interval","waitForExtensionAfterInstall","getDisplayMedia","getVersion","extVersion","minVersion","s1","s2","n1","n2","isUpdateRequired","desktopSharingChromeMinExtVersion","logDisabled_","deprecationWarnings_","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","extractVersion","uastring","expr","detectBrowser","mozGetUserMedia","webkitGetUserMedia","webkitRTCPeerConnection","shimCreateObjectURL","ENVIRONMENT","ALPHANUM","randomElement","randomHexDigit","randomAlphanumStr","DEFAULT_NOT_IN_LAST_N_TIMEOUT","DEFAULT_RTC_MUTE_TIMEOUT","ParticipantConnectionStatus","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onLastNValueChanged","_participantIds","clearRtcMutedTimestamp","endpointId","isActive","myUserId","figureOutConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","_getVideoFrozenTimeout","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","_changeConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","getFocusRecordingUpdate","presence","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","g","JingleSessionPC","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","signalingLayer","SignalingLayerImpl","modificationQueue","queue","_processQueueTasks","wasConnected","establishmentDuration","JingleSession","jingleContents","videoContents","actionName","JingleSessionState","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","disableSimulcast","disableH264","preferH264","_abtestSuspendVideoEnabled","enableFirefoxSimulcast","testing","enableLayerSuspension","createPeerConnection","onicecandidate","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","_assertNotEnded","iceConnectionState","signaling_state","reconnect","iceStarted","onnegotiationneeded","setChatRoom","isSelected","setIsSelected","finishedCallback","_renegotiate","localSDP","localDescription","ice","sdpMLineIndex","jcand","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","newJingleErrorHandler","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","_iceCandidates","iceCandidate","addIceCandidate","outerHTML","_this6","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","generateRecvonlySsrc","jingleOffer","failure","_this7","setOfferAnswerCycle","sendSessionAccept","_this8","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","jingleAnswer","jingleOfferAnswerIq","_this9","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","notifyMySSRCUpdate","_onJingleFatalError","jingleOfferElem","_this10","originalOffer","clone","remove","sendTransportAccept","_this11","accept","responder","responderJid","videoTransferActive","newSendersValue","sessionModify","_this12","transportAccept","medialines","transportReject","sendSessionTerminate","sessionTerminate","reasonDescription","terminate","reasonCondition","reasonText","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","_addOrRemoveRemoteStream","isAdd","_this13","logPrefix","readSsrcInfo","remoteDescription","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceAdd","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","_processRemoteRemoveSource","task","offerIq","remoteSdp","removeSsrcInfo","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","_this14","setRemoteDescription","createAnswer","answer","_this15","offer","oldTrack","newTrack","_this16","workFunction","isVideoTrack","clearRecvonlySsrc","replaceTrack","shouldRenegotiate","newLocalSDP","sourceRemoveElem","ssrcLines","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","_addRemoveTrackAsMuteUnmute","isMute","_this17","oldLocalSDP","removeTrackMute","addTrackUnmute","_verifyNoSSRCChanged","audioActive","videoActive","_this18","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","_this19","newVideoSenders","parseVideoSenders","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","_this20","errResponse","errorElSel","errorReasonSel","errorMsgSel","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","PERMISSION_PROMPT_IS_SHOWN","definition","detect","ua","getFirstMatch","regex","getSecondMatch","iosdevice","android","nexusMobile","nexusTablet","chromeos","silk","sailfish","tizen","webos","windowsphone","windows","mac","linux","edgeVersion","versionIdentifier","tablet","mobile","xbox","opera","samsungBrowser","coast","yandexbrowser","ucbrowser","maxthon","epiphany","puffin","sleipnir","kMeleon","osname","msedge","msie","chromeBook","vivaldi","seamonkey","firefox","firefoxos","phantom","slimer","blackberry","touchpad","bada","qupzilla","chromium","safari","googlebot","blink","webkit","gecko","ios","osVersion","getWindowsVersion","osversion","osMajorVersion","getVersionPrecision","versions","precision","chunks","delta","chunk","reverse","isUnsupportedBrowser","minVersions","strictMode","_bowser","browserList","browserItem","check","_SDPUtil__WEBPACK_IMPORTED_MODULE_0__","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","binding","cwd","chdir","dir","umask","E2E_RTT_CHANGED","LocalStatsCollector","AudioContext","webkitAudioContext","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","Uint8Array","frequencyBinCount","getByteTimeDomainData","newLevel","lastLevel","diff","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","currentExecutingScript","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","ON","OFF","trackHandler2Prop","track_mute","track_unmute","track_ended","addMediaStreamInactiveHandler","oninactive","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_setHandler","container","_onTrackAttach","_maybeFireTrackAttached","_attachTTFMTracker","active","getStreamId","trackId","getTrackId","nextValue","MAX_SAFE_INTEGER","SpeakerStats","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","newName","isNowDominantSpeaker","isDominantSpeaker","timeElapsed","total","IDENTITY_UPDATED","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_noDataFromSourceTimeout","_onDeviceListWillChange","_setRealDeviceIdFromDeviceList","getTrack","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_onNoDataFromSourceError","_checkForCameraIssues","_clearNoDataFromSourceMuteResources","track_type","_fireNoDataFromSourceEvent","isReceivingData","_get","storedMSID","getMSID","_queueSetMuted","setMuted","_setMuted","logMuteInfo","doesVideoMuteByStreamRemove","enabled","_removeStreamFromConferenceAsMute","_unregisterHandlers","stopStream","streamOptions","getDeviceId","getCameraFacingMode","assign","streamsInfo","streamInfo","cont","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","_removeLocalTrackAsMute","removeTrack","detach","bytesSent","getConnectionState","_bytesSent","trackSettings","_stopStreamInProgress","_switchCamera","JibriSession","_mode","_setSessionID","setStatus","_sessionID","_liveStreamViewURL","_status","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","app_data","recording_mode","streamid","you_tube_broadcast_id","errorIq","setError","children","VIDEO_PERMISSION_NAME","JitsiMediaDevices","_eventEmitter","_grantedPermissions","JitsiMediaDevicesEvents","_logOutputDevice","_handleGrantedPermissions","_permissionsApiSupported","permissions","query","deviceID","supported","promises","results","every","permissionStatus","_this$_eventEmitter","trace","consoleTransport","globalTransports","callerInfo","fileLocation","column","getCallerInfo","methods","transportIdx","LOG","SDPUtils","generateIdentifier","localCName","splitLines","blob","splitSections","getDescription","sections","getMediaSections","matchPrefix","parseCandidate","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","parameter","writeRtcpFb","rtcpFeedback","fb","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","msidParts","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","grammar","reg","names","u","z","rate","sessionConfig","raddr","maxMessageSize","RegExp","dir2","RecordingResult","AUDIO_WEBM","AUDIO_OGG","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","getOriginalStream","createEmptyStream","mimeType","ondataavailable","dataEvent","recorderToRemove","getDisplayName","download","Blob","href","click","getRecordingResults","getFileType","getTokenAuthUrl","urlPattern","roleUpgrade","JitsiConnection","_service_statistics_AnalyticsEvents__WEBPACK_IMPORTED_MODULE_0__","_JitsiConference__WEBPACK_IMPORTED_MODULE_1__","_JitsiConnectionEvents__WEBPACK_IMPORTED_MODULE_2__","_modules_statistics_statistics__WEBPACK_IMPORTED_MODULE_3__","_modules_xmpp_xmpp__WEBPACK_IMPORTED_MODULE_4__","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","_this$xmpp","setToken","initJitsiConference","JitsiConference","getConnectionTimes","feature","submit","removeFeature","eventManager","JitsiConferenceEventManager","_init","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","setupXMPPListeners","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","rttMonitor","RttMonitor","e2eping","E2ePing","setupRTCListeners","participantConnectionStatus","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","windowLocation","enableDisplayNameInStats","callStatsCustomScriptUrl","enableStatsID","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","TalkMutedDetection","setLastN","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","setLocalParticipantProperty","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","closeBridgeChannel","_delayedIceFailed","cancel","removeXMPPListeners","destroy","onMemberLeft","getJid","getConnection","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getLocalAudioTrack","getLocalVideoTrack","eventId","addCommandListener","command","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","sendPrivateTextMessage","sendPrivateMessage","sendCommand","addToPresence","sendCommandOnce","removeCommand","removeFromPresence","setSubject","subject","isModerator","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","transcriptionStatus","localVideoTrack","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","muteParticipant","myroomjid","_setConference","removeLocalTrack","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","addLocalTrack","setAudioMute","setVideoMute","addAsUnmutePromises","addTrackAsUnmute","removeAsMutePromises","removeTrackAsMute","getRole","lock","lockRoom","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","participantIds","selectEndpoints","pinParticipant","pinEndpoint","lastN","isInteger","isVideoActive","setMediaTransferActive","getParticipantCount","countHidden","isHidden","kickParticipant","kick","_maybeClearSITimeout","_sessionInitiateTimeout","onMemberJoined","statsID","botType","JitsiParticipant","_role","_botType","getFeatures","_supportsDTMF","updateDTMFSupport","_maybeStartOrStopP2P","_onMemberBotTypeChanged","botParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","setAnswer","onTransportInfo","transportInfo","addIceCandidates","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","getMemberRole","errorMsg","supportsP2P","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_setBridgeChannel","acceptOffer","_suspendMediaTransferForJvbConnection","bridgeChannelType","webSocket","first","openBridgeChannel","supportsDataChannels","initializeBridgeChannel","onCallEnded","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","duration","peerConnection","JitsiDTMFManager","startRecording","stopRecording","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","setStartMutedPolicy","policy","getStartMutedPolicy","isStartAudioMuted","isStartVideoMuted","getLogs","getJingleLog","metadata","time","getXmppLog","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","nodes","overallFeedback","detailedFeedback","remoteUserId","getLocalSSRC","getSSRC","getUsageLabel","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","sendChannelMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onIceConnectionFailed","IceFailedNotification","sendIceFailedNotification","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","isEqual","_defineProperty","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","invite","userLeftEvent","peers","peerCount","hasBotPeer","shouldBeInP2P","myId","peersId","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","getStats","setReceiverVideoConstraint","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","global","LARGE_ARRAY_SIZE","HASH_UNDEFINED","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","argsTag","arrayTag","asyncTag","boolTag","dateTag","errorTag","funcTag","genTag","mapTag","numberTag","nullTag","objectTag","proxyTag","regexpTag","setTag","stringTag","symbolTag","undefinedTag","arrayBufferTag","dataViewTag","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","freeProcess","nodeUtil","nodeIsTypedArray","isTypedArray","arraySome","predicate","mapToArray","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","funcToString","maskSrcKey","exec","IE_PROTO","nativeObjectToString","reIsNative","Buffer","propertyIsEnumerable","symToStringTag","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","SetCache","__data__","Stack","arrayLikeKeys","inherited","isArr","isArg","isArguments","isBuff","isType","skipIndexes","iteratee","baseTimes","isIndex","assocIndexOf","eq","baseGetTag","isOwn","unmasked","getRawTag","objectToString","baseIsArguments","isObjectLike","baseIsEqual","other","bitmask","customizer","equalFunc","objIsArr","othIsArr","objTag","getTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","byteLength","byteOffset","buffer","convert","isPartial","stacked","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","othLength","skipCtor","objValue","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","baseIsNative","isObject","isFunction","baseKeys","Ctor","arrLength","seen","arrValue","othIndex","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getSymbols","getMapData","getValue","pairs","resIndex","arrayFilter","symbol","ArrayBuffer","ctorString","isLength","baseUnary","strophe_js__WEBPACK_IMPORTED_MODULE_0__","_service_statistics_AnalyticsEvents__WEBPACK_IMPORTED_MODULE_1__","_service_authentication_AuthenticationEvents__WEBPACK_IMPORTED_MODULE_2__","_service_authentication_AuthenticationEvents__WEBPACK_IMPORTED_MODULE_2___default","_modules_util_EventEmitterForwarder__WEBPACK_IMPORTED_MODULE_3__","_modules_util_EventEmitterForwarder__WEBPACK_IMPORTED_MODULE_3___default","jitsi_meet_logger__WEBPACK_IMPORTED_MODULE_4__","_JitsiConferenceErrors__WEBPACK_IMPORTED_MODULE_5__","_JitsiConferenceEvents__WEBPACK_IMPORTED_MODULE_6__","_service_RTC_MediaType__WEBPACK_IMPORTED_MODULE_7__","_service_RTC_RTCEvents__WEBPACK_IMPORTED_MODULE_8__","_service_RTC_RTCEvents__WEBPACK_IMPORTED_MODULE_8___default","_service_RTC_VideoType__WEBPACK_IMPORTED_MODULE_9__","_service_RTC_VideoType__WEBPACK_IMPORTED_MODULE_9___default","_modules_statistics_statistics__WEBPACK_IMPORTED_MODULE_10__","_service_xmpp_XMPPEvents__WEBPACK_IMPORTED_MODULE_11__","_service_xmpp_XMPPEvents__WEBPACK_IMPORTED_MODULE_11___default","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","forward","setParticipantPropertyListener","setProperty","recorderSession","logObject","getError","getStatus","AuthenticationEvents","txt","myJid","ts","updated","featuresChangedListener","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","_onByteSentStatsReceived","dest","srcEvent","AnalyticsAdapter","analyticsHandlers","cache","permanentProperties","conferenceName","callstats_name","user_agent","browser_name","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","conference_name","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","isSafariWithWebrtc","isSafari","isVersionLessThan","ondevicechange","usesUnifiedPlan","usesPlanB","RTCRtpTransceiver","_getChromiumBasedVersion","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","arrayBuffer","base64","v1","v2","v3","base64Str","md5","KEYS_BY_BROWSER_TYPE","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","statsInterval","_browserType","_usesPromiseGetStats","_getStatValue","_defineNewGetStatValueMethod","_defineGetStatValueMethod","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","browsers","packetsReceived","packetsLost","packetsSent","bytesReceived","framerateMean","receiveBandwidth","sendBandwidth","remoteAddress","transportType","localAddress","activeConnection","googFrameHeightReceived","googFrameWidthReceived","googFrameHeightSent","googFrameWidthSent","googFrameRateReceived","googFrameRateSent","audioInputLevel","audioOutputLevel","currentRoundTripTime","remoteCandidateType","localCandidateType","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","startAudioLevelStats","processNewAudioLevelReport","processAudioLevelReport","supportsRtpStatistics","processNewStatsReport","processStatsReport","itemStatByKey","stat","pair","keyFromName","getNonNegativeStat","getStatValue","byteSentStats","localip","conferenceStatsTransport","selected","local","localCandidateId","remote","remoteCandidateId","ipAddress","portNumber","candidateType","msType","before","ssrcIds","isRemote","remoteSource","ssrcStats","isDownloadStream","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","packetsTotal","bytesReceivedNow","bytesReceivedBefore","nowBytesTransmitted","timeMs","timestamp","bitrateReceivedKbps","bitrateSentKbps","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","userResolutions","userFramerates","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","remoteIpAddress","remotePort","localIpAddress","localPort","localIp","networkType","frameHeight","frameWidth","framesPerSecond","framesSent","trackIdentifier","getSsrcByTrackId","hidden","_jid","_id","_conference","_hidden","_statsID","_connectionStatus","_properties","jitsiTrack","isWebRTCTrackMuted","oldValue","_isMediaTypeMuted","reduce","_JitsiConnectionEvents__WEBPACK_IMPORTED_MODULE_0__","_modules_xmpp_xmpp__WEBPACK_IMPORTED_MODULE_1__","rejectPromise","onLoginSuccessful","roomPassword","canceled","authenticationError","connectionError","MucConnectionPlugin","rooms","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","ChatRoom","createNonAnonymousRoom","packet2JSON","_Array$from","_Array$from2","json2packet","packet","filterNodeFromPresenceJSON","members","presHandlers","noBridgeAvailable","Moderator","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","JitsiTranscriptionStatus","xns","addVideoInfoToPresence","disableFocus","allocateConferenceFocus","fromJoin","getInfo","getForm","form","formSubmit","var","member","statusEl","hasStatusUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","hiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","_arr","_i3","newRole","_initFocus","memberOfThis","displayJids","att","phone","pin","processNode","tagHandlers","nickname","skipEvents","onMucMemberLeft","reasonSelect","doLeave","isSelfPresence","isKick","membersKeys","onParticipantLeft","subjectText","stamp","dateParts","discoRoomInfo","kickIQ","onError","onNotSupported","formsubmit","handlerIdx","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","mutedNode","videoTypeNode","isSipGatewayEnabled","iqToFocus","onMucLeft","doReject","_browser__WEBPACK_IMPORTED_MODULE_1__","_settings_Settings__WEBPACK_IMPORTED_MODULE_2__","createExpBackoffTimer","step","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","call_control","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","focus","createConferenceIq","openSctp","machineUID","machine-uid","session-id","enforcedBridge","enableTcc","enableRemb","minParticipants","audioPacketDelay","startBitrate","minBitrate","octo","probability","stereo","useRoomAsSharedDocumentName","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","JingleConnectionPlugin","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","ConnectionPlugin","onJingle","fromJid","ack","sess","startMuted","modifyContents","replaceTransport","successTime","sendTransportReject","addRemoteStream","removeRemoteStream","me","onTerminated","iceservers","dict","credential","updateLog","setImmediate","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","retry","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","kill","idle","priorityQueue","_compareTasks","sequence","compare","beg","end","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","doInitialize","ssrcOwners","SignalingLayer","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","SignalingEvents","getMediaPresenceInfo","strophe_js__WEBPACK_IMPORTED_MODULE_1__","_util_GlobalOnErrorHandler__WEBPACK_IMPORTED_MODULE_2__","_util_GlobalOnErrorHandler__WEBPACK_IMPORTED_MODULE_2___default","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","errStatusCapture","PING_TIMESTAMPS_TO_KEEP","PingConnectionPlugin","failedPings","pingExecIntervals","_addPingExecutionTimestamp","pingIntervals","maxInterval","previousTS","currentInterval","RayoConnectionPlugin","onRayo","roomPass","callResource","StropheLogger","logIncoming","logOutgoing","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","disco","versionToCapabilities","jidToVersion","_addChatRoom","_removeChatRoom","CAPS","_handleCaps","_onMucMemberLeft","_removeJidToVersionEntry","_generateVersion","_getDiscoInfo","category","_fixChatRoomPresenceMap","_identities","accumulatedValue","_features","_notifyVersionChanged","oldVersion","dtmfSender","createDTMFSender","insertDTMF","_audioLevel","myUserID","datachannel","createDataChannel","_handleChannel","ws","OPEN","colibriClass","msgPayload","jsonObject","pinnedEndpoint","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","endpoint","isOpen","SIMULCAST_LAYERS","SIM_LAYER_RIDS","audioTransferActive","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","statsinterval","Interop","interop","Simulcast","simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","what","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","statValue","endTime","dumpSDP","_getDesiredMediaDirection","mediaTransferActive","hasAnyTracksOfType","isSimulcastOn","supportsSimulcast","videoTrack","_setVideoType","endpoints","endpointTrackMap","mediaTrack","findTrackById","onaddtrack","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","streamAudioTracks","streamVideoTracks","mediaLines","mls","trackSsrc","ownerEndpointId","getSSRCOwner","peerMediaInfo","getPeerMediaInfo","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","normalizePlanB","firstSsrcs","newSsrcLines","isVersionGreaterThan","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","simulcast_03","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","selectMedia","videoMedia","toRawSDP","enforceSendRecv","transformStreamIdentifiers","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","fidGroups","rtxSsrcMapping","rtxSsrc","_assertTrackBelongs","webRtcStream","addStream","_removeStream","supportsRtpSender","_handleSenderRemoveStream","removeStream","doesBelong","isMediaStreamInPc","findSenderByStream","getSenders","sender","extractPrimarySSRC","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","parsedSdp","toUnifiedPlan","_insertUnifiedPlanSimulcastReceive","mungeRemoteDescription","stripRtx","_injectH264IfNotPresent","dummyPayloadType","payloadsArray","clearVideoSsrcCache","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","peerTracks","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_removePeerConnection","simParams","encodings","scaleResolutionDownBy","setParameters","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","groupsMap","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","groupSSRCs","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","extractSSRCMap","_processLocalSSRCsMap","handleFailure","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","trackMSID","newSSRCNum","oldSSRCNum","currNumSsrcs","videoSender","getParameters","simIndex","handleLayerSuspension","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","hasBeenMuted","_bindMuteHandlers","_onTrackMute","_onTrackUnmute","gumStart","gumEnd","gumDuration","ttfm","_playCallback","localVideos","isInPeerConnection","shouldFakeSdp","requiredSSRCs","ssrcCache","cachedPrimarySsrc","primaryCname","removeSSRC","addSSRCAttribute","addSSRCGroup","modifyRtxSsrcs2","pcId","streamAndTrackIDs","_addMutedLocalVideoTracksToSDP","sessionDesc","audioMLine","_transformMediaIdentifiers","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","getRtxSSRC","dumpSSRCGroups","removeGroupsWithSSRC","correspondingRtxSsrcs","ssrcMapping","sdpTransformer","getSSRCCount","primaryVideoSsrcs","getPrimaryVideoSSRCs","getSSRCAttrValue","correspondingRtxSsrc","previousAssociatedRtxStream","containsAnySSRCGroups","findGroups","removeGroupsBySemantics","injectRecvOnly","newPrimarySsrc","getPrimaryVideoSsrc","replaceSSRC","_eventFired","_trackMuteChanged","_trackAdded","_isLocalAudioTrack","STATS_MESSAGE_TYPE","kSimulcastFormats","layers","videoBitrateCap","getTarget","millisSinceStart","simulcastFormat","targetHeight","pixels","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","_timeLastBwCapRemoved","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","resolutionName","quality","activeTPC","newVideoBitrateCap","bandwidthLimiter","getBandwidthLimit","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_calculateConnectionQuality","_canceled","_iceFailedTimeout","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingInterval","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","_sessions","_chatRoom","_handleFocusPresence","_handleJibriPresence","getSession","getID","_addSession","_emitSessionUpdate","_createSession","_recordingXMLUtils$ge","setLiveStreamViewURL","offerOptions","PCMonitor","getStatsIntervalMs","getStatsInterval","rtts","stopped","startStatsInterval","handleCandidateRtt","rttTotal","candidateKey","responsesReceived","requestsSent","rttTotalDiff","responsesReceivedDiff","requestsResponsesDiff","supportsLocalCandidateRttStatistics","pcMonitors","startPCMonitors","initialDelay","AverageStatReport","sum","calculate","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onUserLeft","_onRemoteStatsUpdated","_processRemoteStats","supportsRTTStatistics","addNext","batchReport","conference_size","local_candidate_type","remote_candidate_type","transport_type","appendReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_onLocalStatsUpdated","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","supportsBandwidthStatistics","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","_Object$keys","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","getTracksByMediaType","peerSsrcCount","peerSsrcPixels","peerFpsSum","_Object$keys2","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","dominantSpeakerId","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","markAsHasLeft","newStats","speakerStatsToUpdate","SphinxService","BEFORE_STATE","audioRecorder","transcriptionService","transcription","lineLength","hasPopulatedArrays","twoDimensionalArray","callBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","getState","_statistics_statistics__WEBPACK_IMPORTED_MODULE_0__","processPresence","FOCUS_COMPONENT","VIDEOBRIDGE_COMPONENT","XMPP_SERVER_COMPONENT","mucResource","componentName","getComponentVersion","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","ProxyConnectionService","jitsiConnection","otherOptions","_objectWithoutProperties","_options","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","processMessage","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","_rtc","default","getAnalyticsAttributesFromOptions","audio_requested","video_requested","screen_sharing_requested","_mergeNamespaceAndModule","constants","recording","recordingConstants","sipVideoGW","errorTypes","logLevels","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","firePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","emitEvent","mStream","currentlyAvailableMediaDevices","oldResolution","newResolution","resName","getLowerResolution","old_resolution","new_resolution","isMultipleAudioInputSupported","isCollectingLocalStats","lineno","colno","util","AuthUtil","JitsiMeetJS","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","webpackPolyfill","deprecate","paths","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptUrlFromStack","remainingStack","ignoreMessage","getScriptFromUrl","hasAttribute","getSoleInlineScript","currentScript","thrownErr","near","far","strophe_js","_items","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","adapterFactory","dependencies","shimChrome","shimFirefox","shimEdge","shimSafari","logging","browserDetails","adapter","chromeShim","edgeShim","firefoxShim","safariShim","commonShim","shimPeerConnection","browserShim","shimGetUserMedia","shimMediaStream","shimSourceObject","shimOnTrack","shimAddTrackRemoveTrack","shimGetSendersWithDtmf","shimRTCIceCandidate","shimReplaceTrack","shimRTCIceServerUrls","shimCallbacksAPI","shimLocalStreamsAPI","shimRemoteStreamsAPI","shimTrackEventTransceiver","shimCreateOfferLegacy","webkitMediaStream","_ontrack","origSetRemoteDescription","_ontrackpoly","te","getReceivers","Event","dispatchEvent","shimSenderWithDtmf","dtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","RTCRtpSender","origGetSenders","HTMLMediaElement","_srcObject","origGetLocalStreams","getLocalStreams","nativeStreams","_reverseStreams","_streams","DOMException","newStream","oldStream","nativeMethod","replaceInternalStreamId","origSetLocalDescription","internalId","externalStream","internalStream","replaceExternalStreamId","origLocalDescription","getOwnPropertyDescriptor","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","iceTransports","origGetStats","selector","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","nativeAddIceCandidate","constraintsToChrome_","cc","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","getUserMediaPromise_","kinds","MediaStreamTrack","getSources","origGetUserMedia","shimRTCPeerConnection","RTCIceGatherer","origMSTEnabled","RTCDtmfSender","setTrack","dtlsRole","_initialTrackId","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","NotSupportedError","InvalidAccessError","OperationError","addTrackToStreamAndFireEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","_localDescription","_remoteDescription","iceGatheringState","usingBundle","bundlePolicy","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","gatherPolicy","_config","transceivers","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","configurable","ontrack","onconnectionstatechange","onicegatheringstatechange","_emitGatheringStateChange","getConfiguration","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","clonedStream","clonedTrack","_createIceGatherer","writable","bufferedCandidateEvents","bufferCandidates","_gather","onlocalcandidate","evt","serializedCandidate","toJSON","complete","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","rejected","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","remoteMsid","isComplete","setTransport","setRemoteCandidates","RTCRtpReceiver","getCapabilities","isNewTrack","nativeTrack","states","new","checking","disconnected","failed","connecting","numAudioTracks","numVideoTracks","remoteCodec","hdrExt","rHdrExt","getLocalCandidates","mediaSectionsInOffer","candidateString","senderOrReceiver","allStats","ortcObjectName","nativeGetstats","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","RTCTrackEvent","mozSrcObject","mozRTCPeerConnection","newServer","mozRTCSessionDescription","mozRTCIceCandidate","modernStatsTypes","nativeGetStats","onSucc","onErr","InternalError","SecurityError","The operation is insecure.","getUserMedia_","constraintsToFF37_","orgEnumerateDevices","nativeGetUserMedia","nativeGetSettings","nativeApplyConstraints","_localStreams","getStreamById","_remoteStreams","_addTrack","_onaddstream","_onaddstreampoly","withCallback","errcb","RTCTransceiver","origCreateOffer","audioTransceiver","getTransceivers","setDirection","addTransceiver","videoTransceiver","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","eventNameToWrap","nativeAddEventListener","nativeEventName","_eventMap","nativeRemoveEventListener","unwrappedCb","wrapPeerConnectionEvent","nativeCreateObjectURL","nativeRevokeObjectURL","newId","dsc","nativeSetAttribute","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","makeLine","formatStr","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","midToString","mlB2UMap","mlU2BMap","candidateToUnifiedPlan","candidateToPlanB","getFirstSendingIndexFromAnswer","rewrite","type2bl","types","directionResult","uLine","rtcpMux","directionMasks","bundleOnly","mids","msidSemantic","semantic","cached","hasBundle","recvonlySsrcs","mid2ul","bIdx","uIdx","bLine","uLineData","iceUfrag","icePwd","ssrc2group","ssrc2ml","related","inactive","recvonly","sendonly","sendrecv","transformUtils","parseSsrcs","writeSsrcs","DEFAULT_NUM_OF_LAYERS","processVideo","validateDescription","clearSsrcCache","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","removeGoogConference","assertGoogConference","TranscriptionService","Word","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","audioBlob","getWord","getBeginTime","getEndTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,GAAAH,GACA,iBAAAC,QACAA,QAAA,YAAAD,IAEAD,EAAA,YAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAT,QAAA,IAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,qBCyLAtC,EAAOD,QA3QY,CAIfwC,yBAA0B,gCAI1BC,qBAAsB,4BACtBC,wBAAyB,+BACzBC,YAAa,mBAKbC,cAAe,2BAIfC,cAAe,2BAMfC,WAAY,wBACZC,oBAAqB,2BAGrBC,8BAA+B,qCAE/BC,wBAAyB,+BAKzBC,uBAAwB,4BAIxBC,kBAAmB,yBAInBC,uBAAwB,8BAIxBC,oBAAqB,2BAIrBC,sBAAuB,6BAIvBC,qBAAsB,4BAKtBC,gBAAiB,uBAKjBC,kBAAmB,yBACnBC,SAAU,gBACVC,mBAAoB,0BACpBC,WAAY,kBACZC,kBAAmB,yBAMnBC,eAAgB,qBAMhBC,oBAAqB,0BAYrBC,aAAc,oBAGdC,mBAAoB,0BAGpBC,OAAQ,cAGRC,mBAAoB,yBAIpBC,iBAAkB,wBAIlBC,yBAA0B,gCAG1BC,4BAA6B,mCAG7BC,cAAe,qBAGfC,WAAY,kBAGZC,kBAAmB,yBAGnBC,gBAAiB,uBAGjBC,SAAU,gBAIVC,iBAAkB,wBAGlBC,iBAAkB,wBAIlBC,wBAAyB,mBAIzBC,wBAAyB,mBAMzBC,+BAAgC,kBAKhCC,4BAA6B,mCAC7BC,kBAAmB,yBACnBC,qBAAsB,4BAKtBC,qBAAsB,gCACtBC,kBAAmB,yBACnBC,gBAAiB,uBACjBC,iBAAkB,wBAGlBC,cAAe,qBAKfC,uBAAwB,4BAIxBC,aAAc,oBACdC,kBAAmB,8BACnBC,mBAAoB,0BACpBC,+BAAgC,sCAChCC,gBAAiB,uBAKjBC,qBAAsB,4BAGtBC,qBAAsB,4BAItBC,6BAA8B,oCAY9BC,uBAAwB,8BAKxBC,uBAAwB,8BAIxBC,uBAAwB,8BAIxBC,gBAAiB,uBAIjBC,iBAAkB,wBAQlBC,6BAA8B,oCAK9BC,eAAgB,4BAQhBC,kCAAmC,qCAUnCC,mCACI,qCAIJC,6BAA8B,oCAM9BC,sBAAuB,+CCxQ3B,IAAAC,EAAAC,EAAAC,EAyBQD,EAAO,QAAWE,KAAAD,EAAA,mBAATF,EAgBhB;;;;;AAWD,IAAAI,EAAAC,EAAAhH,EAsbAJ,EAAAC,EAmzLA,OAxuMA,SAAAoH,GACA,IAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA1G,OAAAkB,UAAAC,eACAwF,EAAA,GAAAC,MACAC,EAAA,QAEA,SAAAC,EAAAC,EAAAC,GACA,OAAAN,EAAAjH,KAAAsH,EAAAC,GAWA,SAAAC,EAAApH,EAAAqH,GACA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAApI,EAAAqI,EAAAC,EACAC,EAAAX,KAAAY,MAAA,KACAC,EAAAvB,EAAAuB,IACAC,EAAAD,KAAA,SAGA,GAAAlI,EAAA,CAwBA,IAtBA0H,GADA1H,IAAAiI,MAAA,MACAG,OAAA,EAMAzB,EAAA0B,cAAArB,EAAAsB,KAAAtI,EAAA0H,MACA1H,EAAA0H,GAAA1H,EAAA0H,GAAAa,QAAAvB,EAAA,KAIA,MAAAhH,EAAA,GAAAwI,OAAA,IAAAR,IAOAhI,EADAgI,EAAAjB,MAAA,EAAAiB,EAAAI,OAAA,GACAK,OAAAzI,IAIAP,EAAA,EAAuBA,EAAAO,EAAAoI,OAAiB3I,IAExC,UADAsI,EAAA/H,EAAAP,IAEAO,EAAA0I,OAAAjJ,EAAA,GACAA,GAAA,OACiB,UAAAsI,EAAA,CAMjB,OAAAtI,GAAA,IAAAA,GAAA,OAAAO,EAAA,WAAAA,EAAAP,EAAA,GACA,SACqBA,EAAA,IACrBO,EAAA0I,OAAAjJ,EAAA,KACAA,GAAA,GAMAO,IAAA2I,KAAA,KAIA,IAAAX,GAAAG,IAAAD,EAAA,CAGA,IAAAzI,GAFA6H,EAAAtH,EAAAiI,MAAA,MAEAG,OAAsC3I,EAAA,EAAOA,GAAA,GAG7C,GAFA8H,EAAAD,EAAAP,MAAA,EAAAtH,GAAAkJ,KAAA,KAEAX,EAGA,IAAAF,EAAAE,EAAAI,OAA8CN,EAAA,EAAOA,GAAA,EAKrD,IAJAN,EAAAU,EAAAF,EAAAjB,MAAA,EAAAe,GAAAa,KAAA,SAKAnB,IAAAD,IACA,CAEAE,EAAAD,EACAG,EAAAlI,EACA,MAMA,GAAAgI,EACA,OAMAG,GAAAO,KAAAZ,KACAK,EAAAO,EAAAZ,GACAM,EAAApI,IAIAgI,GAAAG,IACAH,EAAAG,EACAD,EAAAE,GAGAJ,IACAH,EAAAoB,OAAA,EAAAf,EAAAF,GACAzH,EAAAsH,EAAAqB,KAAA,MAIA,OAAA3I,EAGA,SAAA4I,EAAAC,EAAAC,GACA,kBAIA,IAAAC,EAAAjC,EAAAlH,KAAAoJ,UAAA,GAQA,MAHA,iBAAAD,EAAA,QAAAA,EAAAX,QACAW,EAAAE,KAAA,MAEA3C,EAAA4C,MAAA9C,EAAA2C,EAAAN,OAAA,CAAAI,EAAAC,MAUA,SAAAK,EAAAC,GACA,gBAAA1I,GACA+F,EAAA2C,GAAA1I,GAIA,SAAA2I,EAAArJ,GACA,GAAAiH,EAAAP,EAAA1G,GAAA,CACA,IAAA+I,EAAArC,EAAA1G,UACA0G,EAAA1G,GACA4G,EAAA5G,IAAA,EACAqG,EAAA6C,MAAA9C,EAAA2C,GAGA,IAAA9B,EAAAR,EAAAzG,KAAAiH,EAAAL,EAAA5G,GACA,UAAAsJ,MAAA,MAAAtJ,GAEA,OAAAyG,EAAAzG,GAMA,SAAAuJ,EAAAvJ,GACA,IAAAwJ,EACAC,EAAAzJ,IAAA0J,QAAA,QAKA,OAJAD,GAAA,IACAD,EAAAxJ,EAAA2J,UAAA,EAAAF,GACAzJ,IAAA2J,UAAAF,EAAA,EAAAzJ,EAAAoI,SAEA,CAAAoB,EAAAxJ,GAKA,SAAA4J,EAAAf,GACA,OAAAA,EAAAU,EAAAV,GAAA,GA+CA,SAAAgB,EAAA7J,GACA,kBACA,OAAA2G,sBAAA3G,IAAA,IAzCAuG,EAAA,SAAAvG,EAAA8J,GACA,IAAAC,EAnDAlB,EAoDAmB,EAAAT,EAAAvJ,GACAwJ,EAAAQ,EAAA,GACAC,EAAAH,EAAA,GA2BA,OAzBA9J,EAAAgK,EAAA,GAEAR,IAEAO,EAAAV,EADAG,EAAApC,EAAAoC,EAAAS,KAKAT,EAEAxJ,EADA+J,KAAA3C,UACA2C,EAAA3C,UAAApH,GAlEA6I,EAkEAoB,EAjEA,SAAAjK,GACA,OAAAoH,EAAApH,EAAA6I,MAkEAzB,EAAApH,EAAAiK,IAKAT,GADAQ,EAAAT,EADAvJ,EAAAoH,EAAApH,EAAAiK,KAEA,GACAjK,EAAAgK,EAAA,GACAR,IACAO,EAAAV,EAAAG,KAKA,CACAU,EAAAV,IAAA,IAAAxJ,IACAkB,EAAAlB,EACAmK,GAAAX,EACAjI,EAAAwI,IAUAvD,EAAA,CACAL,QAAA,SAAAnG,GACA,OAAA4I,EAAA5I,IAEAf,QAAA,SAAAe,GACA,IAAAoK,EAAA3D,EAAAzG,GACA,gBAAAoK,EACAA,EAEA3D,EAAAzG,GAAA,IAGAd,OAAA,SAAAc,GACA,OACAqK,GAAArK,EACAsK,IAAA,GACArL,QAAAwH,EAAAzG,GACA2G,OAAAkD,EAAA7J,MAKAqG,EAAA,SAAArG,EAAAuK,EAAAC,EAAA3B,GACA,IAAA4B,EAAArB,EAAAsB,EAAAxC,EAAAzI,EAAAqK,EAGAa,EAFA5B,EAAA,GACA6B,SAAAJ,EAQA,GAHAV,EAAAF,EADAf,KAAA7I,GAIA,cAAA4K,GAAA,aAAAA,EAAA,CAKA,IADAL,KAAAnC,QAAAoC,EAAApC,OAAA,+BAAAmC,EACA9K,EAAA,EAAuBA,EAAA8K,EAAAnC,OAAiB3I,GAAA,EAKxC,gBAHA2J,GADAlB,EAAA3B,EAAAgE,EAAA9K,GAAAqK,IACAI,GAIAnB,EAAAtJ,GAAA+G,EAAAL,QAAAnG,QACiB,eAAAoJ,EAEjBL,EAAAtJ,GAAA+G,EAAAvH,QAAAe,GACA2K,GAAA,OACiB,cAAAvB,EAEjBqB,EAAA1B,EAAAtJ,GAAA+G,EAAAtH,OAAAc,QACiB,GAAAiH,EAAAR,EAAA2C,IACjBnC,EAAAP,EAAA0C,IACAnC,EAAAL,EAAAwC,GACAL,EAAAtJ,GAAA4J,EAAAD,OACiB,KAAAlB,EAAA3G,EAIjB,UAAA+H,MAAAtJ,EAAA,YAAAoJ,GAHAlB,EAAA3G,EAAAsJ,KAAA3C,EAAAhH,EAAA0H,EAAAC,GAAA,GAAAM,EAAAC,GAAA,IACAL,EAAAtJ,GAAAgH,EAAA2C,GAMAsB,EAAAF,IAAAtB,MAAAzC,EAAAzG,GAAA+I,QAAA9C,EAEAjG,IAIAyK,KAAAxL,UAAAmH,GACAqE,EAAAxL,UAAAwH,EAAAzG,GACAyG,EAAAzG,GAAAyK,EAAAxL,QACiByL,IAAAtE,GAAAuE,IAEjBlE,EAAAzG,GAAA0K,SAGS1K,IAGTyG,EAAAzG,GAAAwK,IAIAtE,EAAAC,EAAAG,EAAA,SAAAiE,EAAAC,EAAA3B,EAAAC,EAAAgC,GACA,oBAAAP,EACA,OAAA/D,EAAA+D,GAEA/D,EAAA+D,GAAAC,GAMAnB,EAAA9C,EAAAgE,EAAAX,EAAAY,IAAAN,GACS,IAAAK,EAAA7B,OAAA,CAMT,IAJA/B,EAAA4D,GACAA,MACAjE,EAAAK,EAAA4D,KAAA5D,EAAA6D,WAEAA,EACA,OAGAA,EAAA9B,QAGA6B,EAAAC,EACAA,EAAA3B,EACAA,EAAA,MAEA0B,EAAAnE,EA6BA,OAxBAoE,KAAA,aAIA,mBAAA3B,IACAA,EAAAC,EACAA,EAAAgC,GAIAhC,EACAzC,EAAAD,EAAAmE,EAAAC,EAAA3B,GAQAkC,WAAA,WACA1E,EAAAD,EAAAmE,EAAAC,EAAA3B,IACa,GAGbvC,GAOAA,EAAAK,OAAA,SAAAqE,GACA,OAAA1E,EAAA0E,IAMA9E,EAAA+E,SAAAxE,GAEAtH,EAAA,SAAAa,EAAAuK,EAAAC,GACA,oBAAAxK,EACA,UAAAsJ,MAAA,6DAIAiB,EAAA7B,SAIA8B,EAAAD,EACAA,EAAA,IAGAtD,EAAAR,EAAAzG,IAAAiH,EAAAP,EAAA1G,KACA0G,EAAA1G,GAAA,CAAAA,EAAAuK,EAAAC,MAIApL,IAAA,CACA8L,QAAA,GAtaA,GA0aA/L,EAAA,8CAWAJ,EASCoM,KATDnM,EASC,SAAAD,GAsBDqM,SAAA/J,UAAAJ,OACAmK,SAAA/J,UAAAJ,KAAA,SAAAiG,GACA,IAAAmE,EAAAF,KACAG,EAAAC,MAAAlK,UAAA0F,MACAyE,EAAAD,MAAAlK,UAAAoH,OACAgD,EAAAH,EAAA1L,KAAAoJ,UAAA,GACA,kBACA,OAAAqC,EAAAnC,MAAAhC,GAAAiE,KAAAK,EAAA5L,KAAA6L,EAAAH,EAAA1L,KAAAoJ,UAAA,QAQAuC,MAAAG,UACAH,MAAAG,QAAA,SAAAC,GACA,yBAAAxL,OAAAkB,UAAAuK,SAAAhM,KAAA+L,KAkBAJ,MAAAlK,UAAAqI,UACA6B,MAAAlK,UAAAqI,QAAA,SAAAmC,GACA,IAAAC,EAAAX,KAAA/C,OACA2D,EAAAC,OAAAhD,UAAA,OAMA,KALA+C,IAAA,EAAAE,KAAAC,KAAAH,GAAAE,KAAAE,MAAAJ,IACA,IACAA,GAAAD,GAGcC,EAAAD,EAAYC,IAC1B,GAAAA,KAAAZ,WAAAY,KAAAF,EACA,OAAAE,EAGA,WAUAR,MAAAlK,UAAA+K,UACAb,MAAAlK,UAAA+K,QAAA,SAAA5B,EAAA6B,GACA,IAAAC,EAAAC,EACA,UAAApB,KACA,UAAAqB,UAAA,gCAIA,IAAAC,EAAAtM,OAAAgL,MAIAW,EAAAW,EAAArE,SAAA,EAGA,sBAAAoC,EACA,UAAAgC,UAAAhC,EAAA,sBAUA,IANAxB,UAAAZ,OAAA,IACAkE,EAAAD,GAGAE,EAAA,EAEAA,EAAAT,GAAA,CACA,IAAAY,EAOAH,KAAAE,IAGAC,EAAAD,EAAAF,GAGA/B,EAAA5K,KAAA0M,EAAAI,EAAAH,EAAAE,IAGAF,OASA,IAAAI,EAAA,oEACA5N,EAAA6N,OACA7N,EAAA6N,KAAA,SAAAC,GAKA,IACAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAFAC,EAAA,GAGA5N,EAAA,EACA,GAKAwN,GAJAH,EAAAD,EAAAS,WAAA7N,OAIA,EACAyN,GAAA,EAAAJ,IAAA,GAJAC,EAAAF,EAAAS,WAAA7N,OAIA,EACA0N,GAAA,GAAAJ,IAAA,GAJAC,EAAAH,EAAAS,WAAA7N,OAIA,EACA2N,EAAA,GAAAJ,EAEAO,MAAAR,IACAG,GAAA,EAAAJ,IAAA,EACAK,EAAAC,EAAA,IACaG,MAAAP,KACbI,EAAA,IAEAC,IAAAV,EAAAnE,OAAAyE,GAAAN,EAAAnE,OAAA0E,GACAP,EAAAnE,OAAA2E,GAAAR,EAAAnE,OAAA4E,SACS3N,EAAAoN,EAAAzE,QACT,OAAAiF,IAIAtO,EAAAyO,OACAzO,EAAAyO,KAAA,SAAAX,GAKA,IACAC,EAAAC,EAAAC,EACAE,EAAAC,EAAAC,EAFAC,EAAA,GAGA5N,EAAA,EAEAoN,IAAAtE,QAAA,0BACA,GAMAuE,EALAH,EAAAjD,QAAAmD,EAAArE,OAAA/I,OAKA,GAJAyN,EAAAP,EAAAjD,QAAAmD,EAAArE,OAAA/I,QAIA,EACAsN,GAAA,GAAAG,IAAA,GAJAC,EAAAR,EAAAjD,QAAAmD,EAAArE,OAAA/I,QAIA,EACAuN,GAAA,EAAAG,IAAA,GAJAC,EAAAT,EAAAjD,QAAAmD,EAAArE,OAAA/I,OAMA4N,GAAAI,OAAAC,aAAAZ,GAEA,KAAAK,IACAE,GAAAI,OAAAC,aAAAX,IAEA,KAAAK,IACAC,GAAAI,OAAAC,aAAAV,UAESvN,EAAAoN,EAAAzE,QACT,OAAAiF,KA9MA,mBAAAlO,KAAAC,IACAD,EAAA,iCACA,OAAAH,EAAAD,KAIAC,EAAAD,GA2NA,SAAAA,EAAAC,GACA,mBAAAG,KAAAC,IACAD,EAAA,6BACA,OAAAH,MAGAE,EAAAD,QAAAD,IANA,CAWCmM,EAAA,WAKD,SAAAwC,EAAAC,EAAA9B,GAGA8B,EAAA9B,GAAA,YAAAA,EAAA,GACA8B,EAAA,IAAA9B,EAAA,WAAAA,EAEA,IAOArM,EAAAqI,EAAAnH,EAAAkN,EAAAC,EAAAC,EAAAC,EAAAC,EAPAC,EAAA,IAAA3C,MAAA,IACA4C,EAAA,WACAC,GAAA,UACAtO,GAAA,WACAC,EAAA,UACAqK,GAAA,WAGA,IAAA3K,EAAA,EAAaA,EAAAmO,EAAAxF,OAAc3I,GAAA,GAC3B,CAOA,IANAoO,EAAAM,EACAL,EAAAM,EACAL,EAAAjO,EACAkO,EAAAjO,EACAkO,EAAA7D,EAEAtC,EAAA,EAAeA,EAAA,GAAQA,IAEJoG,EAAApG,GAAnBA,EAAA,GAAmB8F,EAAAnO,EAAAqI,GACPuG,EAAAH,EAAApG,EAAA,GAAAoG,EAAApG,EAAA,GAAAoG,EAAApG,EAAA,IAAAoG,EAAApG,EAAA,OACZnH,EAAA2N,IAAAD,EAAAF,EAAA,GAAAI,EAAAzG,EAAAsG,EAAAtO,EAAAC,IACAuO,IAAAlE,EAAA8D,EAAApG,IAAA0G,EAAA1G,KACAsC,EAAArK,EACAA,EAAAD,EACAA,EAAAuO,EAAAD,EAAA,IACAA,EAAAD,EACAA,EAAAxN,EAGAwN,EAAAG,EAAAH,EAAAN,GACAO,EAAAE,EAAAF,EAAAN,GACAhO,EAAAwO,EAAAxO,EAAAiO,GACAhO,EAAAuO,EAAAvO,EAAAiO,GACA5D,EAAAkE,EAAAlE,EAAA6D,GAEA,OAAAE,EAAAC,EAAAtO,EAAAC,EAAAqK,GAOA,SAAAmE,EAAA5N,EAAAyN,EAAAtO,EAAAC,GAEA,OAAAY,EAAA,GAAeyN,EAAAtO,GAAAsO,EAAArO,EACfY,EAAA,GAAeyN,EAAAtO,EAAAC,EACfY,EAAA,GAAeyN,EAAAtO,EAAAsO,EAAArO,EAAAD,EAAAC,EACfqO,EAAAtO,EAAAC,EAMA,SAAAyO,EAAA7N,GAEA,OAAAA,EAAA,cAAAA,EAAA,cACAA,EAAA,0BAMA,SAAA8N,EAAAzN,EAAA0N,GAEA,IAAAC,EAAAC,EAAA5N,GACA2N,EAAAvG,OAAA,KAAyBuG,EAAAhB,EAAAgB,EAAA,EAAA3N,EAAAoH,SAGzB,IADA,IAAAyG,EAAA,IAAAtD,MAAA,IAAAuD,EAAA,IAAAvD,MAAA,IACA9L,EAAA,EAAiBA,EAAA,GAAQA,IAEzBoP,EAAApP,GAAA,UAAAkP,EAAAlP,GACAqP,EAAArP,GAAA,WAAAkP,EAAAlP,GAGA,IAAAsP,EAAApB,EAAAkB,EAAApG,OAAAmG,EAAAF,IAAA,MAAAA,EAAAtG,QACA,OAAAuF,EAAAmB,EAAArG,OAAAsG,GAAA,KAOA,SAAAT,EAAAV,EAAAoB,GAEA,IAAAC,GAAA,MAAArB,IAAA,MAAAoB,GAEA,OADApB,GAAA,KAAAoB,GAAA,KAAAC,GAAA,KACA,SAAAA,EAMA,SAAAZ,EAAAa,EAAAC,GAEA,OAAAD,GAAAC,EAAAD,IAAA,GAAAC,EAOA,SAAAP,EAAAQ,GAIA,IAFA,IAAAC,EAAA,GAEA5P,EAAA,EAAiBA,EAAA,EAAA2P,EAAAhH,OAAoB3I,GAAA,EAErC4P,EAAA5P,GAAA,KAHA,IAGA2P,EAAA9B,WAAA7N,EAAA,QAAAA,EAAA,GAEA,OAAA4P,EAMA,SAAAC,EAAAD,GAIA,IAFA,IAAAD,EAAA,GAEA3P,EAAA,EAAiBA,EAAA,GAAA4P,EAAAjH,OAAqB3I,GAAA,EAEtC2P,GAAA3B,OAAAC,aAAA2B,EAAA5P,GAAA,QAAAA,EAAA,GAHA,KAKA,OAAA2P,EAMA,SAAAG,EAAAC,GAKA,IAHA,IAEAC,EAAA3H,EADAsH,EAAA,GAEA3P,EAAA,EAAiBA,EAAA,EAAA+P,EAAApH,OAAyB3I,GAAA,EAK1C,IAHAgQ,GAAAD,EAAA/P,GAAA,SAAAA,EAAA,aACA+P,EAAA/P,EAAA,aAAAA,EAAA,cACA+P,EAAA/P,EAAA,aAAAA,EAAA,UACAqI,EAAA,EAAeA,EAAA,EAAOA,IAEtB,EAAArI,EAAA,EAAAqI,EAAA,GAAA0H,EAAApH,OAAiDgH,GAAA,IACrCA,GAXZ,mEAWY5G,OAAAiH,GAAA,KAAA3H,GAAA,IAGZ,OAAAsH,EAOA,OACAM,cAAA,SAAA1O,EAAA0N,GAAyC,OAAAa,EAAAd,EAAAzN,EAAA0N,KACzCiB,SAAA,SAAAnO,GAAkC,OAAA+N,EAAA5B,EAAAiB,EAAApN,GAAA,EAAAA,EAAA4G,UAClCkH,WACAb,iBACAmB,cAAA,SAAA5O,EAAA0N,GAAyC,OAAAY,EAAAb,EAAAzN,EAAA0N,KACzCmB,SAAA,SAAArO,GAAkC,OAAA8N,EAAA3B,EAAAiB,EAAApN,GAAA,EAAAA,EAAA4G,aAgBlC,SAAArJ,EAAAC,GACA,mBAAAG,KAAAC,IACAD,EAAA,4BACA,OAAAH,MAGAE,EAAAD,QAAAD,IANA,CAWCmM,EAAA,WAKD,IAAAmD,EAAA,SAAAV,EAAAoB,GACA,IAAAC,GAAA,MAAArB,IAAA,MAAAoB,GAEA,OADApB,GAAA,KAAAoB,GAAA,KAAAC,GAAA,KACA,SAAAA,GAaAa,EAAA,SAAAV,GAEA,IADA,IAAAC,EAAA,GACA5P,EAAA,EAAsBA,EAAA,EAAA2P,EAAAhH,OAAoB3I,GAAA,EAE1C4P,EAAA5P,GAAA,SAAA2P,EAAA9B,WAAA7N,EAAA,KAAAA,EAAA,GAEA,OAAA4P,GAgCAU,EAAA,SAAAC,EAAA7B,EAAAC,EAAAR,EAAApM,EAAAb,GACA,OAAA2N,GA9CAY,EA8CAZ,IAAAH,EAAA6B,GAAA1B,EAAAV,EAAAjN,OA9CAwO,EA8CA3N,GA7CA0N,IAAA,GAAAC,EA6CAf,GA9CA,IAAAc,EAAAC,GAiDAc,EAAA,SAAA9B,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAApM,EAAAb,GACA,OAAAoP,EAAA3B,EAAAtO,GAAAsO,EAAArO,EAAAoO,EAAAC,EAAAR,EAAApM,EAAAb,IAGAuP,EAAA,SAAA/B,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAApM,EAAAb,GACA,OAAAoP,EAAA3B,EAAArO,EAAAD,GAAAC,EAAAoO,EAAAC,EAAAR,EAAApM,EAAAb,IAGAwP,EAAA,SAAAhC,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAApM,EAAAb,GACA,OAAAoP,EAAA3B,EAAAtO,EAAAC,EAAAoO,EAAAC,EAAAR,EAAApM,EAAAb,IAGAyP,EAAA,SAAAjC,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAApM,EAAAb,GACA,OAAAoP,EAAAjQ,GAAAsO,GAAArO,GAAAoO,EAAAC,EAAAR,EAAApM,EAAAb,IAMA0P,EAAA,SAAAzC,EAAA9B,GAEA8B,EAAA9B,GAAA,cACA8B,EAAA,IAAA9B,EAAA,YAAAA,EAQA,IANA,IAKA+B,EAAAC,EAAAC,EAAAC,EALAG,EAAA,WACAC,GAAA,UACAtO,GAAA,WACAC,EAAA,UAGAN,EAAA,EAAuBA,EAAAmO,EAAAxF,OAAc3I,GAAA,GAErCoO,EAAAM,EACAL,EAAAM,EACAL,EAAAjO,EACAkO,EAAAjO,EAEAoO,EAAA8B,EAAA9B,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,iBACAM,EAAAkQ,EAAAlQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,kBACAK,EAAAmQ,EAAAnQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,iBACA2O,EAAA6B,EAAA7B,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,mBACA0O,EAAA8B,EAAA9B,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,iBACAM,EAAAkQ,EAAAlQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,kBACAK,EAAAmQ,EAAAnQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,mBACA2O,EAAA6B,EAAA7B,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,iBACA0O,EAAA8B,EAAA9B,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,iBACAM,EAAAkQ,EAAAlQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,mBACAK,EAAAmQ,EAAAnQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,eACA2O,EAAA6B,EAAA7B,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,oBACA0O,EAAA8B,EAAA9B,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,kBACAM,EAAAkQ,EAAAlQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,kBACAK,EAAAmQ,EAAAnQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,oBACA2O,EAAA6B,EAAA7B,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,mBAEA0O,EAAA+B,EAAA/B,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,iBACAM,EAAAmQ,EAAAnQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,kBACAK,EAAAoQ,EAAApQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,kBACA2O,EAAA8B,EAAA9B,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,kBACA0O,EAAA+B,EAAA/B,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,iBACAM,EAAAmQ,EAAAnQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,gBACAK,EAAAoQ,EAAApQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,mBACA2O,EAAA8B,EAAA9B,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,kBACA0O,EAAA+B,EAAA/B,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,gBACAM,EAAAmQ,EAAAnQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,mBACAK,EAAAoQ,EAAApQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,kBACA2O,EAAA8B,EAAA9B,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,kBACA0O,EAAA+B,EAAA/B,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,mBACAM,EAAAmQ,EAAAnQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,gBACAK,EAAAoQ,EAAApQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,kBACA2O,EAAA8B,EAAA9B,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,oBAEA0O,EAAAgC,EAAAhC,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,cACAM,EAAAoQ,EAAApQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,mBACAK,EAAAqQ,EAAArQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,mBACA2O,EAAA+B,EAAA/B,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,kBACA0O,EAAAgC,EAAAhC,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,kBACAM,EAAAoQ,EAAApQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,kBACAK,EAAAqQ,EAAArQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,kBACA2O,EAAA+B,EAAA/B,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,oBACA0O,EAAAgC,EAAAhC,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,iBACAM,EAAAoQ,EAAApQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,kBACAK,EAAAqQ,EAAArQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,kBACA2O,EAAA+B,EAAA/B,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,gBACA0O,EAAAgC,EAAAhC,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,iBACAM,EAAAoQ,EAAApQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,mBACAK,EAAAqQ,EAAArQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,kBACA2O,EAAA+B,EAAA/B,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,kBAEA0O,EAAAiC,EAAAjC,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,iBACAM,EAAAqQ,EAAArQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,kBACAK,EAAAsQ,EAAAtQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,oBACA2O,EAAAgC,EAAAhC,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,iBACA0O,EAAAiC,EAAAjC,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,kBACAM,EAAAqQ,EAAArQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,mBACAK,EAAAsQ,EAAAtQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,iBACA2O,EAAAgC,EAAAhC,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,mBACA0O,EAAAiC,EAAAjC,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,iBACAM,EAAAqQ,EAAArQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,kBACAK,EAAAsQ,EAAAtQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,mBACA2O,EAAAgC,EAAAhC,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,mBACA0O,EAAAiC,EAAAjC,EAAAC,EAAAtO,EAAAC,EAAA6N,EAAAnO,EAAA,iBACAM,EAAAqQ,EAAArQ,EAAAoO,EAAAC,EAAAtO,EAAA8N,EAAAnO,EAAA,oBACAK,EAAAsQ,EAAAtQ,EAAAC,EAAAoO,EAAAC,EAAAR,EAAAnO,EAAA,iBACA2O,EAAAgC,EAAAhC,EAAAtO,EAAAC,EAAAoO,EAAAP,EAAAnO,EAAA,kBAEA0O,EAAAG,EAAAH,EAAAN,GACAO,EAAAE,EAAAF,EAAAN,GACAhO,EAAAwO,EAAAxO,EAAAiO,GACAhO,EAAAuO,EAAAvO,EAAAiO,GAEA,OAAAG,EAAAC,EAAAtO,EAAAC,IAiBA,MAdA,CAMAuQ,UAAA,SAAA9O,GACA,OA1IA,SAAAgO,GAGA,IAFA,IACAJ,EAAA,GACA3P,EAAA,EAAsBA,EAAA,EAAA+P,EAAApH,OAAyB3I,IAE/C2P,GAJA,mBAIA5G,OAAAgH,EAAA/P,GAAA,IAAAA,EAAA,UAJA,mBAKA+I,OAAAgH,EAAA/P,GAAA,IAAAA,EAAA,QAEA,OAAA2P,EAkIAmB,CAAAF,EAAAP,EAAAtO,GAAA,EAAAA,EAAA4G,UAGA2G,KAAA,SAAAvN,GACA,OA1JA,SAAA6N,GAEA,IADA,IAAAD,EAAA,GACA3P,EAAA,EAAsBA,EAAA,GAAA4P,EAAAjH,OAAqB3I,GAAA,EAE3C2P,GAAA3B,OAAAC,aAAA2B,EAAA5P,GAAA,KAAAA,EAAA,QAEA,OAAA2P,EAoJAoB,CAAAH,EAAAP,EAAAtO,GAAA,EAAAA,EAAA4G,aAMA,SAAArJ,EAAAC,GACA,mBAAAG,KAAAC,IACAD,EAAA,8BACA,OAAAH,MAGAE,EAAAD,QAAAD,IANA,CAWCmM,EAAA,WA8DD,MA5DA,CAEAsF,SAAA,SAAArB,GACA,IAAA3P,EAAAK,EACA4Q,EAAA,GACA5E,EAAAsD,EAAAhH,OACA,IAAA3I,EAAA,EAAuBA,EAAAqM,EAASrM,KAChCK,EAAAsP,EAAA9B,WAAA7N,KACA,GAAAK,GAAA,IACA4Q,GAAAtB,EAAA5G,OAAA/I,GACiBK,EAAA,MACjB4Q,GAAAjD,OAAAC,aAAA,IAAA5N,GAAA,OACA4Q,GAAAjD,OAAAC,aAAA,IAAA5N,GAAA,MACA4Q,GAAAjD,OAAAC,aAAA,IAAA5N,GAAA,QAEA4Q,GAAAjD,OAAAC,aAAA,IAAA5N,GAAA,MACA4Q,GAAAjD,OAAAC,aAAA,IAAA5N,GAAA,OAGA,OAAA4Q,GAGAC,WAAA,SAAAC,GAoBA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACA,IAAAN,KAAAD,GAAA,GACAK,EAAA,GACAC,EAAA,GACAC,EAAA,GAEAJ,EAAA,iBADAD,EAAAF,EAAAC,IAEAG,EAAAI,OAAAC,SAAAN,EAAAD,EAAApQ,MAAAoQ,IACAC,IACAE,EAAAH,EAAAG,QAAA,YAAoDH,EAAAG,QAAA,GACpDC,EAAAJ,EAAAI,OAAA,WAAkDJ,EAAAI,OAAA,GAClDC,EAAAL,EAAAK,KAAA,SAA8CL,EAAAK,KAAA,IAE9CG,SAAAC,OACAV,EAAA,IAAAG,EAAAC,EAAAC,EAAAC,MAiBA,SAAApS,EAAAC,GACA,mBAAAG,KAAAC,IACAD,EAAA,gBACA,eACA,cACA,iBACA,WACA,OAAAH,EAAAkK,MAAAiC,KAAAnC,aAGA9J,EAAAD,QAAAD,EACAmH,EAAA,UACAA,EAAA,SACAA,EAAA,YAbA,CA8BCgF,EAAA,SAAAqG,EAAAC,EAAAC,GAED,IAAAC,EAaA,SAAAC,EAAA5R,EAAA6R,GAA8B,WAAAF,EAAAG,QAAA9R,EAAA6R,GAsB9B,SAAAE,EAAAF,GAAqB,WAAAF,EAAAG,QAAA,KAAAD,GAWrB,SAAAG,EAAAH,GAAuB,WAAAF,EAAAG,QAAA,WAAAD,GAqgHvB,OA5/GAF,EAAA,CAEAM,QAAA,SAqBAC,GAAA,CACAC,SAAA,sCACAC,KAAA,iBACAC,OAAA,gBACAC,KAAA,iBACAC,OAAA,mBACAC,QAAA,oBACAC,WAAA,wCACAC,YAAA,yCACAC,IAAA,iCACAC,KAAA,mCACAC,OAAA,mCACAC,QAAA,sCACAC,KAAA,mCACAC,QAAA,sCACAf,QAAA,oBACAgB,QAAA,sCACAC,SAAA,sCACAC,MAAA,gCASAA,MAAA,CACAC,KAAA,oFACAC,WAAA,CACAlF,EAAA,SACAmF,WAAA,UACAC,GAAA,GACAC,KAAA,UACAC,GAAA,GACAC,IAAA,uCACAC,GAAA,UACAC,GAAA,UACArS,EAAA,UACAsS,KAAA,UACAC,OAAA,GACAC,GAAA,UACAC,KAAA,IAEAC,IAAA,8IAQAC,SAAA,SAAAC,GACA,QAAA1U,EAAA,EAA2BA,EAAAkS,EAAAwB,MAAAC,KAAAhL,OAA+B3I,IAC1D,GAAA0U,IAAAxC,EAAAwB,MAAAC,KAAA3T,GACA,SAGA,UASA2U,eAAA,SAAAD,EAAAE,GACA,YAAA1C,EAAAwB,MAAAE,WAAAc,IAAAxC,EAAAwB,MAAAE,WAAAc,GAAA/L,OAAA,EACA,QAAA3I,EAAA,EAA+BA,EAAAkS,EAAAwB,MAAAE,WAAAc,GAAA/L,OAA0C3I,IACzE,GAAA4U,IAAA1C,EAAAwB,MAAAE,WAAAc,GAAA1U,GACA,SAIA,UAEA6U,SAAA,SAAAC,GACA,QAAA9U,EAAA,EAA2BA,EAAAkS,EAAAwB,MAAAc,IAAA7L,OAA8B3I,IACzD,GAAA8U,IAAA5C,EAAAwB,MAAAc,IAAAxU,GACA,SAGA,WAoBA+U,OAAA,CACAC,MAAA,EACAC,WAAA,EACAC,SAAA,EACAC,eAAA,EACAC,SAAA,EACAC,UAAA,EACAC,aAAA,EACAC,cAAA,EACAC,SAAA,EACAC,SAAA,EACAC,YAAA,IAGAC,eAAA,CACAC,WAAA,aACAC,SAAA,WACAC,iBAAA,6BACAC,aAAA,eACAC,eAAA,WAYAC,SAAA,CACAC,MAAA,EACAC,KAAA,EACAC,KAAA,EACApB,MAAA,EACAqB,MAAA,GAUAC,YAAA,CACAC,OAAA,EACAC,KAAA,EACAC,MAAA,EACAC,SAAA,IAiBAC,QAAA,IACAC,kBAAA,GAcAC,aAAA,SAAAtW,EAAAU,GACAiR,EAAAO,GAAAlS,GAAAU,GAiBA6V,aAAA,SAAAC,EAAAC,EAAApL,GACA,IAAA5L,EAAAiX,EACA,IAAAjX,EAAA,EAAmBA,EAAA+W,EAAAG,WAAAvO,OAA4B3I,KAC/CiX,EAAAF,EAAAG,WAAAlX,IACAmX,WAAAjF,EAAAoE,YAAAC,QACAS,IAAAtL,KAAA0L,WAAAH,EAAAD,IACApL,EAAAqL,IAkBAG,WAAA,SAAAC,EAAA9W,GACA,OAAA8W,EAAAC,UAAA/W,GAOAgX,cAAA,KAMAC,eAAA,WACA,IAAAC,EAYA,YARAjR,IAAAqL,SAAA6F,eAAAC,gBACA9F,SAAA6F,eAAAC,gBAAA9F,SAAA+F,cAAA/F,SAAA+F,aAAA,IACAH,EAAA/L,KAAAmM,gBACAC,YAAAL,EAAAM,cAAA,YAEAN,EAAA5F,SAAA6F,eACAC,eAAA,gCAEAF,GASAO,aAAA,WAIA,OAHA9F,EAAAqF,gBACArF,EAAAqF,cAAArF,EAAAsF,kBAEAtF,EAAAqF,eAWAM,aAAA,WAYA,IAXA,IAAAJ,EAAA,KACAQ,EAAA,CACA,yBACA,yBACA,yBACA,yBACA,qBACA,oBACA,oBAGA3X,EAAA,EAAuBA,EAAA2X,EAAAtP,QACvB,OAAA8O,EAD8CnX,IAE9C,IACAmX,EAAA,IAAAS,cAAAD,EAAA3X,IACiB,MAAAqK,GACjB8M,EAAA,KAMA,OAAAA,GAqBAU,WAAA,SAAA5X,GACA,IAAAA,EAAoB,YAEpB,IAGAmO,EAAA1O,EAAA8M,EAHAsL,EAAAlG,EAAA8F,eAAAD,cAAAxX,GAIA,IAAAmO,EAAA,EAAmBA,EAAAnF,UAAAZ,OAAsB+F,IAAA,CACzC,IAAAxC,EAAA3C,UAAAmF,GACA,GAAAxC,EACA,uBACA,mBACAkM,EAAAN,YAAA5F,EAAAmG,YAAAnM,SACa,uBACb,mBAAAA,EAAA,KACA,IAAAlM,EAAA,EAA2BA,EAAAkM,EAAAvD,OAAgB3I,IAAA,CAC3C,IAAAsY,EAAApM,EAAAlM,GACA,oBACA,mBAAAsY,EAAA,WACA9R,IAAA8R,EAAA,IACA,OAAAA,EAAA,IACAF,EAAAG,aAAAD,EAAA,GAAAA,EAAA,SAGa,sBACb,IAAAxL,KAAAZ,EACAA,EAAArK,eAAAiL,SACAtG,IAAA0F,EAAAY,IACA,OAAAZ,EAAAY,IACAsL,EAAAG,aAAAzL,EAAAZ,EAAAY,IAOA,OAAAsL,GAYAI,UAAA,SAAAC,GAMA,OADAA,GADAA,GADAA,GADAA,GADAA,IAAA3P,QAAA,gBACAA,QAAA,cACAA,QAAA,cACAA,QAAA,gBACAA,QAAA,gBAaA4P,YAAA,SAAAD,GAMA,OADAA,GADAA,GADAA,GADAA,GADAA,IAAA3P,QAAA,UAAmC,MACnCA,QAAA,QAAiC,MACjCA,QAAA,QAAiC,MACjCA,QAAA,UAAmC,MACnCA,QAAA,UAAmC,MAenCuP,YAAA,SAAAI,GACA,OAAAvG,EAAA8F,eAAAW,eAAAF,IAYAG,YAAA,SAAAC,GACA,IAAAT,EAUA,OARAU,UAEAV,GADA,IAAAU,WACAC,gBAAAF,EAAA,cAEAT,EAAA,IAAAF,cAAA,qBACAc,MAAA,QACAZ,EAAAa,QAAAJ,IAEAT,GAYAc,QAAA,SAAAnC,GACA,IAAAA,EAAoB,YAEpB,IAAApH,EAAA,GACA,IAAAoH,EAAAG,WAAAvO,QAAAoO,EAAAI,WAAAjF,EAAAoE,YAAAE,OACA7G,GAAAoH,EAAAoC,WAGA,QAAAnZ,EAAA,EAAuBA,EAAA+W,EAAAG,WAAAvO,OAA4B3I,IACnD+W,EAAAG,WAAAlX,GAAAmX,WAAAjF,EAAAoE,YAAAE,OACA7G,GAAAoH,EAAAG,WAAAlX,GAAAmZ,WAIA,OAAAjH,EAAAsG,UAAA7I,IAeAyJ,YAAA,SAAArC,GACA,IAAA/W,EAAAqX,EACA,GAAAN,EAAAI,WAAAjF,EAAAoE,YAAAC,OAAA,CAGA,IAFAc,EAAAnF,EAAAiG,WAAApB,EAAAO,SAEAtX,EAAA,EAAuBA,EAAA+W,EAAAnD,WAAAjL,OAA4B3I,IACnDqX,EAAAkB,aAAAxB,EAAAnD,WAAA5T,GAAAqZ,SACAtC,EAAAnD,WAAA5T,GAAAiB,OAGA,IAAAjB,EAAA,EAAuBA,EAAA+W,EAAAG,WAAAvO,OAA4B3I,IACnDqX,EAAAS,YAAA5F,EAAAkH,YAAArC,EAAAG,WAAAlX,UAES+W,EAAAI,WAAAjF,EAAAoE,YAAAE,OACTa,EAAAnF,EAAA8F,eAAAW,eAAA5B,EAAAoC,YAEA,OAAA9B,GAgBAiC,WAAA,SAAAvC,GACA,IAAA/W,EAAAqX,EAAAhP,EAAAqM,EAAAE,EAAA3T,EAAAuT,EAAA+E,EAAAjB,EAAAkB,EAAAC,EACA,GAAA1C,EAAAI,WAAAjF,EAAAoE,YAAAC,OAEA,GADA7B,EAAAqC,EAAAsC,SAAAK,cACAxH,EAAAwB,MAAAe,SAAAC,GACA,IAEA,IADA2C,EAAAnF,EAAAiG,WAAAzD,GACA1U,EAAA,EAA8BA,EAAAkS,EAAAwB,MAAAE,WAAAc,GAAA/L,OAA0C3I,IAGxE,GAFA4U,EAAA1C,EAAAwB,MAAAE,WAAAc,GAAA1U,GAEA,OADAiB,EAAA8V,EAAA4C,aAAA/E,KACA,KAAA3T,IAAA,IAAAA,GAAA,IAAAA,EASA,GANA,UAAA2T,GAAA,iBAAA3T,QACA,IAAAA,EAAA2Y,UACA3Y,IAAA2Y,SAIA,UAAAhF,EAAA,CAGA,IAFAJ,EAAA,GACA+E,EAAAtY,EAAAuH,MAAA,KACAH,EAAA,EAAsCA,EAAAkR,EAAA5Q,OAAqBN,IAE3DmR,GADAlB,EAAAiB,EAAAlR,GAAAG,MAAA,MACA,GAAAM,QAAA,WAAAA,QAAA,WAAA4Q,cACAxH,EAAAwB,MAAAmB,SAAA2E,KACAC,EAAAnB,EAAA,GAAAxP,QAAA,WAAAA,QAAA,WACA0L,EAAAhL,KAAAgQ,EAAA,KAAAC,IAGAjF,EAAA7L,OAAA,IACA1H,EAAAuT,EAAAtL,KAAA,MACAmO,EAAAkB,aAAA3D,EAAA3T,SAGAoW,EAAAkB,aAAA3D,EAAA3T,GAIA,IAAAjB,EAAA,EAA+BA,EAAA+W,EAAAG,WAAAvO,OAA4B3I,IAC3DqX,EAAAS,YAAA5F,EAAAoH,WAAAvC,EAAAG,WAAAlX,KAEiB,MAAA2K,GACjB0M,EAAAnF,EAAAmG,YAAA,SAIA,IADAhB,EAAAnF,EAAA8F,eAAA6B,yBACA7Z,EAAA,EAA2BA,EAAA+W,EAAAG,WAAAvO,OAA4B3I,IACvDqX,EAAAS,YAAA5F,EAAAoH,WAAAvC,EAAAG,WAAAlX,UAGS,GAAA+W,EAAAI,WAAAjF,EAAAoE,YAAAI,SAET,IADAW,EAAAnF,EAAA8F,eAAA6B,yBACA7Z,EAAA,EAAuBA,EAAA+W,EAAAG,WAAAvO,OAA4B3I,IACnDqX,EAAAS,YAAA5F,EAAAoH,WAAAvC,EAAAG,WAAAlX,UAES+W,EAAAI,WAAAjF,EAAAoE,YAAAE,OACTa,EAAAnF,EAAAmG,YAAAtB,EAAAoC,YAEA,OAAA9B,GAYAyC,WAAA,SAAA1B,GACA,uBAAAA,EAAuCA,EACvCA,EAAAtP,QAAA,iBACAA,QAAA,cACAA,QAAA,aACAA,QAAA,cACAA,QAAA,cACAA,QAAA,cACAA,QAAA,cACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,cAYAiR,aAAA,SAAA3B,GACA,uBAAAA,EAAuCA,EACvCA,EAAAtP,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,eAYAkR,eAAA,SAAAC,GACA,OAAAA,EAAAhQ,QAAA,OAAmC,KACnCgQ,EAAAzR,MAAA,SAYA0R,iBAAA,SAAAD,GACA,IAAAE,EAAAjI,EAAAkI,kBAAAH,GACA,GAAAE,EAAAlQ,QAAA,OACA,OAAAkQ,EAEA,IAAA5P,EAAA4P,EAAA3R,MAAA,KAEA,OADA+B,EAAAtB,OAAA,KACAsB,EAAArB,KAAA,MAaAmR,mBAAA,SAAAJ,GACA,IAAAlY,EAAAkY,EAAAzR,MAAA,KACA,OAAAzG,EAAA4G,OAAA,EAA2B,MAC3B5G,EAAAkH,OAAA,KACAlH,EAAAmH,KAAA,OAYAkR,kBAAA,SAAAH,GACA,OAAAA,IAAAzR,MAAA,cAMA8R,aAAA,SAAA3P,QACA,IAAAA,EAAA4P,OACArI,EAAAsI,MAAA7P,EAAA4P,OAEA5P,EAAA8P,UACAvI,EAAAsI,MAAA,UAAA9O,KAAAgP,QAAA,IAAA/P,EAAA8P,UAAA,IACA9P,EAAAgQ,KAAA,MAAAhQ,EAAApK,KAAA,KAAAoK,EAAAiQ,SACSjQ,EAAAkQ,SACT3I,EAAAsI,MAAA,UAAA9O,KAAAgP,QAAA,IACA/P,EAAAkQ,SAAA,IAAAlQ,EAAAmQ,WAAA,MACAnQ,EAAApK,KAAA,KAAAoK,EAAAiQ,SAEA1I,EAAAsI,MAAA,UAAA7P,EAAAiQ,UAiCAG,IAAA,SAAAC,EAAAC,GACAD,IAAAtP,KAAAuK,SAAAI,OACA,iBAAAzW,OAAAsb,SACA,mBAAAtb,OAAAsb,QAAAC,OACAvb,OAAAsb,QAAAC,MAAAF,IAUAG,MAAA,SAAAH,GACAvP,KAAAqP,IAAArP,KAAAuK,SAAAC,MAAA+E,IASAI,KAAA,SAAAJ,GACAvP,KAAAqP,IAAArP,KAAAuK,SAAAE,KAAA8E,IASAK,KAAA,SAAAL,GACAvP,KAAAqP,IAAArP,KAAAuK,SAAAG,KAAA6E,IASAE,MAAA,SAAAF,GACAvP,KAAAqP,IAAArP,KAAAuK,SAAAjB,MAAAiG,IASAT,MAAA,SAAAS,GACAvP,KAAAqP,IAAArP,KAAAuK,SAAAI,MAAA4E,IAYAM,UAAA,SAAAxE,GACA,IAAAyE,EAEA,IAAAzE,EAAoB,YAEpB,mBAAAA,EAAA,OACAA,IAAA0E,QAGA,IACAzb,EAAA0b,EADArC,EAAAtC,EAAAsC,SAQA,IALAtC,EAAA4C,aAAA,eACAN,EAAAtC,EAAA4C,aAAA,cAGA6B,EAAA,IAAAnC,EACArZ,EAAA,EAAmBA,EAAA+W,EAAAnD,WAAAjL,OAA4B3I,IAC/C,cAAA+W,EAAAnD,WAAA5T,GAAAqZ,WACAmC,GAAA,IAAAzE,EAAAnD,WAAA5T,GAAAqZ,SACA,KAAAnH,EAAAsG,UAAAzB,EAAAnD,WAAA5T,GAAAiB,OAAA,KAIA,GAAA8V,EAAAG,WAAAvO,OAAA,GAEA,IADA6S,GAAA,IACAxb,EAAA,EAAuBA,EAAA+W,EAAAG,WAAAvO,OAA4B3I,IAEnD,QADA0b,EAAA3E,EAAAG,WAAAlX,IACAmX,UACA,KAAAjF,EAAAoE,YAAAC,OAEAiF,GAAAtJ,EAAAqJ,UAAAG,GACA,MACA,KAAAxJ,EAAAoE,YAAAE,KAEAgF,GAAAtJ,EAAAsG,UAAAkD,EAAAvC,WACA,MACA,KAAAjH,EAAAoE,YAAAG,MAEA+E,GAAA,YAAAE,EAAAvC,UAAA,MAGAqC,GAAA,KAAAnC,EAAA,SAEAmC,GAAA,KAGA,OAAAA,GAOAG,WAAA,EAMAC,mBAAA,GASAC,oBAAA,SAAAtb,EAAAub,GACA5J,EAAA0J,mBAAArb,GAAAub,KA8CAzJ,QAAA,SAAA9R,EAAA6R,GAEA,aAAA7R,GAAA,YAAAA,GAAA,OAAAA,IACA6R,MAAA2J,MACA3J,EAAA2J,MAAA7J,EAAAO,GAAAG,OACSR,IACTA,EAAA,CAAqB2J,MAAA7J,EAAAO,GAAAG,UAKrBlH,KAAAsQ,SAAA9J,EAAAiG,WAAA5X,EAAA6R,GAGA1G,KAAA0M,KAAA1M,KAAAsQ,UAGA9J,EAAAG,QAAAzQ,UAAA,CAUA6Z,KAAA,WACA,OAAA/P,KAAAsQ,UAaA7P,SAAA,WACA,OAAA+F,EAAAqJ,UAAA7P,KAAAsQ,WAaAC,GAAA,WAEA,OADAvQ,KAAA0M,KAAA1M,KAAA0M,KAAA8D,WACAxQ,MAaApM,KAAA,WAEA,OADAoM,KAAA0M,KAAA1M,KAAAsQ,SACAtQ,MAeA0G,MAAA,SAAA+J,GACA,QAAArP,KAAAqP,EACAA,EAAAta,eAAAiL,UACAtG,IAAA2V,EAAArP,GACApB,KAAA0M,KAAAgE,gBAAAtP,GAEApB,KAAA0M,KAAAG,aAAAzL,EAAAqP,EAAArP,KAIA,OAAApB,MAmBArL,EAAA,SAAAE,EAAA6R,EAAAqG,GACA,IAAAiD,EAAAxJ,EAAAiG,WAAA5X,EAAA6R,EAAAqG,GAKA,OAJA/M,KAAA0M,KAAAN,YAAA4D,GACA,iBAAAjD,GAAA,iBAAAA,IACA/M,KAAA0M,KAAAsD,GAEAhQ,MAiBA2Q,MAAA,SAAAtF,GACA,IAAAuF,EACAC,EAAArK,EAAA8F,eACA,IACAsE,OAAA9V,IAAA+V,EAAAC,WACS,MAAA7R,GACT2R,GAAA,EAEA,IAAAG,EAAAH,EACAC,EAAAC,WAAAzF,GAAA,GACA7E,EAAAkH,YAAArC,GAGA,OAFArL,KAAA0M,KAAAN,YAAA2E,GACA/Q,KAAA0M,KAAAqE,EACA/Q,MAeAxK,EAAA,SAAAuX,GACA,IAAAiD,EAAAxJ,EAAAmG,YAAAI,GAEA,OADA/M,KAAA0M,KAAAN,YAAA4D,GACAhQ,MAcAgR,EAAA,SAAA7D,GACA,IAAA8D,EAAA9K,SAAAkG,cAAA,QAGA4E,EAAAC,UAAA/D,EAKA,IAFA,IAAAgE,EAAA3K,EAAAoH,WAAAqD,GAEAE,EAAA3F,WAAAvO,OAAA,GACA+C,KAAA0M,KAAAN,YAAA+E,EAAA3F,WAAA,IAEA,OAAAxL,OAiCAwG,EAAA4K,QAAA,SAAApC,EAAArZ,EAAAd,EAAAwc,EAAAnS,EAAA0B,EAAA0Q,GACAtR,KAAAgP,UACAhP,KAAArK,KACAqK,KAAAnL,OACAmL,KAAAqR,OACArR,KAAAd,KACAc,KAAAsR,WAAA,CAA+BC,kBAAA,EAAAC,yBAAA,GAE/BxR,KAAAsR,QAAAG,YACAjL,EAAAoJ,KAAA,yEACA5P,KAAAsR,QAAAC,iBAAAvR,KAAAsR,QAAAG,iBACAzR,KAAAsR,QAAAG,WAGAzR,KAAAsR,QAAAC,iBACAvR,KAAAY,OAAA4F,EAAAkI,kBAAA9N,GAAA,KAEAZ,KAAAY,OAGAZ,KAAA0R,MAAA,GAGAlL,EAAA4K,QAAAlb,UAAA,CAYAyb,aAAA,SAAAtG,GACA,IAAAuG,EAAAvG,EAAA4C,aAAA,SAIA,OAHA2D,GAAA5R,KAAAsR,QAAAE,0BACAI,IAAA9U,MAAA,SAEA8U,GAYAC,eAAA,SAAAxG,GACA,IAAAyG,GAAA,EACA,IAAA9R,KAAArK,GACA,SAEA,IAAAoc,EAAA/R,KAQA,OAPAwG,EAAA4E,aAAAC,EAAA,cAAAA,GACA0G,EAAAJ,aAAAtG,KAAA0G,EAAApc,KACAmc,GAAA,KAGAA,KAAA9R,KAAA2R,aAAAtG,KAAArL,KAAArK,IAcAqc,QAAA,SAAA3G,GACA,IAAAzK,EAAAyK,EAAA4C,aAAA,QACAjO,KAAAsR,QAAAC,mBACA3Q,EAAA4F,EAAAkI,kBAAA9N,IAEA,IAAAqR,EAAA5G,EAAA4C,aAAA,QACA,SAAAjO,KAAA6R,eAAAxG,IACArL,KAAAnL,OAAA2R,EAAAkF,WAAAL,EAAArL,KAAAnL,OACAmL,KAAAqR,OAAAjR,MAAAG,QAAAP,KAAAqR,OAAA,IAAArR,KAAAqR,KAAA9S,QAAA0T,OAAAjS,KAAAqR,OACArR,KAAAd,IAAAmM,EAAA4C,aAAA,QAAAjO,KAAAd,IACAc,KAAAY,UAAAZ,KAAAY,OAgBAsR,IAAA,SAAA7G,GACA,IAAAyE,EAAA,KACA,IACAA,EAAA9P,KAAAgP,QAAA3D,GACS,MAAApM,GAET,MADAuH,EAAAoI,aAAA3P,GACAA,EAEA,OAAA6Q,GASArP,SAAA,WACA,mBAAiBT,KAAAgP,QAAA,IAAAhP,KAAAnL,KAAA,IACjBmL,KAAAd,GAAA,IAAAc,KAAArK,GAAA,OA6BA6Q,EAAA2L,aAAA,SAAAC,EAAApD,GACAhP,KAAAoS,SACApS,KAAAgP,UACAhP,KAAAqS,YAAA,IAAAC,MAAAC,UACAvS,KAAA0R,MAAA,GAGAlL,EAAA2L,aAAAjc,UAAA,CAQAgc,IAAA,WAEA,OADAlS,KAAAqS,YAAA,IAAAC,MAAAC,UACAvS,KAAAgP,WAMAwD,MAAA,WACAxS,KAAAqS,YAAA,IAAAC,MAAAC,WASA9R,SAAA,WACA,wBAAiBT,KAAAgP,QAAA,IAAAhP,KAAAoS,OAAA,OAkJjB5L,EAAAiM,WAAA,SAAAC,EAAApB,GAEAtR,KAAA0S,UAEA1S,KAAAsR,WAAA,GACA,IAAAqB,EAAA3S,KAAAsR,QAAAsB,UAAA,GAgEA,QAAAxR,KA7DA,IAAAsR,EAAAnU,QAAA,YAAAmU,EAAAnU,QAAA,SACA,IAAAoU,EAAApU,QAAA,MACAyB,KAAA6S,OAAA,IAAArM,EAAAsM,UAAA9S,MAEAA,KAAA6S,OAAA,IAAArM,EAAAuM,KAAA/S,MAIAA,KAAAuO,IAAA,GAEAvO,KAAA+F,OAAA,KAEA/F,KAAAgT,SAAA,KAGAhT,KAAAiT,WAAA,GACAjT,KAAAkT,YAAA,EACAlT,KAAAmT,SAAA,EAGAnT,KAAAoT,cAAA,GACApT,KAAA3E,SAAA,GACA2E,KAAAqT,aAAA,GACArT,KAAAsT,eAAA,GACAtT,KAAAuT,UAAA,GACAvT,KAAAwT,YAAA,GACAxT,KAAAyT,sBAAA,CACAC,KAAA,GACAC,UAAA,IAGA3T,KAAA4T,aAAA,KACA5T,KAAA6T,mBAAA,KAEA7T,KAAA8T,eAAA,EACA9T,KAAA+T,WAAA,EACA/T,KAAAgU,eAAA,EACAhU,KAAAiU,mBAAA,EACAjU,KAAAkU,QAAA,EACAlU,KAAAmU,UAAA,EAEAnU,KAAAoU,MAAA,GACApU,KAAAqU,UAAA,EAEArU,KAAAsU,sBAAA,KACAtU,KAAAuU,sBAAA,KACAvU,KAAAwU,wBAAA,KAGAxU,KAAAyU,WAAA,EAIAzU,KAAA4T,aAAAhU,WAAA,WACAI,KAAA0U,WACK5e,KAAAkK,MAAA,KAELuG,EAAAf,WAAAxF,KAAAsR,QAAA7L,SACAzF,KAAA2U,uBAAA3U,KAAAsR,QAAAsD,YAGApO,EAAA0J,mBACA,GAAA1J,EAAA0J,mBAAA/Z,eAAAiL,GAAA,CACA,IAAAgP,EAAA5J,EAAA0J,mBAAA9O,GAEAyT,EAAA,aACAA,EAAA3e,UAAAka,EACApQ,KAAAoB,GAAA,IAAAyT,EACA7U,KAAAoB,GAAA0T,KAAA9U,QAKAwG,EAAAiM,WAAAvc,UAAA,CAOAsc,MAAA,WACAxS,KAAA6S,OAAAkC,SAGA/U,KAAAkT,YAAA,EACAlT,KAAAmT,SAAA,EAGAnT,KAAAoT,cAAA,GACApT,KAAA3E,SAAA,GACA2E,KAAAqT,aAAA,GACArT,KAAAsT,eAAA,GACAtT,KAAAuT,UAAA,GACAvT,KAAAwT,YAAA,GAEAxT,KAAA8T,eAAA,EACA9T,KAAA+T,WAAA,EACA/T,KAAAgU,eAAA,EACAhU,KAAAmU,UAAA,EAEAnU,KAAAoU,MAAA,GACApU,KAAAgV,UAAA,GACAhV,KAAAqU,UAAA,GAYAY,MAAA,WACAjV,KAAAkU,QAAA,GAQAgB,OAAA,WACAlV,KAAAkU,QAAA,GAyBAiB,YAAA,SAAAC,GACA,IAAAC,EAAA,uCAAAjY,QAAA,iBAAAzI,GACA,IAAAS,EAAA,GAAA0L,KAAAwU,SAAA,EAEA,OADA,MAAA3gB,EAAAS,EAAA,EAAAA,EAAA,GACAqL,SAAA,MAEA,6CACA4U,EAAA,IAAAD,EAEAC,EAAA,IA0BAE,wBAAA,SAAA3C,EAAA4C,EAAAnW,GACAW,KAAAyT,sBAAAb,GAAA4C,GAAAnW,GA4CAoW,QAAA,SAAAlH,EAAAmH,EAAArW,EAAAsW,EAAAC,EAAAC,EAAAC,GACA9V,KAAAuO,MAIAvO,KAAA+V,QAAAvP,EAAAkI,kBAAA1O,KAAAuO,KAKAvO,KAAA8V,WAAAtP,EAAA8H,eAAAtO,KAAAuO,KAKAvO,KAAA0V,OAKA1V,KAAAgW,SAAA,OAEAhW,KAAAiW,iBAAA5W,EACAW,KAAAgU,eAAA,EACAhU,KAAA+T,WAAA,EACA/T,KAAA8T,eAAA,EACA9T,KAAAmU,UAAA,EAGAnU,KAAA+F,OAAAS,EAAAgI,iBAAAxO,KAAAuO,KAEAvO,KAAAkW,qBAAA1P,EAAA6C,OAAAE,WAAA,MAEAvJ,KAAA6S,OAAAsD,SAAAR,EAAAC,EAAAC,IA2BAO,OAAA,SAAA7H,EAAA8H,EAAAC,EAAAjX,EAAAsW,EAAAC,EAAAW,GACA,KAAAvW,KAAA6S,kBAAArM,EAAAuM,MAGA,MACAle,KAAA,sBACAqa,QAAA,gEAJAlP,KAAA6S,OAAA2D,QAAAjI,EAAA8H,EAAAC,EAAAjX,EAAAsW,EAAAC,EAAAW,IAoCAE,QAAA,SAAAlI,EAAAlP,EAAAsW,EAAAC,EAAAW,GACA,IAAAvW,KAAA0W,2BAGA,MACA7hB,KAAA,sBACAqa,QAAA,iEAJAlP,KAAA6S,OAAA8D,SAAApI,EAAAlP,EAAAsW,EAAAC,EAAAW,IAaAG,yBAAA,WACA,GAAA1W,KAAA6S,kBAAArM,EAAAuM,KAAA,CACA,IAAA6D,KAAwB,SACxB,IACAC,eAAAC,QAAA,yBACAD,eAAAE,WAAA,aACa,MAAA9X,GACb,SAEA,SAEA,UAsBA+X,SAAA,SAAA3L,KAwBA4L,UAAA,SAAA5L,KAkBA6L,SAAA,SAAA3T,KAkBA4T,UAAA,SAAA5T,KAiBA6T,aAAA,SAAAd,KAiBAe,KAAA,SAAAhM,GACA,UAAAA,EAAA,CACA,sBAAAA,EAAA,KACA,QAAA/W,EAAA,EAA2BA,EAAA+W,EAAApO,OAAiB3I,IAC5C0L,KAAAsX,WAAAjM,EAAA/W,QAES,mBAAA+W,EAAA,KACTrL,KAAAsX,WAAAjM,EAAA0E,QAEA/P,KAAAsX,WAAAjM,GAGArL,KAAA6S,OAAA0E,UAWAC,MAAA,WAGAC,aAAAzX,KAAA4T,cACA5T,KAAA0U,WAmBAgD,aAAA,SAAArM,EAAAhM,EAAAsY,EAAAC,GACA,IAAAC,EAAA,KACA9F,EAAA/R,KACA,mBAAAqL,EAAA,OACAA,IAAA0E,QAEA,IAAA7Q,EAAAmM,EAAA4C,aAAA,MAMA,GALA/O,IACAA,EAAAc,KAAAmV,YAAA,gBACA9J,EAAAwB,aAAA,KAAA3N,IAGA,mBAAAG,GAAA,mBAAAsY,EAAA,CACA,IAAA3I,EAAAhP,KAAA8X,WAAA,SAAAC,GAEAF,GACA9F,EAAAiG,mBAAAH,GAGA,UADAE,EAAA9J,aAAA,QAEA0J,GACAA,EAAAI,GAEiB1Y,GACjBA,EAAA0Y,IAEa,qBAAA7Y,GAGb0Y,IACAC,EAAA7X,KAAAiY,gBAAAL,EAAA,WAOA,OALA7F,EAAAmG,cAAAlJ,GAEA2I,GACAA,EAAA,OAEA,KAKA,OADA3X,KAAAqX,KAAAhM,GACAnM,GAiBAiZ,OAAA,SAAA9M,EAAAhM,EAAAsY,EAAAC,GACA,IAAAC,EAAA,KACA9F,EAAA/R,KACA,mBAAAqL,EAAA,OACAA,IAAA0E,QAEA,IAAA7Q,EAAAmM,EAAA4C,aAAA,MAMA,GALA/O,IACAA,EAAAc,KAAAmV,YAAA,UACA9J,EAAAwB,aAAA,KAAA3N,IAGA,mBAAAG,GAAA,mBAAAsY,EAAA,CACA,IAAA3I,EAAAhP,KAAA8X,WAAA,SAAAC,GAEAF,GACA9F,EAAAiG,mBAAAH,GAEA,IAAAO,EAAAL,EAAA9J,aAAA,QACA,cAAAmK,EACA/Y,GACAA,EAAA0Y,OAEiB,cAAAK,EAKjB,MACAvjB,KAAA,eACAqa,QAAA,sBAAAkJ,GANAT,GACAA,EAAAI,KAQa,6BAAA7Y,GAGb0Y,IACAC,EAAA7X,KAAAiY,gBAAAL,EAAA,WAOA,OALA7F,EAAAmG,cAAAlJ,GAEA2I,GACAA,EAAA,OAEA,KAKA,OADA3X,KAAAqX,KAAAhM,GACAnM,GAOAoY,WAAA,SAAAe,GACA,UAAAA,IACAA,EAAAzM,UACAyM,EAAA7M,WACA,MACA3W,KAAA,eACAqa,QAAA,gCAGAlP,KAAAoU,MAAAtW,KAAAua,IAMAC,aAAA,WACAtY,KAAAoU,MAAAtW,KAAA,WACAkC,KAAA6S,OAAAyF,eAEAtY,KAAA4T,aAAAhU,WAAA,WACAI,KAAA0U,WACS5e,KAAAkK,MAAA,MAyBTiY,gBAAA,SAAA7F,EAAApD,GACA,IAAAuJ,EAAA,IAAA/R,EAAA2L,aAAAC,EAAApD,GAEA,OADAhP,KAAAuT,UAAAzV,KAAAya,GACAA,GAaAP,mBAAA,SAAAQ,GAGAxY,KAAAqT,aAAAvV,KAAA0a,IAmEAV,WAAA,SAAA9I,EAAArZ,EAAAd,EAAAwc,EAAAnS,EAAA0B,EAAA0Q,GACA,IAAAmH,EAAA,IAAAjS,EAAA4K,QAAApC,EAAArZ,EAAAd,EAAAwc,EAAAnS,EAAA0B,EAAA0Q,GAEA,OADAtR,KAAAwT,YAAA1V,KAAA2a,GACAA,GAaAP,cAAA,SAAAM,GAGAxY,KAAAsT,eAAAxV,KAAA0a,GAGA,IAAAlkB,EAAA0L,KAAAwT,YAAAjV,QAAAia,GACAlkB,GAAA,GACA0L,KAAAwT,YAAAjW,OAAAjJ,EAAA,IAaAqgB,uBAAA,SAAAC,GACA5U,KAAA4U,WAAA,IACAA,KAAA,CACApO,EAAAkS,cACAlS,EAAAmS,aACAnS,EAAAoS,QACApS,EAAAqS,gBACArS,EAAAsS,YACAtS,EAAAuS,UACAvS,EAAAwS,WAEA/X,QAAAjB,KAAAiZ,sBAAAnjB,KAAAkK,QAWAiZ,sBAAA,SAAAC,GACAlZ,KAAA4U,WAAAsE,EAAAhjB,UAAArB,MAAAqkB,GAmBAC,WAAA,SAAAC,GAIA,GAHApZ,KAAAkW,qBAAA1P,EAAA6C,OAAAQ,cAAAuP,GAEA5S,EAAAmJ,KAAA,kCAAAyJ,GACApZ,KAAA+T,UAAA,CACA,IAAAsF,GAAA,EACArZ,KAAAgU,eAAA,EACAhU,KAAA8T,gBACAuF,EAAAxS,EAAA,CACAwJ,MAAA7J,EAAAO,GAAAG,OACAmK,KAAA,iBAIArR,KAAA6T,mBAAA7T,KAAAsZ,oBACA,IAAAtZ,KAAAuZ,qBAAAzjB,KAAAkK,OACAA,KAAA6S,OAAA2G,YAAAH,QAEA7S,EAAAmJ,KAAA,gEACA3P,KAAA6S,OAAA4G,oBACAzZ,KAAA0Z,iBAcAxD,qBAAA,SAAAyD,EAAAC,EAAAvO,GAEA,QAAAjK,KAAAoF,EAAA0J,mBACA,GAAA1J,EAAA0J,mBAAA/Z,eAAAiL,GAAA,CACA,IAAAxC,EAAAoB,KAAAoB,GACA,GAAAxC,EAAAib,cACA,IACAjb,EAAAib,cAAAF,EAAAC,GACqB,MAAAE,GACrBtT,EAAAiJ,MAAArO,EAAA,gDACA0Y,IAOA,GAAA9Z,KAAAiW,iBACA,IACAjW,KAAAiW,iBAAA0D,EAAAC,EAAAvO,GACa,MAAApM,GACbuH,EAAAoI,aAAA3P,GACAuH,EAAAiJ,MACA,iDAAAxQ,KAWAya,cAAA,SAAAE,GACA,iBAAA5Z,KAAA4T,cACA6D,aAAAzX,KAAA4T,cAIA,OAAA5T,KAAA6T,qBACA7T,KAAAgY,mBAAAhY,KAAA6T,oBACA7T,KAAA6T,mBAAA,MAGArN,EAAAmJ,KAAA,4BACA3P,KAAA6S,OAAA6G,gBAEA1Z,KAAA8T,eAAA,EACA9T,KAAAgU,eAAA,EACAhU,KAAAmU,UAAA,EAGAnU,KAAA3E,SAAA,GACA2E,KAAAoT,cAAA,GACApT,KAAAqT,aAAA,GACArT,KAAAsT,eAAA,GACAtT,KAAAuT,UAAA,GACAvT,KAAAwT,YAAA,GAGAxT,KAAAkW,qBAAA1P,EAAA6C,OAAAO,aAAAgQ,GACA5Z,KAAA+T,WAAA,GAeAgG,UAAA,SAAA5e,EAAA6e,GACAxT,EAAAmJ,KAAA,oBACA,IAAAtE,EAAArL,KAAA6S,OAAAoH,WAAA9e,GACA,UAAAkQ,EAAA,CAkBA,IAAA/W,EAAAmkB,EACA,IAjBAzY,KAAAgX,WAAAxQ,EAAAiM,WAAAvc,UAAA8gB,WACA3L,EAAAsC,WAAA3N,KAAA6S,OAAAqH,OAAA7O,EAAAG,WAAAvO,OACA+C,KAAAgX,SAAA3L,EAAAG,WAAA,IAEAxL,KAAAgX,SAAA3L,IAGArL,KAAAkX,WAAA1Q,EAAAiM,WAAAvc,UAAAghB,WACA8C,EACAha,KAAAkX,SAAA8C,GAEAha,KAAAkX,SAAA1Q,EAAAqJ,UAAAxE,KAMArL,KAAAsT,eAAArW,OAAA,GACAwb,EAAAzY,KAAAsT,eAAA6G,OACA7lB,EAAA0L,KAAA3E,SAAAkD,QAAAka,KACA,GACAzY,KAAA3E,SAAAkC,OAAAjJ,EAAA,GAKA,KAAA0L,KAAAwT,YAAAvW,OAAA,GACA+C,KAAA3E,SAAAyC,KAAAkC,KAAAwT,YAAA2G,OAIA,GAAAna,KAAAgU,eAAAhU,KAAA6S,OAAAuH,cACApa,KAAA0Z,oBADA,CAKA,IACAW,EAAAC,EADAjJ,EAAAhG,EAAA4C,aAAA,QAEA,UAAAoD,GAAA,cAAAA,EAAA,CAEA,GAAArR,KAAAgU,cACA,OAkBA,OAdAqG,EAAAhP,EAAA4C,aAAA,aACAqM,EAAAjP,EAAAkP,qBAAA,YACA,OAAAF,GACA,wBAAAA,GAAAC,EAAArd,OAAA,IACAod,EAAA,YAEAra,KAAAkW,qBAAA1P,EAAA6C,OAAAG,SAAA6Q,IAEAra,KAAAkW,qBACA1P,EAAA6C,OAAAG,SACAhD,EAAAyD,eAAAuQ,oBAGAxa,KAAA0Z,cAAAW,GAKA,IAAAtI,EAAA/R,KACAwG,EAAA4E,aAAAC,EAAA,cAAA2E,GACA,IAAA1b,EAAAmmB,EAIA,IAFAA,EAAA1I,EAAA1W,SACA0W,EAAA1W,SAAA,GACA/G,EAAA,EAAuBA,EAAAmmB,EAAAxd,OAAoB3I,IAAA,CAC3C,IAAAmkB,EAAAgC,EAAAnmB,GAGA,KACAmkB,EAAAzG,QAAAhC,KACA+B,EAAA+B,eAAA2E,EAAA/G,KAKAK,EAAA1W,SAAAyC,KAAA2a,GAJAA,EAAAvG,IAAAlC,IACA+B,EAAA1W,SAAAyC,KAAA2a,GAKiB,MAAAxZ,GAEjBuH,EAAAoJ,KAAA,wDAAA3Q,EAAAiQ,gBAUA0F,WAAA,GAkBA8F,YAAA,SAAAvf,EAAAwf,EAAAX,GAIA,IAAAY,EAHApU,EAAAmJ,KAAA,0BACA3P,KAAA+T,WAAA,EAGA,IACA6G,EAAA5a,KAAA6S,OAAAoH,WAAA9e,GACS,MAAA8D,GACT,iBAAAA,EAAoC,MAAAA,EACpCe,KAAAkW,qBACA1P,EAAA6C,OAAAG,SACAhD,EAAAyD,eAAAC,YAEAlK,KAAA0Z,cAAAlT,EAAAyD,eAAAC,YAEA,GAAA0Q,IAEA5a,KAAAgX,WAAAxQ,EAAAiM,WAAAvc,UAAA8gB,WACA4D,EAAAjN,WAAA3N,KAAA6S,OAAAqH,OAAAU,EAAApP,WAAAvO,OACA+C,KAAAgX,SAAA4D,EAAApP,WAAA,IAEAxL,KAAAgX,SAAA4D,IAGA5a,KAAAkX,WAAA1Q,EAAAiM,WAAAvc,UAAAghB,WACA8C,EACAha,KAAAkX,SAAA8C,GAEAha,KAAAkX,SAAA1Q,EAAAqJ,UAAA+K,KAIA5a,KAAA6S,OAAA6H,YAAAE,KACApU,EAAA6C,OAAAG,UAYA,GANAoR,EAAAC,uBACAD,EAAAC,uBAAArU,EAAAO,GAAAW,OAAA,YAAAzK,OAAA,EAEA2d,EAAAL,qBAAA,mBAAAtd,OAAA,GACA2d,EAAAL,qBAAA,YAAAtd,OAAA,EAEA,CAKA,IAAA3I,EAAAwmB,EAAAC,EAAA,GACAnG,EAAAgG,EAAAL,qBAAA,aACA,GAAA3F,EAAA3X,OAAA,EACA,IAAA3I,EAAA,EAAuBA,EAAAsgB,EAAA3X,OAAuB3I,IAC9CwmB,EAAAtU,EAAAgH,QAAAoH,EAAAtgB,IACA0L,KAAA4U,WAAAkG,IAAAC,EAAAjd,KAAAkC,KAAA4U,WAAAkG,IAGA,IAAAC,EAAA9d,QACA,IAAA2d,EAAAL,qBAAA,QAAAtd,QAOA,IAAA+C,KAAAiU,mBACAjU,KAAAgb,aAAAD,GALA/a,KAAA6S,OAAAoI,kBAAAN,QAhBA3a,KAAA6S,OAAAoI,kBAAAN,IAkCAO,yBAAA,SAAAtG,GAEA,IAAAtgB,EAAAqI,EAAAwe,EAAAC,EACA,IAAA9mB,EAAA,EAAmBA,EAAAsgB,EAAA3X,OAAA,IAA2B3I,EAAA,CAE9C,IADA6mB,EAAA7mB,EACAqI,EAAArI,EAAA,EAA2BqI,EAAAiY,EAAA3X,SAAuBN,EAClDiY,EAAAjY,GAAAzG,UAAAmlB,SAAAzG,EAAAuG,GAAAjlB,UAAAmlB,WACAF,EAAAxe,GAGAwe,IAAA7mB,IACA8mB,EAAAxG,EAAAtgB,GACAsgB,EAAAtgB,GAAAsgB,EAAAuG,GACAvG,EAAAuG,GAAAC,GAGA,OAAAxG,GAgBA0G,iBAAA,SAAA1G,GACAA,EAAA5U,KAAAkb,yBAAAtG,GAAA,IACA,IAAAtgB,EAAA,EAAAinB,GAAA,EACA,IAAAjnB,EAAA,EAAmBA,EAAAsgB,EAAA3X,SAAuB3I,EAC1C,GAAAsgB,EAAAtgB,GAAA4B,UAAAiH,KAAA6C,MAAA,CAGAA,KAAAsU,sBAAAtU,KAAAwb,eACAxb,KAAAyb,iBAAA3lB,KAAAkK,MAAA,KACA,qBACAA,KAAAuU,sBAAAvU,KAAAwb,eACAxb,KAAA0b,iBAAA5lB,KAAAkK,MAAA,KACA,qBACAA,KAAAwU,wBAAAxU,KAAAwb,eACAxb,KAAA2b,mBAAA7lB,KAAAkK,MAAA,KACA,uBAEAA,KAAA4b,gBAAA,IAAAhH,EAAAtgB,GACA0L,KAAA4b,gBAAAC,QAAA7b,MAEA,IAAA8b,EAAArV,EAAA,QACA4J,MAAA7J,EAAAO,GAAAU,KACAyR,UAAAlZ,KAAA4b,gBAAA/mB,OAEA,GAAAmL,KAAA4b,gBAAAG,cAAA,CACA,IAAAC,EAAAhc,KAAA4b,gBAAAK,YAAAjc,KAAA,MACA8b,EAAAtmB,EAAAiM,KAAAua,IAEAhc,KAAAqX,KAAAyE,EAAA/L,QACAwL,GAAA,EACA,MAEA,OAAAA,GAQAW,mBAAA,WACA,OAAA1V,EAAA8H,eAAAtO,KAAAuO,MAGAvO,KAAAkW,qBACA1P,EAAA6C,OAAAG,SACAhD,EAAAyD,eAAAG,kBAEApK,KAAAmZ,WAAA3S,EAAAyD,eAAAG,oBAGApK,KAAAkW,qBAAA1P,EAAA6C,OAAAI,eAAA,MACAzJ,KAAAwb,eACAxb,KAAAmc,UAAArmB,KAAAkK,MACA,0BAEAA,KAAAqX,KAAAzQ,EAAA,CACAyK,KAAA,MACA+K,GAAApc,KAAA+F,OACA7G,GAAA,YACiBvK,EAAA,SAAc0b,MAAA7J,EAAAO,GAAAI,OAC/BxS,EAAA,eAAiCa,EAAAgR,EAAA8H,eAAAtO,KAAAuO,MACjCwB,UAiBAiL,aAAA,SAAAD,GACA/a,KAAAsb,iBAAAP,IACA/a,KAAAkc,sBAQAP,mBAAA,SAAAtQ,GACA,IAAAgR,EAAAha,KAAAmE,EAAAgH,QAAAnC,IACA2Q,EAAAhc,KAAA4b,gBAAAK,YAAAjc,KAAAqc,GACAtE,EAAAtR,EAAA,YACA4J,MAAA7J,EAAAO,GAAAU,OAMA,MAJA,KAAAuU,GACAjE,EAAAviB,EAAAiM,KAAAua,IAEAhc,KAAAqX,KAAAU,EAAAhI,SACA,GAkBAoM,UAAA,SAAA9Q,GAEA,IAAAiR,EAAA1V,EAAA,CAAsByK,KAAA,MAAAnS,GAAA,YACtBvK,EAAA,SAAyB0b,MAAA7J,EAAAO,GAAAI,OACzBxS,EAAA,eAA6Ba,EAAAgR,EAAA8H,eAAAtO,KAAAuO,MAC7BgC,KACA5b,EAAA,YAAAa,EAAAwK,KAAA0V,MAaA,OAXAlP,EAAAmI,mBAAA3O,KAAAuO,OAIAvO,KAAAuO,IAAA/H,EAAAkI,kBAAA1O,KAAAuO,KAAA,YAEA+N,EAAA/L,KAAA5b,EAAA,eAAgCa,EAAAgR,EAAAmI,mBAAA3O,KAAAuO,MAEhCvO,KAAAwb,eAAAxb,KAAAuc,UAAAzmB,KAAAkK,MAAA,KACA,qBACAA,KAAAqX,KAAAiF,EAAAvM,SACA,GAaA0L,iBAAA,SAAApQ,GACA,GAAArL,KAAAiT,WAAA,qBACA,IAAAuJ,EAGAC,EAFApa,KAAAmE,EAAAgH,QAAAnC,IAEAqR,MADA,yBAMA,GAJA,MAAAD,EAAA,KACAD,EAAAC,EAAA,IAGAD,IAAAxc,KAAAiT,WAAA,oBAUA,OARAjT,KAAAkY,cAAAlY,KAAAuU,uBACAvU,KAAAuU,sBAAA,KACAvU,KAAAwU,0BACAxU,KAAAkY,cAAAlY,KAAAwU,yBACAxU,KAAAwU,wBAAA,MAGAxU,KAAAiT,WAAA,GACAjT,KAAA0b,iBAAA,MAGAlV,EAAAmJ,KAAA,kCAEA3P,KAAA4b,iBACA5b,KAAA4b,gBAAAe,YAIA3c,KAAAkY,cAAAlY,KAAAuU,uBACAvU,KAAAuU,sBAAA,KACAvU,KAAAwU,0BACAxU,KAAAkY,cAAAlY,KAAAwU,yBACAxU,KAAAwU,wBAAA,MAGA,IAAAoI,EAAA,GACAC,EAAA,SAAAxhB,EAAAgQ,GACA,KAAAhQ,EAAA4B,QACA+C,KAAAkY,cAAA7c,EAAA8e,OAGA,OADAna,KAAA8c,eAAAhnB,KAAAkK,MAAAqL,IACA,GAYA,OAVAuR,EAAA9e,KAAAkC,KAAAwb,eAAA,SAAAnQ,GACAwR,EAAA/mB,KAAAkK,KAAA6c,CAAAD,EAAAvR,IACSvV,KAAAkK,MAAA,mCACT4c,EAAA9e,KAAAkC,KAAAwb,eAAA,SAAAnQ,GACAwR,EAAA/mB,KAAAkK,KAAA6c,CAAAD,EAAAvR,IACSvV,KAAAkK,MAAAwG,EAAAO,GAAAW,OAAA,uBAGT1H,KAAAsY,gBAEA,GAYAwE,eAAA,SAAAzR,GAGA,IAAA/W,EAAA0b,EACA,IAFAhQ,KAAAgT,SAAA3H,EAEA/W,EAAA,EAAmBA,EAAA+W,EAAAG,WAAAvO,OAA4B3I,IAE/C,UADA0b,EAAA3E,EAAAG,WAAAlX,IACAqZ,WACA3N,KAAAmT,SAAA,GAGA,YAAAnD,EAAArC,WACA3N,KAAAkT,YAAA,GAIA,IAAAlT,KAAAmT,QAEA,OADAnT,KAAAkW,qBAAA1P,EAAA6C,OAAAK,SAAA,OACA,EAEA1J,KAAAwb,eAAAxb,KAAA+c,cAAAjnB,KAAAkK,MAAA,UACA,qBAEA,IAAAgd,EAAAxW,EAAAmI,mBAAA3O,KAAAuO,KAWA,OAVAyO,EACAhd,KAAAqX,KAAAzQ,EAAA,CAA+ByK,KAAA,MAAAnS,GAAA,iBAC/BvK,EAAA,QAAsC0b,MAAA7J,EAAAO,GAAAa,OACtCjT,EAAA,eAA2Ca,EAAAwnB,GAAAjN,QAE3C/P,KAAAqX,KAAAzQ,EAAA,CAA+ByK,KAAA,MAAAnS,GAAA,iBAC/BvK,EAAA,QAAsC0b,MAAA7J,EAAAO,GAAAa,OACtCmI,SAGA,GAYAgN,cAAA,SAAA1R,GAGA,IAAAuO,EAFA,aAAAvO,EAAA4C,aAAA,QAOA,OANAzH,EAAAmJ,KAAA,wBACAtE,EAAAkP,qBAAA,YACAtd,OAAA,IACA2c,EAAApT,EAAAyD,eAAAE,UAEAnK,KAAAkW,qBAAA1P,EAAA6C,OAAAK,SAAAkQ,EAAAvO,IACA,EAIA,IACA4R,EADAnnB,EAAAuV,EAAAkP,qBAAA,QAEA,KAAAzkB,EAAAmH,OAAA,GAqBA,OAFAuJ,EAAAmJ,KAAA,wBACA3P,KAAAkW,qBAAA1P,EAAA6C,OAAAK,SAAA,KAAA2B,IACA,GAnBA4R,EAAAnnB,EAAA,GAAAykB,qBAAA,QACAtd,OAAA,IACA+C,KAAAuO,IAAA/H,EAAAgH,QAAAyP,EAAA,IAEAjd,KAAAkT,YACAlT,KAAAwb,eAAAxb,KAAAkd,iBAAApnB,KAAAkK,MACA,kCAEAA,KAAAqX,KAAAzQ,EAAA,CAAmCyK,KAAA,MAAAnS,GAAA,oBACnCvK,EAAA,WAAiD0b,MAAA7J,EAAAO,GAAAc,UACjDkI,UAEA/P,KAAA8T,eAAA,EACA9T,KAAAkW,qBAAA1P,EAAA6C,OAAAM,UAAA,SAsBAuT,iBAAA,SAAA7R,GACA,cAAAA,EAAA4C,aAAA,QACAjO,KAAA8T,eAAA,EACA9T,KAAAkW,qBAAA1P,EAAA6C,OAAAM,UAAA,WACS,aAAA0B,EAAA4C,aAAA,QAGT,OAFAzH,EAAAmJ,KAAA,4BACA3P,KAAAkW,qBAAA1P,EAAA6C,OAAAK,SAAA,KAAA2B,IACA,EAEA,UAaAqQ,iBAAA,SAAArQ,GAcA,OAZArL,KAAAsU,wBACAtU,KAAAkY,cAAAlY,KAAAsU,uBACAtU,KAAAsU,sBAAA,MAEAtU,KAAAwU,0BACAxU,KAAAkY,cAAAlY,KAAAwU,yBACAxU,KAAAwU,wBAAA,MAGAxU,KAAA4b,iBACA5b,KAAA4b,gBAAAuB,YACAnd,KAAAkW,qBAAA1P,EAAA6C,OAAAK,SAAA,KAAA2B,IACA,GAgBAkR,UAAA,SAAAlR,GAQA,MAPA,WAAAA,EAAA4C,aAAA,SACAjO,KAAA8T,eAAA,EACA9T,KAAAkW,qBAAA1P,EAAA6C,OAAAM,UAAA,OACS,UAAA0B,EAAA4C,aAAA,UACTjO,KAAAkW,qBAAA1P,EAAA6C,OAAAK,SAAA,KAAA2B,GACArL,KAAAmZ,WAAA,2BAEA,GAcAG,oBAAA,SAAAlH,EAAApD,GACA,IAAAuJ,EAAA,IAAA/R,EAAA2L,aAAAC,EAAApD,GAGA,OAFAuJ,EAAA7G,MAAA,EACA1R,KAAAuT,UAAAzV,KAAAya,GACAA,GAiBAiD,eAAA,SAAAxM,EAAArZ,EAAAd,EAAAwc,EAAAnS,GACA,IAAAuZ,EAAA,IAAAjS,EAAA4K,QAAApC,EAAArZ,EAAAd,EAAAwc,EAAAnS,GAGA,OAFAuZ,EAAA/G,MAAA,EACA1R,KAAAwT,YAAA1V,KAAA2a,GACAA,GAYAc,qBAAA,WAMA,OALA/S,EAAAmJ,KAAA,mCACA3P,KAAAkW,qBAAA1P,EAAA6C,OAAAW,YAAA,MACAhK,KAAA6S,OAAA0G,uBAEAvZ,KAAA0Z,iBACA,GASAhF,QAAA,WAMA,IALA,IAAApgB,EAAAikB,EAAAkC,EAKAza,KAAAuT,UAAAtW,OAAA,GACA+C,KAAAoT,cAAAtV,KAAAkC,KAAAuT,UAAA4G,OAIA,KAAAna,KAAAqT,aAAApW,OAAA,GACAsb,EAAAvY,KAAAqT,aAAA8G,OACA7lB,EAAA0L,KAAAoT,cAAA7U,QAAAga,KACA,GACAvY,KAAAoT,cAAA7V,OAAAjJ,EAAA,GAKA,IAAA8oB,GAAA,IAAA9K,MAAAC,UAEA,IADAkI,EAAA,GACAnmB,EAAA,EAAmBA,EAAA0L,KAAAoT,cAAAnW,OAA+B3I,IAClDikB,EAAAvY,KAAAoT,cAAA9e,IACA0L,KAAA8T,eAAAyE,EAAA7G,OACA6G,EAAAlG,WAAAkG,EAAAnG,OACAgL,GAAA,EACA7E,EAAArG,OACAuI,EAAA3c,KAAAya,GAGAkC,EAAA3c,KAAAya,IAIAvY,KAAAoT,cAAAqH,EAEAhD,aAAAzX,KAAA4T,cAEA5T,KAAA6S,OAAA6B,UAGA1U,KAAA+T,YAEA/T,KAAA4T,aAAAhU,WAAA,WACAI,KAAA0U,WACa5e,KAAAkK,MAAA,QAqCbwG,EAAA6W,cAAA,SAAAxoB,EAAAknB,EAAAV,GAIArb,KAAAnL,OAIAmL,KAAA+b,gBAkBA/b,KAAAqb,YAGA7U,EAAA6W,cAAAnnB,UAAA,CAoBAiH,KAAA,SAAAmgB,GACA,UAUAzB,QAAA,SAAAyB,GACAtd,KAAAud,YAAAD,GAeArB,YAAA,SAAAqB,EAAAjB,GACA,UAAAle,MAAA,6CAOAgf,UAAA,WACAnd,KAAAud,YAAA,MAMAZ,UAAA,WACA3c,KAAAud,YAAA,OAqBA/W,EAAAkS,cAAA,aACAlS,EAAAkS,cAAAxiB,UAAA,IAAAsQ,EAAA6W,cAAA,mBAEA7W,EAAAkS,cAAAxiB,UAAAiH,KAAA,SAAAmgB,GACA,cAAAA,EAAAxH,SAOAtP,EAAAuS,UAAA,aACAvS,EAAAuS,UAAA7iB,UAAA,IAAAsQ,EAAA6W,cAAA,eAEA7W,EAAAuS,UAAA7iB,UAAAiH,KAAA,SAAAmgB,GACA,cAAAA,EAAAxH,SAGAtP,EAAAuS,UAAA7iB,UAAA+lB,YAAA,SAAAqB,GACA,IAAAE,EAAAF,EAAAvH,QAKA,OAJAyH,GAAA,KACAA,GAAAF,EAAAxH,QACA0H,GAAA,KACAA,GAAAF,EAAA5H,KACAnP,EAAAjB,SAAAkY,IAOAhX,EAAAwS,SAAA,aACAxS,EAAAwS,SAAA9iB,UAAA,IAAAsQ,EAAA6W,cAAA,qBAEA7W,EAAAwS,SAAA9iB,UAAAiH,KAAA,SAAAmgB,GACA,cAAAA,EAAAxH,SAGAtP,EAAAwS,SAAA9iB,UAAA+lB,YAAA,SAAAqB,EAAAjB,EAAAoB,GACA,IAAAC,EAAAD,GAAAnX,EAAAnB,UAAA,WAAArE,KAAAwU,UACAkI,EAAA,KAAAjX,EAAAjB,SAAAgY,EAAAxH,SAoEA,OAnEA0H,GAAA,MACAA,GAAAE,EACAJ,EAAArK,WAAAyK,SACAJ,EAAArK,WAAA,6BAAAuK,EAEAA,EAAA,MAAAA,EAEAxd,KAAAic,YAAA,SAAAqB,EAAAjB,GASA,IARA,IAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1pB,EAAA8M,EAAAsU,EACAuI,EAAAC,EAAAC,EACAC,EAAA,UACAC,EAAAf,EAAArK,WAAA,iCACAoJ,EAAA,IACAqB,EAAAJ,EAAArK,WAAAyK,OACAY,EAAA,wBAEAjC,EAAAK,MAAA4B,IAAA,CACA,IAAA7B,EAAAJ,EAAAK,MAAA4B,GAEA,OADAjC,IAAAjf,QAAAqf,EAAA,OACAA,EAAA,IACA,QACAkB,EAAAlB,EAAA,GACA,MACA,QACAmB,EAAAnB,EAAA,GACA,MACA,QACAoB,EAAApB,EAAA,IAKA,GAAAkB,EAAAY,OAAA,EAAAb,EAAAzgB,UAAAygB,EAEA,OADAJ,EAAArK,WAAA,GACAqK,EAAA5B,mBAWA,IAPA2C,GADAD,GAAA,KAAAT,EAGAC,EAAAvb,KAAAub,GACAA,GAAA,UAEAlI,EAAAnP,EAAAjB,SAAAgY,EAAA5H,MACAoI,EAAAE,EAAA3X,EAAA/C,eAAAoS,EAAAkI,GACAtpB,EAAA,EAAeA,EAAAupB,EAAUvpB,IAAA,CAEzB,IADAypB,EAAA1X,EAAA/C,eAAAoS,EAAArP,EAAAlC,SAAA6Z,IACA5c,EAAA,EAAiBA,EAAA,EAAOA,IACxB0c,EAAA1c,IAAA2c,EAAA3c,GAEA4c,EAAAD,EASA,IAPAD,EAAAzX,EAAAlC,SAAA2Z,GAEAG,EAAA5X,EAAA/C,eAAAwa,EAAA,cACAI,EAAA7X,EAAA5B,cAAAqZ,EAAA,cACAK,EAAA9X,EAAA/C,eAAA+C,EAAA3B,SAAA2B,EAAAlC,SAAA8Z,IAAAI,GACAf,EAAArK,WAAA,oBAAA5M,EAAA9B,cAAA2Z,EAAAG,GAEAjd,EAAA,EAAeA,EAAA,EAAOA,IACtB6c,EAAA7c,IAAA+c,EAAA/c,GAIA,OADAgd,GAAA,MAAA3c,KAAA4E,EAAAlC,SAAA8Z,KAEGnoB,KAAAkK,MAEHwd,GAOAhX,EAAAoS,QAAA,aACApS,EAAAoS,QAAA1iB,UAAA,IAAAsQ,EAAA6W,cAAA,oBAEA7W,EAAAoS,QAAA1iB,UAAAiH,KAAA,SAAAmgB,GACA,cAAAA,EAAAxH,SAYAtP,EAAAoS,QAAA1iB,UAAAsoB,OAAA,SAAAva,GACA,UAAAA,EAAA7G,QAAA,cAAAA,QAAA,iBAIAoJ,EAAAoS,QAAA1iB,UAAA+lB,YAAA,SAAAqB,EAAAjB,EAAAoB,GASA,IARA,IAMAhB,EANA6B,EAAA,mCACAZ,EAAAD,GAAAnX,EAAAnB,UAAA,cAAArE,KAAAwU,UACAmJ,EAAA,GACAC,EAAA,KACAf,EAAA,GAIAtB,EAAAK,MAAA4B,IAIA,OAHA7B,EAAAJ,EAAAK,MAAA4B,GACAjC,IAAAjf,QAAAqf,EAAA,OACAA,EAAA,GAAAA,EAAA,GAAArf,QAAA,iBACAqf,EAAA,IACA,YACAgC,EAAAhC,EAAA,GACA,MACA,YACAkB,EAAAlB,EAAA,GACA,MACA,UACAA,EAAA,GACA,MACA,WACAiC,EAAAjC,EAAA,GAKA,IAAAkC,EAAArB,EAAAtH,SAAA,IAAAsH,EAAAvX,OACA,OAAA2Y,IACAC,IAAA,IAAAD,GAGA,IAAAE,EAAArY,EAAAjB,SAAAgY,EAAAxH,QAAA,IAAA2I,EAAA,IAAAze,KAAAud,YAAA7H,MACAmJ,EAAAvY,EAAA1C,KAAAgb,GAAA,IAAAjB,EAAA,IAAAD,EACAoB,EAAA,gBAAAH,EAEAP,EAAA,GAiBA,OAhBAA,GAAA,iBACAA,GAAA,YAAApe,KAAAwe,OAAAjY,EAAAjB,SAAAgY,EAAAxH,UAAA,IACAsI,GAAA,SAAApe,KAAAwe,OAAAC,GAAA,IACAL,GAAA,SAAApe,KAAAwe,OAAAb,GAAA,IACAS,GAAA,eACAA,GAAA,UAAApe,KAAAwe,OAAAd,GAAA,IACAU,GAAA,cAAApe,KAAAwe,OAAAG,GAAA,IACAP,GAAA,YAAA9X,EAAAnB,UAAAmB,EAAAnB,UAAA0Z,GAAA,IACAlB,EAAA,aACAD,EAAA,SACApX,EAAAnB,UAAA2Z,IAAA,IACAV,GAAA,WAEApe,KAAAic,YAAA,WACA,UAEAmC,GAOA5X,EAAAqS,gBAAA,aACArS,EAAAqS,gBAAA3iB,UAAA,IAAAsQ,EAAA6W,cAAA,qBAEA7W,EAAAqS,gBAAA3iB,UAAAiH,KAAA,SAAAmgB,GACA,cAAAA,EAAA5H,MAGAlP,EAAAqS,gBAAA3iB,UAAA+lB,YAAA,SAAAqB,GACA,IAAAE,EAAA,KAWA,OAVA,OAAAF,EAAAxH,UACA0H,IAAA,KAAAF,EAAAvH,SAEAyH,GAAA,IACAA,GAAA,IACAA,GAAA,eACAA,GAAAF,EAAA5H,KACA8H,GAAA,IACAA,GAAA,IAEAjX,EAAAjB,SAAAkY,IAYAhX,EAAAmS,aAAA,aACAnS,EAAAmS,aAAAziB,UAAA,IAAAsQ,EAAA6W,cAAA,kBAEA7W,EAAAmS,aAAAziB,UAAA+lB,YAAA,SAAAqB,GAQA,OAAAA,EAAAxH,UAAAwH,EAAAvH,QAAA,GAAAuH,EAAAvH,SAOAvP,EAAAsS,YAAA,aACAtS,EAAAsS,YAAA5iB,UAAA,IAAAsQ,EAAA6W,cAAA,kBAEA7W,EAAAsS,YAAA5iB,UAAAiH,KAAA,SAAAmgB,GACA,cAAAA,EAAA5H,MAGAlP,EAAAsS,YAAA5iB,UAAA+lB,YAAA,SAAAqB,GACA,IAAAE,EAAA,KAOA,OANA,OAAAF,EAAAxH,UACA0H,GAAAF,EAAAvH,SAEAyH,GAAA,KACAA,GAAAF,EAAA5H,KAEAnP,EAAAjB,SAAAkY,IAIA,CACAhX,UACAC,SACAG,MACAmY,KA/hHA,SAAArY,GAAsB,WAAAF,EAAAG,QAAA,UAAAD,IAgiHtBG,QACAR,OACAC,MACA/B,cAAA8B,EAAA9B,cACAC,SAAA6B,EAAA7B,SACAC,cAAA4B,EAAA5B,cACAC,SAAA2B,EAAA3B,YAcA,SAAA9Q,EAAAC,GACA,sBAAAG,KAAAC,IACAD,EAAA,yCAAAgrB,GACA,OAAAnrB,EACAmrB,EAAAxY,QACAwY,EAAAvY,cAGK,CACL,IAAAuY,EAAAhkB,EAAA,UAEAjH,EAAAD,QAAAD,EAAAmrB,EAAAxY,QAAAwY,EAAAvY,SAXA,CAgBCzG,EAAA,SAAAwG,EAAAC,GA85BD,OA14BAD,EAAAyY,QAAA,SAAA5T,EAAAnL,EAAAoW,EAAA4I,GACAlf,KAAAd,KAAAsH,EAAAyJ,WACAjQ,KAAAmf,QAAA9T,EACArL,KAAAuD,KAAAiD,EAAAqJ,UAAAxE,GAGArL,KAAAof,SAAAlf,EACAF,KAAAE,OACAF,KAAAsW,MACAtW,KAAAqf,KAAAC,IACAtf,KAAAkf,SAAA,EACAlf,KAAAuf,OAAA,EACAvf,KAAAwf,KAAA,KAEAxf,KAAAyf,IAAA,WACA,OAAAzf,KAAAqf,MACA,IAAA/M,KACAtS,KAAAqf,MAAA,IAFyB,GAIzBrf,KAAA0f,SAAA,WACA,OAAA1f,KAAAwf,MACA,IAAAlN,KACAtS,KAAAwf,MAAA,IAFyB,GAIzBxf,KAAA2f,IAAA3f,KAAA4f,WAGApZ,EAAAyY,QAAA/oB,UAAA,CAcA2pB,YAAA,WACA,IAAAnT,EAAA,KACA,GAAA1M,KAAA2f,IAAAG,aAAA9f,KAAA2f,IAAAG,YAAAC,iBAEA,oBADArT,EAAA1M,KAAA2f,IAAAG,YAAAC,iBACAnU,QAKA,MAJApF,EAAAiJ,MAAA,6BACAjJ,EAAAiJ,MAAA,iBAAAzP,KAAA2f,IAAAvB,cACA5X,EAAAiJ,MAAA,gBACAjJ,EAAAqJ,UAAA7P,KAAA2f,IAAAG,cACA,mBAES,GAAA9f,KAAA2f,IAAAvB,aAAA,CAIT,GAFA5X,EAAAkJ,MAAA,mFACAhD,GAAA,IAAAU,WAAAC,gBAAArN,KAAA2f,IAAAvB,aAAA,mBAAA2B,iBAEA,UAAA5hB,MAAA,8BACa,GAAAuO,EAAAsT,cAAA,eAGb,MAFAxZ,EAAAiJ,MAAA,8BAAA/C,EAAAsT,cAAA,eAAAC,aACAzZ,EAAAiJ,MAAA,iBAAAzP,KAAA2f,IAAAvB,cACA,YAGA,OAAA1R,GAWAkT,QAAA,WACA,IAAAD,EAAA,KAWA,OAVAzrB,OAAAgsB,gBACAP,EAAA,IAAAO,gBACAC,kBACAR,EAAAQ,iBAAA,2BAESjsB,OAAAsY,gBACTmT,EAAA,IAAAnT,cAAA,sBAGAmT,EAAAS,mBAAApgB,KAAAE,KAAApK,KAAA,KAAAkK,MACA2f,IA4BAnZ,EAAAuM,KAAA,SAAAuK,GACAtd,KAAAqgB,MAAA/C,EAEAtd,KAAAsW,IAAAxV,KAAAE,MAAA,WAAAF,KAAAwU,UAEAtV,KAAAqW,IAAA,KAGArW,KAAA4V,KAAA,EACA5V,KAAA2V,KAAA,GACA3V,KAAA9L,OAAA,EACA8L,KAAAsgB,OAAA,EACAtgB,KAAAugB,WAAA,KAEAvgB,KAAAwgB,oBAAA,KAEAxgB,KAAAgV,UAAA,IAGAxO,EAAAuM,KAAA7c,UAAA,CAYAgkB,MAAA,KAQAuG,WAAA,WACA,IAAA7F,EAAAnU,EAAA,QACA6P,IAAAtW,KAAAsW,MACAjG,MAAA7J,EAAAO,GAAAC,WAQA,OANA,OAAAhH,KAAAqW,KACAuE,EAAAlU,MAAA,CAA4B2P,IAAArW,KAAAqW,MAE5BrW,KAAAqgB,MAAA/O,QAAAoP,WAAA1gB,KAAAqgB,MAAA3J,4BACA1W,KAAA2gB,gBAEA/F,GAQA7F,OAAA,WACA/U,KAAAsW,IAAAxV,KAAAE,MAAA,WAAAF,KAAAwU,UACAtV,KAAAqW,IAAA,KACArW,KAAAsgB,OAAA,EACAtgB,KAAAqgB,MAAA3J,4BACAxiB,OAAA2iB,eAAAE,WAAA,wBAGA/W,KAAAqgB,MAAAjJ,aAAApX,KAAAsW,MAQAH,SAAA,SAAAR,EAAAC,EAAAC,GACA7V,KAAA2V,QAAA3V,KAAA2V,KACA3V,KAAA4V,QAAA5V,KAAA4V,KACA5V,KAAAsgB,OAAA,EAGA,IAAAzX,EAAA7I,KAAAygB,aAAA/Z,MAAA,CACA0V,GAAApc,KAAAqgB,MAAAta,OACA6a,WAAA,KACAjL,KAAA3V,KAAA2V,KACAC,KAAA5V,KAAA4V,KACAiL,QAAA,0BACAC,IAAA,MACAC,eAAA,MACAC,aAAAxa,EAAAO,GAAAE,OAGA4O,GACAhN,EAAAnC,MAAA,CACAmP,UAIA,IAAA6E,EAAA1a,KAAAqgB,MAAA3F,YAEA1a,KAAAgV,UAAAlX,KACA,IAAA0I,EAAAyY,QAAApW,EAAAkH,OACA/P,KAAAihB,sBAAAnrB,KACAkK,KAAA0a,EAAA5kB,KAAAkK,KAAAqgB,QACAxX,EAAAkH,OAAA9B,aAAA,SACAjO,KAAAkhB,4BA2BA1K,QAAA,SAAAjI,EAAA8H,EAAAC,EAAAjX,EAAAsW,EAAAC,EAAAW,GACAvW,KAAAqgB,MAAA9R,MACAvO,KAAAqW,MACArW,KAAAsW,MAEAtW,KAAAqgB,MAAApK,iBAAA5W,EAEAW,KAAAqgB,MAAAta,OAAAS,EAAAgI,iBAAAxO,KAAAqgB,MAAA9R,KAEAvO,KAAAqgB,MAAAvM,eAAA,EACA9T,KAAAqgB,MAAAtM,WAAA,EAEA/T,KAAA2V,QAAA3V,KAAA2V,KACA3V,KAAA4V,QAAA5V,KAAA4V,KACA5V,KAAA9L,OAAAqiB,GAAAvW,KAAA9L,OAEA8L,KAAAqgB,MAAAnK,qBAAA1P,EAAA6C,OAAAS,SAAA,OAsBA6M,SAAA,SAAApI,EAAAlP,EAAAsW,EAAAC,EAAAW,GACA,IAAA4K,EAAAvK,KAAAwK,MAAAltB,OAAA2iB,eAAAwK,QAAA,yBACA,WAAAF,GAEAA,EAAA7K,KACA6K,EAAA9K,KACA8K,EAAA5S,MACA,MAAAA,GAEA/H,EAAAkI,kBAAAyS,EAAA5S,OAAA/H,EAAAkI,kBAAAH,IAGA,OAAA/H,EAAA8H,eAAAC,IAAA/H,EAAAgI,iBAAA2S,EAAA5S,WAMA,MAAmB1Z,KAAA,sBAAAqa,QAAA,qCAHnBlP,KAAAqgB,MAAAlM,UAAA,EACAnU,KAAAwW,QAAA2K,EAAA5S,IAAA4S,EAAA9K,IAAA8K,EAAA7K,IAAAjX,EAAAsW,EAAAC,EAAAW,IAaAoK,cAAA,WACA3gB,KAAAqgB,MAAAvM,cACA9T,KAAAqgB,MAAA9R,KAAAvO,KAAAsW,KAAAtW,KAAAqW,KACAniB,OAAA2iB,eAAAC,QAAA,uBAAAF,KAAA0K,UAAA,CACA/S,IAAAvO,KAAAqgB,MAAA9R,IACA+H,IAAAtW,KAAAsW,IACAD,IAAArW,KAAAqW,OAIAniB,OAAA2iB,eAAAE,WAAA,yBAWA2D,YAAA,SAAAE,GACA,IACAP,EAAAC,EADAiH,EAAA3G,EAAA3M,aAAA,QAEA,UAAAsT,GAAA,cAAAA,EAcA,OAZAlH,EAAAO,EAAA3M,aAAA,aACAzH,EAAAiJ,MAAA,2BAAA4K,GACAC,EAAAM,EAAAL,qBAAA,YACA,OAAAF,GACA,wBAAAA,GAAAC,EAAArd,OAAA,IACAod,EAAA,YAEAra,KAAAqgB,MAAAnK,qBAAA1P,EAAA6C,OAAAG,SAAA6Q,IAEAra,KAAAqgB,MAAAnK,qBAAA1P,EAAA6C,OAAAG,SAAA,WAEAxJ,KAAAqgB,MAAA3G,cAAAW,GACA7T,EAAA6C,OAAAG,SAKAxJ,KAAAqW,MACArW,KAAAqW,IAAAuE,EAAA3M,aAAA,QAEA,IAAAsI,EAAAqE,EAAA3M,aAAA,YACAsI,IAAmBvW,KAAA9L,OAAAstB,SAAAjL,EAAA,KACnB,IAAAX,EAAAgF,EAAA3M,aAAA,QACA2H,IAAmB5V,KAAA4V,KAAA4L,SAAA5L,EAAA,KACnB,IAAAD,EAAAiF,EAAA3M,aAAA,QACA0H,IAAmB3V,KAAA2V,KAAA6L,SAAA7L,EAAA,KACnB,IAAA4K,EAAA3F,EAAA3M,aAAA,cACAsS,IAAyBvgB,KAAAugB,WAAAiB,SAAAjB,EAAA,MASzB/G,YAAA,SAAAH,GACArZ,KAAAyhB,eAAApI,IAQAK,cAAA,WACA1Z,KAAAqW,IAAA,KACArW,KAAAsW,IAAAxV,KAAAE,MAAA,WAAAF,KAAAwU,UACAtV,KAAAqgB,MAAA3J,4BACAxiB,OAAA2iB,eAAAE,WAAA,wBAGA/W,KAAAqgB,MAAAjJ,aAAApX,KAAAsW,MASA8D,YAAA,WACA,WAAApa,KAAAgV,UAAA/X,QASAykB,2BAAA,SAAAvmB,GACA,IACAwmB,EADAC,EAAA5hB,KAAA6hB,kBAAA1mB,IAEAwmB,EAAA3hB,KAAAqgB,MAAA5M,sBAAAC,KAAAkO,KAEAD,EAAAltB,KAAAuL,KAAA4hB,IAcAE,UAAA,SAAAF,GACA5hB,KAAAsgB,SACA9Z,EAAAoJ,KAAA,4BAAAgS,EACA,uBAAA5hB,KAAAsgB,QACAtgB,KAAAsgB,OAAA,GACAtgB,KAAAqgB,MAAA9G,wBASA0B,kBAAA,SAAA5b,GACAmH,EAAAoJ,KAAA,gGAGAvQ,EADAA,EACAA,EAAAvJ,KAAAkK,KAAAqgB,OAEArgB,KAAAqgB,MAAA3F,YAAA5kB,KAAAkK,KAAAqgB,OAEA,IAAAxX,EAAA7I,KAAAygB,aACAzgB,KAAAgV,UAAAlX,KACA,IAAA0I,EAAAyY,QACApW,EAAAkH,OACA/P,KAAAihB,sBAAAnrB,KAAAkK,KAAAX,GACAwJ,EAAAkH,OAAA9B,aAAA,SAGAjO,KAAAkhB,4BAQA3H,qBAAA,WACAvZ,KAAAyZ,qBAMAA,kBAAA,WAEA,IADA,IAAAte,EACA6E,KAAAgV,UAAA/X,OAAA,IACA9B,EAAA6E,KAAAgV,UAAAmF,OACAoF,OAAA,EACApkB,EAAAwkB,IAAAJ,QAGApkB,EAAAwkB,IAAAS,mBAAA,cASA1L,QAAA,WACA,IAAAnR,EAAAvD,KAAAqgB,MAAAjM,MASA,GAPApU,KAAAqgB,MAAAvM,eAAA,IAAA9T,KAAAgV,UAAA/X,QACA,IAAAsG,EAAAtG,SAAA+C,KAAAqgB,MAAArM,gBACAxN,EAAAmJ,KAAA,wDAEApM,EAAAzF,KAAA,QAGAkC,KAAAqgB,MAAAnM,OAAA,CAIA,GAAAlU,KAAAgV,UAAA/X,OAAA,GAAAsG,EAAAtG,OAAA,GAEA,IADA,IAAA4L,EAAA7I,KAAAygB,aACAnsB,EAAA,EAA2BA,EAAAiP,EAAAtG,OAAiB3I,IAC5C,OAAAiP,EAAAjP,KACA,YAAAiP,EAAAjP,GACAuU,EAAAnC,MAAA,CACA0V,GAAApc,KAAAqgB,MAAAta,OACA6a,WAAA,KACAmB,eAAA,OACAf,aAAAxa,EAAAO,GAAAE,OAGA4B,EAAA8H,MAAApN,EAAAjP,IAAAic,aAIAvQ,KAAAqgB,MAAAjM,MACApU,KAAAqgB,MAAAjM,MAAA,GACApU,KAAAgV,UAAAlX,KACA,IAAA0I,EAAAyY,QAAApW,EAAAkH,OACA/P,KAAAihB,sBAAAnrB,KACAkK,UAAAqgB,MAAAtG,UAAAjkB,KAAAkK,KAAAqgB,QACAxX,EAAAkH,OAAA9B,aAAA,SACAjO,KAAAkhB,2BAGA,GAAAlhB,KAAAgV,UAAA/X,OAAA,GACA,IAAA+kB,EAAAhiB,KAAAgV,UAAA,GAAAyK,MACA,OAAAzf,KAAAgV,UAAA,GAAAwK,MACAxf,KAAAgV,UAAA,GAAA0K,WACA5e,KAAAE,MAAAwF,EAAA0E,kBAAAlL,KAAA2V,OACA3V,KAAAkhB,2BAIAc,EAAAlhB,KAAAE,MAAAwF,EAAAyE,QAAAjL,KAAA2V,QACAnP,EAAAoJ,KAAA,WACA5P,KAAAgV,UAAA,GAAA9V,GACA,oBAAA4B,KAAAE,MAAAwF,EAAAyE,QAAAjL,KAAA2V,MACA,gCACA3V,KAAAkhB,+BAcAW,kBAAA,SAAA1mB,EAAA8mB,GACA,IAAAL,EACA,OAAAzmB,EAAAwkB,IAAAuC,WACA,IACAN,EAAAzmB,EAAAwkB,IAAAhG,OACa,MAAA1a,GAGbuH,EAAAiJ,MACA,mEACAmS,GAMA,YAHA,QACAA,EAAA,iBAAAK,IAAA,GAEAL,GAeAX,sBAAA,SAAA/gB,EAAA/E,GAGA,GAFAqL,EAAAkJ,MAAA,cAAAvU,EAAA+D,GAAA,IAAA/D,EAAA+jB,MACA,qBAAA/jB,EAAAwkB,IAAAuC,YACA/mB,EAAAokB,MACApkB,EAAAokB,OAAA,OAGA,OAAApkB,EAAAwkB,IAAAuC,WAAA,CAIA,IAAAN,EAAA5hB,KAAA6hB,kBAAA1mB,GAEA,GADA6E,KAAAwgB,oBAAArlB,EAAAwkB,IAAAwC,wBACAniB,KAAAgU,eAAA4N,GAAA,IAGA,OAFA5hB,KAAA8hB,UAAAF,QACA5hB,KAAA0hB,2BAAAvmB,GAIA,IAAAinB,EAAAR,EAAA,GAAAA,EAAA,IACAS,EAAAlnB,EAAA+jB,MAAAlf,KAAAqgB,MAAA5L,WAOA,IANA2N,GAAAC,KAEAriB,KAAAsiB,eAAAnnB,GACAqL,EAAAkJ,MAAA,cAAAvU,EAAA+D,GAAA,2BAGA,MAAA0iB,EAAA,CAEA,IAAAW,EAAAviB,KAAAgV,UAAA,KAAA7Z,GACA6E,KAAAgV,UAAA,KAAA7Z,GAMAonB,GAAAviB,KAAAgV,UAAA/X,OAAA,GACA+C,KAAAgV,UAAA,GAAAyK,MAAA3e,KAAAE,MAAAwF,EAAA0E,kBAAAlL,KAAA2V,QACA3V,KAAAwiB,gBAAA,GAEAxiB,KAAAqgB,MAAAjJ,aAAAvW,OAAA1F,EAAAmb,KAAA,GACA9P,EAAAkJ,MAAA,cAAAvU,EAAA+D,GAAA,IAAA/D,EAAA+jB,MAAA,YACAhf,EAAA/E,GACA6E,KAAAsgB,OAAA,OACS,IAAAsB,GACTA,GAAA,KAAAA,EAAA,KACAA,GAAA,MAEApb,EAAAiJ,MAAA,cAAAtU,EAAA+D,GAAA,IAAA/D,EAAA+jB,MAAA,UAAA0C,EAAA,aACA5hB,KAAA8hB,UAAAF,GACA5hB,KAAA0hB,2BAAAvmB,GACAymB,GAAA,KAAAA,EAAA,MACA5hB,KAAAqgB,MAAAnK,qBAAA1P,EAAA6C,OAAAQ,cAAA,MACA7J,KAAAqgB,MAAA3G,kBAGAlT,EAAAiJ,MAAA,cAAAtU,EAAA+D,GAAA,IAAA/D,EAAA+jB,MAAA,UAAA0C,EAAA,aAGAQ,GAAAC,EAESA,IAAAriB,KAAAqgB,MAAAtM,WACT/T,KAAAqgB,MAAAnK,qBAAA1P,EAAA6C,OAAAG,SAAA,aAFAxJ,KAAAkhB,6BAeAuB,gBAAA,SAAAnuB,GACA,IAAAouB,EAAA1iB,KACA7E,EAAA6E,KAAAgV,UAAA1gB,GACAstB,EAAA5hB,KAAA6hB,kBAAA1mB,GAAA,GAGA,GAAAA,EAAA+jB,MAAAlf,KAAAqgB,MAAA5L,WACAzU,KAAAqgB,MAAA9G,2BADA,CAKA,IAAAyI,EAAA7mB,EAAAskB,MACAkD,GAAAvgB,MAAA4f,IACAA,EAAAlhB,KAAAE,MAAAwF,EAAAyE,QAAAjL,KAAA2V,MACAiN,EAAA,OAAAznB,EAAAqkB,MACArkB,EAAAukB,WAAA5e,KAAAE,MAAAwF,EAAA0E,kBAAAlL,KAAA2V,MACAkN,EAAA,IAAA1nB,EAAAwkB,IAAAuC,aACAN,EAAA,GAAAA,GAAA,KAkBA,IAjBAe,GAAAC,GACAC,KACAD,GACApc,EAAAiJ,MAAA,WAAAzP,KAAAgV,UAAA1gB,GAAA4K,GACA,sCAEA/D,EAAAokB,OAAA,EACApkB,EAAAwkB,IAAAJ,QAEApkB,EAAAwkB,IAAAS,mBAAA,aACApgB,KAAAgV,UAAA1gB,GAAA,IAAAkS,EAAAyY,QAAA9jB,EAAAgkB,QACAhkB,EAAAikB,SACAjkB,EAAAmb,IACAnb,EAAA+jB,OACA/jB,EAAA6E,KAAAgV,UAAA1gB,IAGA,IAAA6G,EAAAwkB,IAAAuC,WAAA,CACA1b,EAAAkJ,MAAA,cAAAvU,EAAA+D,GAAA,IAAA/D,EAAA+jB,MAAA,YAEA,IACA,IAAA4D,EAAA9iB,KAAAqgB,MAAA/O,QAAAwR,aAAA,0BACA3nB,EAAAwkB,IAAAoD,KAAA,OAAA/iB,KAAAqgB,MAAA3N,SAAA1S,KAAAqgB,MAAA/O,QAAA0R,WACA,IAAA7nB,EAAAwkB,IAAAsD,kBAEA9nB,EAAAwkB,IAAAsD,iBAAA,eAAAH,GAEA9iB,KAAAqgB,MAAA/O,QAAA4R,kBACA/nB,EAAAwkB,IAAAuD,iBAAA,GAEa,MAAAC,GAOb,OANA3c,EAAAiJ,MAAA,oBAAA0T,EAAA1iB,YACAT,KAAAqgB,MAAAtM,WACA/T,KAAAqgB,MAAAnK,qBACA1P,EAAA6C,OAAAG,SAAA,oBAEAxJ,KAAAqgB,MAAAlH,aAMA,IAAAiK,EAAA,WAEA,GADAjoB,EAAAkkB,KAAA,IAAA/M,KACAoQ,EAAArC,MAAA/O,QAAA+R,cAAA,CACA,IAAAC,EAAAZ,EAAArC,MAAA/O,QAAA+R,cACA,QAAAE,KAAAD,EACAA,EAAAntB,eAAAotB,IACApoB,EAAAwkB,IAAAsD,iBAAAM,EAAAD,EAAAC,IAIApoB,EAAAwkB,IAAAtI,KAAAlc,EAAAoI,OAKA,GAAApI,EAAA+jB,MAAA,GAGA,IAAAsE,EACA,IADA1iB,KAAA2iB,IAAA3iB,KAAAE,MAAAwF,EAAAyE,QAAAjL,KAAA2V,MACA7U,KAAA4iB,IAAAvoB,EAAA+jB,MAAA,IACAtf,WAAA,WAEAwjB,KACiBI,QAEjBJ,IAGAjoB,EAAA+jB,QAEAlf,KAAAqgB,MAAApJ,YAAAzQ,EAAAiM,WAAAvc,UAAA+gB,YACA9b,EAAAgkB,QAAAxR,WAAA3N,KAAAka,OAAA/e,EAAAgkB,QAAA3T,WAAAvO,OACA+C,KAAAqgB,MAAApJ,UAAA9b,EAAAgkB,QAAA3T,WAAA,IAEAxL,KAAAqgB,MAAApJ,UAAA9b,EAAAgkB,UAGAnf,KAAAqgB,MAAAlJ,YAAA3Q,EAAAiM,WAAAvc,UAAAihB,WACAnX,KAAAqgB,MAAAlJ,UAAAhc,EAAAoI,WAGAiD,EAAAkJ,MAAA,qBACA,IAAApb,EAAA,kBACA,8BACA6G,EAAAwkB,IAAAuC,cAUAI,eAAA,SAAAnnB,GAEA,IAAA7G,EACA,IAFAkS,EAAAkJ,MAAA,oBAEApb,EAAA0L,KAAAgV,UAAA/X,OAAA,EAA2C3I,GAAA,EAAQA,IACnD6G,IAAA6E,KAAAgV,UAAA1gB,IACA0L,KAAAgV,UAAAzX,OAAAjJ,EAAA,GAIA6G,EAAAwkB,IAAAS,mBAAA,aACApgB,KAAAkhB,4BASAsB,gBAAA,SAAAluB,GACA,IAAA6G,EAAA6E,KAAAgV,UAAA1gB,GACA,OAAA6G,EAAAqkB,OACArkB,EAAAqkB,KAAA,IAAAlN,MAGAtS,KAAAyiB,gBAAAnuB,IAeA2lB,WAAA,SAAA9e,GACA,IACA,OAAAA,EAAA0kB,cACS,MAAA5gB,GACT,mBAAAA,EAAsC,MAAAA,EACtCe,KAAAqgB,MAAAlH,WAAA,yBAWAsI,eAAA,SAAApI,GACA7S,EAAAmJ,KAAA,6BACA,IAAA9G,EAAA7I,KAAAygB,aAAA/Z,MAAA,CAA4C2K,KAAA,cAC5CgI,GACAxQ,EAAA8H,MAAA0I,EAAAtJ,QAEA,IAAA5U,EAAA,IAAAqL,EAAAyY,QACApW,EAAAkH,OACA/P,KAAAihB,sBAAAnrB,KACAkK,UAAAqgB,MAAAtG,UAAAjkB,KAAAkK,KAAAqgB,QACAxX,EAAAkH,OAAA9B,aAAA,QAEAjO,KAAAgV,UAAAlX,KAAA3C,GACA6E,KAAAkhB,4BAQA3J,MAAA,WACAE,aAAAzX,KAAAqgB,MAAAzM,cACA5T,KAAAkhB,2BAGAlhB,KAAAqgB,MAAAzM,aAAAhU,WAAA,WACAI,KAAA0U,WACS5e,KAAAkK,KAAAqgB,OAAA,MAOT/H,aAAA,WACAtY,KAAAkhB,2BACAzJ,aAAAzX,KAAAqgB,MAAAzM,eAUAsN,yBAAA,WACAlhB,KAAAgV,UAIAxO,EAAAkJ,MAAA,wCACA1P,KAAAgV,UAAA/X,OAAA,aAJAuJ,EAAAkJ,MAAA,2DAOA1P,KAAAgV,WAAA,IAAAhV,KAAAgV,UAAA/X,SAIA+C,KAAAgV,UAAA/X,OAAA,GACA+C,KAAAyiB,gBAAA,GAGAziB,KAAAgV,UAAA/X,OAAA,GACA6D,KAAA6iB,IAAA3jB,KAAAgV,UAAA,GAAAsB,IACAtW,KAAAgV,UAAA,GAAAsB,KAAAtW,KAAA9L,QACA8L,KAAAyiB,gBAAA,MAIAjc,IAaA,SAAA5S,EAAAC,GACA,sBAAAG,KAAAC,IACAD,EAAA,8CAAAgrB,GACA,OAAAnrB,EACAmrB,EAAAxY,QACAwY,EAAAvY,cAGK,CACL,IAAAuY,EAAAhkB,EAAA,UAEAjH,EAAAD,QAAAD,EAAAmrB,EAAAxY,QAAAwY,EAAAvY,SAXA,CAgBCzG,EAAA,SAAAwG,EAAAC,GAyhBD,OA1fAD,EAAAsM,UAAA,SAAAwK,GACAtd,KAAAqgB,MAAA/C,EACAtd,KAAAka,MAAA,UAEA,IAAAxH,EAAA4K,EAAA5K,QACA,OAAAA,EAAAnU,QAAA,YAAAmU,EAAAnU,QAAA,SAGA,IAAAqlB,EAAA,GAEA,OAAAtG,EAAAhM,QAAAsB,UAAA,WAAA1e,OAAA2vB,SAAAjR,SACAgR,GAAA,KAEAA,GAAA,MAGAA,GAAA,MAAA1vB,OAAA2vB,SAAAnF,KAEA,IAAAhM,EAAAnU,QAAA,KACAqlB,GAAA1vB,OAAA2vB,SAAAC,SAAApR,EAEAkR,GAAAlR,EAGA4K,EAAA5K,QAAAkR,IAIApd,EAAAsM,UAAA5c,UAAA,CAOA6tB,aAAA,WACA,OAAAtd,EAAA,QACA4J,MAAA7J,EAAAO,GAAAY,QACAyU,GAAApc,KAAAqgB,MAAAta,OACAie,QAAA,SAaAC,mBAAA,SAAArJ,EAAAsJ,GACA,IAAA5D,EAMA,QAJAA,EADA1F,EAAAC,uBACAD,EAAAC,uBAAArU,EAAAO,GAAAW,OAAA,SAEAkT,EAAAL,qBAAA,iBAEAtd,OACA,SAQA,IANA,IAAAwS,EAAA6Q,EAAA,GAEA1G,EAAA,GACA7M,EAAA,GAGAzY,EAAA,EAAuBA,EAAAmb,EAAAjE,WAAAvO,OAA6B3I,IAAA,CACpD,IAAA2K,EAAAwQ,EAAAjE,WAAAlX,GACA,GAHA,wCAGA2K,EAAAgP,aAAA,SACA,MACa,SAAAhP,EAAA0O,SACbZ,EAAA9N,EAAAghB,YAEArG,EAAA3a,EAAA0O,SAIA,IAAAwW,EAAA,2BAiBA,OAdAA,GADAvK,GAGA,UAGA7M,IACAoX,GAAA,MAAApX,GAGAvG,EAAAiJ,MAAA0U,GAGAnkB,KAAAqgB,MAAAnK,qBAAAgO,EAAAtK,GACA5Z,KAAAqgB,MAAA3G,iBACA,GASA3E,OAAA,aAUAoB,SAAA,WAEAnW,KAAAokB,eAGApkB,KAAAqkB,OAAA,IAAAC,UAAAtkB,KAAAqgB,MAAA3N,QAAA,QACA1S,KAAAqkB,OAAAE,OAAAvkB,KAAAwkB,QAAA1uB,KAAAkK,MACAA,KAAAqkB,OAAAI,QAAAzkB,KAAA0kB,SAAA5uB,KAAAkK,MACAA,KAAAqkB,OAAAM,QAAA3kB,KAAA4kB,SAAA9uB,KAAAkK,MACAA,KAAAqkB,OAAAQ,UAAA7kB,KAAA8kB,oBAAAhvB,KAAAkK,OAWA0a,YAAA,SAAAE,GAEA,GADA5a,KAAAikB,mBAAArJ,EAAApU,EAAA6C,OAAAG,UAEA,OAAAhD,EAAA6C,OAAAG,UAYAub,mBAAA,SAAA7V,GACA,IAAAO,GAAA,EAGA9Z,EAAAuZ,EAAAjB,aAAA,SACA,iBAAAtY,EACA8Z,EAAA,4BACS9Z,IAAA6Q,EAAAO,GAAAY,UACT8H,EAAA,4BAAA9Z,GAGA,IAAAmrB,EAAA5R,EAAAjB,aAAA,WAOA,MANA,iBAAA6S,EACArR,EAAA,8BACS,QAAAqR,IACTrR,EAAA,8BAAAqR,IAGArR,IACAzP,KAAAqgB,MAAAnK,qBAAA1P,EAAA6C,OAAAG,SAAAiG,GACAzP,KAAAqgB,MAAA3G,iBACA,IAYAoL,oBAAA,SAAA5V,GACA,OAAAA,EAAA3L,KAAAhF,QAAA,eAAA2Q,EAAA3L,KAAAhF,QAAA,UAEA,IAAAgF,EAAA2L,EAAA3L,KAAAnG,QAAA,uBACA,QAAAmG,EAAA,OAEA,IAAAyhB,GAAA,IAAA5X,WAAAC,gBAAA9J,EAAA,YAAAwc,gBACA/f,KAAAqgB,MAAArJ,SAAAgO,GACAhlB,KAAAqgB,MAAAnJ,SAAAhI,EAAA3L,MAGAvD,KAAA+kB,mBAAAC,IAEAhlB,KAAA0a,YAAAsK,QAES,OAAA9V,EAAA3L,KAAAhF,QAAA,YAET,IAAA0mB,GAAA,IAAA7X,WAAAC,gBAAA6B,EAAA3L,KAAA,YAAAwc,gBAEA/f,KAAAqgB,MAAArJ,SAAAiO,GACAjlB,KAAAqgB,MAAAnJ,SAAAhI,EAAA3L,MACA,IAAA2hB,EAAAD,EAAAhX,aAAA,iBACA,GAAAiX,EAAA,CACA,IAAAxS,EAAA1S,KAAAqgB,MAAA3N,SAEAA,EAAAnU,QAAA,YAAA2mB,EAAA3mB,QAAA,YAAAmU,EAAAnU,QAAA,aAEAyB,KAAAqgB,MAAAnK,qBACA1P,EAAA6C,OAAAU,SACA,gDAEA/J,KAAAqgB,MAAA7N,QACAxS,KAAAqgB,MAAA3N,QAAAwS,EACAllB,KAAAmW,iBAGAnW,KAAAqgB,MAAAnK,qBACA1P,EAAA6C,OAAAG,SACA,2BAEAxJ,KAAAqgB,MAAA3G,oBAES,CACT,IAAAyL,EAAAnlB,KAAAolB,YAAAlW,EAAA3L,MACA8H,GAAA,IAAA+B,WAAAC,gBAAA8X,EAAA,YAAApF,gBACA/f,KAAAqkB,OAAAQ,UAAA7kB,KAAAqlB,WAAAvvB,KAAAkK,MACAA,KAAAqgB,MAAA3F,YAAArP,EAAA,KAAA6D,EAAA3L,QAYAiW,YAAA,SAAAH,GACA,GAAArZ,KAAAqkB,QAAArkB,KAAAqkB,OAAAnC,aAAAoC,UAAAgB,OAAA,CACAjM,GACArZ,KAAAqgB,MAAAhJ,KAAAgC,GAEA,IAAAkM,EAAA9e,EAAA,SAAyC4J,MAAA7J,EAAAO,GAAAY,UACzC3H,KAAAqgB,MAAApJ,UAAAsO,EAAAxV,QACA,IAAAyV,EAAAhf,EAAAqJ,UAAA0V,GACAvlB,KAAAqgB,MAAAlJ,UAAAqO,GACA,IACAxlB,KAAAqkB,OAAAhN,KAAAmO,GACa,MAAAvmB,GACbuH,EAAAmJ,KAAA,iCAGA3P,KAAAqgB,MAAA3G,iBAQAA,cAAA,WACAlT,EAAAmJ,KAAA,uCACA3P,KAAAokB,gBAOAgB,YAAA,SAAArN,GACA,kBAAAA,EAAA,cASAqM,aAAA,WACA,GAAApkB,KAAAqkB,OAA0B,IAC1BrkB,KAAAqkB,OAAAI,QAAA,KACAzkB,KAAAqkB,OAAAkB,QACS,MAAAtmB,IACTe,KAAAqkB,OAAA,MASAjK,YAAA,WACA,UAQAwK,SAAA,SAAA3lB,GACAe,KAAAqgB,MAAAtM,YAAA/T,KAAAqgB,MAAArM,eACAxN,EAAAiJ,MAAA,iCACAzP,KAAAqgB,MAAA3G,iBACSza,GAAA,OAAAA,EAAAwmB,OAAAzlB,KAAAqgB,MAAAtM,WAAA/T,KAAAqkB,QAKT7d,EAAAiJ,MAAA,iCACAzP,KAAAqgB,MAAAnK,qBACA1P,EAAA6C,OAAAG,SACA,0EAEAxJ,KAAAqgB,MAAA3G,iBAEAlT,EAAAmJ,KAAA,qBASAsL,kBAAA,SAAA5b,GACAmH,EAAAiJ,MAAA,6DACAzP,KAAAkW,qBACA1P,EAAA6C,OAAAG,SACAhD,EAAAyD,eAAAI,cAEAhL,GACAA,EAAA5K,KAAAuL,KAAAqgB,OAEArgB,KAAAqgB,MAAA3G,iBAQAH,qBAAA,aAKAE,kBAAA,aAQAiL,SAAA,SAAAjV,GACAjJ,EAAAiJ,MAAA,mBAAAA,GACAzP,KAAAqgB,MAAAnK,qBACA1P,EAAA6C,OAAAG,SACA,0EAEAxJ,KAAAwZ,eAQA9E,QAAA,WACA,IAAAnR,EAAAvD,KAAAqgB,MAAAjM,MACA,GAAA7Q,EAAAtG,OAAA,IAAA+C,KAAAqgB,MAAAnM,OAAA,CACA,QAAA5f,EAAA,EAA2BA,EAAAiP,EAAAtG,OAAiB3I,IAAA,CAE5C,IAAAyjB,EAAA2N,EADA,OAAAniB,EAAAjP,KAGAyjB,EADA,YAAAxU,EAAAjP,GACA0L,KAAA+jB,eAAAhU,OAEAxM,EAAAjP,GAEAoxB,EAAAlf,EAAAqJ,UAAAkI,GACA/X,KAAAqgB,MAAApJ,UAAAc,GACA/X,KAAAqgB,MAAAlJ,UAAAuO,GACA1lB,KAAAqkB,OAAAhN,KAAAqO,IAGA1lB,KAAAqgB,MAAAjM,MAAA,KA2BAiR,WAAA,SAAAnW,GACA,IAAA7D,EAAA9H,EAEAgiB,EAAA,wDACA,GAAArW,EAAA3L,OAAAgiB,EAMA,OALAvlB,KAAAqgB,MAAAnJ,SAAAqO,GACAvlB,KAAAqgB,MAAArJ,SAAA9H,QACAlP,KAAAqgB,MAAArM,eACAhU,KAAAqgB,MAAA3G,iBAGS,OAAAxK,EAAA3L,KAAAoiB,OAAA,WAGT,GADAta,GAAA,IAAA+B,WAAAC,gBAAA6B,EAAA3L,KAAA,YAAAwc,iBACA/f,KAAA+kB,mBAAA1Z,GACA,YAGA9H,EAAAvD,KAAAolB,YAAAlW,EAAA3L,MACA8H,GAAA,IAAA+B,WAAAC,gBAAA9J,EAAA,YAAAwc,gBAGA,OAAA/f,KAAAikB,mBAAA5Y,EAAA7E,EAAA6C,OAAAC,YAAA,EAKAtJ,KAAAqgB,MAAArM,eACA,aAAA3I,EAAAua,WAAAjY,UACA,gBAAAtC,EAAAua,WAAA3X,aAAA,SACAjO,KAAAqgB,MAAArJ,SAAA3L,QACArL,KAAAqgB,MAAAnJ,SAAA1Q,EAAAqJ,UAAAxE,UAKArL,KAAAqgB,MAAAtG,UAAA1O,EAAA6D,EAAA3L,OAQAihB,QAAA,WACAhe,EAAAmJ,KAAA,kBACA,IAAAkW,EAAA7lB,KAAA+jB,eACA/jB,KAAAqgB,MAAApJ,UAAA4O,EAAA9V,QAEA,IAAA+V,EAAAtf,EAAAqJ,UAAAgW,GACA7lB,KAAAqgB,MAAAlJ,UAAA2O,GACA9lB,KAAAqkB,OAAAhN,KAAAyO,IAcA7L,WAAA,SAAAlC,GACA,OAAAA,GAQAR,MAAA,WACAvX,KAAAqgB,MAAA7I,SAOAc,aAAA,WACAb,aAAAzX,KAAAqgB,MAAAzM,cACA5T,KAAAqgB,MAAA3L,QAAA5e,KAAAkK,KAAAqgB,MAAArgB,KAGAwG,IAGA,SAAA5S,GACA,sBAAAI,KAAAC,IACAD,EAAA,WACA,eACA,eACA,qBACA,SAAA6oB,GACA,OAAAA,QAEK,CACL,IAAAmC,EAAAhkB,EAAA,UACAA,EAAA,UACAA,EAAA,eACAjH,EAAAD,QAAAkrB,GAbA,GAkBAhkB,EAAA,sBAMAA,EAAA,aApwM0BL,EAAAoD,MAAAjK,EAAA8G,GAAAD,KAAA5G,EAAAD,QAAA+G,iCCzB1BzG,EAAAgB,EAAA2wB,GAAA3xB,EAAAQ,EAAAmxB,EAAA,wCAAAC,IAAA5xB,EAAAQ,EAAAmxB,EAAA,mCAAAE,IAAA7xB,EAAAQ,EAAAmxB,EAAA,+CAAAG,IAAA9xB,EAAAQ,EAAAmxB,EAAA,qCAAAI,IAAA/xB,EAAAQ,EAAAmxB,EAAA,sCAAAK,IAAAhyB,EAAAQ,EAAAmxB,EAAA,sCAAAM,IAAAjyB,EAAAQ,EAAAmxB,EAAA,oCAAAO,IAAAlyB,EAAAQ,EAAAmxB,EAAA,2CAAA/uB,IAAA5C,EAAAQ,EAAAmxB,EAAA,2CAAA7uB,IAAA9C,EAAAQ,EAAAmxB,EAAA,wCAAA5uB,IAAA/C,EAAAQ,EAAAmxB,EAAA,wCAAAQ,IAAAnyB,EAAAQ,EAAAmxB,EAAA,yCAAA1uB,IAAAjD,EAAAQ,EAAAmxB,EAAA,6CAAAS,IAAApyB,EAAAQ,EAAAmxB,EAAA,yCAAAU,IAAAryB,EAAAQ,EAAAmxB,EAAA,8CAAAW,IAAAtyB,EAAAQ,EAAAmxB,EAAA,kCAAAY,IAAAvyB,EAAAQ,EAAAmxB,EAAA,2BAAA/tB,IAAA5D,EAAAQ,EAAAmxB,EAAA,6CAAAa,IAAAxyB,EAAAQ,EAAAmxB,EAAA,uCAAAc,IAAAzyB,EAAAQ,EAAAmxB,EAAA,0CAAAe,IAAA1yB,EAAAQ,EAAAmxB,EAAA,qCAAA7tB,IAAA9D,EAAAQ,EAAAmxB,EAAA,6CAAA5tB,IAAA/D,EAAAQ,EAAAmxB,EAAA,oDAAAgB,IAAA3yB,EAAAQ,EAAAmxB,EAAA,gDAAAhtB,IAAA3E,EAAAQ,EAAAmxB,EAAA,iDAAAiB,IAAA5yB,EAAAQ,EAAAmxB,EAAA,+BAAAkB,IAAA7yB,EAAAQ,EAAAmxB,EAAA,yCAAA7sB,IAAA9E,EAAAQ,EAAAmxB,EAAA,uCAAAmB,IAAA9yB,EAAAQ,EAAAmxB,EAAA,2CAAAxsB,IAAAnF,EAAAQ,EAAAmxB,EAAA,sDAAAxrB,IAAAnG,EAAAQ,EAAAmxB,EAAA,uDAAAvrB,IAAApG,EAAAQ,EAAAmxB,EAAA,+CAAAoB,IAAA/yB,EAAAQ,EAAAmxB,EAAA,kCAAAqB,IAAAhzB,EAAAQ,EAAAmxB,EAAA,oCAAA5rB,IAAA/F,EAAAQ,EAAAmxB,EAAA,qCAAA3rB,IAAAhG,EAAAQ,EAAAmxB,EAAA,qCAAAsB,IAAAjzB,EAAAQ,EAAAmxB,EAAA,gCAAAuB,IAAAlzB,EAAAQ,EAAAmxB,EAAA,8CAAAwB,IAAAnzB,EAAAQ,EAAAmxB,EAAA,uCAAAyB,IAAApzB,EAAAQ,EAAAmxB,EAAA,kCAAA0B,IAAArzB,EAAAQ,EAAAmxB,EAAA,iDAAA1rB,IAAAjG,EAAAQ,EAAAmxB,EAAA,gCAAA2B,IAAAtzB,EAAAQ,EAAAmxB,EAAA,8BAAA4B,IAAAvzB,EAAAQ,EAAAmxB,EAAA,sCAAA6B,IAAAxzB,EAAAQ,EAAAmxB,EAAA,wCAAA8B,IAAAzzB,EAAAQ,EAAAmxB,EAAA,qCAAA+B,IAOO,IAAM9B,EAAsB,iCAKtBC,EAAiB,2BAOjBC,EAA6B,sCAK7BC,EAAmB,mBAKnBC,EAAoB,oBAMpBC,EAAoB,oBAKpBC,EAAkB,kBAOlBtvB,EAAyB,mCAOzBE,EAAyB,mCAMzBC,EAAsB,gCAKtBovB,EAAsB,+BAKtBlvB,EAAuB,gCAKvBmvB,EAA2B,6BAK3BC,EAAuB,gCAMvBC,EAA4B,uCAgB5BC,EAAgB,0BAKhB3uB,EAAS,oBAUT4uB,EAA2B,mCAK3BC,EAAqB,gCAOrBC,EAAwB,mCAKxB5uB,EAAmB,6BAKnBC,EAA2B,oCAgB3B4uB,EACP,6CAKOhuB,EACP,yCAMOiuB,EACP,0CAOOC,EAAa,uBAKb/tB,EAAuB,gCAMvBguB,EAAqB,+BAKrB3tB,EAAyB,kCAMzBgB,EACP,2CAWOC,EACP,2CAKO2sB,EACP,wCAKOC,EAAgB,2BAKhBjtB,EAAkB,4BAKlBC,EAAmB,6BAKnBitB,EAAmB,8BAQnBC,EAAc,wBAKdC,EAA4B,gCAK5BC,EAAqB,8BAQrBC,EAAgB,0BAQhBptB,EACP,wCAMOqtB,EAAc,wBAKdC,EAAY,sBAKZC,EAAoB,yBAKpBC,EAAsB,2BAKtBC,EAAmB,4DC1ShC,IAAAC,EAAA3zB,EAAA,IAEe2xB,EAAA,MAAIiC,qBCYnB,IAAAC,EAAa7zB,EAAQ,IACrB8zB,EAAmB9zB,EAAQ,KAwB3B+zB,EAAA,GAKAC,EAAA,GAKAC,EAAAJ,EAAAK,OAAAC,MAGAx0B,EAAAD,QAAA,CAMA00B,mBAAA,SAAAC,GACAR,EAAAO,mBAAAC,IAOAC,sBAAA,SAAAD,GACAR,EAAAS,sBAAAD,IAMAE,UAAA,SAAAzpB,EAAA0pB,EAAAC,GACA,IAAAC,EAAA,IAAAb,EAAAI,EAAAnpB,EAAA0pB,EAAAC,GAOA,OANA3pB,GACAipB,EAAAjpB,GAAAipB,EAAAjpB,IAAA,GACAipB,EAAAjpB,GAAApB,KAAAgrB,IAEAV,EAAAtqB,KAAAgrB,GAEAA,GASAC,gBAAA,SAAAzZ,EAAApQ,GAEA,IADA,IAAA3K,EAAA2K,EAAAipB,EAAAjpB,IAAA,GAAAkpB,EACA9zB,EAAA,EAAsBA,EAAAC,EAAA0I,OAAc3I,IACpCC,EAAAD,GAAA00B,SAAA1Z,IAOA2Z,YAAA,SAAA3Z,GACA+Y,EAAA/Y,EAEA,IADA,IAAAhb,EAAA,EACaA,EAAA8zB,EAAAnrB,OAAoB3I,IACjC8zB,EAAA9zB,GAAA00B,SAAA1Z,GAGA,QAAApQ,KAAAipB,EAAA,CACA,IAAA5zB,EAAA4zB,EAAAjpB,IAAA,GACA,IAAA5K,EAAA,EAAsBA,EAAAC,EAAA0I,OAAc3I,IACpCC,EAAAD,GAAA00B,SAAA1Z,KAOAgZ,OAAAL,EAAAK,OAIAJ,4aC3GA,IAMIgB,EANEJ,EAAS9tB,EAAQ,GAAqB2tB,UAAUQ,GAWlDC,GAAoB,EAmCxB,SAASC,EAAsB/X,GAC3B,IAAIgY,IAAUC,uBAAd,CAIA,IAAMC,EAAWC,IAASC,kBAErBJ,IAAUK,YAAY,CACvBC,YAAatY,EAAQsY,YACrBC,gBAAiBvY,EAAQuY,gBACzBL,SAAUlY,EAAQwY,qBACZxY,EAAQyY,mBAAqBP,EACnCQ,UAAW1Y,EAAQwY,qBACbN,EAAWlY,EAAQyY,mBACzBE,gBAAiB3Y,EAAQ2Y,gBACzBC,mBAAoB5Y,EAAQ4Y,sBAE5BpB,EAAOrZ,MAAM,gDAsEN,SAAS0a,EAAWC,EAAM9Y,GAMrCtR,KAAKqqB,YAAc,IAAIC,IACvBtqB,KAAKuqB,aAAe,IAAIC,IACxBxqB,KAAKoqB,KAAOA,EACZpqB,KAAKsR,QAAUA,GAAW,GAE1BtR,KAAKyqB,4BACCzqB,KAAKsR,QAAQsY,aAAe5pB,KAAKsR,QAAQuY,kBAKM,IAAzCM,EAAWO,0BACnB1qB,KAAKyqB,8BACDE,IAAQC,gBACRvB,EAAsBrpB,KAAKsR,SAhIvC,SAA0BA,GACjB8X,IACDyB,IAAWC,WACPxZ,EAAQyZ,iBACD,uDACK,GACE,OACIjwB,EACC,kBAAMuuB,EAAsB/X,KAEnD8X,GAAoB,GAwHhB4B,CAAiBhrB,KAAKsR,SAGrBtR,KAAKsR,QAAQ2Z,0BACdnC,EAAOlZ,KAAK,8CAUpB5P,KAAKkrB,oBAAsB,IAAIZ,IAE/BH,EAAWgB,UAAUC,IAAIprB,MAvE7BmqB,EAAWrV,KAAO,SAASxD,GACvB6Y,EAAWkB,oBAAsB/Z,EAAQga,mBAEE,iBAAhCha,EAAQia,sBACfpB,EAAWoB,oBAAsBja,EAAQia,qBAG7CpB,EAAWO,0BAA4BpZ,EAAQoZ,2BAkEnDP,EAAWkB,oBAAqB,EAChClB,EAAWoB,oBAAsB,IACjCpB,EAAWO,2BAA4B,EACvCP,EAAWqB,UAAYA,IAEvBx2B,OAAOC,eAAek1B,EAAY,YAAa,CAM3Ch1B,IAN2C,WAWvC,OAJK+zB,IACDA,EAAa,IAAIuC,KAGdvC,KAQfiB,EAAWj0B,UAAUw1B,iBAAmB,SAASC,GAC7C3rB,KAAK4rB,gBAAgBD,GAErB,IACI,IAAME,EACA,IAAIC,IACFH,EACAxB,EAAWoB,oBACX,IACAvrB,KAAKuqB,cAEbsB,EAAShG,MAAMsE,EAAWkB,oBAC1BrrB,KAAKqqB,YAAY0B,IAAIJ,EAAezsB,GAAI2sB,GAC1C,MAAO5sB,GACL6pB,EAAOrZ,MAAP,iDAAAnS,OAA8D2B,MAItEkrB,EAAW6B,WAAa,GAExB7B,EAAW8B,gBAAkB,SAASC,EAAQ7sB,GAC1C,GAAK8qB,EAAWkB,mBAAhB,CAGA,IAAMW,EAAa,IAAIG,IAAWD,EAAQ/B,EAAWoB,oBACjDlsB,GAEJW,KAAKgsB,WAAWluB,KAAKkuB,GACrBA,EAAWnG,UAGfsE,EAAWj0B,UAAUk2B,sBAAwB,SAASC,GAC7ClC,EAAWkB,oBAGhBrrB,KAAKuqB,aAAa+B,GAAGC,IAA8BF,IAGvDlC,EAAWj0B,UAAUs2B,yBAA2B,SAASH,GAChDlC,EAAWkB,oBAGhBrrB,KAAKuqB,aAAakC,eAAeF,IAA8BF,IAGnElC,EAAWj0B,UAAUw2B,0BAA4B,SAASL,GACtDrsB,KAAKuqB,aAAa+B,GAAGC,IAAkCF,IAG3DlC,EAAWj0B,UAAUy2B,6BAA+B,SAASN,GACzDrsB,KAAKuqB,aAAakC,eACdF,IAAkCF,IAG1ClC,EAAWj0B,UAAU02B,2BAA6B,SAASP,GACvDrsB,KAAKuqB,aAAa+B,GAAGC,IAAmCF,IAG5DlC,EAAWj0B,UAAU22B,8BAAgC,SAASR,GAC1DrsB,KAAKuqB,aAAakC,eACdF,IACAF,IAGRlC,EAAWj0B,UAAU42B,yBAA2B,SAAST,GACrDrsB,KAAKuqB,aAAa+B,GAAGC,IAAkCF,IAG3DlC,EAAWj0B,UAAU62B,4BAA8B,SAASV,GACxDrsB,KAAKuqB,aAAakC,eAAeF,IAC7BF,IAGRlC,EAAWj0B,UAAU82B,QAAU,WAC3B,IAQShtB,KAAKkrB,oBAAoB+B,MAC1BjtB,KAAKuqB,aAAa2C,KAAKX,KAT3B,IAAAY,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAWA,QAAAwyB,EAAAC,EAAwBvtB,KAAKkrB,oBAAoBsC,SAAjDn4B,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA2D,KAAhDS,EAAgDN,EAAA/3B,MACvDyK,KAAK6tB,cAAcD,EAAUE,MAZjC,MAAAhU,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,GAAA,IAAAW,GAAA,EAAAC,GAAA,EAAAC,OAAApzB,EAAA,IAcA,QAAAqzB,EAAAC,EAAoBpuB,KAAKqqB,YAAYgE,OAArCh5B,OAAAo4B,cAAAO,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAA6C,KAAlCM,EAAkCH,EAAA54B,MACzCyK,KAAKuuB,iBAAiBD,IAf1B,MAAAxU,GAAAmU,GAAA,EAAAC,EAAApU,EAAA,YAAAkU,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAiBIluB,KAAKuqB,cACLvqB,KAAKuqB,aAAaiE,qBAlB1B,QAqBIrE,EAAWgB,UAAUsD,OAAOzuB,QAIpCmqB,EAAWuE,eAAiB,SAASxC,GACjC,GAAK/B,EAAWkB,mBAIhB,IAAK,IAAI/2B,EAAI,EAAGA,EAAI61B,EAAW6B,WAAW/uB,OAAQ3I,IAC9C,GAAI61B,EAAW6B,WAAW13B,GAAG43B,SAAWA,EAAQ,CACzB/B,EAAW6B,WAAWzuB,OAAOjJ,EAAG,GAExC,GAAGq6B,OACd,QAUZxE,EAAWj0B,UAAUq4B,iBAAmB,SAASD,GAC7C,IAAMzC,EAAW7rB,KAAKqqB,YAAYl1B,IAAIm5B,GAElCzC,IACAA,EAAS8C,OACT3uB,KAAKqqB,YAAYoE,OAAOH,KAQhCnE,EAAWj0B,UAAU01B,gBAAkB,SAASkC,GAC5C9tB,KAAKuuB,iBAAiBT,EAAI5uB,KAW9BirB,EAAWj0B,UAAU04B,eAAiB,SAASd,EAAKe,GAChD,GAAK7uB,KAAKyqB,4BAEH,GAAIzqB,KAAKkrB,oBAAoB4D,IAAIhB,EAAI5uB,IACxC4pB,EAAOrZ,MAAM,oDADV,CAMPqZ,EAAOnZ,KAAP,0BAAArS,OAAsCwwB,EAAtC,QAEA,IAAMiB,EACA,IAAIzF,IACFwE,EACA,CACIkB,OAAQhvB,KAAKivB,sBACbJ,iBAGZ7uB,KAAKkrB,oBAAoBa,IAAI+B,EAAI5uB,GAAI6vB,KASzC5E,EAAW+E,0BAA4B,WACnC,IAAMC,EAAc,IAAI1D,IADsB2D,GAAA,EAAAC,GAAA,EAAAC,OAAAx0B,EAAA,IAG9C,QAAAy0B,EAAAC,EAAyBrF,EAAWgB,UAApC91B,OAAAo4B,cAAA2B,GAAAG,EAAAC,EAAA9B,QAAAC,MAAAyB,GAAA,EAA+C,KAApCK,EAAoCF,EAAAh6B,MAAAm6B,GAAA,EAAAC,GAAA,EAAAC,OAAA90B,EAAA,IAC3C,QAAA+0B,EAAAC,EAAiBL,EAAWvE,oBAAoBsC,SAAhDn4B,OAAAo4B,cAAAiC,GAAAG,EAAAC,EAAApC,QAAAC,MAAA+B,GAAA,EAA0D,KAA/CK,EAA+CF,EAAAt6B,MACtD45B,EAAY/D,IAAI2E,IAFuB,MAAAjW,GAAA6V,GAAA,EAAAC,EAAA9V,EAAA,YAAA4V,GAAA,MAAAI,EAAA/B,QAAA+B,EAAA/B,SAAA,WAAA4B,EAAA,MAAAC,KAHD,MAAA9V,GAAAuV,GAAA,EAAAC,EAAAxV,EAAA,YAAAsV,GAAA,MAAAI,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAAsB,EAAA,MAAAC,GAS9C,OAAOH,GASXhF,EAAWj0B,UAAU+4B,oBAAsB,WAEvC,OAAOjvB,KAAKsR,QAAQ2Z,yBAAb,GAAA3tB,OACE0C,KAAKsR,QAAQ2Z,yBADf,KAAA3tB,OAC2C0C,KAAKsR,QAAQ0e,UACzDhwB,KAAKsR,QAAQ0e,UAMvB7F,EAAWj0B,UAAU23B,cAAgB,SAASC,GAC1C,IAAMmC,EAAoBjwB,KAAKkrB,oBAAoB/1B,IAAI24B,EAAI5uB,IAEvD+wB,IAUsC,IAAlCjwB,KAAKkrB,oBAAoB+B,MACzBjtB,KAAKuqB,aAAa2C,KAAKX,KAE3BvsB,KAAKkrB,oBAAoBuD,OAAOX,EAAI5uB,IAGpC+wB,EAAkBC,uBAW1B/F,EAAWj0B,UAAUi6B,mBAAqB,WACtC,OAAOnwB,KAAKyqB,6BAShBN,EAAWj0B,UAAUk6B,gCAAkC,SAAStC,EAAKuC,GACjE,IAAMC,EAAWtwB,KAAKkrB,oBAAoB/1B,IAAI24B,EAAI5uB,IAE9CoxB,GACAA,EAASC,sBAAsBF,IAQvClG,EAAWj0B,UAAUs6B,6BAA+B,SAAS1C,GACzD,IAAMwC,EAAWtwB,KAAKkrB,oBAAoB/1B,IAAI24B,EAAI5uB,IAE9CoxB,GACAA,EAASE,gCAUjBrG,EAAWj0B,UAAUu6B,cAAgB,SAAS3C,EAAK4C,EAAOrf,GACtD,IAAMif,EAAWxC,GAAO9tB,KAAKkrB,oBAAoB/1B,IAAI24B,EAAI5uB,IAEzDoqB,IAAUmH,cAAcC,EAAOrf,EAAMif,IAUzCnG,EAAWj0B,UAAUy6B,uBACf,SAAS9K,EAAO+K,GAAM,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAj2B,EAAA,IACpB,QAAAk2B,EAAAC,EAAiBjxB,KAAKkrB,oBAAoBsC,SAA1Cn4B,OAAAo4B,cAAAoD,GAAAG,EAAAC,EAAAvD,QAAAC,MAAAkD,GAAA,EAAoD,CAAAG,EAAAz7B,MAC7Co7B,uBAAuB9K,EAAO+K,IAFjB,MAAA9W,GAAAgX,GAAA,EAAAC,EAAAjX,EAAA,YAAA+W,GAAA,MAAAI,EAAAlD,QAAAkD,EAAAlD,SAAA,WAAA+C,EAAA,MAAAC,KAW5B5G,EAAWj0B,UAAUg7B,yBAA2B,SAASC,GAAS,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAx2B,EAAA,IAC9D,QAAAy2B,EAAAC,EAAiBxxB,KAAKkrB,oBAAoBsC,SAA1Cn4B,OAAAo4B,cAAA2D,GAAAG,EAAAC,EAAA9D,QAAAC,MAAAyD,GAAA,EAAoD,CAAAG,EAAAh8B,MAC7C27B,4BAFuD,MAAApX,GAAAuX,GAAA,EAAAC,EAAAxX,EAAA,YAAAsX,GAAA,MAAAI,EAAAzD,QAAAyD,EAAAzD,SAAA,WAAAsD,EAAA,MAAAC,GAM9DtxB,KAAKoqB,KAAK8G,yBAAyBC,IAQvChH,EAAWsH,0BAA4B,SAASC,GAC5C,IAAMC,EAAYxH,EAAW+E,4BAE7B,GAAIyC,EAAU1E,KAAM,KAAA2E,GAAA,EAAAC,GAAA,EAAAC,OAAAh3B,EAAA,IAChB,QAAAi3B,EAAAC,EAAiBL,EAAjBt8B,OAAAo4B,cAAAmE,GAAAG,EAAAC,EAAAtE,QAAAC,MAAAiE,GAAA,EAA4B,KAAjB7B,EAAiBgC,EAAAx8B,MACxB+zB,IAAUmI,0BAA0BC,EAAa3B,IAFrC,MAAAjW,GAAA+X,GAAA,EAAAC,EAAAhY,EAAA,YAAA8X,GAAA,MAAAI,EAAAjE,QAAAiE,EAAAjE,SAAA,WAAA8D,EAAA,MAAAC,SAKhBxI,IAAUmI,0BAA0BC,EAAa,OAmBzDvH,EAAWj0B,UAAU+7B,4BAA8B,SAC3CnE,EACA8C,EACAsB,EACAC,EACAC,EACAC,GACJ,IAAM/B,EAAWtwB,KAAKkrB,oBAAoB/1B,IAAI24B,EAAI5uB,IAE9CoxB,GACAA,EAAS2B,4BACLrB,EACAsB,EACAC,EACAC,EACAC,IAWZlI,EAAWmI,uBAAyB,SAASrzB,GACzC,IAAMwQ,EACAxQ,aAAaszB,IAnevB,SAA2C9iB,GACvC,IAAMqK,EAAM,IAAI3b,MAkBhB,OAfA2b,EAAIjL,MAAQY,EAAMZ,MAGlBiL,EAAIjlB,MAAQ4a,EAAM5a,MAAQ,kBAAoB4a,EAAM+iB,KAAO/iB,EAAM+iB,IAAI/iB,OAC9DA,EAAM+iB,IAAI/iB,MAAM5a,KADuB,MAAAyI,OACVmS,EAAM+iB,IAAI/iB,MAAM5a,MAAS,IAK7DilB,EAAI2Y,eAAiBhjB,EAAM+iB,KAAO/iB,EAAM+iB,IAAIE,YACtC9b,KAAK0K,UAAU7R,EAAM+iB,IAAIE,aAAe,GAG9C5Y,EAAI5K,QAAUO,EAAMP,QAEb4K,EAidG6Y,CAAkC1zB,GAAKA,EAC3C0yB,EAAYxH,EAAW+E,4BAE7B,GAAIyC,EAAU1E,KAAM,KAAA2F,GAAA,EAAAC,GAAA,EAAAC,OAAAh4B,EAAA,IAChB,QAAAi4B,EAAAC,EAAiBrB,EAAjBt8B,OAAAo4B,cAAAmF,GAAAG,EAAAC,EAAAtF,QAAAC,MAAAiF,GAAA,EAA4B,KAAjB7C,EAAiBgD,EAAAx9B,MACxB+zB,IAAUgJ,uBAAuB7iB,EAAOsgB,IAF5B,MAAAjW,GAAA+Y,GAAA,EAAAC,EAAAhZ,EAAA,YAAA8Y,GAAA,MAAAI,EAAAjF,QAAAiF,EAAAjF,SAAA,WAAA8E,EAAA,MAAAC,SAKhBxJ,IAAUgJ,uBAAuB7iB,EAAO,OAUhD0a,EAAWj0B,UAAU+8B,sBAAwB,SAASh0B,EAAG6uB,GACrD,IAAMwC,EAAWtwB,KAAKkrB,oBAAoB/1B,IAAI24B,EAAI5uB,IAE9CoxB,GACAA,EAAS2C,sBAAsBh0B,IAUvCkrB,EAAWj0B,UAAUg9B,uBAAyB,SAASj0B,EAAG6uB,GACtD,IAAMwC,EAAWtwB,KAAKkrB,oBAAoB/1B,IAAI24B,EAAI5uB,IAE9CoxB,GACAA,EAAS4C,uBAAuBj0B,IAUxCkrB,EAAWj0B,UAAUi9B,uBAAyB,SAASl0B,EAAG6uB,GACtD,IAAMwC,EAAWtwB,KAAKkrB,oBAAoB/1B,IAAI24B,EAAI5uB,IAE9CoxB,GACAA,EAAS6C,uBAAuBl0B,IAUxCkrB,EAAWj0B,UAAUk9B,wBAA0B,SAASn0B,EAAG6uB,GACvD,IAAMwC,EAAWtwB,KAAKkrB,oBAAoB/1B,IAAI24B,EAAI5uB,IAE9CoxB,GACAA,EAAS8C,wBAAwBn0B,IAUzCkrB,EAAWj0B,UAAUm9B,0BAA4B,SAASp0B,EAAG6uB,GACzD,IAAMwC,EAAWtwB,KAAKkrB,oBAAoB/1B,IAAI24B,EAAI5uB,IAE9CoxB,GACAA,EAAS+C,0BAA0Bp0B,IAS3CkrB,EAAWmJ,QAAU,SAAS5+B,GAC1B,IAAM6+B,EAAe,IAAI9H,IADI+H,GAAA,EAAAC,GAAA,EAAAC,OAAA54B,EAAA,IAO7B,QAAA64B,EAAAC,EAAoBzJ,EAAWgB,UAA/B91B,OAAAo4B,cAAA+F,GAAAG,EAAAC,EAAAlG,QAAAC,MAAA6F,GAAA,EAA0C,KAA/BK,EAA+BF,EAAAp+B,MAClCs+B,EAAM3I,oBAAoB+B,MAC1BsG,EAAanI,IAAIyI,EAAM3I,oBAAoBsC,SAASE,OAAOn4B,QATtC,MAAAukB,GAAA2Z,GAAA,EAAAC,EAAA5Z,EAAA,YAAA0Z,GAAA,MAAAI,EAAA7F,QAAA6F,EAAA7F,SAAA,WAAA0F,EAAA,MAAAC,GAa7B,GAAIH,EAAatG,KAAM,KAAA6G,GAAA,EAAAC,GAAA,EAAAC,OAAAl5B,EAAA,IACnB,QAAAm5B,EAAAC,EAAyBX,EAAzBl+B,OAAAo4B,cAAAqG,GAAAG,EAAAC,EAAAxG,QAAAC,MAAAmG,GAAA,EAAuC,KAA5BK,EAA4BF,EAAA1+B,MACnC+zB,IAAU8K,mBAAmB1/B,EAAGy/B,IAFjB,MAAAra,GAAAia,GAAA,EAAAC,EAAAla,EAAA,YAAAga,GAAA,MAAAI,EAAAnG,QAAAmG,EAAAnG,SAAA,WAAAgG,EAAA,MAAAC,SAKnB1K,IAAU8K,mBAAmB1/B,EAAG,OAUxCy1B,EAAWj0B,UAAUm+B,aAAe,SAASC,EAASC,GAClDjL,IAAU+K,aAAar0B,KAAKivB,sBAAuBqF,EAASC,GAC5DpK,EAAWqB,UAAUgJ,UACjBC,IACA,CACIC,OAAQJ,EACRC,aAIZpK,EAAWwK,UAAY35B,EAAQ,KAAsC25B,UAOrExK,EAAWyK,kBAAoB,SAASnlB,GAChCA,aAAiB8iB,KAAmB9iB,EAAM+iB,IAC1CrI,EAAWmI,uBAAuB7iB,GAElC0a,EAAWmJ,QAAQ7jB,IAa3B0a,EAAW0K,oBAAsB,SAASC,GAAwB,IAO1DC,EAPyCC,EAAiBn3B,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GACrDi3B,GAUDC,EADiB,WAAjBE,EAAOH,GACMA,EAEA,CACTjgC,KAAMigC,EACNE,cAIRlM,EAAOzZ,IAAIuH,KAAK0K,UAAUyT,IAG1B/0B,KAAKwrB,UAAUgJ,UAAUM,EAAOE,IApB5BlM,EAAOlZ,KAAK,kCA8BpBua,EAAW+K,cAAgB,SAASC,GAA4B,IAAjBH,EAAiBn3B,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GACxDmC,KAAKwrB,UAAUgJ,UAAUW,EAAWH,udCjvBxC,IAAMlM,EAASH,oBAAUQ,GAKnBiM,EAAU,CACZC,mBADY,SACOtoB,GAIf,OAAOA,EAAOA,EAAK3P,QAAQ,iBAAkB,IAAM2P,GAEvDuoB,UAPY,SAOFC,EAAWC,GACjB,IACIC,EAAKC,EADLnyB,EAAO,KAeX,OAZKmyB,EAAQN,EAAQO,SAASJ,EAAW,eAAgBC,MAC7CC,EACEL,EAAQO,SACNJ,EACA,aACAC,MACZjyB,EAAO,CACHmyB,MAAON,EAAQQ,cAAcF,GAC7BD,IAAKL,EAAQS,YAAYJ,KAI1BlyB,GAEXqyB,cAzBY,SAyBE3mB,GACV,OAAOA,EAAKzQ,UAAU,KAE1Bs3B,cA5BY,SA4BEC,GACV,qBAAAz4B,OAAsBy4B,IAE1BF,YA/BY,SA+BA5mB,GACR,OAAOA,EAAKzQ,UAAU,KAE1Bw3B,YAlCY,SAkCAP,GACR,mBAAAn4B,OAAoBm4B,IAExBQ,SArCY,SAqCHhnB,GACL,OAAOA,EAAKzQ,UAAU,IAE1B03B,WAxCY,SAwCDjnB,GACP,IAAM1L,EAAO,GACP1E,EAAQoQ,EAAKzQ,UAAU,GAAG1B,MAAM,KAUtC,OARAyG,EAAK4yB,MAAQt3B,EAAMu3B,QACnB7yB,EAAK8yB,KAAOx3B,EAAMu3B,QAClB7yB,EAAKoP,MAAQ9T,EAAMu3B,QACa,KAA5Bv3B,EAAMA,EAAM5B,OAAS,IACrB4B,EAAMsb,MAEV5W,EAAK+yB,IAAMz3B,EAEJ0E,GAEXgzB,WAtDY,SAsDDC,GACP,WAAAl5B,OACSk5B,EAAML,MADf,KAAA74B,OACwBk5B,EAAMH,KAD9B,KAAA/4B,OACsCk5B,EAAM7jB,MAD5C,KAAArV,OAEQk5B,EAAMF,IAAI94B,KAAK,OAE3Bi5B,YA3DY,SA2DAxnB,GACR,IAAM1L,EAAO,GACT1E,EAAQoQ,EAAKzQ,UAAU,GAAG1B,MAAM,KAQpC,OANAyG,EAAKrE,GAAKL,EAAMu3B,QAChBv3B,EAAQA,EAAM,GAAG/B,MAAM,KACvByG,EAAK1O,KAAOgK,EAAMu3B,QAClB7yB,EAAKmzB,UAAY73B,EAAMu3B,QACvB7yB,EAAKozB,SAAW93B,EAAM5B,OAAS4B,EAAMu3B,QAAU,IAExC7yB,GAQXqzB,aA7EY,SA6EC3nB,GACT,IAAMpQ,EAAQoQ,EAAKzQ,UAAU,IAAI1B,MAAM,KAQvC,MAAO,CAPU+B,EAAM,GACNA,EAAM,GAGHA,EAAM5B,OAAS,EAAI4B,EAAM,GAAK,OAKtDg4B,YAxFY,SAwFAlrB,GACR,IAAIsD,EAAI,YAAA3R,OACUqO,EAAGsC,aAAa,MAD1B,KAAA3Q,OACmCqO,EAAGsC,aAAa,QADnD,KAAA3Q,OAEAqO,EAAGsC,aAAa,cAOxB,OALItC,EAAGsC,aAAa,aACmB,MAAhCtC,EAAGsC,aAAa,cACnBgB,GAAI,IAAA3R,OAAQqO,EAAGsC,aAAa,cAGzBgB,GAEX6nB,YApGY,SAoGA7nB,GACR,IAAM1L,EAAO,GACP1E,EAAQoQ,EAAKzQ,UAAU,GAAG1B,MAAM,KAStC,OAPAyG,EAAKyF,IAAMnK,EAAMu3B,QACjB7yB,EAAK,gBAAkB1E,EAAMu3B,QAC7B7yB,EAAK,cAAgB1E,EAAMu3B,QACvBv3B,EAAM5B,SACNsG,EAAK,kBAAoB1E,EAAMrB,KAAK,MAGjC+F,GAEXwzB,iBAjHY,SAiHK9nB,GACb,IAAM1L,EAAO,GACP1E,EAAQoQ,EAAKzQ,UAAU,IAAI1B,MAAM,KAMvC,OAJAyG,EAAKK,KAAO/E,EAAMu3B,QAClB7yB,EAAKyzB,YAAcn4B,EAAMu3B,QAGlB7yB,GAEX0zB,UA3HY,SA2HFhoB,GACN,IAAM1L,EAAO,GACT1E,EAAQoQ,EAAKnS,MAAM,KAEvB+B,EAAMu3B,QACNv3B,EAAQA,EAAMrB,KAAK,KAAKV,MAAM,KAC9B,IAAK,IAAIxI,EAAI,EAAGA,EAAIuK,EAAM5B,OAAQ3I,IAAK,CAGnC,IAFA,IAAIuB,EAAMgJ,EAAMvK,GAAGwI,MAAM,KAAK,GAEvBjH,EAAIoH,QAAqB,MAAXpH,EAAI,IACrBA,EAAMA,EAAI2I,UAAU,GAExB,IAAMjJ,EAAQsJ,EAAMvK,GAAGwI,MAAM,KAAK,GAE9BjH,GAAON,EACPgO,EAAKzF,KAAK,CAAEjJ,KAAMgB,EACdN,UACGM,GAEP0N,EAAKzF,KAAK,CAAEjJ,KAAM,GACdU,MAAOM,IAInB,OAAO0N,GAEX2zB,kBArJY,SAqJMjoB,GACd,IAAMkoB,EAAY,GACZC,EAAQnoB,EAAKnS,MAAM,KAEzBq6B,EAAUE,WAAaD,EAAM,GAAG54B,UAAU,IAC1C24B,EAAUG,UAAYF,EAAM,GAC5BD,EAAUvkB,SAAWwkB,EAAM,GAAGppB,cAC9BmpB,EAAU9b,SAAW+b,EAAM,GAC3BD,EAAUI,GAAKH,EAAM,GACrBD,EAAUd,KAAOe,EAAM,GAGvBD,EAAU9lB,KAAO+lB,EAAM,GACvBD,EAAUK,WAAa,EACvB,IAAK,IAAIljC,EAAI,EAAGA,EAAI8iC,EAAMn6B,OAAQ3I,GAAK,EACnC,OAAQ8iC,EAAM9iC,IACd,IAAK,QACD6iC,EAAU,YAAcC,EAAM9iC,EAAI,GAClC,MACJ,IAAK,QACD6iC,EAAU,YAAcC,EAAM9iC,EAAI,GAClC,MACJ,IAAK,aACD6iC,EAAUK,WAAaJ,EAAM9iC,EAAI,GACjC,MACJ,IAAK,UACD6iC,EAAUM,QAAUL,EAAM9iC,EAAI,GAC9B,MACJ,QACIw0B,EAAOzZ,IAAP,sCAAA/R,OAEQ85B,EAAM9iC,GAFd,SAAAgJ,OAEwB85B,EAAM9iC,EAAI,GAFlC,MAWR,OANA6iC,EAAUO,QAAU,IAIpBP,EAAUj4B,GAAK4B,KAAKwU,SAAS7U,SAAS,IAAI8d,OAAO,EAAG,IAE7C4Y,GAEXQ,kBA/LY,SA+LMC,GACd,IAAI3oB,EAAO,gBAAA3R,OACQs6B,EAAKP,YACpBO,EAAKN,UACLM,EAAKhlB,SACLglB,EAAKvc,SACLuc,EAAKL,GACLK,EAAKvB,KACL,MACAuB,EAAKvmB,MACP7T,KAAK,KAGP,OADAyR,GAAQ,IACA2oB,EAAKvmB,MACb,IAAK,QACL,IAAK,QACL,IAAK,QACGumB,EAAKC,gBAAgB,aACdD,EAAKC,gBAAgB,cAC5B5oB,GAAQ,QACRA,GAAQ,IACRA,GAAQ2oB,EAAK,YACb3oB,GAAQ,IACRA,GAAQ,QACRA,GAAQ,IACRA,GAAQ2oB,EAAK,YACb3oB,GAAQ,KAchB,OAVI2oB,EAAKC,gBAAgB,aACrB5oB,GAAQ,UACRA,GAAQ,IACRA,GAAQ2oB,EAAKH,QACbxoB,GAAQ,KAEZA,GAAQ,aACRA,GAAQ,IACRA,GAAQ2oB,EAAKC,gBAAgB,cAAgBD,EAAKJ,WAAa,KAInEM,UAzOY,SAyOFC,GAON,IAHA,IAAMx0B,EAAO,IAAI+mB,IACX0N,EAAQD,EAAKj7B,MAAM,QAEhBxI,EAAI,EAAGA,EAAI0jC,EAAM/6B,OAAQ3I,IAC9B,GAAiC,YAA7B0jC,EAAM1jC,GAAGkK,UAAU,EAAG,GAAkB,CAExC,IAAMoyB,EAAOoH,EAAM1jC,GAAGwI,MAAM,WAAW,GAAGA,MAAM,KAAK,GAEhDyG,EAAKpO,IAAIy7B,IACVrtB,EAAKwoB,IAAI6E,EAAM,IAGnBrtB,EAAKpO,IAAIy7B,GAAM9yB,KAAKk6B,EAAM1jC,IAIlC,OAAOiP,GAEX00B,YA/PY,SA+PAhpB,GACR,IAAMpQ,EAAQoQ,EAAKsP,OAAO,IAAIzhB,MAAM,KAC9ByG,EAAO,GAMb,OAJAA,EAAK20B,GAAKr5B,EAAMu3B,QAChB7yB,EAAK8N,KAAOxS,EAAMu3B,QAClB7yB,EAAK40B,OAASt5B,EAEP0E,GAEX60B,YAzQY,SAyQAnpB,GACR,IAAMpQ,EAAQoQ,EAAKsP,OAAO,GAAGzhB,MAAM,KAC7ByG,EAAO,GAYb,OAVAA,EAAKhO,MAAQsJ,EAAMu3B,SACc,IAA7B7yB,EAAKhO,MAAMgJ,QAAQ,KACnBgF,EAAK80B,UAAY,QAEjB90B,EAAK80B,UAAY90B,EAAKhO,MAAMgpB,OAAOhb,EAAKhO,MAAMgJ,QAAQ,KAAO,GAC7DgF,EAAKhO,MAAQgO,EAAKhO,MAAMgpB,OAAO,EAAGhb,EAAKhO,MAAMgJ,QAAQ,OAEzDgF,EAAKpE,IAAMN,EAAMu3B,QACjB7yB,EAAK40B,OAASt5B,EAEP0E,GAEXoyB,SAzRY,SAyRH2C,EAAUC,EAAQC,GAGvB,IAFA,IAAIR,EAAQM,EAASx7B,MAAM,QAElBxI,EAAI,EAAGA,EAAI0jC,EAAM/6B,OAAQ3I,IAC9B,GAAI0jC,EAAM1jC,GAAGkK,UAAU,EAAG+5B,EAAOt7B,UAAYs7B,EACzC,OAAOP,EAAM1jC,GAGrB,IAAKkkC,EACD,OAAO,EAIXR,EAAQQ,EAAY17B,MAAM,QAC1B,IAAK,IAAIH,EAAI,EAAGA,EAAIq7B,EAAM/6B,OAAQN,IAC9B,GAAIq7B,EAAMr7B,GAAG6B,UAAU,EAAG+5B,EAAOt7B,UAAYs7B,EACzC,OAAOP,EAAMr7B,GAIrB,OAAO,GAEX87B,UA/SY,SA+SFH,EAAUC,EAAQC,GAIxB,IAHA,IAAIR,EAAQM,EAASx7B,MAAM,QACrB47B,EAAU,GAEPpkC,EAAI,EAAGA,EAAI0jC,EAAM/6B,OAAQ3I,IAC1B0jC,EAAM1jC,GAAGkK,UAAU,EAAG+5B,EAAOt7B,UAAYs7B,GACzCG,EAAQ56B,KAAKk6B,EAAM1jC,IAG3B,GAAIokC,EAAQz7B,SAAWu7B,EACnB,OAAOE,EAIXV,EAAQQ,EAAY17B,MAAM,QAC1B,IAAK,IAAIH,EAAI,EAAGA,EAAIq7B,EAAM/6B,OAAQN,IAC1Bq7B,EAAMr7B,GAAG6B,UAAU,EAAG+5B,EAAOt7B,UAAYs7B,GACzCG,EAAQ56B,KAAKk6B,EAAMr7B,IAI3B,OAAO+7B,GAEXC,kBAtUY,SAsUM1pB,GAKd,GAAmC,IAA/BA,EAAK1Q,QAAQ,cAEb0Q,EAAI,KAAA3R,OAAQ2R,QACT,GAA8B,iBAA1BA,EAAKzQ,UAAU,EAAG,IAMzB,OALAsqB,EAAOzZ,IACH,kEAEJyZ,EAAOzZ,IAAIJ,GAEJ,KAE6B,SAApCA,EAAKzQ,UAAUyQ,EAAKhS,OAAS,KAE7BgS,EAAOA,EAAKzQ,UAAU,EAAGyQ,EAAKhS,OAAS,IAE3C,IAAMk6B,EAAY,GACZC,EAAQnoB,EAAKnS,MAAM,KAEzB,GAAiB,QAAbs6B,EAAM,GAIN,OAHAtO,EAAOzZ,IAAI,uCACXyZ,EAAOzZ,IAAIJ,GAEJ,KAEXkoB,EAAUE,WAAaD,EAAM,GAAG54B,UAAU,IAC1C24B,EAAUG,UAAYF,EAAM,GAC5BD,EAAUvkB,SAAWwkB,EAAM,GAAGppB,cAC9BmpB,EAAU9b,SAAW+b,EAAM,GAC3BD,EAAUI,GAAKH,EAAM,GACrBD,EAAUd,KAAOe,EAAM,GAGvBD,EAAU9lB,KAAO+lB,EAAM,GAEvBD,EAAUK,WAAa,IACvB,IAAK,IAAIljC,EAAI,EAAGA,EAAI8iC,EAAMn6B,OAAQ3I,GAAK,EACnC,OAAQ8iC,EAAM9iC,IACd,IAAK,QACD6iC,EAAU,YAAcC,EAAM9iC,EAAI,GAClC,MACJ,IAAK,QACD6iC,EAAU,YAAcC,EAAM9iC,EAAI,GAClC,MACJ,IAAK,aACD6iC,EAAUK,WAAaJ,EAAM9iC,EAAI,GACjC,MACJ,IAAK,UACD6iC,EAAUM,QAAUL,EAAM9iC,EAAI,GAC9B,MACJ,QACIw0B,EAAOzZ,IAAP,oBAAA/R,OAA+B85B,EAAM9iC,GAArC,SAAAgJ,OAA+C85B,EAAM9iC,EAAI,GAAzD,MASR,OANA6iC,EAAUO,QAAU,IAIpBP,EAAUj4B,GAAK4B,KAAKwU,SAAS7U,SAAS,IAAI8d,OAAO,EAAG,IAE7C4Y,GAEXyB,oBAxYY,SAwYQhB,GAChB,IAAI3oB,EAAO,eAEXA,GAAQ2oB,EAAK3pB,aAAa,cAC1BgB,GAAQ,IACRA,GAAQ2oB,EAAK3pB,aAAa,aAC1BgB,GAAQ,IAER,IAAI2D,EAAWglB,EAAK3pB,aAAa,YAmBjC,OAfI0c,IAAQkO,aAA0C,WAA3BjmB,EAAS5E,gBAChC4E,EAAW,OAGf3D,GAAQ2D,EACR3D,GAAQ,IACRA,GAAQ2oB,EAAK3pB,aAAa,YAC1BgB,GAAQ,IACRA,GAAQ2oB,EAAK3pB,aAAa,MAC1BgB,GAAQ,IACRA,GAAQ2oB,EAAK3pB,aAAa,QAC1BgB,GAAQ,IACRA,GAAQ,MACRA,GAAI,IAAA3R,OAAQs6B,EAAK3pB,aAAa,SAC9BgB,GAAQ,IACA2oB,EAAK3pB,aAAa,SAC1B,IAAK,QACL,IAAK,QACL,IAAK,QACG2pB,EAAK3pB,aAAa,aACX2pB,EAAK3pB,aAAa,cACzBgB,GAAQ,QACRA,GAAQ,IACRA,GAAQ2oB,EAAK3pB,aAAa,YAC1BgB,GAAQ,IACRA,GAAQ,QACRA,GAAQ,IACRA,GAAQ2oB,EAAK3pB,aAAa,YAC1BgB,GAAQ,KAchB,MAV+B,QAA3B2D,EAAS5E,gBACTiB,GAAQ,UACRA,GAAQ,IACRA,GAAQ2oB,EAAK3pB,aAAa,WAC1BgB,GAAQ,KAEZA,GAAQ,aACRA,GAAQ,IACRA,GAAQ2oB,EAAK3pB,aAAa,eAAiB,IAE3C,GAAA3Q,OAAU2R,EAAV,SAQJ6pB,sBAtcY,SAscUC,GAClB,IAAMC,EAAWD,EAAWE,MACvBl8B,IAAI,SAAAm8B,GAAQ,OAAIA,EAASh6B,KACzBi6B,OAAO,SAACvI,EAAMtyB,EAAO86B,GAAd,OAAwBA,EAAM76B,QAAQqyB,KAAUtyB,IACvDrB,OACCo8B,EACCN,EAAWO,YAAcP,EAAWO,WAAWr8B,QAAW,EAEjE,KAAI+7B,EAAW,GAAmB,IAAdK,GAApB,CAIA,IAAIE,EAAc,KAElB,GAAiB,IAAbP,EACAO,EAAcR,EAAWE,MAAM,GAAG/5B,QAC/B,GAAiB,IAAb85B,EAAgB,CAEvB,IAAMQ,EACAT,EAAWO,WAAWG,KACpB,SAAAC,GAAK,MAAwB,QAApBA,EAAMC,YAEnBH,IACAD,EAAcC,EAASP,MAAMn8B,MAAM,KAAK,SAEzC,GAAIk8B,GAAY,EAAG,CAEtB,IAAMY,EACAb,EAAWO,WAAWG,KACpB,SAAAC,GAAK,MAAwB,QAApBA,EAAMC,YAEnBC,IACAL,EAAcK,EAASX,MAAMn8B,MAAM,KAAK,IAIhD,OAAOy8B,IAOXM,aAjfY,WAkfR,OAAOC,IAAWC,UAAU,EAAG,aAYnCC,iBA9fY,SA8fKC,EAAOrJ,EAAMsJ,GAC1B,IAAK,IAAI5lC,EAAI,EAAGA,EAAI2lC,EAAMhB,MAAMh8B,SAAU3I,EAAG,CACzC,IAAM6lC,EAAWF,EAAMhB,MAAM3kC,GAE7B,GAAI6lC,EAASj7B,KAAO0xB,GACbuJ,EAASjxB,YAAcgxB,EAC1B,OAAOC,EAAS5kC,QAa5B6kC,gBAjhBY,SAihBIC,GACZ,OAAOA,EACFpB,MACAn8B,MAAM,KACNC,IAAI,SAAAu9B,GAAO,OAAI9Y,SAAS8Y,EAAS,OAS1CC,SA9hBY,SA8hBHC,EAAKnpB,GACV,OAAOmpB,EAAIrE,MAAMsD,KAAK,SAAA/kC,GAAC,OAAIA,EAAE2c,OAASA,KAO1CopB,SAtiBY,SAsiBHD,GACL,IAAME,EACAF,EAAI19B,MAAM,MAAMq8B,OAAO,SAAAlqB,GAAI,OAAIA,EAAK0rB,WAAW,kBAErD,GAAID,EAAWz9B,OAAS,EACpB,OAAOy9B,EAAW,GAAGnc,OAAO,eAAethB,SAenD29B,iBA1jBY,SA0jBK7B,EAAY8B,GACzB,IAAIC,EAAc,KAElB,GAAK/B,GAAe8B,EAApB,CAIA,IAAK,IAAIvmC,EAAI,EAAGA,EAAIykC,EAAWgC,IAAI99B,SAAU3I,EAAG,CAC5C,IAAMymC,EAAMhC,EAAWgC,IAAIzmC,GAE3B,GAAIymC,EAAIC,OACDD,EAAIC,MAAMhtB,gBAAkB6sB,EAAU7sB,cAAe,CACxD8sB,EAAcC,EAAIE,QAClB,OAGR,GAAIH,EAAa,CAIb,IAAMI,EACAnC,EAAWoC,SACR16B,WACA3D,MAAM,KACNC,IAAI,SAAA3G,GAAC,OAAIorB,SAASprB,EAAG,MACxBglC,EAAeF,EAAa38B,QAAQu8B,GAE1CI,EAAa39B,OAAO69B,EAAc,GAClCF,EAAaG,QAAQP,GACrB/B,EAAWoC,SAAWD,EAAa19B,KAAK,QAahD89B,gBApmBY,SAomBIvC,EAAY8B,GACxB,GAAK9B,GAAe8B,EAApB,CAIA,IAAMU,EAAY,GALiBpO,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAOnC,QAAAwyB,EAAAC,EAAkBwL,EAAWgC,IAA7B1lC,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAkC,KAAvB4N,EAAuBzN,EAAA/3B,MAC1BwlC,EAAIC,OACDD,EAAIC,MAAMhtB,gBAAkB6sB,EAAU7sB,eACzCutB,EAAUz9B,KAAKi9B,EAAIE,UAVQ,MAAAnhB,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,GAcnC,GAAIkO,EAAUt+B,OAAS,EAAG,CAGtB,IAAMu+B,EAAUD,EAAUx+B,IAAI,SAAA0+B,GAAI,aAAAn+B,OAAWm+B,KACvCC,EAAS3C,EAAW4C,KAAKxC,OAC3B,SAAAsC,GAAI,OAAsC,IAAlCD,EAAQj9B,QAAQk9B,EAAKjgC,UAEjC+/B,EAAUz9B,KAAVC,MAAAw9B,EAASK,EAASF,EAAO3+B,IAAI,SAAA0+B,GAAI,OAAIA,EAAKR,YAK1C,IAIMY,EAJS9C,EAAWoC,SACrB16B,WACA3D,MAAM,KACNC,IAAI8D,QACcs4B,OAAO,SAAAjB,GAAE,OAA+B,IAA3BqD,EAAUh9B,QAAQ25B,KAE/B,IAAnB2D,EAAQ5+B,QAER87B,EAAW1C,KAAO,EAClB0C,EAAWV,UAAY,WACvBU,EAAWoC,SAAW,KAEtBpC,EAAWoC,SAAWU,EAAQr+B,KAAK,KAGvCu7B,EAAWgC,IAAMhC,EAAWgC,IAAI5B,OAC5B,SAAAsC,GAAI,OAAuC,IAAnCI,EAAQt9B,QAAQk9B,EAAKR,WACjClC,EAAW4C,KAAO5C,EAAW4C,KAAKxC,OAC9B,SAAAsC,GAAI,OAAuC,IAAnCI,EAAQt9B,QAAQk9B,EAAKR,WAC7BlC,EAAW+C,SACX/C,EAAW+C,OAAS/C,EAAW+C,OAAO3C,OAClC,SAAAsC,GAAI,OAAuC,IAAnCI,EAAQt9B,QAAQk9B,EAAKR,gBAMlC7F,4DCvjBfrhC,EAAOD,QAxGW,CAIdioC,qBAAsB,2BAKtBC,oBAAqB,0BACrBC,kBAAmB,wBACnBC,6BAA8B,mCAC9B1V,yBAA0B,+BAC1B2V,uBAAwB,6BAOxBC,oBAAqB,0BAErBC,oBAAqB,yBAOrBC,oBAAqB,0BAQrBC,yBAA0B,+BAE1BC,eAAgB,qBAMhBC,mBAAoB,yBAIpBC,kBAAmB,wBAMnBC,qBAAsB,2BAItBC,oBAAqB,0BAKrBC,6BAA8B,mCAK9BC,8BAA+B,oCAC/BC,4BAA6B,kCAC7BC,oBAAqB,0BAKrBC,wBAAyB,8BACzBC,sBAAuB,4BAMvBxW,0BAA2B,gCAS3ByW,oBAAqB,0BASrBC,qBAAsB,sjDCzEnB,IAAMC,EAAmB,cAMnBC,EAAY,OAMZC,EAAa,QAMbC,EAAU,KAOVC,EAAwB,UAOxBC,EAA2B,yBAO3BC,EAA4B,4BAQ5BC,EAA2B,2BAO3BC,EAA0B,YAO1BC,EACP,6BAOOC,EACP,4BAOOC,EAAyB,cAMzBC,EAAoB,SAOpBC,EAA2B,gBAuB3BC,EAAmB,mBAYnBC,EAA0B,0BAS1B3J,EAAW,WAgBX4J,EAAe,eAWfC,EACP,kCAgBOC,EAAoB,oBAUpBC,EAAgB,gBAMhBC,EAAwB,WAGjC,MAAO,CACHC,OAHe,cAIfC,cAJe,cAKfttB,KAAMgsB,IAUDuB,EACP,SAASC,EAAWC,EAAcC,GAChC,MAAO,CACH1tB,KAAMgsB,EACNqB,OAAQ,oBACRx2B,WAAU82B,EAAA,CACNC,WAAcJ,EACdK,cAAiBJ,GACdC,KAgBNI,EAAoC,SAASC,EAAOl3B,GAC7D,IAAMw2B,EAAS,2BAEf,MAAO,CACHA,SACAC,cAAeS,EACfl3B,aACAm3B,OAAQX,EACRrtB,KAAMgsB,IAWDiC,EAAoB,SAASC,EAAeC,EAAQC,GAO7D,MAAO,CACHv3B,WAPe,CACfw3B,eAAkBH,EAClBC,SACAC,OAKA5qC,KAAM,UACNwc,KAAMgsB,IAODsC,EAAuB,WAGhC,MAAO,CACHjB,OAHW,aAIXC,cAJW,aAKXttB,KAAMgsB,IAYDuC,EAA0B,SAASlB,GAAyB,IAAjBx2B,EAAiBrK,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GACjE,MAAO,CACHwT,KAAMgsB,EACNgC,OAAQ,iBACRX,SACAx2B,eASK23B,EAAoB,SAASnB,GAAyB,IAAjBx2B,EAAiBrK,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GAC3D,MAAO,CACHwT,KAAMgsB,EACNqB,SACAW,OAAQ,SACRn3B,eAWK43B,EAA8B,SAASC,GAChD,MAAO,CACH73B,WAAY,CAAE83B,WAAcD,GAC5BrB,OAAQ,4BACRrtB,KAAMgsB,IASD4C,EAAiB,SAASvB,GAAyB,IAAjBx2B,EAAiBrK,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GACxD,MAAO,CACHwT,KAAMgsB,EACNqB,SACAW,OAAQ,MACRn3B,eAOKg4B,EAA2B,WACpC,MAAO,CACH7uB,KAAMgsB,EACNqB,OAAQ,mBA+CHyB,EAAsB,SAASj4B,GACxC,MAAO,CACHmJ,KAAMgsB,EACNqB,OAAQ,YACRx2B,eAWKk4B,EAAyB,SAASl4B,GAC3C,MAAO,CACHmJ,KAAMgsB,EACNqB,OAAQ,gBACRx2B,eAmBKm4B,EAAkB,SAASn4B,GACpC,OAAOi3B,EAAkC,OAAQj3B,kCC5crD9T,EAAAQ,EAAAmxB,EAAA,sBAAAua,IAAAlsC,EAAAQ,EAAAmxB,EAAA,sBAAAwa,IAGO,IAAMD,EAAQ,QAKRC,EAAQ,uBCGrB,IAAMllC,EAAW,GAGXmlC,EAAoBtsC,OAAOuwB,QAYjC,IAAMgc,EAA0BvsC,OAAOwsC,qBAYvCxsC,OAAOuwB,QAlBP,WAA0C,QAAAkc,EAAA9iC,UAAAZ,OAANW,EAAM,IAAAwC,MAAAugC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANhjC,EAAMgjC,GAAA/iC,UAAA+iC,GACtCvlC,EAAS4F,QAAQ,SAAA+N,GAAO,OAAIA,EAAOjR,WAAP,EAAWH,KACvC4iC,GAAqBA,EAAiBziC,WAAjB,EAAqBH,IAiB9C1J,OAAOwsC,qBAPP,SAAuC5L,GACnCz5B,EAAS4F,QAAQ,SAAA+N,GAAO,OAAIA,EAAQ,KAAM,KAAM,KAAM,KAAM8lB,EAAM1b,UAClEqnB,GAA2BA,EAAwB3L,IAOvD,IAAM+L,EAAuB,CAKzB/oB,WALyB,SAKd9I,GACP3T,EAASyC,KAAKkR,IAOlB8xB,iBAbyB,SAaRrxB,GACb,IAAMsxB,EAAa7sC,OAAOuwB,QAErBsc,GAGLA,EAAW,KAAM,KAAM,KAAM,KAAMtxB,IAOvCuxB,8BA1ByB,SA0BKvxB,GAC1B,IAAMsxB,EAAa7sC,OAAOwsC,qBAErBK,GAGLA,EAAWtxB,KAKnB1b,EAAOD,QAAU+sC,27CCtDjB,IAAM/X,EAASH,oBAAUQ,GAKrBwB,IAAQsW,eACRjmC,EAAQ,KAGZ,IA+DIkmC,EACAC,EAhEE5W,EAAe,IAAIC,IAenB4W,EAA0B,CAAE,QAAS,SAOrCC,EAAsB,CACxBC,MAAO,CACHC,YAAa,GAAK,EAClBC,OAAQ,CACJC,MAAO,IACPC,IAAK,IACLje,IAAK,OAQXke,EAAwB,GAI1BC,EAAsB,UAEtBC,GAAqB,EAGrBC,GAAY,EAGZC,GAAa,EAGbC,GAAY,EAGZC,GAAa,EAGbC,GAAa,EAEXC,EAA0Bh8B,SAASkG,cAAc,SACjD+1B,OAC6C,IAAtCD,EAAwBE,UAuErC,SAASC,EAAeC,GAAkB,IAAdjxB,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GAC5B60B,EAAc,CAChB8P,OAAO,EACPlB,OAAO,GAULmB,EACA9X,IAAQkO,aACHlO,IAAQ+X,mBACR/X,IAAQgY,UACRhY,IAAQC,gBAEnB,GAAI2X,EAAGhkC,QAAQ,UAAY,EAAG,CAK1B,GAHAm0B,EAAY4O,MAAQ,CAAEsB,UAAW,GAC7BC,SAAU,IAEVvxB,EAAQwxB,eACJL,IAEA/P,EAAY4O,MAAMyB,SAAWzxB,EAAQwxB,gBAIzCpQ,EAAY4O,MAAMsB,UAAUI,SAAW1xB,EAAQwxB,mBAC5C,CAMH,IAAMG,EAAa3xB,EAAQ2xB,YAAcC,IAAiBC,KAEtDV,IACA/P,EAAY4O,MAAM2B,WAAaA,GAEnCvQ,EAAY4O,MAAMuB,SAAS/kC,KAAK,CAC5BmlC,gBAIJ3xB,EAAQ8xB,QAAU9xB,EAAQ+xB,QAAU/xB,EAAQgyB,QAGxChyB,EAAQ8xB,QAAU9xB,EAAQgyB,OAE1BhyB,EAAQ8xB,OAAS9xB,EAAQ8xB,QAAU9xB,EAAQgyB,IAC3C5Q,EAAY4O,MAAMsB,UAAUW,aAAejyB,EAAQ8xB,QAEnD9xB,EAAQ+xB,SACR3Q,EAAY4O,MAAMsB,UAAUY,aAAelyB,EAAQ+xB,SAtGnE,SACQ3Q,EACA+P,EACAgB,GACAC,IAAYD,KACRhB,IACA/P,EAAY4O,MAAMqC,MAAQ,CACtBlC,MAAOiC,IAAYD,GAAYE,OAEnCjR,EAAY4O,MAAME,OAAS,CACvBC,MAAOiC,IAAYD,GAAYjC,SAIvC9O,EAAY4O,MAAMsB,UAAUgB,SAAWF,IAAYD,GAAYE,MAC/DjR,EAAY4O,MAAMsB,UAAUiB,UAAYH,IAAYD,GAAYjC,QAGhE9O,EAAY4O,MAAMsB,UAAUgB,WAC5BlR,EAAY4O,MAAMsB,UAAUkB,SACtBpR,EAAY4O,MAAMsB,UAAUgB,UAGlClR,EAAY4O,MAAMsB,UAAUiB,YAC5BnR,EAAY4O,MAAMsB,UAAUmB,UACtBrR,EAAY4O,MAAMsB,UAAUiB,WAiFlCG,CACItR,EAAa+P,EAAgCnxB,EAAQmyB,YA+C7D,GA7CIlB,EAAGhkC,QAAQ,UAAY,IACnBosB,IAAQC,gBAGR8H,EAAY8P,OAAQ,EACb7X,IAAQkO,YACXvnB,EAAQ2yB,YACRvR,EAAY8P,MAAQ,CAChBI,UAAW,GACXG,SAAUzxB,EAAQ2yB,YAClBpB,SAAU,CAAE,CACRG,SAAU1xB,EAAQ2yB,eAG1BvR,EAAY8P,OAAQ,GAIxB9P,EAAY8P,MAAQ,CAAEI,UAAW,GAC7BC,SAAU,IACVvxB,EAAQ2yB,cACJxB,IAEA/P,EAAY8P,MAAMO,SAAWzxB,EAAQ2yB,aAIzCvR,EAAY8P,MAAMK,SAAS/kC,KAAK,CAC5BklC,SAAU1xB,EAAQ2yB,eAK1BvR,EAAY8P,MAAMK,SAAS/kC,KACvB,CAAEomC,kBAAmBnC,IAAeD,GACpC,CAAEqC,sBAAuBpC,IAAeD,GACxC,CAAEsC,qBAAsBnC,IAAeH,GACvC,CAAEuC,sBAAuBrC,IAAcF,GACvC,CAAEwC,oBAAqBpC,IAAeJ,GACtC,CAAEyC,uBAAwBvC,IAAcF,GACxC,CAAE0C,uBAAwBzC,IAAeD,GACzC,CAAE2C,sBAAuBxC,IAAeH,MAIhDS,EAAGhkC,QAAQ,WAAa,EACxB,GAAIosB,IAAQ+Z,WACRhS,EAAY4O,MAAQ,CAChBsB,UAAW+B,EAAgB3F,EAAA,GACpB1tB,EADoB,CAEvB+tB,OAAQ,YAEZwD,SAAU,SAGX,GAAIlY,IAAQkO,YACfnG,EAAY4O,MAAQ,CAChBsD,eAAgB,SAChBC,YAAa,SACbC,UAAWxzB,EAAQwzB,WAAa,CAC5BrhB,IAAKke,EACLD,IAAKC,QAIV,CACH,IAAMoD,EACA,uEAGNlE,IAAqBC,iBAAiB,IAAI3iC,MAAM4mC,IAChDjc,EAAOrZ,MAAMs1B,GAiCrB,OA9BIxC,EAAGhkC,QAAQ,YAAc,IACzBm0B,EAAY4O,MAAQ,CAChBsB,UAAW+B,EAAgB3F,EAAA,GACpB1tB,EADoB,CAEvB+tB,OAAQ,aAEZwD,SAAU,KAIdvxB,EAAQ0zB,YACHtS,EAAY4O,QAEb5O,EAAY4O,MAAQ,CAAEsB,UAAW,GAC7BC,SAAU,KAElBnQ,EAAY4O,MAAMuB,SAAS/kC,KAAK,CAAEknC,UAAW1zB,EAAQ0zB,aAOrDra,IAAQkO,aAAevnB,EAAQ2zB,sBAI/BvS,EAAYwS,MAAO,GAGhBxS,EAuGX,SAASiS,IAA+B,IAAdrzB,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GAE5BsnC,EAKA7zB,EALA6zB,cAFgCC,EAOhC9zB,EAJAwzB,iBAHgC,IAAAM,EAGpB,CACR3hB,IAAKke,EACLD,IAAKC,GALuByD,EAQ5B1D,EAAaoD,EAAbpD,IAAKje,EAAQqhB,EAARrhB,IAEPiP,EAAc,CAChB2S,kBAAmB/zB,EAAQ+tB,OAC3ByE,SAAU5vC,OAAOoxC,OAAO3B,MACxBI,UAAW7vC,OAAOoxC,OAAO9D,QAe7B,MAZmB,iBAAR/d,IACPiP,EAAY6Q,aAAe9f,GAGZ,iBAARie,IACPhP,EAAY8Q,aAAe9B,QAGF,IAAlByD,IACPzS,EAAY6S,oBAAsBJ,GAG/BzS,EASX,SAAS8S,IAAoC,IAAdl0B,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GAI/B60B,EAAc,CAChBoS,UAAWnD,GAEP8D,EAA4Bn0B,EAA5Bm0B,wBAMR,OAJIA,GAA2BA,EAAwB/D,MACnDhP,EAAYoS,UAAYW,EAAwB/D,KAG7ChP,EASX,SAASgT,EAAyBnD,EAAIrW,GAClC,IAAMyZ,EACAC,QAAQ1Z,IAAWA,EAAO2Z,iBAAiB5oC,OAAS,EACpD6oC,EACAF,QAAQ1Z,IAAWA,EAAO6Z,iBAAiB9oC,OAAS,EACpD+oC,EAAqB,IAEE,IAAzBzD,EAAGhkC,QAAQ,WACXynC,EAAmB1E,MAAQwE,IAEF,IAAzBvD,EAAGhkC,QAAQ,WACXynC,EAAmBxD,MAAQmD,GAG/Bpb,EAAa2C,KAAK+Y,IAAU7J,oBAAqB4J,GA4CrD,SAASE,EAA0BC,GAC/B,IAAMC,EACAD,EAAWhN,OAAO,SAAAvkC,GAAC,MAAe,eAAXA,EAAEyxC,OAAuBppC,OAChDqpC,EACAH,EAAWhN,OAAO,SAAAvkC,GAAC,MAAe,gBAAXA,EAAEyxC,OAAwBppC,OACjDspC,EACAJ,EAAWhN,OAAO,SAAAvkC,GAAC,MAAe,eAAXA,EAAEyxC,OAAuBppC,OAChDupC,EACAL,EAAWhN,OAAO,SAAAvkC,GAAC,MAAe,gBAAXA,EAAEyxC,OAAwBppC,OAEvDkpC,EAAWllC,QAAQ,SAAAwlC,GACf,IAAMv+B,EAAa,CACfw+B,yBAA4BN,EAC5BO,0BAA6BL,EAC7BM,yBAA4BL,EAC5BM,0BAA6BL,EAC7BM,UAAaL,EAAO1D,SACpBgE,gBAAmBN,EAAOO,QAC1BC,YAAeR,EAAOJ,KACtBa,aAAgBT,EAAOU,OAG3Bhd,IAAW+K,cAAciJ,IAAkBj2B,SAi/B7Ck/B,EAAW,gBA50Bb,SAAAC,IAAc,mGAAAC,CAAAtnC,KAAAqnC,GAAAE,EAAAvnC,KAAAwnC,EAAAH,GAAA5yC,KAAAuL,KACJuqB,0PALSkd,6CAiBA,IAAAC,EAAA1nC,KAAdsR,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GA4BX,GA3BkC,kBAAvByT,EAAQywB,aACfA,EAAazwB,EAAQywB,WACrBjZ,EAAOnZ,KAAP,gBAAArS,OAA4BykC,KAEC,kBAAtBzwB,EAAQ0wB,YACfA,EAAY1wB,EAAQ0wB,UACpBlZ,EAAOnZ,KAAP,eAAArS,OAA2B0kC,KAEE,kBAAtB1wB,EAAQwwB,YACfA,EAAYxwB,EAAQwwB,UACpBhZ,EAAOnZ,KAAP,eAAArS,OAA2BwkC,KAEG,kBAAvBxwB,EAAQ2wB,aACfA,EAAa3wB,EAAQ2wB,WACrBnZ,EAAOnZ,KAAP,gBAAArS,OAA4B2kC,KAEE,kBAAvB3wB,EAAQ4wB,aACfA,EAAa5wB,EAAQ4wB,WACrBpZ,EAAOnZ,KAAP,gBAAArS,OAA4B4kC,KAGhChB,OAAmBpmC,EACnB5G,OAAOyzC,cAAcxG,GACrBA,OAA4BrmC,EAE5BkF,KAAK4nC,iBAlqBb,WACI,GAAIC,UAAUC,cAAgBD,UAAUC,aAAaF,iBACjD,OAAO,SAAAvoC,GACHwoC,UAAUC,aAAaF,mBAClBG,KAAK1oC,EAAU,kBAAMA,EAAS,OA8pBf2oC,GAEpBrd,IAAQsd,iBACRjoC,KAAKkoC,sBAAwBC,kBAE7BnoC,KAAKooC,kBACCC,EAAsB,SAAChwB,EAAS6T,GAC1B7T,IACAA,EAAQiwB,UAAYpc,KAIhClsB,KAAKuoC,YAAc,SAAAC,GAAA,OAAAA,EAAGtpC,IACtBc,KAAKyoC,WAAa,SAAAC,GAAA,OAAAA,EAAGxpC,QAClB,KAAIyrB,IAAQge,oBACRhe,IAAQC,gBAmCZ,CACH,IAAM1b,EAAU,gDAGhB,MADA4Z,EAAOrZ,MAAMP,GACP,IAAI/Q,MAAM+Q,GArChBlP,KAAKkoC,sBAAwBC,kBAE7BnoC,KAAKooC,kBACCC,EAAsB,SAAChwB,EAAS6T,GAG9B,OApGpB,SAA4B7T,EAAS6T,GAEjC,IAeI0c,EAfAC,EAAwB,YAEtBA,KAAyBxwB,IAC3BwwB,EAAwB,kBACOxwB,IAC3BwwB,EAAwB,MAG5BA,EACAxwB,EAAQwwB,GAAyB3c,GAQjCA,KACA0c,EAAM1c,EAAO4c,kBAKT5c,EAAO4c,eAAiBF,EAAMG,IAAIC,gBAAgB9c,KAG1D7T,EAAQuwB,IAAMA,GAAO,IAsELK,CAAmB5wB,EAAS6T,GAErB7T,IAGfrY,KAAKuoC,YAAc,SAAAW,GAAiB,IAANhqC,EAAMgqC,EAANhqC,GAO1B,MACkB,iBAAPA,EACDA,EACAk2B,IAAQC,mBAAmBn2B,IAEzCc,KAAKyoC,WAAa,SAAAU,GAAA,OAAAA,EAAGjqC,IAEhBkqC,YAAYlzC,UAAU6vC,iBACvBqD,YAAYlzC,UAAU6vC,eAAiB,WACnC,OAAO/lC,KAAKqpC,cAGfD,YAAYlzC,UAAU2vC,iBACvBuD,YAAYlzC,UAAU2vC,eAAiB,WACnC,OAAO7lC,KAAKspC,cAUxBtpC,KAAKupC,mBAAmBj4B,GAExBk4B,IAAe10B,KACXxD,EACAtR,KAAKypC,4BAA4B3zC,KAAKkK,OAEtCA,KAAK0pC,yBACL1pC,KAAK4nC,iBAAiB,SAAA+B,GAClBzI,EAAmByI,EAAGpsC,OAAO,GAE7BurB,EAAOpZ,MAAM,sBAAuBwxB,GACpCgF,EAA0BhF,GAE1B3W,EAAa2C,KACT+Y,IAAU/I,sBACVgE,GAQJ,IAAM0I,EAAqB,kBAAMlC,EAAKE,iBAAiB,SAAAiC,GAlRvE,IAAmCC,GApEnC,SAAsCC,GAClC,OAAIA,EAAW9sC,SAAWikC,EAAiBjkC,QAOvC8sC,EAAWhtC,IAAIitC,GAAuBC,OAAOzsC,KAAK,MAC1C0jC,EACCnkC,IAAIitC,GAAuBC,OAAOzsC,KAAK,IAQpD,SAASwsC,EAAsBr6B,GAC3B,OAAOiH,KAAK0K,UAAU,CAClB+kB,KAAM12B,EAAK02B,KACXtD,SAAUpzB,EAAKozB,SACfiE,QAASr3B,EAAKq3B,QACdG,MAAOx3B,EAAKw3B,MACZ+C,OAAQv6B,EAAKu6B,WA+TDC,CAA6BN,KAlRjD3I,GAD+B4I,EAoReD,GAnRXjuC,MAAM,GACzCktB,EAAOnZ,KACH,qCACAuxB,GAEJgF,EAA0BhF,GAG1B3W,EAAa2C,KAAK+Y,IAAUhJ,wBAAyB6M,GAErDvf,EAAa2C,KAAK+Y,IAAUjJ,oBAAqB8M,OA6QjCnf,IAAQyf,4BACRvC,UAAUC,aAAauC,iBACnB,eACAT,GAIJzI,EAA4BjtC,OAAOo2C,YAC/BV,EAt0BqB,kDA41BtBt4B,GACXqZ,IAAQkO,YACR74B,KAAKuqC,cAAgB,IACd5f,IAAQge,mBAAqBhe,IAAQC,mBAC5C5qB,KAAKuqC,cAAgB,CAAE1H,SAAU,CAC7B,CAAE2H,qBAAsB,GACxB,CAAEC,oBAAoB,GACtB,CAAEC,yBAA0B,KAC5B,CAAEC,yBAAyB,GAC3B,CAAEC,2BAA2B,GAC7B,CAAEC,yBAA0B,IAC5B,CAAEC,wBAAyB,MAG3Bx5B,EAAQy5B,SAER/qC,KAAKuqC,cAAc1H,SAAS/kC,KAAK,CAAEktC,UAAU,IAGjDhrC,KAAKirC,iBACCr0B,KAAKwK,MAAMxK,KAAK0K,UAAUthB,KAAKuqC,gBAIhCj5B,EAAQ45B,qBACTlrC,KAAKuqC,cAAc1H,SAAS/kC,KACxB,CAAEqtC,4BAA4B,IAItCnrC,KAAKirC,iBAAiBpI,SAAS/kC,KAAK,CAChCqtC,4BAA4B,KAIpCnrC,KAAKirC,iBAAmBjrC,KAAKirC,kBAAoBjrC,KAAKuqC,kEAoB9BhI,GAAkB,IAAdjxB,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GAChC60B,EAAc4P,EAAeC,EAAIjxB,GAIvC,OAFAwX,EAAOnZ,KAAK,wBAAyB+iB,GAE9B,IAAI0Y,QAAQ,SAACC,EAASC,GACzBzD,UAAUC,aAAayD,aAAa7Y,GAC/BqV,KAAK,SAAA7b,GACFpD,EAAOzZ,IAAI,sBACXq2B,EAAyBnD,EAAIrW,GAC7Bmf,EAAQnf,KAEXsf,MAAM,SAAA/7B,GACHqZ,EAAOlZ,KAAK,4CAAAtS,OACFmS,EADE,KAAAnS,OACOo1B,EADP,MAEZgT,EAAyBnD,OAAIznC,GAC7BwwC,EAAO,IAAI/Y,IAAgB9iB,EAAOijB,EAAa6P,gEAa/BkJ,GAA6B,IAAlB/Y,EAAkB70B,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GACrD,OAAO,IAAIutC,QAAQ,SAACC,EAASC,GACzBzD,UAAUC,aAAayD,aAAa7Y,GAC/BqV,KAAK,SAAA7b,GACFpD,EAAOzZ,IAAI,sBACXq2B,EAAyB+F,EAAWvf,GACpCmf,EAAQnf,KAEXsf,MAAM,SAAA/7B,GACHqZ,EAAOlZ,KAAK,4CAAAtS,OACFmS,EADE,KAAAnS,OACOo1B,EADP,MAEZgT,EAAyB+F,OAAW3wC,GACpCwwC,EAAO,IAAI/Y,IAAgB9iB,EAAOijB,EAAa+Y,oDAoB3Cn6B,GAAS,IAAAo6B,EAAA1rC,KACzB,OAAKwpC,IAAemC,eAAkBhhB,IAAQihB,gBAKvC,IAAIR,QAAQ,SAACC,EAASC,GACzB9B,IAAeqC,aACXH,EAAKI,4BAA4Bx6B,GACjC,SAAA4a,GACImf,EAAQnf,IAEZ,SAAAzc,GACI67B,EAAO77B,OAXR27B,QAAQE,OACX,IAAIntC,MAAM,+FA6BuB,IAAdmT,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GAMrC,OALAyT,EAAQy6B,QAAUz6B,EAAQy6B,SAAR,GAAAzuC,OAAwB8jC,GAC1C9vB,EAAQmyB,WAAanyB,EAAQmyB,YA3+BF,IA6+BDnyB,EAAQy6B,QAAQC,SAAS,aAEzBxC,IAAemC,cAC9BP,QAAQE,OACX,IAAIntC,MAAM,uCAKdwsB,IAAQshB,iCACKjsC,KAAKksC,yBAAyB56B,GAI9BtR,KAAKmsC,mCAAmC76B,IAGvCy2B,KAAK,SAAAqE,GAAO,OA3ctC,SAA2BA,EAAS3I,GAChC,IAAI4I,EAAalH,EAAemH,EAC1BC,EAAM,GAQZ,GAAIH,EAAS,CAIT,IAAMI,EAAaJ,EAAQI,WAE3B,GAAIA,EAAY,CACZ,IAAMlD,EAAckD,EAAW3G,iBAE/B,GAAIyD,EAAYrsC,OAAQ,CACpBovC,EAAc,IAAIjD,YAClB,IAAK,IAAI90C,EAAI,EAAGA,EAAIg1C,EAAYrsC,OAAQ3I,IACpC+3C,EAAYI,SAASnD,EAAYh1C,IAIzC,IAAM+0C,EAAcmD,EAAWzG,iBAE/B,GAAIsD,EAAYpsC,OAAQ,CACpBqvC,EAAc,IAAIlD,YAClB,IAAK,IAAIzsC,EAAI,EAAGA,EAAI0sC,EAAYpsC,OAAQN,IACpC2vC,EAAYG,SAASpD,EAAY1sC,UAOzC0vC,EAAcD,EAAQ5J,MACtB8J,EAAcF,EAAQ9K,MAG1B6D,EAAgBiH,EAAQM,QAG5B,GAAIvH,EAAe,KAAAwH,EAC0BxH,EAAjCjZ,EADOygB,EACPzgB,OAAQ8W,EADD2J,EACC3J,SAAU4J,EADXD,EACWC,WAE1BL,EAAIzuC,KAAK,CACLouB,SACA8W,WACA4J,aACAC,MAAO3gB,EAAO6Z,iBAAiB,GAC/BhG,UAAW+M,IACXC,UAAWC,IAAUC,UAqB7B,OAlBIZ,GACAE,EAAIzuC,KAAK,CACLouB,OAAQmgB,EACRQ,MAAOR,EAAYxG,iBAAiB,GACpC9F,UAAW+M,IACXC,UAAW,OAGfT,GACAC,EAAIzuC,KAAK,CACLouB,OAAQogB,EACRO,MAAOP,EAAYvG,iBAAiB,GACpChG,UAAW+M,IACXC,UAAWC,IAAUE,OACrBzJ,eAID8I,EAiYCY,CAAkBf,EAAS96B,EAAQmyB,+DAYlBnyB,GAAS,IAAA87B,EAAAptC,KACxBqtC,EAAoB/7B,EAAQy6B,QAAQC,SAAS,WASnD,OAPA16B,EAAQy6B,QAAUz6B,EAAQy6B,QAAQ5S,OAAO,SAAAsN,GAAM,MAChC,YAAXA,KAEen1B,EAAQy6B,QAAQ9uC,OAC7B+C,KAAKypC,4BAA4Bn4B,EAAQy6B,QAASz6B,GAClD85B,QAAQC,QAAQ,OAGjBtD,KAAK,SAAAuF,GAKF,IAAMC,EACAH,EAAKI,kBAAkBl8B,EAAQy6B,QAASuB,GAE9C,OAAIC,EAActwC,QACdmwC,EAAKK,gBAAgBH,GAEdF,EAAK3D,4BACR8D,EAAej8B,GAIdy2B,KAAK,kBAAMqD,QAAQE,OAAO,IAAI/Y,IAC3B,CAAE19B,KAAM,gBACRytC,EAAehxB,EAAQy6B,QAASz6B,GAChCi8B,OAGLD,IAEVvF,KAAK,SAAAyE,GACF,IAAKa,EACD,MAAO,CAAEb,cAGb,GAAIl7B,EAAQo8B,2BAGR,MAFAN,EAAKK,gBAAgBjB,GAEf,IAAIruC,MAAM,yEAIpB,OAAO,IAAIitC,QAAQ,SAACC,EAASC,GACzB9B,IAAeqC,aACXuB,EAAKtB,4BAA4Bx6B,GACjC,SAAAo7B,GAAO,OAAIrB,EAAQ,CACfmB,aACAE,aAEJ,SAAAj9B,GACQ+8B,GACAY,EAAKK,gBAAgBjB,GAEzBlB,EAAO77B,qDAiBkB,IAA/Bk+B,EAA+B9vC,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAZ,GAAIquB,EAAQruB,UAAAZ,OAAA,EAAAY,UAAA,QAAA/C,EACvC8yC,EAAiB,GAEjBC,EAAuBF,EAAiB3B,SAAS,SACjDrG,EACAzZ,GAAUA,EAAO2Z,iBAAiB5oC,OAAS,EAE7C4wC,IAAyBlI,GACzBiI,EAAe9vC,KAAK,SAGxB,IAAMgwC,EAAuBH,EAAiB3B,SAAS,SACjDlG,EACA5Z,GAAUA,EAAO6Z,iBAAiB9oC,OAAS,EAMjD,OAJI6wC,IAAyBhI,GACzB8H,EAAe9vC,KAAK,SAGjB8vC,6DAYwBt8B,GAAS,IAAAy8B,EAAA/tC,KACxC,OAAO,IAAIorC,QAAQ,SAACC,EAASC,IAsZrC,SAAS0C,EAAcC,GACnB,IAAKA,EAAQ38B,QAAQy6B,SAA8C,IAAnCkC,EAAQ38B,QAAQy6B,QAAQ9uC,OACpD,OAAOgxC,EAAQC,gBAAgBD,EAAQ7B,SAAW,IAGtD,IAAM3F,EAASwH,EAAQ38B,QAAQy6B,QAAQxuC,OAAO,EAAG,GAEjD0wC,EAAQE,UAAU1H,GAAQwH,EAAQ38B,SAC7By2B,KAAK,SAAA7b,GACF+hB,EAAQ7B,QAAU6B,EAAQ7B,SAAW,GACrC6B,EAAQ7B,QAAQ3F,GAAUva,EAC1B8hB,EAAcC,IACf,SAAAx+B,GACCza,OAAOq5B,KAAK4f,EAAQ7B,SAASnrC,QACzB,SAAArM,GAAC,OAAIwyC,EAASqG,gBAAgBQ,EAAQ7B,QAAQx3C,MAClDk0B,EAAOrZ,MAAP,oBAAAnS,OACwBmpC,EADxB,kBACgDh3B,GAEhDw+B,EAAQG,cAAc3+B,KA7ZtBu+B,CAAc,CACV18B,UACA86B,QAAS,GACT8B,gBAAiB7C,EACjB+C,cAAe9C,EACf6C,UAfc,CACd3L,MAAO,mBAAA7B,EAAA9iC,UAAAZ,OAAIW,EAAJ,IAAAwC,MAAAugC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAIhjC,EAAJgjC,GAAA/iC,UAAA+iC,GAAA,OACHmN,EAAKtE,4BAAL1rC,MAAAgwC,EAAI,CAA6B,CAAE,UAA/BzwC,OAA6CM,KACrD0jC,MAAO,mBAAA+M,EAAAxwC,UAAAZ,OAAIW,EAAJ,IAAAwC,MAAAiuC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAI1wC,EAAJ0wC,GAAAzwC,UAAAywC,GAAA,OACHP,EAAKtE,4BAAL1rC,MAAAgwC,EAAI,CAA6B,CAAE,UAA/BzwC,OAA6CM,KACrD8uC,QAAS,mBAAA6B,EAAA1wC,UAAAZ,OAAIW,EAAJ,IAAAwC,MAAAmuC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAI5wC,EAAJ4wC,GAAA3wC,UAAA2wC,GAAA,OACLhF,IAAeqC,aAAf9tC,MAAAyrC,IAAc,CACVuE,EAAKjC,4BAA4Bx6B,IADvBhU,OACoCM,8DAoBtC0T,GACxB,OAAA0tB,EAAA,GACO1tB,EAAQm9B,4CADf,CAEIC,sBAAuBp9B,EAAQo9B,sBAC/BC,WAAY,CACR7J,UAAWxzB,EAAQm0B,yBAEvBmJ,aAAcpJ,EAAsBl0B,+DAsBVA,GAAS,IAAAu9B,EAAA7uC,KACvC8oB,EAAOnZ,KAAK,0BAEZ,IAAMm/B,EAAuB,GAYvBC,EAA4B,WAK9B,MAFwC,KAFtBz9B,EAAQy6B,SAAW,IAErBxtC,QAAQ,YAGpB,OAAO6sC,QAAQC,UANsB,IAUrCoD,EAIAn9B,EAJAm9B,4CACAf,EAGAp8B,EAHAo8B,2BACAgB,EAEAp9B,EAFAo9B,sBACAjJ,EACAn0B,EADAm0B,wBAKJ,GAAIiI,EAA4B,CAC5B,IAAMsB,EACA9N,GAAoBA,EAAiBzH,KAAK,SAAAgN,GAAM,MAC9B,eAAhBA,EAAOJ,OACCI,EAAO1D,WAAa2K,GACrBjH,EAAOU,QAAUuG,KALJuB,EAWtBjvC,KAAK8rC,4BAA4Bx6B,GAD/Bq9B,EAVoBM,EAUpBN,WAAYC,EAVQK,EAURL,aAOdlc,EAAc,CAChB4O,MAAKtC,EAAA,GACE2P,EADF,CAED5L,SAAU,CACNmM,MAAQF,GAAkBA,EAAejM,UAClC2K,MAKnB,OAAO1tC,KAAKmvC,gCArBa,CAAE,SAsBLzc,GACjBqV,KAAK,SAAA7b,GACF,IAAM2gB,EAAQ3gB,GAAUA,EAAOkjB,YAAY,GAM3C,OAJMvC,GAASA,EAAMwC,iBACXxC,EAAMwC,iBAAiBT,GACvBxD,QAAQC,WAGbtD,KAAK,WACF,MAAO,CACH6E,WAAY,SACZ1gB,cAMxB,OAAOlsB,KAAKsvC,oBAAoB,CAC5Bb,8CACAC,wBACAjJ,6BAEN3vC,KAAKkK,MAkCDuvC,EAA6B,WAC/B,IACMC,GADYl+B,EAAQy6B,SAAW,CAAE,QAAS,UACN5S,OAAO,SAAAsN,GAAM,MACxC,UAAXA,GACe,UAAXA,GAAsB9b,IAAQihB,kBAEtC,IAAK4D,EAAwBvyC,OACzB,OAAOmuC,QAAQC,UAGnB,IAAM3Y,EAn/BlB,WAAkD,IAAvB6P,EAAuB1kC,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAlB,GAAIyT,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GAGpC60B,EAAc9b,KAAKwK,MAAMxK,KAAK0K,UAChChQ,EAAQohB,aAAe2O,IAE3B,GAAIkB,EAAGhkC,QAAQ,UAAY,EAKvB,GAJKm0B,EAAY4O,QACb5O,EAAY4O,MAAQ,IAGpBhwB,EAAQwxB,eACRpQ,EAAY4O,MAAMyB,SAAWzxB,EAAQwxB,mBAClC,CACH,IAAMG,EAAa3xB,EAAQ2xB,YAAcC,IAAiBC,KAE1DzQ,EAAY4O,MAAM2B,WAAaA,OAGnCvQ,EAAY4O,OAAQ,EA8CxB,OA3CIiB,EAAGhkC,QAAQ,UAAY,GAClBm0B,EAAY8P,OAAsC,kBAAtB9P,EAAY8P,QACzC9P,EAAY8P,MAAQ,IASnB9P,EAAY8P,MAAMK,WACnBnQ,EAAY8P,MAAMK,SAAW,IAGjCnQ,EAAY8P,MAAMK,SAAS/kC,KACvB,CAAEklC,SAAU1xB,EAAQ2yB,aACpB,CAAEC,kBAAmBnC,IAAeD,GACpC,CAAEqC,sBAAuBpC,IAAeD,GACxC,CAAEsC,qBAAsBnC,IAAeH,GACvC,CAAEuC,sBAAuBrC,IAAcF,GACvC,CAAEwC,oBAAqBpC,IAAeJ,GACtC,CAAEyC,uBAAwBvC,IAAcF,GACxC,CAAE0C,uBAAwBzC,IAAeD,GACzC,CAAE2C,sBAAuBxC,IAAeH,KAG5CpP,EAAY8P,OAAQ,EAGpBD,EAAGhkC,QAAQ,YAAc,IACpBm0B,EAAY4O,OAAsC,kBAAtB5O,EAAY4O,QACzC5O,EAAY4O,MAAQ,IAGxB5O,EAAY4O,MAAQ,CAChBsB,UAAW+B,EAAgB3F,EAAA,GACpB1tB,EADoB,CAEvB+tB,OAAQ,eAKb3M,EAk7BqB+c,CAChBD,EAAyBl+B,GAI7B,OAFAwX,EAAOnZ,KAAK,0BAA2B+iB,GAEhC1yB,KAAKmvC,gCACRK,EAAyB9c,IAC/B58B,KAAKkK,MAwCP,OAAO+uC,IACFhH,KAjFiC,SAAS5C,GAC3C,GAAKA,EAAL,CAD0D,IAKlDjZ,EAAiCiZ,EAAjCjZ,OAAQ8W,EAAyBmC,EAAzBnC,SAAU4J,EAAezH,EAAfyH,WAE1BkC,EAAqBhxC,KAAK,CACtBouB,SACA8W,WACA4J,aACAC,MAAO3gB,EAAO6Z,iBAAiB,GAC/BgH,UAAWC,IAAUC,aAsExBlF,KAAKwH,GACLxH,KAhC6B,SAASuF,GACvC,GAAKA,EAAL,CAIA,IAAMhE,EAAcgE,EAASzH,iBAE7B,GAAIyD,EAAYrsC,OAAQ,CACpB,IAAMovC,EAAc,IAAIjD,YAAYE,GAEpCwF,EAAqBhxC,KAAK,CACtBouB,OAAQmgB,EACRQ,MAAOR,EAAYxG,iBAAiB,KAI5C,IAAMwD,EAAciE,EAASvH,iBAE7B,GAAIsD,EAAYpsC,OAAQ,CACpB,IAAMqvC,EAAc,IAAIlD,YAAYC,GAEpCyF,EAAqBhxC,KAAK,CACtBouB,OAAQogB,EACRO,MAAOP,EAAYvG,iBAAiB,GACpCgH,UAAWC,IAAUE,aAS5BnF,KAAK,kBAAM+G,IACXtD,MAAM,SAAA/7B,GAKH,OAJAq/B,EAAqB7tC,QAAQ,SAAAyuC,GAAgB,IAAbxjB,EAAawjB,EAAbxjB,OAC5B2iB,EAAKpB,gBAAgBvhB,KAGlBkf,QAAQE,OAAO77B,qDAW9B,OAAOm2B,QACHiC,UAAUC,cACHD,UAAUC,aAAaF,kEAUd+H,GACpB,MAAsB,WAAfA,GAA0C,gBAAfA,EAC5BvN,EACAzX,IAAQge,mBACHhe,IAAQkO,aAAelO,IAAQgY,iDAQ9BiN,GACZA,EAAYR,YAAYnuC,QAAQ,SAAA4rC,GACxBA,EAAMle,MACNke,EAAMle,SAKVihB,EAAYjhB,MACZihB,EAAYjhB,OAMZihB,EAAYC,SACZD,EAAYC,UAIhB,IAAMC,EAAMF,EAAY9G,eAEpBgH,WACOF,EAAY9G,eACnBC,IAAIgH,gBAAgBD,sDASxB,OAAOtG,IAAemC,2DAWL5I,GACjB,OAAK/iC,KAAKgwC,wBAAwB,UAK3B7N,EAAwBE,UAAUU,GACpCgF,KAAK,WACFnG,EAAsBmB,EACtBlB,GAAqB,EAErB/Y,EAAOzZ,IAAP,8BAAA/R,OAAyCylC,IAEzCxY,EAAa2C,KAAK+Y,IAAUlJ,4BACxBgG,KAZDqI,QAAQE,OACX,IAAIntC,MAAM,+FAqBlB,OAAOyjC,8DASP,OAAOV,sDAOiBuF,GACxB,IAAMN,EAAa,GACb8J,EAAa,CACflN,SAAY0D,EAAO1D,SACnBsD,KAAQI,EAAOJ,KACfc,MAASV,EAAOU,MAChBH,QAAWP,EAAOO,SAKtB,OAFAb,EAAWroC,KAAKmyC,GAET,CAAE9J,sDAWGzT,EAAawd,GACpBxd,EAAYmQ,WACbnQ,EAAYmQ,SAAW,IAK3BnQ,EAAYmQ,SACNnQ,EAAYmQ,SAAS1J,OACnB,SAAAxkC,GAAC,OAAKA,EAAEwB,eAAe,gCAE3B+5C,GACAxd,EAAYmQ,SAAS/kC,KAAK,CAAEqtC,2BAA4B,+CAuCpE,SAAS9C,EAAsB8H,GAC3B,OAAO,SAAS93B,EAAS6T,GAErB,IAAMqgB,EAAM4D,EAAsBpyC,MAAMqpC,EAAUvpC,WA4BlD,OA1BIquB,GACOkb,EAAS4I,wBAAwB,WACjC9jB,EAAO2Z,gBACP3Z,EAAO2Z,iBAAiB5oC,QAGxB4kC,GACPxpB,EAAQgqB,UAAU+E,EAASgJ,wBACtB5E,MAAM,SAAS6E,GACZ,IAAMv2B,EACA,IAAIyY,IAAgB8d,EAAI,KAAM,CAAE,gBAEtCxP,IAAqBG,8BAA8B,CAC/CsP,QAAStwC,KACToZ,OAAQU,IAGZgP,EAAOlZ,KACH,sGAGAyI,EACAyB,KAITyyB,GAIAnF,2ECrnDfhzC,EAAAgB,EAAA2wB,GAAA3xB,EAAAQ,EAAAmxB,EAAA,mDAAAwqB,IAAAn8C,EAAAQ,EAAAmxB,EAAA,wDAAAyqB,IAAAp8C,EAAAQ,EAAAmxB,EAAA,2DAAA0qB,IAAAr8C,EAAAQ,EAAAmxB,EAAA,mDAAA2qB,IAAAt8C,EAAAQ,EAAAmxB,EAAA,sCAAA4qB,IAAAv8C,EAAAQ,EAAAmxB,EAAA,kDAAA6qB,IAAAx8C,EAAAQ,EAAAmxB,EAAA,sDAAA8qB,IAAAz8C,EAAAQ,EAAAmxB,EAAA,6CAAA+qB,IAAA18C,EAAAQ,EAAAmxB,EAAA,4BAAAgrB,IAAA38C,EAAAQ,EAAAmxB,EAAA,8BAAAirB,IAAA58C,EAAAQ,EAAAmxB,EAAA,sCAAAkrB,IAAA78C,EAAAQ,EAAAmxB,EAAA,sCAAAmrB,IAAA98C,EAAAQ,EAAAmxB,EAAA,0CAAAorB,IAAA/8C,EAAAQ,EAAAmxB,EAAA,2CAAAqrB,IAAAh9C,EAAAQ,EAAAmxB,EAAA,wCAAAsrB,IAOO,IAAMd,EACP,qCAMOC,EACP,0CASOC,EACP,6CAMOC,EACP,qCAMOC,EAAoB,wBAMpBC,EACP,oCAMOC,EACP,wCAMOC,EAA2B,+BAK3BC,EAAU,cAKVC,EAAY,gBAMZC,EAAoB,wBAMpBC,EAAoB,0BAKpBC,EAAwB,wBAMxBC,EAAyB,6BAMzBC,EAAsB,2lCC7EnC,IAAMvoB,EAASH,oBAAUQ,GAMrBmoB,EAA0B,EAO1BC,EAAoB,EAOxB,SAASC,EAAkBC,EAAYngC,GACnC,IAAMogC,EAAY,GACd3O,EAAW,KAmBf,OAjBA0O,EAAWxwC,QAAQ,SAAA0wC,GACXA,EAAU5R,YAAc+M,IACxB/J,EAAWzxB,EAAQ2yB,YACZ0N,EAAU5E,YAAcC,IAAUE,SACzCnK,EAAWzxB,EAAQwxB,gBAEvByO,EAAoBK,YAAqBL,GACzC,IAAMM,EAAa,IAAIC,sUAAJ9S,CAAA,GACZ2S,EADY,CAEf5O,WACAE,WAAY3xB,EAAQ2xB,WACpB8O,MAAOR,KAGXG,EAAU5zC,KAAK+zC,KAGZH,EAiBX,SAASM,IACL,OADqDn0C,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,IACtBd,IAAI,SAAAk1C,GAAY,IAEnCjP,EAKAiP,EALAjP,SACA4J,EAIAqF,EAJArF,WACA1gB,EAGA+lB,EAHA/lB,OACA2gB,EAEAoF,EAFApF,MACAE,EACAkF,EADAlF,UANmCmF,EASNrF,EAAMsF,cAA/BpP,EAT+BmP,EAS/BnP,SAAUE,EATqBiP,EASrBjP,WAOlB,OAFAsO,EAAoBK,YAAqBL,GAElC,IAAIO,IAAgB,CACvB/O,WACAE,aACAlD,UAAW8M,EAAMxG,KACjB0L,MAAOR,EACPvO,WACA4J,aACA1gB,SACA2gB,QACAE,UAAWA,GAAa,aAQfqF,cAMjB,SAAAA,EAAYC,GAA0B,IAAA3K,MAAdp2B,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GAAI,mGAAAypC,CAAAtnC,KAAAoyC,KAClCpyC,MAAA0nC,MAAAF,EAAA4K,GAAA39C,KAAAuL,sDACKqyC,WAAaA,EAMlB3K,EAAK4K,gBAAkB,IAAIhoB,IAE3Bod,EAAK6K,YAAc,GAEnB7K,EAAKp2B,QAAUA,EAKfo2B,EAAK8K,SAAW,KAQhB9K,EAAK+K,cAAe,EAUpB/K,EAAKgL,QAAU,EAQfhL,EAAKiL,gBAAkB,KASvBjL,EAAKkL,qBAAkB93C,EAQvB4sC,EAAKmL,gBAAkB,KAQvBnL,EAAKoL,mBAAqB,GAG1BpL,EAAKqL,qBAAuBrL,EAAKsL,gBAAgBl9C,KAArBm9C,EAAAvL,IAE5BA,EAAKwL,qBAAuBxL,EAAKwL,qBAAqBp9C,KAA1Bm9C,EAAAvL,IAC5BA,EAAKyL,iCACCzL,EAAKyL,iCAAiCr9C,KAAtCm9C,EAAAvL,IAIFL,IAAS2I,wBAAwB,YACjC3I,IAAS+L,YACLnN,IAAUlJ,4BACV2K,EAAKyL,kCAGT9L,IAAS+L,YACLnN,IAAUjJ,oBACV0K,EAAKwL,uBAvFqBxL,wPANTD,0DAsIDgK,GACxB,OAAOO,EAAsBP,0DAYKngC,GAClC,IAAM22B,EAAiBtd,IAAQsd,iBAK/B,OAJ2BA,EACrBZ,IAASgM,kCAAkC/hC,GAC3C+1B,IAASiM,+BAA+BhiC,IAEpBy2B,KACtB,SAAA0J,GACI,IAAM8B,EAAStL,EACT+J,EAAsBP,GACtBD,EAAkBC,EAAYngC,GAEpC,OAAOiiC,EAAOC,KAAK,SAAA3G,GAAK,OAAKA,EAAM4G,qBAC7BrI,QAAQE,OACN,IAAI/Y,IACAmhB,wBACNH,wCAkLCI,EAAWtnB,GAC1Bgb,IAAS+L,YAAYO,EAAWtnB,0CAQdsnB,EAAWtnB,GAC7Bgb,IAAS5a,eAAeknB,EAAWtnB,kCAOb,IAAd/a,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GAGlB,OAFAmC,KAAKsR,QAAUA,EAER+1B,IAASvyB,KAAK9U,KAAKsR,kDA0NNsiC,GACpB,IAAMrJ,EACAqJ,EAAQvM,IAAS4D,iBAAmB5D,IAASkD,cAEnD,OAAKA,EAIE3zB,KAAKwK,MAAMxK,KAAK0K,UAAUipB,IAHtB,6CAWUsJ,EAAY3nB,GACjC,OAAOmb,IAASe,kBAAkByL,EAAY3nB,uCAO/BA,GACf,OAAOmb,IAASkB,YAAYrc,sCAOd2gB,GACd,OAAOxF,IAASoB,WAAWoE,mDAQ3B,OAAOxF,IAASqC,wEAUWiG,GAC3B,OAAOtI,IAAS2I,wBAAwBL,+CAYxC,OAAOhlB,IAAQghB,6DASf,OAAOtE,IAAS+I,mFAShB,OAAO/I,IAASyM,wFAOerN,GAC/B,OAAOY,IAAS0M,4BAA4BtN,gDAUpB1D,GACxB,OAAOsE,IAAS2M,qBAAqBjR,wCAerB7W,GAChB,OAAOkmB,EAAI6B,iBAAiB5M,IAASkB,YAAYrc,6CAe7BgoB,GACpB,OAAOA,GAAyB,iBAAbA,GACC,YAAbA,2CAQa70C,GACpBgoC,IAASO,iBAAiBvoC,2CAQPuwC,GACnBvI,IAASoG,gBAAgBmC,qDAQzB,OAAOvI,IAAS8M,iEA3nBhB9M,IAAS5a,eACLwZ,IAAUlJ,4BACV/8B,KAAKmzC,kCAGT9L,IAAS5a,eACLwZ,IAAUjJ,oBACVh9B,KAAKkzC,sBAGTlzC,KAAKysB,eACDwZ,IAAU9J,uBACVn8B,KAAK+yC,sBAGL/yC,KAAKo0C,sBACLp0C,KAAKysB,eACDwZ,IAAUhK,kBACVj8B,KAAKo0C,sEAqDOzoB,EAAgB0oB,GAAO,IAAA3I,EAAA1rC,KAC3CA,KAAKwyC,SAAW,IAAI8B,IAChB3oB,EAAgB0oB,EAAOr0C,KAAKuqB,cAEhCvqB,KAAKo0C,qBAAuB,WAExB1I,EAAK+G,cAAe,EAMpB,IACI/G,EAAK8G,SAAS+B,0BACV7I,EAAKmH,iBACTnH,EAAK8G,SAASgC,6BACV9I,EAAKoH,yBAE2B,IAAzBpH,EAAKkH,iBACZlH,EAAK8G,SAASiC,mCACV/I,EAAKkH,iBAEf,MAAOnjC,GACLoxB,IAAqBC,iBAAiBrxB,GACtCqZ,EAAOrZ,MACH,wBAAAnS,OAAwBouC,EAAKgJ,kBAA7B,eAAAp3C,OACYouC,EAAKmH,gBADjB,oBAAAv1C,OAEiBouC,EAAKkH,gBAFtB,sBAGAnjC,GAGRi8B,EAAKjf,eAAewZ,IAAUhK,kBAC1ByP,EAAK0I,sBACT1I,EAAK0I,qBAAuB,MAMP,IAAjB1I,EAAKgH,QACLhH,EAAK8G,SAASmC,oBAAoBjJ,EAAKgH,SAI/C1yC,KAAKozC,YAAYnN,IAAUhK,kBACvBj8B,KAAKo0C,sBAGTp0C,KAAKozC,YAAYnN,IAAU9J,uBACvBn8B,KAAK+yC,qEAYT/yC,KAAKmzC,iCAAiC9L,IAAS+I,kEAQd,IAE7BwE,EACAC,EAH6BzH,EAAAptC,KAArB80C,EAAqBj3C,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GACvBk3C,EAAoB/0C,KAAK2yC,iBAAmB,GAIlD3yC,KAAK2yC,gBAAkBmC,EAEvBF,EAAwBG,EAAkB5b,OACtC,SAAAj6B,GAAE,OAAKkuC,EAAK4H,UAAU91C,KAE1B21C,EAAyBC,EAAe3b,OACpC,SAAAj6B,GAAE,OAAuC,IAAnC61C,EAAkBx2C,QAAQW,KAEpCc,KAAKqyC,WAAW9nB,aAAa2C,KACzB+nB,2BACAL,EACAC,yCAQA70C,KAAKwyC,WAODxyC,KAAKwyC,UAAmC,cAAvBxyC,KAAKwyC,SAAS/8C,MAC/BuK,KAAKwyC,SAASjtB,QAGlBvlB,KAAKwyC,SAAW,KAChBxyC,KAAKyyC,cAAe,sDAaDyC,GACvBl1C,KAAK4yC,gBAAkBsC,EAEnBl1C,KAAKwyC,UAAYxyC,KAAKyyC,cACtBzyC,KAAKwyC,SAASiC,mCAAmCS,2CAezCC,GACZn1C,KAAK8yC,mBAAqBqC,EAEtBn1C,KAAKwyC,UAAYxyC,KAAKyyC,cACtBzyC,KAAKwyC,SAASgC,6BAA6BW,uCAYvCj2C,GAERc,KAAK6yC,gBAAkB3zC,EACnBc,KAAKwyC,UAAYxyC,KAAKyyC,cACtBzyC,KAAKwyC,SAAS+B,0BAA0Br1C,gDAsD3Bk2C,EAAWC,EAAWzB,EAAOtiC,GAC9C,IAAMi5B,EAAgB6H,EAAIkD,iBAAiB1B,QAED,IAA/BtiC,EAAQikC,qBACflO,IAASmO,gBAAgBjL,EAAej5B,EAAQikC,oBAEhDprB,IAAWqB,UAAUiqB,uBACjB,CAAEF,mBAAoBjkC,EAAQikC,sBAIlC5qB,IAAQ+qB,yBACRL,EAAUM,aAAe,UAG7BrE,EAA0BM,YAAqBN,GAE/C,IAAMsE,EACA,IAAIC,IACF71C,KACAsxC,EACA8D,EACAC,EAAW9K,EACXqJ,EAAOtiC,GAIf,OAFAtR,KAAKsyC,gBAAgBvmB,IAAI6pB,EAAc12C,GAAI02C,GAEpCA,gDAYWE,GAClB,IAAM52C,EAAK42C,EAAwB52C,GAEnC,QAAIc,KAAKsyC,gBAAgBxjB,IAAI5vB,KAEzBc,KAAKsyC,gBAAgB7jB,OAAOvvB,IAErB,yCAWD2tC,GACV,IAAKA,EACD,MAAM,IAAI1uC,MAAM,wCAGpB6B,KAAKuyC,YAAYz0C,KAAK+uC,GAEtBA,EAAMwF,WAAaryC,KAAKqyC,8CASxB,OAAOryC,KAAK0yC,oDAQZ,IAAMqD,EAAa/1C,KAAKg2C,eAAelJ,KAGvC,OAAOiJ,EAAW94C,OAAS84C,EAAW,QAAKj7C,+CAQ3C,IAAMm7C,EAAaj2C,KAAKg2C,eAAelJ,KAGvC,OAAOmJ,EAAWh5C,OAASg5C,EAAW,QAAKn7C,yCAShCilC,GACX,IAAIwT,EAASvzC,KAAKuyC,YAAY32C,QAO9B,YALkBd,IAAdilC,IACAwT,EAASA,EAAOpa,OACZ,SAAA0T,GAAK,OAAIA,EAAMqJ,YAAcnW,KAG9BwT,0CASKxT,GACZ,IAAIoW,EAAe,GADIhpB,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAGvB,QAAAwyB,EAAAC,EAAkBvtB,KAAKsyC,gBAAgB9kB,SAAvCn4B,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAiD,KACvCipB,EADuC9oB,EAAA/3B,MAClB8gD,qBAAgBv7C,EAAWilC,GAElDqW,IACAD,EAAeA,EAAa74C,OAAO84C,KAPpB,MAAAt8B,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,GAWvB,OAAO8oB,uCAQE5gD,GACT,IAAM+gD,EAAe,GASrB,OAPAt2C,KAAKg2C,eAAelJ,KAAiB7rC,QAAQ,SAAAs1C,GAEzCD,EAAax4C,KAAKvI,EAAQghD,EAAWC,OAASD,EAAWE,YAKtDrL,QAAQsL,IAAIJ,4CAONzJ,GACb,IAAM8J,EAAM32C,KAAKuyC,YAAYh0C,QAAQsuC,IAExB,IAAT8J,GAIJ32C,KAAKuyC,YAAYh1C,OAAOo5C,EAAK,8CAUdC,GACf,IAAIC,EAAgB,GADE7oB,GAAA,EAAAC,GAAA,EAAAC,OAAApzB,EAAA,IAGtB,QAAAqzB,EAAAC,EAAkBpuB,KAAKsyC,gBAAgB9kB,SAAvCn4B,OAAAo4B,cAAAO,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAAiD,KACvC8oB,EADuC3oB,EAAA54B,MACjBwhD,mBAAmBH,GAE/CC,EAAgBA,EAAcv5C,OAAOw5C,IANnB,MAAAh9B,GAAAmU,GAAA,EAAAC,EAAApU,EAAA,YAAAkU,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAatB,OAJApF,EAAOpZ,MACH,6BAAApS,OAA6Bs5C,GAA7B,WAAAt5C,OACiBu5C,EAAc55C,SAE5B45C,+CA6KH72C,KAAKwyC,WACLxyC,KAAKwyC,SAASjtB,QACdvlB,KAAKyyC,cAAe,EAEpBzyC,KAAKysB,eAAewZ,IAAU9J,uBAC1Bn8B,KAAK+yC,6DAYHjlB,EAAK8C,EAAMomB,EAAY9kB,GACjC,IAAM2a,EAAQ/e,EAAImpB,eAAermB,GAE5Bic,IAEOA,EAAMqK,gBAIPrK,EAAM3a,YAAcA,GAC3BpJ,EAAOrZ,MAAP,GAAAnS,OACOuvC,EADP,qBAAAvvC,OACgC40B,EAAU,KAAO,SADjD,WAIJ2a,EAAMsK,cAAcH,EAAYlpB,IAR5BhF,EAAOlZ,KAAP,6CAAAtS,OAAyDszB,gDAqB9CxU,EAAI6e,GACnB,IAAIj7B,KAAKwyC,SAGL,MAAM,IAAIr0C,MAAM,gCAFhB6B,KAAKwyC,SAAS4E,YAAYh7B,EAAI6e,oCAY7B1lC,GACDyK,KAAK0yC,SAAWn9C,IAChByK,KAAK0yC,OAASn9C,EACVyK,KAAKwyC,UAAYxyC,KAAKyyC,cACtBzyC,KAAKwyC,SAASmC,oBAAoBp/C,GAEtCyK,KAAKuqB,aAAa2C,KAAK+Y,IAAU3J,oBAAqB/mC,sCAUpD2J,GACN,OAAQc,KAAK2yC,iBACN3yC,KAAK2yC,gBAAgBp0C,QAAQW,IAAO,2DAWd6jC,GAC7B,IAAMsU,EAAoBr3C,KAAKq2C,gBAAgBvJ,KADR1d,GAAA,EAAAC,GAAA,EAAAC,OAAAx0B,EAAA,IAGvC,QAAAy0B,EAAAC,EAAoB6nB,EAApBhiD,OAAAo4B,cAAA2B,GAAAG,EAAAC,EAAA9B,QAAAC,MAAAyB,GAAA,EAAuC,CAAAG,EAAAh6B,MAC7B+hD,eAAevU,IAJc,MAAAjpB,GAAAuV,GAAA,EAAAC,EAAAxV,EAAA,YAAAsV,GAAA,MAAAI,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAAsB,EAAA,MAAAC,0FCh6B/Cv7B,EAAOD,QAZW,CAIdo5C,OAAQ,SAKRD,QAAS,0RCZb,IAAMsK,EAA6B,GAoDnC,SAAShlB,EAAgB9iB,EAAO6B,EAASy6B,GACrC,GAAqB,WAAjB9W,EAAOxlB,SAA4C,IAAfA,EAAM5a,KAkB1C,OARAmL,KAAKwyB,IAAM,CACP/iB,QACAijB,YAAaphB,EACby6B,QAASA,GAAW3rC,MAAMG,QAAQwrC,GAC5BA,EAAQnwC,MAAM,QACdd,GAGF2U,EAAM5a,MACd,IAAK,kBACL,IAAK,wBACL,IAAK,gBACDmL,KAAKnL,KAAO6+C,oBACZ1zC,KAAKkP,QACCqoC,EAA2Bv3C,KAAKnL,OAC3BmL,KAAKwyB,IAAIuZ,SAAW,IAAIvuC,KAAK,MACxC,MACJ,IAAK,uBACL,IAAK,gBACDwC,KAAKnL,KAAO6+C,YACZ1zC,KAAKkP,QACCqoC,EAA2Bv3C,KAAKnL,OAC3BmL,KAAKwyB,IAAIuZ,SAAW,IAAIvuC,KAAK,MACxC,MACJ,IAAK,8BACL,IAAK,uBACD,IAAMi1B,EAAiBhjB,EAAMgjB,gBAAkBhjB,EAAM+nC,WAKjDlmC,GACOA,EAAQgwB,SACNyK,GAAWA,EAAQxtC,QAAQ,UAAY,KACrB,aAAnBk0B,GACsB,aAAnBA,GACmB,cAAnBA,GACmB,cAAnBA,GACmB,UAAnBA,GACmB,WAAnBA,GACmB,aAAnBA,IACXzyB,KAAKnL,KAAO6+C,yBACZ1zC,KAAKkP,QACCqoC,EAA2Bv3C,KAAKnL,MA6CtD,SAA2C4iD,EAAsB/kB,GAC7D,GAAIA,GAAeA,EAAY4O,OAAS5O,EAAY4O,MAAMsB,UACtD,OAAQ6U,GACR,IAAK,QACD,OAAO/kB,EAAY4O,MAAMsB,UAAUgB,SACvC,IAAK,SACD,OAAOlR,EAAY4O,MAAMsB,UAAUiB,UACvC,QACI,OAAOnR,EAAY4O,MAAMsB,UAAU6U,IAAyB,GAIpE,MAAO,GAxDeC,CACEjlB,EACAnhB,KAEZtR,KAAKnL,KAAO6+C,oBACZ1zC,KAAKkP,QACCqoC,EAA2Bv3C,KAAKnL,MAC5B4a,EAAMgjB,gBAEpB,MAGJ,QACIzyB,KAAKnL,KAAO6+C,UACZ1zC,KAAKkP,QACCO,EAAMP,SAAWqoC,EAA2Bv3C,KAAKnL,UAGxD,IAAqB,iBAAV4a,EAWd,MAAM,IAAItR,MAAM,qBAVZo5C,EAA2B9nC,IAC3BzP,KAAKnL,KAAO4a,EACZzP,KAAKkP,QAAUoC,GAAWimC,EAA2B9nC,IAKrDzP,KAAKkP,QAAUO,EAMvBzP,KAAK6O,MAAQY,EAAMZ,QAAU,IAAI1Q,OAAS0Q,MAzI9C0oC,EAA2B7D,0BACrB,sCACN6D,EAA2B7D,uCACrB,qCACN6D,EACI7D,0CACE,8FAEN6D,EAA2B7D,kCACrB,+CACN6D,EAA2B7D,kCACrB,sCACN6D,EAA2B7D,iCACrB,mCACN6D,EAA2B7D,qCACrB,kCACN6D,EAA2B7D,WACrB,6BACN6D,EAA2B7D,qBACrB,4CACN6D,EAA2B7D,aACrB,2CACN6D,EAA2B7D,qBACrB,sCACN6D,EAA2B7D,qBACrB,kCACN6D,EAA2B7D,yBACrB,iDACN6D,EAA2B7D,uBACrB,wDA+GNnhB,EAAgBr8B,UAAYlB,OAAOY,OAAOuI,MAAMjI,WAChDq8B,EAAgBr8B,UAAUyhD,YAAcplB,EAuBzBA,oCCxKfn+B,EAAAgB,EAAA2wB,GAAA3xB,EAAAQ,EAAAmxB,EAAA,wCAAA6xB,IAAAxjD,EAAAQ,EAAAmxB,EAAA,8CAAAwB,IAAAnzB,EAAAQ,EAAAmxB,EAAA,+CAAA8xB,IAAAzjD,EAAAQ,EAAAmxB,EAAA,uCAAAyB,IAAApzB,EAAAQ,EAAAmxB,EAAA,4CAAA+xB,IAAA1jD,EAAAQ,EAAAmxB,EAAA,wCAAAsrB,IAGO,IAAMuG,EAAsB,gBActBrwB,EAA4B,2BAK5BswB,EAA6B,2BAK7BrwB,EAAqB,yBAKrBswB,EAA0B,yBAM1BzG,EAAsB,ufC9BpB,SAAS0G,EAAIvd,GAGxB,IAFA,IAAMrE,EAAQqE,EAAI19B,MAAM,UAEfxI,EAAI,EAAG2I,EAASk5B,EAAMl5B,OAAQ3I,EAAI2I,EAAQ3I,IAAK,CACpD,IAAI0jD,EAAM,KAAA16C,OAAQ64B,EAAM7hC,IAEpBA,IAAM2I,EAAS,IACf+6C,GAAU,QAEd7hB,EAAM7hC,GAAK0jD,EAEf,IAAM72B,EAAO,GAAA7jB,OAAM64B,EAAMC,QAAZ,QAEbp2B,KAAKm2B,MAAQA,EACbn2B,KAAKga,IAAMmH,EAAUgV,EAAM34B,KAAK,IAChCwC,KAAKmhB,QAAUA,EASnB42B,EAAI7hD,UAAU+hD,SAAU,EAMxBF,EAAI7hD,UAAUgiD,qBAAsB,EAMpCH,EAAI7hD,UAAUiiD,qBAAsB,EAKpCJ,EAAI7hD,UAAUkiD,gBAAkB,WAK5B,IAJA,IAEIC,EAFE31B,EAAO1iB,KACPs4C,EAAa,GAFoBC,EAAA,SAK9BC,GACLH,EAAMjjB,IAAQqD,UAAU/V,EAAKyT,MAAMqiB,GAAa,WAChD,IAGMriB,EAAQ,CACVqiB,aACAC,IAJErjB,IAAQa,SACNb,IAAQO,SAASjT,EAAKyT,MAAMqiB,GAAa,WAI7Cvf,MAAO,GACPK,WAAY,IAGhBgf,EAAWE,GAAcriB,EACzBkiB,EAAIp3C,QAAQ,SAAAgO,GACR,IAAMypC,EAAWzpC,EAAKzQ,UAAU,GAAG1B,MAAM,KAAK,GAIzCq5B,EAAM8C,MAAMyf,KACbviB,EAAM8C,MAAMyf,GAAY,CACpB9nB,KAAM8nB,EACN1gB,MAAO,KAGf7B,EAAM8C,MAAMyf,GAAU1gB,MAAMl6B,KAAKmR,MAErCopC,EAAMjjB,IAAQqD,UAAU/V,EAAKyT,MAAMqiB,GAAa,kBAC5Cv3C,QAAQ,SAAAgO,GACR,IAAM0pC,EAAM1pC,EAAK1Q,QAAQ,KACnBo7B,EAAY1qB,EAAKsP,OAAO,EAAGo6B,GAAKp6B,OAAO,IACvC0a,EAAQhqB,EAAKsP,OAAO,GAAKob,EAAU18B,QAAQH,MAAM,KAEnDm8B,EAAMh8B,QACNk5B,EAAMmD,WAAWx7B,KAAK,CAClB67B,YACAV,aAnCPuf,EAAa,EAAGA,EAAa91B,EAAKyT,MAAMl5B,OAAQu7C,IAAcD,EAA9DC,GAyCT,OAAOF,GAQXP,EAAI7hD,UAAU0iD,aAAe,SAAShoB,GAElC,IAAMioB,EAAS74C,KAAKo4C,kBAChBtoC,GAAS,EAWb,OATA9a,OAAOq5B,KAAKwqB,GAAQ53C,QAAQ,SAAAu3C,GACpB1oC,GAGA+oC,EAAOL,GAAYvf,MAAMrI,KACzB9gB,GAAS,KAIVA,GAIXioC,EAAI7hD,UAAU4iD,OAAS,WACnB,IAAIxkD,EAAGqI,EAAGq7B,EAAOxB,EAAOuiB,EAASC,EAEjC,IAAK1kD,EAAI,EAAGA,EAAI0L,KAAKm2B,MAAMl5B,OAAQ3I,IAI/B,IAHA0jC,EAAQh4B,KAAKm2B,MAAM7hC,GAAGwI,MAAM,SACtBqd,MAEc,WADpBqc,EAAQpB,IAAQc,WAAW8B,EAAM5B,UACvBD,MAAV,CAKA,IAFA4iB,EAAU,GACVviB,EAAMF,IAAIr5B,OAAS,EACdN,EAAI,EAAGA,EAAIq7B,EAAM/6B,OAAQN,IAAK,CAC/B,GAA8B,cAA1Bq7B,EAAMr7B,GAAG4hB,OAAO,EAAG,GAAoB,CAEvC,GAAoB,QADpBy6B,EAAS5jB,IAAQqB,YAAYuB,EAAMr7B,KACxB9H,MAAiC,SAAhBmkD,EAAOnkD,KAC/B,SAEJ2hC,EAAMF,IAAIx4B,KAAKk7C,EAAO95C,IAE1B65C,GAAO,GAAAz7C,OAAO06B,EAAMr7B,GAAb,QAEXqD,KAAKm2B,MAAM7hC,GAAX,GAAAgJ,OAAmB83B,IAAQmB,WAAWC,GAAtC,QAAAl5B,OAAmDy7C,GAEvD/4C,KAAKga,IAAMha,KAAKmhB,QAAUnhB,KAAKm2B,MAAM34B,KAAK,KAI9Cu6C,EAAI7hD,UAAU+iD,mBAAqB,SAAS56C,GACxC,IAAMqkB,EAAO1iB,KACPg4B,EAAQ5C,IAAQqD,UAAUz4B,KAAKmhB,QAAS9iB,GAO9C,OALA25B,EAAM/2B,QAAQ,SAAAgO,GACVyT,EAAKvB,QAAUuB,EAAKvB,QAAQ/jB,QAAb,GAAAE,OAAwB2R,EAAxB,QAAoC,MAEvDjP,KAAKga,IAAMha,KAAKmhB,QAAUnhB,KAAKm2B,MAAM34B,KAAK,IAEnCw6B,GAKX+f,EAAI7hD,UAAUgjD,iBAAmB,SAASV,EAAYn6C,GAClD,IAAMqkB,EAAO1iB,KACPg4B,EAAQ5C,IAAQqD,UAAUz4B,KAAKm2B,MAAMqiB,GAAan6C,GAQxD,OANA25B,EAAM/2B,QAAQ,SAAAgO,GACVyT,EAAKyT,MAAMqiB,GACL91B,EAAKyT,MAAMqiB,GAAYp7C,QAAvB,GAAAE,OAAkC2R,EAAlC,QAA8C,MAExDjP,KAAKga,IAAMha,KAAKmhB,QAAUnhB,KAAKm2B,MAAM34B,KAAK,IAEnCw6B,GAIX+f,EAAI7hD,UAAUijD,SAAW,SAAS9tC,EAAM+tC,GACpC,IAAI9kD,EAAGqI,EAAGyE,EAAG42B,EAAOxB,EAAOwiB,EAAQpoB,EAAMynB,EAKzC,IADArgB,EAAQ5C,IAAQqD,UAAUz4B,KAAKmhB,QAAS,aAC9BlkB,OACN,IAAK3I,EAAI,EAAGA,EAAI0jC,EAAM/6B,OAAQ3I,IAAK,CAE/B,IAAMqlC,GADN0e,EAAMrgB,EAAM1jC,GAAGwI,MAAM,MACCs5B,QAAQ7X,OAAO,GAIrC,IAFAlT,EAAK1W,EAAE,QAAS,CAAE0b,MAAO,kCACrBspB,cACCh9B,EAAI,EAAGA,EAAI07C,EAAIp7C,OAAQN,IACxB0O,EAAK1W,EAAE,UAAW,CAAEE,KAAMwjD,EAAI17C,KAAM4T,KAExClF,EAAKkF,KAGb,IAAKjc,EAAI,EAAGA,EAAI0L,KAAKm2B,MAAMl5B,OAAQ3I,IAE/B,GAAsB,WADtBkiC,EAAQpB,IAAQc,WAAWl2B,KAAKm2B,MAAM7hC,GAAGwI,MAAM,QAAQ,KAC3Cq5B,OACa,UAAhBK,EAAML,OACU,gBAAhBK,EAAML,MAFf,CAKA,IAAMkjB,EAAYjkB,IAAQO,SAAS31B,KAAKm2B,MAAM7hC,GAAI,WAG9Cs8B,IADAyoB,GACOA,EAAU76C,UAAU,GAAG1B,MAAM,KAAK,GAK7CuO,EAAK1W,EAAE,UAAW,CAAE2kD,QAASF,EACzBvkD,KAAM2hC,EAAML,QAChB,IAAMojB,EAAWnkB,IAAQO,SAAS31B,KAAKm2B,MAAM7hC,GAAI,UAEjD,GAAIilD,EAAU,CAEV,IAAMd,EAAMrjB,IAAQa,SAASsjB,GAE7BluC,EAAK3E,MAAM,CAAE7R,KAAM4jD,IAGvB,GAAIrjB,IAAQO,SAAS31B,KAAKm2B,MAAM7hC,GAAI,aAAa2I,OAAQ,CAOrD,IANAoO,EAAK1W,EAAE,cACH,CAAE0b,MAAO,6BACL8lB,MAAOK,EAAML,QACjBvF,GACAvlB,EAAK3E,MAAM,CAAEkqB,SAEZj0B,EAAI,EAAGA,EAAI65B,EAAMF,IAAIr5B,OAAQN,IAAK,CACnCq8C,EACM5jB,IAAQO,SACN31B,KAAKm2B,MAAM7hC,GADb,YAAAgJ,OAEck5B,EAAMF,IAAI35B,KAC9B0O,EAAK1W,EAAE,eAAgBygC,IAAQqB,YAAYuiB,IAI3C,IAAMQ,EACApkB,IAAQO,SACN31B,KAAKm2B,MAAM7hC,GADb,UAAAgJ,OAEYk5B,EAAMF,IAAI35B,KAE5B,GAAI68C,EAIA,IAHAnB,EAAMjjB,IAAQ6B,UAAUuiB,GAGnBp4C,EAAI,EAAGA,EAAIi3C,EAAIp7C,OAAQmE,IACxBiK,EAAK1W,EAAE,YAAa0jD,EAAIj3C,IAAImP,KAKpCvQ,KAAKy5C,eAAenlD,EAAG+W,EAAMmrB,EAAMF,IAAI35B,IAEvC0O,EAAKkF,KAET,IAAMmpC,EACAtkB,IAAQqD,UAAUz4B,KAAKm2B,MAAM7hC,GAAI,YAAa0L,KAAKmhB,SASzD,GAPIu4B,EAAOz8C,SACPoO,EAAK1W,EAAE,aAAc,CAAEglD,SAAU,IACjCD,EAAOz4C,QACH,SAAAgO,GAAI,OAAI5D,EAAK1W,EAAE,SAAUygC,IAAQ0B,YAAY7nB,IAAOsB,OACxDlF,EAAKkF,MAGLqgB,EAAM,CACN,IAAMgpB,EAAUxkB,IAAQ0C,UAAU93B,KAAKm2B,MAAM7hC,IADvC64B,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAGN,QAAAwyB,EAAAC,EAAgDqsB,EAAhDvkD,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAyD,KAAA0sB,EAAAC,EAAAxsB,EAAA/3B,MAAA,GAA5CwkD,EAA4CF,EAAA,GAA7BG,EAA6BH,EAAA,GACrDxuC,EAAK1W,EAAE,SAAU,CACbi8B,KAAMmpB,EACN1pC,MAAO,oCAGX2pC,EAAe/4C,QAAQ,SAAAg5C,GAEnB,IAAMtB,EAAMsB,EAAY17C,QAAQ,KAC1B27C,EAAKD,EAAY17B,OAAOo6B,EAAM,GAGpC,GADAttC,EAAK1W,EAAE,cACkB,IAArBulD,EAAG37C,QAAQ,KACX8M,EAAK3E,MAAM,CAAE7R,KAAMqlD,QAChB,CACH,IAAMrlD,EAAOqlD,EAAGp9C,MAAM,IAAK,GAAG,GAE9BuO,EAAK3E,MAAM,CAAE7R,SAEb,IAAIslD,EAAID,EAAGp9C,MAAM,IAAK,GAAG,GAEzBq9C,EAAI/kB,IAAQC,mBAAmB8kB,GAC/B9uC,EAAK3E,MAAM,CAAEnR,MAAO4kD,IAExB9uC,EAAKkF,OAGTlF,EAAKkF,MA9BH,MAAAuJ,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,GAmCA+H,IAAQqD,UAAUz4B,KAAKm2B,MAAM7hC,GAAI,iBAExB2M,QAAQ,SAAAgO,GACnB,IAAM0pC,EAAM1pC,EAAK1Q,QAAQ,KACnBo7B,EAAY1qB,EAAKsP,OAAO,EAAGo6B,GAAKp6B,OAAO,IACvC0a,EAAQhqB,EAAKsP,OAAO,GAAKob,EAAU18B,QAAQH,MAAM,KAEnDm8B,EAAMh8B,SACNoO,EAAK1W,EAAE,aAAc,CAAEglC,YACnBtpB,MAAO,oCACX4oB,EAAMh4B,QAAQ,SAAA5K,GAAC,OAAIgV,EAAK1W,EAAE,SAAU,CAAEi8B,KAAMv6B,IAAKka,OACjDlF,EAAKkF,QAKjB,IAAM6pC,EAAWhlB,IAAQqD,UAAUz4B,KAAKm2B,MAAM7hC,GAAI,SAElD,GAAI8lD,EAASn9C,OAAQ,CAGjB,IAAMo9C,EAAOD,EACRr9C,IAAI,SAAAu9C,GAAO,OAAIA,EAAQx9C,MAAM,KAAK,KAClCC,IAAI,SAAAw9C,GAAO,OAAIA,EAAQz9C,MAAM,KAAK,KAEvCu9C,EAAKp5C,QAAQ,SAAAqV,GACTjL,EAAK1W,EAAE,SAAU,CACb2hB,MACAjG,MAAO,oCAEXhF,EAAKkF,OAGH6kB,IAAQO,SAAS31B,KAAKm2B,MAAM7hC,GAAI,iBAGlC+W,EAAK1W,EAAE,YAAa,CAChBglC,UAAW,MACXtpB,MAAO,oCAEXgqC,EAAKp5C,QAAQ,SAAAqV,GACTjL,EAAK1W,EAAE,SAAU,CAAE2hB,QAAO/F,OAE9BlF,EAAKkF,MAab,GATI6kB,IAAQO,SAAS31B,KAAKm2B,MAAM7hC,GAAI,eAChC+W,EAAK1W,EAAE,YAAY4b,KAIvBvQ,KAAKy5C,eAAenlD,EAAG+W,EAAM,MAG7B2sB,EAAQ5C,IAAQqD,UAAUz4B,KAAKm2B,MAAM7hC,GAAI,cAC/B2I,OACN,IAAKN,EAAI,EAAGA,EAAIq7B,EAAM/6B,OAAQN,IAAK,CAS/B,GARA07C,EAAMjjB,IAAQgD,YAAYJ,EAAMr7B,IAChC0O,EAAK1W,EAAE,aAAc,CACjB0b,MAAO,wCACPlR,IAAKk5C,EAAIl5C,IACTD,GAAIm5C,EAAI9iD,QAIR8iD,EAAIliD,eAAe,aAGnB,OAAQkiD,EAAIhgB,WACZ,IAAK,WACDhtB,EAAK3E,MAAM,CAAE8zC,QAAS,cACtB,MACJ,IAAK,WACDnvC,EAAK3E,MAAM,CAAE8zC,QAAS,cACtB,MACJ,IAAK,WACDnvC,EAAK3E,MAAM,CAAE8zC,QAAS,SACtB,MACJ,IAAK,WACDnvC,EAAK3E,MAAM,CAAE8zC,QAAS,SAM9BnvC,EAAKkF,KAGblF,EAAKkF,KAITvQ,KAAKy6C,kBAAkBnmD,EAAG+W,GAE1B,IAAM3W,EAAIsL,KAAKm2B,MAAM7hC,GAEjB8gC,IAAQO,SAASjhC,EAAG,aAAcsL,KAAKmhB,SACvC9V,EAAK3E,MAAM,CAAE8zC,QAAS,SACfplB,IAAQO,SAASjhC,EAAG,aAAcsL,KAAKmhB,SAC9C9V,EAAK3E,MAAM,CAAE8zC,QAAS,cACfplB,IAAQO,SAASjhC,EAAG,aAAcsL,KAAKmhB,SAC9C9V,EAAK3E,MAAM,CAAE8zC,QAAS,cACfplB,IAAQO,SAASjhC,EAAG,aAAcsL,KAAKmhB,UAC9C9V,EAAK3E,MAAM,CAAE8zC,QAAS,SAEP,MAAfhkB,EAAMH,MAENhrB,EAAK3E,MAAM,CAAE8zC,QAAS,aAE1BnvC,EAAKkF,KAIT,OAFAlF,EAAKkF,KAEElF,GAGX0sC,EAAI7hD,UAAUukD,kBAAoB,SAASjC,EAAYntC,GACnD,IAAIgtC,EACE31B,EAAO1iB,KAEbqL,EAAK1W,EAAE,aAGP,IAAM+lD,EACAtlB,IAAQO,SAAS31B,KAAKm2B,MAAMqiB,GAAa,aAAc91B,EAAKvB,SAElE,GAAIu5B,EAAS,CACT,IAAMC,EAAYvlB,IAAQwB,aAAa8jB,GAEvCrvC,EAAK1W,EAAE,UAAW,CACd0b,MAAO,yCACPuqC,OAAQD,EAAU,GAClB/nC,SAAU+nC,EAAU,KAIpBA,EAAU19C,OAAS,GACnBoO,EAAK3E,MAAM,CAAE0lC,QAASuO,EAAU,KAEpCtvC,EAAKkF,KA6BT,GAxBM6kB,IAAQqD,UACNz4B,KAAKm2B,MAAMqiB,GACX,iBACAx4C,KAAKmhB,SAEAlgB,QAAQ,SAAAgO,IACjBopC,EAAMjjB,IAAQ2B,iBAAiB9nB,IAC3BoB,MAAQ,8BACZhF,EAAK1W,EAAE,eAAea,EAAE6iD,EAAIrhB,oBACrBqhB,EAAIrhB,aAGX/nB,EACMmmB,IAAQO,SACNjT,EAAKyT,MAAMqiB,GACX,WACA91B,EAAKvB,YAETk3B,EAAIwC,MAAQ5rC,EAAKsP,OAAO,IAE5BlT,EAAK3E,MAAM2xC,GACXhtC,EAAKkF,OAET8nC,EAAMjjB,IAAQE,UAAUt1B,KAAKm2B,MAAMqiB,GAAax4C,KAAKmhB,SAC5C,CACLk3B,EAAIhoC,MAAQ,uCACZhF,EAAK3E,MAAM2xC,GAGX,IAAMrgB,EACA5C,IAAQqD,UACNz4B,KAAKm2B,MAAMqiB,GACX,eACAx4C,KAAKmhB,SAET6W,EAAM/6B,QACN+6B,EAAM/2B,QAAQ,SAAAgO,GACV,IAAMkoB,EAAY/B,IAAQuD,kBAAkB1pB,GAExCyT,EAAKu1B,UACL9gB,EAAUI,GAAK,WAEnB,IAAM3kB,EACAukB,GAA2C,iBAAvBA,EAAUvkB,SAC1BukB,EAAUvkB,SAAS5E,cACnB,GAEL0U,EAAKw1B,sBACe,QAAbtlC,GAAmC,WAAbA,IAC1B8P,EAAKy1B,qBAAoC,QAAbvlC,GAGpCvH,EAAK1W,EAAE,YAAawiC,GAAW5mB,OAI3ClF,EAAKkF,MAITwnC,EAAI7hD,UAAUujD,eAAiB,SAASjB,EAAYntC,EAAMyvC,GAEhD1lB,IAAQqD,UACNz4B,KAAKm2B,MAAMqiB,GADb,aAAAl7C,OAEew9C,IAEf75C,QAAQ,SAAAgO,GACV,IAAMopC,EAAMjjB,IAAQ6C,YAAYhpB,GAEf,YAAbopC,EAAIhnC,MACJhG,EAAK1W,EAAE,kBAAmB,CACtB0b,MAAO,qCACP9a,MAAO8iD,EAAIlgB,OAAO,KAEtB9sB,EAAKkF,OAELlF,EAAK1W,EAAE,UAAW,CACd0b,MAAO,qCACPgB,KAAMgnC,EAAIhnC,OAEVgnC,EAAIlgB,OAAOl7B,OAAS,GACpBoO,EAAK3E,MAAM,CAAEq0C,QAAW1C,EAAIlgB,OAAO,KAEvC9sB,EAAKkF,SAKjBwnC,EAAI7hD,UAAU8kD,iBAAmB,SAAS3vC,EAAMyvC,GAC5C,IAAI3kB,EAAQ,GACRkiB,EACEhtC,EAAKouB,KACH,gEAuBR,OArBI4e,EAAIp7C,SACJk5B,GAAS,uBACLkiB,EAAIzrC,KAAK,SACTupB,GAASkiB,EAAIzrC,KAAK,SAElBupB,GAAS,IAEbA,GAAS,SAEbkiB,EAAMhtC,EAAKouB,KAAK,yDACZwhB,KAAK,WAEL9kB,GAAK,aAAA74B,OAAiBw9C,EAAjB,KAAAx9C,OAAgC49C,EAAEl7C,MAAM4M,KAAK,SAC9CsuC,EAAEl7C,MAAM4M,KAAK,aACbupB,GAAK,IAAA74B,OAAQ49C,EAAEl7C,MAAM4M,KAAK,aAE9BupB,GAAS,SAKNA,GAIX4hB,EAAI7hD,UAAUilD,WAAa,SAASC,GAChC,IAAM14B,EAAO1iB,KAEbA,KAAKga,IAAM,6DAOX,IAAMqhC,EACAH,EAAEE,GAAQ3hB,KAAK,mDAEjB4hB,EAAOp+C,QACPo+C,EAAOJ,KAAK,SAACtC,EAAKjf,GACd,IAAM4hB,EACAJ,EAAExhB,GACCD,KAAK,YACL18B,IAAI,SAACw+C,EAAG16B,GAAJ,OAAgBA,EAAQ5S,aAAa,UACzC9Y,MAELmmD,EAASr+C,OAAS,IAClBylB,EAAK1I,KAAL,WAAA1c,OAEQo8B,EAAMzrB,aAAa,cACZyrB,EAAMzrB,aAAa,QAHlC,KAAA3Q,OAIQg+C,EAAS99C,KAAK,KAJtB,WASZwC,KAAKmhB,QAAUnhB,KAAKga,IACpBohC,EAAO3hB,KAAK,YAAYwhB,KAAK,WAEzB,IAAMvmD,EAAIguB,EAAK84B,aAAaN,EAAEl7C,OAE9B0iB,EAAKyT,MAAMr4B,KAAKpJ,KAWpBsL,KAAKga,IAAMha,KAAKmhB,QAAUnhB,KAAKm2B,MAAM34B,KAAK,KAI9Cu6C,EAAI7hD,UAAUslD,aAAe,SAAS36B,GAClC,IAAMkX,EAAOlX,EAAQ4Y,KAAK,eACtBtD,EAAQ,GACNzT,EAAO1iB,KACPy7C,EAAO56B,EAAQ4Y,KACjB,sEAEA4e,EAAM,CAAEliB,MAAO4B,EAAKnrB,KAAK,SAE7ByrC,KAAW,KAWX,GAVgC,aAA5Bx3B,EAAQjU,KAAK,aAEbyrC,EAAIhiB,KAAO,KAEXxV,EAAQ4Y,KAAK,0BAA0Bx8B,QAChC86B,EAAK0B,KAAK,cAAcx8B,OAC/Bo7C,EAAI1lC,MAAQ8oC,EAAKx+C,OAAS,YAAc,YAExCo7C,EAAI1lC,MAAQ,WAEZ8oC,EAAKx+C,OAAQ,CACbk5B,GAAK,iBAAA74B,OAAqB+6C,EAAIhiB,KAAzB,eAAA/4B,OACDm+C,EAAK7uC,KAAK,UADT,QAELupB,GAAK,aAAA74B,OAAiBm+C,EAAK7uC,KAAK,UAA3B,KAAAtP,OAAwCm+C,EAAK7uC,KAAK,aAEvD,IAAM8uC,EAAcD,EAAK7uC,KAAK,WAG1BupB,GADAulB,EACK,IAAAp+C,OAAQo+C,EAAR,QAEI,YAGbrD,EAAI/hB,IACEyB,EACG0B,KAAK,gBACL18B,IAAI,WAED,OAAOiD,KAAKiO,aAAa,QAE5B9Y,MACTghC,GAAK,GAAA74B,OAAO83B,IAAQmB,WAAW8hB,GAA1B,QA8BT,OA3BAliB,GAAS,uBACJslB,EAAKx+C,SACNk5B,GAAS,gCAEbkiB,EACMx3B,EAAQ4Y,KACN,6DACAx8B,SACAo7C,EAAIzrC,KAAK,WACTupB,GAAK,GAAA74B,OAAO83B,IAAQU,cAAcuiB,EAAIzrC,KAAK,UAAtC,SAELyrC,EAAIzrC,KAAK,SACTupB,GAAK,GAAA74B,OAAO83B,IAAQY,YAAYqiB,EAAIzrC,KAAK,QAApC,SAETyrC,EAAI5e,KAAK,gBAAgBwhB,KAAK,WAG1B9kB,GAAK,iBAAA74B,OAAqB0C,KAAKiO,aAAa,SAC5CkoB,GAAK,IAAA74B,OAAQ49C,EAAEl7C,MAAM+M,QACrBopB,GAAS,OACLn2B,KAAKiO,aAAa,WAClBkoB,GAAK,WAAA74B,OAAe0C,KAAKiO,aAAa,SAAjC,YAMT4S,EAAQjU,KAAK,YACrB,IAAK,YACDupB,GAAS,iBACT,MACJ,IAAK,YACDA,GAAS,iBACT,MACJ,IAAK,OACDA,GAAS,iBACT,MACJ,IAAK,OACDA,GAAS,iBAyIb,OAtIAA,GAAK,SAAA74B,OAAaujB,EAAQjU,KAAK,QAA1B,QAMDmrB,EAAK0B,KAAK,YAAYx8B,SACtBk5B,GAAS,kBAGT4B,EAAK0B,KAAK,cAAcx8B,QACxB86B,EAAK0B,KAAK,qBAAqBwhB,KAAK,WAEhC9kB,GAAK,YAAA74B,OAAgB0C,KAAKiO,aAAa,QACvCkoB,GAAK,IAAA74B,OAAQ0C,KAAKiO,aAAa,iBAC/BkoB,GAAK,IAAA74B,OAAQ0C,KAAKiO,aAAa,eAC3BjO,KAAKiO,aAAa,oBAClBkoB,GAAK,IAAA74B,OAAQ0C,KAAKiO,aAAa,oBAEnCkoB,GAAS,SAKjB4B,EAAK0B,KAAK,gBAAgBwhB,KAAK,WAE3B9kB,GAAK,GAAA74B,OAAO83B,IAAQyB,YAAY72B,MAA3B,QACDk7C,EAAEl7C,MAAMy5B,KAAK,cAAcx8B,SAC3Bk5B,GAAK,UAAA74B,OAAc0C,KAAKiO,aAAa,MAAhC,KACLkoB,GACO+kB,EAAEl7C,MACAy5B,KAAK,aACL18B,IAAI,WACD,IAAMlI,EAAOmL,KAAKiO,aAAa,QAE/B,OACKpZ,EAAI,GAAAyI,OAAMzI,EAAN,KAAgB,IACfmL,KAAKiO,aAAa,WAE/B9Y,MACAqI,KAAK,MACd24B,GAAS,QAIbA,GAASzT,EAAKs4B,iBAAiBE,EAAEl7C,MAAOA,KAAKiO,aAAa,SAM9DkoB,GAASzT,EAAKs4B,iBAAiBjjB,EAAM,MAGrCsgB,EACMtgB,EAAK0B,KACH,+DACJwhB,KAAK,WAEL9kB,GAAK,YAAA74B,OACc0C,KAAKiO,aAAa,MADhC,KAAA3Q,OAEG0C,KAAKiO,aAAa,OAFrB,UAOT4S,EACK4Y,KACG,sEAEHwhB,KAAK,WAEF,IAAIroC,EAAW5S,KAAKiO,aAAa,YAEjC2E,EAC0B,iBAAbA,EAAwBA,EAAS5E,cAAgB,GAEzD0U,EAAKw1B,sBACe,QAAbtlC,GAAmC,WAAbA,IAC1B8P,EAAKy1B,qBAAoC,QAAbvlC,IAEzB8P,EAAKu1B,SACZj4C,KAAK6M,aAAa,KAAM,WAG5BspB,GAASf,IAAQwD,oBAAoB54B,SAM7C6gB,EACK4Y,KAAK,mEACLwhB,KAAK,WAEF,IAAMthB,EAAY35B,KAAKiO,aAAa,aAC9BgrB,EACAiiB,EAAEl7C,MACCy5B,KAAK,WACL18B,IAAI,WACD,OAAOiD,KAAKiO,aAAa,UAE5B9Y,MAEL8jC,EAAMh8B,SACNk5B,GAAK,gBAAA74B,OAAoBq8B,EAApB,KAAAr8B,OAAiC27B,EAAMz7B,KAAK,KAA5C,YAMjB66C,EACMx3B,EAAQ4Y,KACN,gEACJwhB,KAAK,WAEL,IAAMrqB,EAAO5wB,KAAKiO,aAAa,QAG/BitC,EAAEl7C,MAAMy5B,KAAK,cAAcwhB,KAAK,WAC5B,IAAMpmD,EAAOmL,KAAKiO,aAAa,QAC3B1Y,EAAQyK,KAAKiO,aAAa,SAE9B1Y,EAAQ6/B,IAAQC,mBAAmB9/B,GACnC4gC,GAAK,UAAA74B,OAAcszB,EAAd,KAAAtzB,OAAsBzI,GACvBU,GAASA,EAAM0H,SACfk5B,GAAK,IAAA74B,OAAQ/H,IAEjB4gC,GAAS,WAMVA,wcCh0BEwlB,EAAS,SAETC,EAAQ,QAERC,EAAU,UAEVC,EAAoB,YAEpBC,EAAO,OAEPC,EAAS,SAETC,EAAO,OAEPC,EAAW,WAEXC,EAAe,eAEfC,EAAU,gLCHvB,IAAMC,EAAwB,CAC1BC,OAAUX,EACVY,SAAYZ,EACZa,MAASZ,EACTa,QAAWZ,EACXa,oBAAqBZ,EACrBa,iBAAkBZ,EAClBa,OAAUZ,GA+Bd,SAASa,IACL,IAAMC,EAAYjV,UAAUiV,UAE5B,GAAIA,EAAUpgC,MAAM,YAAa,CAC7B,IAAMsH,EAAU84B,EAAUpgC,MAAM,sBAAsB,GAEtD,MAAO,CACH7nB,KAAMqnD,EACNl4B,YAUZ,SAAS+4B,IACL,IAAMD,EAAYjV,UAAUiV,UAE5B,GAAIA,EAAUpgC,MAAM,eAAgB,CAChC,IAAMsH,EAAU84B,EAAUpgC,MAAM,yBAAyB,GAEzD,MAAO,CACH7nB,KAAMonD,EACNj4B,YASZ,SAASg5B,IACL,IAEIh5B,EAOInvB,EATF6nB,EACAmrB,UAAUiV,UAAUpgC,MAAM,wCAOhC,GAAIA,GAA+B,gBAAtBmrB,UAAUoV,QAUnB,OAPIvgC,GAASA,EAAMzf,OAAS,IACxBpI,EAAO6nB,EAAM,GACbsH,EAAUtH,EAAM,IAEpB7nB,IAASA,EAAO,gBAChBmvB,IAAYA,EAAU,WAEf,CACHnvB,KAAMsnD,EACNn4B,WAUZ,SAASk5B,IASL,IARA,IAAIC,EACEC,EAAY,CACdJ,EACAH,EACAE,GAIKzoD,EAAI,EAAGA,EAAI8oD,EAAUngD,OAAQ3I,IAElC,GADA6oD,EAAcC,EAAU9oD,KAEpB,OAAO6oD,EAZA,IAgBPtoD,EAAkBwoD,IAAlBxoD,KAAMmvB,EAAYq5B,IAAZr5B,QAEd,OAAInvB,KAAQwnD,EACD,CACHxnD,KAAMwnD,EAAsBxnD,GAC5BmvB,YAKRm5B,EA/GJ,WACI,IAAML,EAAYjV,UAAUiV,UAE5B,GAAIlX,QAAQ1xC,OAAOopD,UACPR,EAAUpgC,MAAM,SAAWogC,EAAUpgC,MAAM,UAAW,CAC9D,IAAMsH,EAAU84B,EAAUpgC,MAAM,oBAAoB,GAEpD,MAAO,CACH7nB,KAAM8mD,EACN33B,YAsGMu5B,KAKP,CACH1oD,KAAMunD,EACNp4B,aAASlpB,aAOI0iD,aAQjB,SAAAA,EAAYL,GACR,IAAItoD,EAAMmvB,EAEV,+FAHqBsjB,CAAAtnC,KAAAw9C,QAGM,IAAhBL,EAA6B,CACpC,IAAMM,EAAsBP,IAE5BroD,EAAO4oD,EAAoB5oD,KAC3BmvB,EAAUy5B,EAAoBz5B,aACvBm5B,EAAYtoD,QAAQwnD,GAC3BxnD,EAAOwnD,EAAsBc,EAAYtoD,MACzCmvB,EAAUm5B,EAAYn5B,UAEtBnvB,EAAOunD,EACPp4B,OAAUlpB,GAGdkF,KAAK09C,MAAQ7oD,EACbmL,KAAK29C,SAAW35B,2DAQhB,OAAOhkB,KAAK09C,yCAQZ,OAAO19C,KAAK09C,QAAU/B,oCAQtB,OAAO37C,KAAK09C,QAAU9B,sCAQtB,OAAO57C,KAAK09C,QAAU7B,wCAQtB,OAAO77C,KAAK09C,QAAU5B,mCAQtB,OAAO97C,KAAK09C,QAAU3B,qCAQtB,OAAO/7C,KAAK09C,QAAU1B,mCAQtB,OAAOh8C,KAAK09C,QAAUzB,uCAQtB,OAAOj8C,KAAK09C,QAAUxB,0CAQtB,OAAOl8C,KAAK09C,QAAUvB,uCAQtB,OAAOn8C,KAAK29C,gDAmBD35B,GACX,GAAIhkB,KAAK29C,SACL,OAAON,IAAOO,gBAAgB,CAAEt7C,OAAO0hB,GAAUhkB,KAAK29C,wDAazC35B,GACjB,OAAyC,IAAlChkB,KAAK69C,eAAe75B,6CAYbA,GACd,OAAwC,IAAjChkB,KAAK69C,eAAe75B,4CAYdA,GACb,OAAwC,IAAjChkB,KAAK69C,eAAe75B,0CA9Kdw5B,wBAwHQH,IAAOO,mHC3RpCxpD,EAAAQ,EAAAmxB,EAAA,sBAAA+3B,IAAA1pD,EAAAQ,EAAAmxB,EAAA,sBAAAg4B,kCCAA3pD,EAAAgB,EAAA2wB,GAAA3xB,EAAAQ,EAAAmxB,EAAA,qCAAAi4B,IAAA5pD,EAAAQ,EAAAmxB,EAAA,qCAAAk4B,IAAA7pD,EAAAQ,EAAAmxB,EAAA,gCAAAm4B,IAAA9pD,EAAAQ,EAAAmxB,EAAA,6BAAAo4B,IAAA/pD,EAAAQ,EAAAmxB,EAAA,8BAAAq4B,IAAAhqD,EAAAQ,EAAAmxB,EAAA,kCAAAs4B,IAAAjqD,EAAAQ,EAAAmxB,EAAA,mCAAAu4B,IAAAlqD,EAAAQ,EAAAmxB,EAAA,iCAAAw4B,IAAAnqD,EAAAQ,EAAAmxB,EAAA,wCAAAy4B,IAAApqD,EAAAQ,EAAAmxB,EAAA,yCAAA04B,IAIO,IAAMT,EAAmB,YAMnBC,EAAmB,YAOnBC,EAAc,OAMdC,EAAW,KAMXC,EAAY,MAMZC,EAAgB,UAOhBC,EAAiB,WAMjBC,EAAe,SAOfC,EAAsB,sBAOtBC,EAAuB,6DC9DpCrqD,EAAAgB,EAAA2wB,GAAA3xB,EAAAQ,EAAAmxB,EAAA,4CAAAvvB,IAAApC,EAAAQ,EAAAmxB,EAAA,+BAAA24B,IAAAtqD,EAAAQ,EAAAmxB,EAAA,yCAAA44B,IAAAvqD,EAAAQ,EAAAmxB,EAAA,yCAAA64B,IAAAxqD,EAAAQ,EAAAmxB,EAAA,qCAAA84B,IAAAzqD,EAAAQ,EAAAmxB,EAAA,sCAAA+4B,IAAA1qD,EAAAQ,EAAAmxB,EAAA,uCAAAtuB,IAAArD,EAAAQ,EAAAmxB,EAAA,+BAAAruB,IAAAtD,EAAAQ,EAAAmxB,EAAA,sCAAApuB,IAAAvD,EAAAQ,EAAAmxB,EAAA,iDAAAg5B,IAAA3qD,EAAAQ,EAAAmxB,EAAA,uCAAAhuB,IAAA3D,EAAAQ,EAAAmxB,EAAA,2CAAAi5B,IAAA5qD,EAAAQ,EAAAmxB,EAAA,sCAAA/sB,IAAA5E,EAAAQ,EAAAmxB,EAAA,sCAAAtsB,IAAArF,EAAAQ,EAAAmxB,EAAA,iCAAAk5B,IAAA7qD,EAAAQ,EAAAmxB,EAAA,8CAAAm5B,IAOO,IAAM1oD,EAA0B,oCAK1BkoD,EAAa,uBAKbC,EAAuB,uBAKvBC,EAAuB,uBAKvBC,EAAmB,6BAMnBC,EAAoB,wCAKpBrnD,EAAqB,+BAKrBC,EAAa,uBAKbC,EAAoB,8BAMpBonD,EACP,0CAKOhnD,EAAqB,8BAKrBinD,EAAyB,kCAKzBhmD,EAAoB,8BAKpBS,EAAoB,8BAKpBwlD,EAAe,0BAKfC,EAA4B,mECrFzC9qD,EAAAgB,EAAA2wB,GAAA3xB,EAAAQ,EAAAmxB,EAAA,4CAAAqY,IAAAhqC,EAAAQ,EAAAmxB,EAAA,2CAAA/uB,IAAA5C,EAAAQ,EAAAmxB,EAAA,sCAAA9uB,IAAA7C,EAAAQ,EAAAmxB,EAAA,gCAAAo5B,IAWO,IAAM/gB,EAA0B,oCAS1BpnC,EAAyB,mCAazBC,EAAoB,8BAMpBkoD,EAAc,yCCvC3B,IAAAC,EAAahrD,EAAQ,KACrBirD,EAAajrD,EAAQ,KAErBN,EAAAwrD,MAAAD,EACAvrD,EAAAstB,MAAAg+B,EAAAh+B,MACAttB,EAAAyrD,gBAAAH,EAAAG,gBACAzrD,EAAA0rD,YAAAJ,EAAAI,YACA1rD,EAAA2rD,cAAAL,EAAAK,cACA3rD,EAAA4rD,sBAAAN,EAAAM,sBACA5rD,EAAA6rD,qBAAAP,EAAAO,qBACA7rD,EAAA8rD,yBAAAR,EAAAQ,uDCVAxrD,EAAAQ,EAAAmxB,EAAA,sBAAA85B,IAAAzrD,EAAAQ,EAAAmxB,EAAA,sBAAA+5B,IAAA1rD,EAAAQ,EAAAmxB,EAAA,sBAAAg6B,IAAA3rD,EAAAQ,EAAAmxB,EAAA,sBAAAi6B,IAUO,IAAMH,EAAc,wBAOdC,EAAkB,6BAKlBC,EAAkB,6BASlBC,EAAmB,0RCxBXvY,aAMjB,SAAAA,IAA+C,IAAnCld,EAAmC1sB,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAApB,IAAI2sB,iGAAgB8c,CAAAtnC,KAAAynC,GAC3CznC,KAAKuqB,aAAeA,EAGpBvqB,KAAKqqC,iBAAmBrqC,KAAKssB,GAAKtsB,KAAKozC,YACvCpzC,KAAKigD,oBAAsBjgD,KAAKkgD,IAAMlgD,KAAKysB,0EAQnC0I,EAAW9I,GACnBrsB,KAAKuqB,aAAa6oB,YAAYje,EAAW9I,0CAS9B8I,EAAW9I,GACtBrsB,KAAKuqB,aAAakC,eAAe0I,EAAW9I,uECrCpD,SAAAlD,GAAA,IAKIg3B,EAEAC,EAPJC,EAAAjsD,EAAA,GAAAksD,EAAAlsD,EAAA,IAAAmsD,EAAAnsD,EAAA2B,EAAAuqD,GACMx3B,EAASH,oBAAUQ,GAqHzB,SAASq3B,IACL,IAAIC,EAEJ,IAEIA,GAAWvsD,QAAU8L,MAAM0gD,aAC7B,MAAOjxC,GACLqZ,EAAOrZ,MAAMA,GAGjB,OAAOgxC,EAaX,SAASE,IACL,MAAO,GAAArjD,OAAGwD,KAAKwU,SAAS7U,SAAS,IAA1B,aAAyC8d,OAAO,EAAG,GAlI/CwH,EAAA,GAKX2D,wBACI,IAAKy2B,EAAoB,CACrB,IAAMO,EAAeF,IAEjBE,IACAP,EAAqBO,EAAar/B,QAAQ,sBAEzC8+B,IAqEPS,EAAWC,IAAkBC,mBAEnCh4B,EAAOzZ,IAAI,0BAA2BuxC,GAtE1BT,EAwELS,EAvESF,GACAA,EAAa5pC,QACT,oBACAqpC,IA+DxB,IACUS,EA3DF,OAAOT,GAOXY,gBACI,IAAKX,EAAY,CACb,IAAMM,EAAeF,IAEjBE,IACAN,EAAaM,EAAar/B,QAAQ,gBAEjC++B,IAyDPY,EA8BCL,IAAQA,IAAQA,IAAQA,IA5B/B73B,EAAOzZ,IAAI,eAAgB2xC,GA1DfZ,EA4DLY,EA3DSN,GACAA,EAAa5pC,QAAQ,cAAespC,IAqDxD,IACUY,EAjDF,OAAOZ,GAOXa,gBAGI,IAAMP,EAAeF,IAErB,OAAOE,EAAeA,EAAar/B,QAAQ,kBAAevmB,GAO9DmmD,cAAcA,GACV,IAAMP,EAAeF,IAEjBE,IACIO,EACAP,EAAa5pC,QAAQ,YAAamqC,GAElCP,EAAa3pC,WAAW,mgBC3EjC,SAASmqC,EAAiBxnB,GAC7B,OAAOlY,SAASkY,EAAMT,MAAMn8B,MAAM,KAAK,GAAI,IAQxC,SAASqkD,EAAmBznB,GAC/B,OAAOlY,SAASkY,EAAMT,MAAMn8B,MAAM,KAAK,GAAI,IAQ/C,SAASskD,EAAcnnB,GACnB,OAAKA,EAAMhB,MAIJgB,EAAMhB,MACRl8B,IAAI,SAAAm8B,GAAQ,OAAIA,EAASh6B,KACzBi6B,OAAO,SAACvI,EAAMtyB,EAAO86B,GAAd,OAAwBA,EAAM76B,QAAQqyB,KAAUtyB,IACvDrB,OANM,MAaTokD,aAOF,SAAAA,EAAYpnB,GACR,GADeqN,EAAAtnC,KAAAqhD,IACVpnB,EACD,MAAM,IAAI97B,MAAM,sBAGpB6B,KAAKi6B,MAAQA,qDAyEAqnB,EAAYC,GACzB,IAAMr4C,EAAYlJ,KAAKi5B,MAAMQ,KACzB,SAAA+nB,GAAO,OAAIA,EAAQtiD,KAAOoiD,GACvBE,EAAQt4C,YAAcq4C,IAG7B,OAAOr4C,GAAaA,EAAU3T,yCAQvBksD,GACFzhD,KAAKi6B,MAAMhB,OAAUj5B,KAAKi6B,MAAMhB,MAAMh8B,SAI3C+C,KAAKi6B,MAAMhB,MACLj5B,KAAKi6B,MAAMhB,MAAME,OAAO,SAAAqoB,GAAO,OAAIA,EAAQtiD,KAAOuiD,8CAQ3CD,GACbxhD,KAAKi5B,MAAMn7B,KAAK0jD,qCAWV7nB,EAAWV,GACjB,OAAOj5B,KAAKs5B,WAAWG,KACnB,SAAAC,GAAK,OACDA,EAAMC,YAAcA,KACXV,GAASA,IAAUS,EAAMT,4CASnCU,GACP,OAAO35B,KAAKs5B,WAAWH,OACnB,SAAAO,GAAK,OAAIA,EAAMC,YAAcA,mDASdA,EAAW+nB,GAC9B,OAAO1hD,KAAKs5B,WAAWG,KACnB,SAAAC,GAAK,OAAIA,EAAMC,YAAcA,GACtBunB,EAAiBxnB,KAAWgoB,2CAS5BC,GACX,OAAO3hD,KAAKi5B,MAAMQ,KACd,SAAA+nB,GAAO,MAA0B,SAAtBA,EAAQt4C,YACF,OAATy4C,GAAiBH,EAAQjsD,QAAUosD,4CAQ/C,OAAOP,EAAcphD,KAAKi6B,uDAS1B,YAAiCn/B,IAA1BkF,KAAKi6B,MAAMX,yDASlB,IAAMyG,EAAY//B,KAAKi6B,MAAM5oB,KAE7B,GAAkB,UAAd0uB,EACA,MAAM,IAAI5hC,MAAJ,qCAAAb,OACmCyiC,EADnC,MAMV,GAAiB,IAFAqhB,EAAcphD,KAAKi6B,OAIhC,OAAOj6B,KAAKi6B,MAAMhB,MAAM,GAAG/5B,GAI/B,GAAIc,KAAKi6B,MAAMX,WAAY,CACvB,IAAMM,EAAW55B,KAAK4hD,UAAU,OAEhC,GAAIhoB,EACA,OAAOsnB,EAAiBtnB,GAE5B,IAAMJ,EAAWx5B,KAAK4hD,UAAU,OAEhC,GAAIpoB,EACA,OAAO0nB,EAAiB1nB,GAE5B,IAAMqoB,EAAW7hD,KAAK4hD,UAAU,UAEhC,GAAIC,EACA,OAAOX,EAAiBW,uCAczBtoB,GACP,IAAMC,EAAWx5B,KAAK8hD,uBAAuB,MAAOvoB,GAGpD,OAAOC,GAAY2nB,EAAmB3nB,sCAQtC,OAAOx5B,KAAKi5B,MACPl8B,IAAI,SAAAm8B,GAAQ,OAAIA,EAASh6B,KACzBi6B,OAAO,SAACvI,EAAMtyB,EAAO86B,GAAd,OAAwBA,EAAM76B,QAAQqyB,KAAUtyB,mDAS5D,IAAMyhC,EAAY//B,KAAKi6B,MAAM5oB,KAE7B,GAAkB,UAAd0uB,EACA,MAAM,IAAI5hC,MAAJ,0CAAAb,OACwCyiC,IAGlD,IAAMgiB,EAAa/hD,KAAKgiD,WARL70B,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAUnB,QAAAwyB,EAAAC,EAA4BvtB,KAAKs5B,WAAjCjkC,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA6C,KAAlC80B,EAAkC30B,EAAA/3B,MAIzC,GAAgC,QAA5B0sD,EAActoB,WACqB,WAA5BsoB,EAActoB,UAAwB,CAE7C,IAAMuoB,EAAgBf,EAAmBc,GAEzCF,EAAWxkD,OACPwkD,EAAWxjD,QAAQ2jD,GAAgB,KApB5B,MAAApoC,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,GAwBnB,OAAO00B,2CAOP,OAAOnrC,KAAK0K,UAAUthB,KAAKi6B,MAAMX,yDAQhB1I,GACZ5wB,KAAKi6B,MAAMX,aAIhBt5B,KAAKi6B,MAAMX,WAAat5B,KAAKi6B,MAAMX,WAC9BH,OAAO,SAAAgpB,GAAS,OAA4C,IAAxCA,EAAUlpB,MAAM16B,QAAhB,GAAAjB,OAA2BszB,uDAOhC+I,GACf35B,KAAKi6B,MAAMX,aAIhBt5B,KAAKi6B,MAAMX,WACLt5B,KAAKi6B,MAAMX,WACRH,OAAO,SAAAgpB,GAAS,OAAIA,EAAUxoB,YAAcA,yCAQ7CyoB,EAASC,GACbriD,KAAKi6B,MAAMhB,OACXj5B,KAAKi6B,MAAMhB,MAAMh4B,QAAQ,SAAAi4B,GACjBA,EAASh6B,KAAOkjD,IAChBlpB,EAASh6B,GAAKmjD,0CAWjB3oB,GACT15B,KAAKs5B,WAAWx7B,KAAK47B,iCAvTrB,OAJK15B,KAAKi6B,MAAMhB,QACZj5B,KAAKi6B,MAAMhB,MAAQ,IAGhBj5B,KAAKi6B,MAAMhB,oBASZA,GACNj5B,KAAKi6B,MAAMhB,MAAQA,oCAQnB,OAAOj5B,KAAKi6B,MAAM5B,wBAORA,GACVr4B,KAAKi6B,MAAM5B,UAAYA,qCAYvB,OAJKr4B,KAAKi6B,MAAMX,aACZt5B,KAAKi6B,MAAMX,WAAa,IAGrBt5B,KAAKi6B,MAAMX,yBAQPA,GACXt5B,KAAKi6B,MAAMX,WAAaA,WA4RnBgpB,EAAb,WAOI,SAAAA,EAAYC,GAAQjb,EAAAtnC,KAAAsiD,GAChBtiD,KAAKwiD,UAAYC,QAAgBF,GARzC,OAAAG,EAAAJ,EAAA,EAAAzsD,IAAA,cAAAN,MAAA,SAoBgBwqC,GACR,IAAM4iB,EACA3iD,KAAKwiD,UAAUrsB,MAAMsD,KAAK,SAAAQ,GAAK,OAAIA,EAAM5oB,OAAS0uB,IAExD,OAAO4iB,EAAgB,IAAItB,EAAUsB,GAAiB,OAxB9D,CAAA9sD,IAAA,WAAAN,MAAA,WAiCQ,OAAOktD,QAAgBziD,KAAKwiD,eAjCpCF,EAAA,iCC9YAluD,EAAAQ,EAAAmxB,EAAA,sBAAA68B,IAIO,IAAMA,EAAU,CACnBC,OAAQ,iBACRhE,iBAAkB,+BAClBiE,SAAU,mBACVC,UAAW,oBACXzoD,eAAgB,iBAChB0oD,YAAa,6CCajB,IAOAC,EAPAC,EAAA,iBAAAC,gBAAA,KACAC,EAAAF,GAAA,mBAAAA,EAAAnlD,MACAmlD,EAAAnlD,MACA,SAAAslD,EAAAC,EAAA1lD,GACA,OAAAqC,SAAA/J,UAAA6H,MAAAtJ,KAAA4uD,EAAAC,EAAA1lD,IAKAqlD,EADAC,GAAA,mBAAAA,EAAAK,QACAL,EAAAK,QACCvuD,OAAAwuD,sBACD,SAAAH,GACA,OAAAruD,OAAAyuD,oBAAAJ,GACA/lD,OAAAtI,OAAAwuD,sBAAAH,KAGA,SAAAA,GACA,OAAAruD,OAAAyuD,oBAAAJ,IAQA,IAAAK,EAAA7iD,OAAAuB,OAAA,SAAA7M,GACA,OAAAA,MAGA,SAAAi1B,IACAA,EAAA1V,KAAArgB,KAAAuL,MAEAjM,EAAAD,QAAA02B,EAGAA,iBAEAA,EAAAt0B,UAAAytD,aAAA7oD,EACA0vB,EAAAt0B,UAAA0tD,aAAA,EACAp5B,EAAAt0B,UAAA2tD,mBAAA/oD,EAIA,IAAAgpD,EAAA,GAoCA,SAAAC,EAAAhyC,GACA,YAAAjX,IAAAiX,EAAA8xC,cACAr5B,EAAAs5B,oBACA/xC,EAAA8xC,cAmDA,SAAAG,EAAAX,EAAAhyC,EAAAgb,EAAA43B,GACA,IAAAvvD,EACAwvD,EACAC,EAnHAC,EAqHA,sBAAA/3B,EACA,UAAAhrB,UAAA,0EAAAgrB,GAqBA,QAjBAvxB,KADAopD,EAAAb,EAAAM,UAEAO,EAAAb,EAAAM,QAAA3uD,OAAAY,OAAA,MACAytD,EAAAO,aAAA,SAIA9oD,IAAAopD,EAAAG,cACAhB,EAAAn2B,KAAA,cAAA7b,EACAgb,yBAIA63B,EAAAb,EAAAM,SAEAQ,EAAAD,EAAA7yC,SAGAvW,IAAAqpD,EAEAA,EAAAD,EAAA7yC,GAAAgb,IACAg3B,EAAAO,kBAeA,GAbA,mBAAAO,EAEAA,EAAAD,EAAA7yC,GACA4yC,EAAA,CAAA53B,EAAA83B,GAAA,CAAAA,EAAA93B,GAEK43B,EACLE,EAAA9oB,QAAAhP,GAEA83B,EAAArmD,KAAAuuB,IAIA33B,EAAAqvD,EAAAV,IACA,GAAAc,EAAAlnD,OAAAvI,IAAAyvD,EAAAG,OAAA,CACAH,EAAAG,QAAA,EAGA,IAAAvhD,EAAA,IAAA5E,MAAA,+CACAgmD,EAAAlnD,OAAA,IAAAqF,OAAA+O,GAAA,qEAGAtO,EAAAlO,KAAA,8BACAkO,EAAAwhD,QAAAlB,EACAtgD,EAAAsO,OACAtO,EAAAyhD,MAAAL,EAAAlnD,OAxKAmnD,EAyKArhD,EAxKAyM,iBAAAI,MAAAJ,QAAAI,KAAAw0C,GA4KA,OAAAf,EAwBA,SAAAoB,EAAApB,EAAAhyC,EAAAgb,GACA,IAAAq4B,EAAA,CAAeC,OAAA,EAAAC,YAAA9pD,EAAAuoD,SAAAhyC,OAAAgb,YACfw4B,EAZA,WAEA,IADA,IAAAjnD,EAAA,GACAtJ,EAAA,EAAiBA,EAAAuJ,UAAAZ,OAAsB3I,IAAAsJ,EAAAE,KAAAD,UAAAvJ,IACvC0L,KAAA2kD,QACA3kD,KAAAqjD,OAAA52B,eAAAzsB,KAAAqR,KAAArR,KAAA4kD,QACA5kD,KAAA2kD,OAAA,EACAvB,EAAApjD,KAAAqsB,SAAArsB,KAAAqjD,OAAAzlD,KAMA9H,KAAA4uD,GAGA,OAFAG,EAAAx4B,WACAq4B,EAAAE,OAAAC,EACAA,EAgIA,SAAAC,EAAAzB,EAAAhyC,EAAA0zC,GACA,IAAAb,EAAAb,EAAAM,QAEA,QAAA7oD,IAAAopD,EACA,SAEA,IAAAc,EAAAd,EAAA7yC,GACA,YAAAvW,IAAAkqD,EACA,GAEA,mBAAAA,EACAD,EAAA,CAAAC,EAAA34B,UAAA24B,GAAA,CAAAA,GAEAD,EAsDA,SAAAE,GAEA,IADA,IAAA1lD,EAAA,IAAAa,MAAA6kD,EAAAhoD,QACA3I,EAAA,EAAiBA,EAAAiL,EAAAtC,SAAgB3I,EACjCiL,EAAAjL,GAAA2wD,EAAA3wD,GAAA+3B,UAAA44B,EAAA3wD,GAEA,OAAAiL,EA1DA2lD,CAAAF,GAAAG,EAAAH,IAAA/nD,QAoBA,SAAAmoD,EAAA/zC,GACA,IAAA6yC,EAAAlkD,KAAA2jD,QAEA,QAAA7oD,IAAAopD,EAAA,CACA,IAAAc,EAAAd,EAAA7yC,GAEA,sBAAA2zC,EACA,SACK,QAAAlqD,IAAAkqD,EACL,OAAAA,EAAA/nD,OAIA,SAOA,SAAAkoD,EAAAF,EAAAlvD,GAEA,IADA,IAAAsvD,EAAA,IAAAjlD,MAAArK,GACAzB,EAAA,EAAiBA,EAAAyB,IAAOzB,EACxB+wD,EAAA/wD,GAAA2wD,EAAA3wD,GACA,OAAA+wD,EA5WArwD,OAAAC,eAAAu1B,EAAA,uBACAt1B,YAAA,EACAC,IAAA,WACA,OAAA2uD,GAEA/3B,IAAA,SAAAvrB,GACA,oBAAAA,KAAA,GAAAkjD,EAAAljD,GACA,UAAA8kD,WAAA,kGAAA9kD,EAAA,KAEAsjD,EAAAtjD,KAIAgqB,EAAA1V,KAAA,gBAEAha,IAAAkF,KAAA2jD,SACA3jD,KAAA2jD,UAAA3uD,OAAAuwD,eAAAvlD,MAAA2jD,UACA3jD,KAAA2jD,QAAA3uD,OAAAY,OAAA,MACAoK,KAAA4jD,aAAA,GAGA5jD,KAAA6jD,cAAA7jD,KAAA6jD,oBAAA/oD,GAKA0vB,EAAAt0B,UAAAsvD,gBAAA,SAAAzvD,GACA,oBAAAA,KAAA,GAAA2tD,EAAA3tD,GACA,UAAAuvD,WAAA,gFAAAvvD,EAAA,KAGA,OADAiK,KAAA6jD,cAAA9tD,EACAiK,MASAwqB,EAAAt0B,UAAAuvD,gBAAA,WACA,OAAA1B,EAAA/jD,OAGAwqB,EAAAt0B,UAAAg3B,KAAA,SAAA7b,GAEA,IADA,IAAAzT,EAAA,GACAtJ,EAAA,EAAiBA,EAAAuJ,UAAAZ,OAAsB3I,IAAAsJ,EAAAE,KAAAD,UAAAvJ,IACvC,IAAAoxD,EAAA,UAAAr0C,EAEA6yC,EAAAlkD,KAAA2jD,QACA,QAAA7oD,IAAAopD,EACAwB,UAAA5qD,IAAAopD,EAAAz0C,WACA,IAAAi2C,EACA,SAGA,GAAAA,EAAA,CACA,IAAAC,EAGA,GAFA/nD,EAAAX,OAAA,IACA0oD,EAAA/nD,EAAA,IACA+nD,aAAAxnD,MAGA,MAAAwnD,EAGA,IAAA7rC,EAAA,IAAA3b,MAAA,oBAAAwnD,EAAA,KAAAA,EAAAz2C,QAAA,SAEA,MADA4K,EAAAm0B,QAAA0X,EACA7rC,EAGA,IAAA9K,EAAAk1C,EAAA7yC,GAEA,QAAAvW,IAAAkU,EACA,SAEA,sBAAAA,EACAo0C,EAAAp0C,EAAAhP,KAAApC,OAEA,KAAA+C,EAAAqO,EAAA/R,OACA2oD,EAAAT,EAAAn2C,EAAArO,GACA,IAAArM,EAAA,EAAmBA,EAAAqM,IAASrM,EAC5B8uD,EAAAwC,EAAAtxD,GAAA0L,KAAApC,GAGA,UAmEA4sB,EAAAt0B,UAAAk9C,YAAA,SAAA/hC,EAAAgb,GACA,OAAA23B,EAAAhkD,KAAAqR,EAAAgb,GAAA,IAGA7B,EAAAt0B,UAAAo2B,GAAA9B,EAAAt0B,UAAAk9C,YAEA5oB,EAAAt0B,UAAA2vD,gBACA,SAAAx0C,EAAAgb,GACA,OAAA23B,EAAAhkD,KAAAqR,EAAAgb,GAAA,IAqBA7B,EAAAt0B,UAAA4vD,KAAA,SAAAz0C,EAAAgb,GACA,sBAAAA,EACA,UAAAhrB,UAAA,0EAAAgrB,GAGA,OADArsB,KAAAssB,GAAAjb,EAAAozC,EAAAzkD,KAAAqR,EAAAgb,IACArsB,MAGAwqB,EAAAt0B,UAAA6vD,oBACA,SAAA10C,EAAAgb,GACA,sBAAAA,EACA,UAAAhrB,UAAA,0EAAAgrB,GAGA,OADArsB,KAAA6lD,gBAAAx0C,EAAAozC,EAAAzkD,KAAAqR,EAAAgb,IACArsB,MAIAwqB,EAAAt0B,UAAAu2B,eACA,SAAApb,EAAAgb,GACA,IAAA25B,EAAA9B,EAAA+B,EAAA3xD,EAAA4xD,EAEA,sBAAA75B,EACA,UAAAhrB,UAAA,0EAAAgrB,GAIA,QAAAvxB,KADAopD,EAAAlkD,KAAA2jD,SAEA,OAAA3jD,KAGA,QAAAlF,KADAkrD,EAAA9B,EAAA7yC,IAEA,OAAArR,KAEA,GAAAgmD,IAAA35B,GAAA25B,EAAA35B,aACA,KAAArsB,KAAA4jD,aACA5jD,KAAA2jD,QAAA3uD,OAAAY,OAAA,cAEAsuD,EAAA7yC,GACA6yC,EAAAz3B,gBACAzsB,KAAAktB,KAAA,iBAAA7b,EAAA20C,EAAA35B,mBAEO,sBAAA25B,EAAA,CAGP,IAFAC,GAAA,EAEA3xD,EAAA0xD,EAAA/oD,OAAA,EAAiC3I,GAAA,EAAQA,IACzC,GAAA0xD,EAAA1xD,KAAA+3B,GAAA25B,EAAA1xD,GAAA+3B,aAAA,CACA65B,EAAAF,EAAA1xD,GAAA+3B,SACA45B,EAAA3xD,EACA,MAIA,GAAA2xD,EAAA,EACA,OAAAjmD,KAEA,IAAAimD,EACAD,EAAA5vB,QAiIA,SAAA4vB,EAAA1nD,GACA,KAAQA,EAAA,EAAA0nD,EAAA/oD,OAAyBqB,IACjC0nD,EAAA1nD,GAAA0nD,EAAA1nD,EAAA,GACA0nD,EAAA7rC,MAlIAgsC,CAAAH,EAAAC,GAGA,IAAAD,EAAA/oD,SACAinD,EAAA7yC,GAAA20C,EAAA,SAEAlrD,IAAAopD,EAAAz3B,gBACAzsB,KAAAktB,KAAA,iBAAA7b,EAAA60C,GAAA75B,GAGA,OAAArsB,MAGAwqB,EAAAt0B,UAAAgqD,IAAA11B,EAAAt0B,UAAAu2B,eAEAjC,EAAAt0B,UAAAs4B,mBACA,SAAAnd,GACA,IAAAu0C,EAAA1B,EAAA5vD,EAGA,QAAAwG,KADAopD,EAAAlkD,KAAA2jD,SAEA,OAAA3jD,KAGA,QAAAlF,IAAAopD,EAAAz3B,eAUA,OATA,IAAA5uB,UAAAZ,QACA+C,KAAA2jD,QAAA3uD,OAAAY,OAAA,MACAoK,KAAA4jD,aAAA,QACS9oD,IAAAopD,EAAA7yC,KACT,KAAArR,KAAA4jD,aACA5jD,KAAA2jD,QAAA3uD,OAAAY,OAAA,aAEAsuD,EAAA7yC,IAEArR,KAIA,OAAAnC,UAAAZ,OAAA,CACA,IACApH,EADAw4B,EAAAr5B,OAAAq5B,KAAA61B,GAEA,IAAA5vD,EAAA,EAAmBA,EAAA+5B,EAAApxB,SAAiB3I,EAEpC,oBADAuB,EAAAw4B,EAAA/5B,KAEA0L,KAAAwuB,mBAAA34B,GAKA,OAHAmK,KAAAwuB,mBAAA,kBACAxuB,KAAA2jD,QAAA3uD,OAAAY,OAAA,MACAoK,KAAA4jD,aAAA,EACA5jD,KAKA,sBAFA4lD,EAAA1B,EAAA7yC,IAGArR,KAAAysB,eAAApb,EAAAu0C,QACO,QAAA9qD,IAAA8qD,EAEP,IAAAtxD,EAAAsxD,EAAA3oD,OAAA,EAAsC3I,GAAA,EAAQA,IAC9C0L,KAAAysB,eAAApb,EAAAu0C,EAAAtxD,IAIA,OAAA0L,MAoBAwqB,EAAAt0B,UAAA0vD,UAAA,SAAAv0C,GACA,OAAAyzC,EAAA9kD,KAAAqR,GAAA,IAGAmZ,EAAAt0B,UAAAkwD,aAAA,SAAA/0C,GACA,OAAAyzC,EAAA9kD,KAAAqR,GAAA,IAGAmZ,EAAA46B,cAAA,SAAAb,EAAAlzC,GACA,yBAAAkzC,EAAAa,cACAb,EAAAa,cAAA/zC,GAEA+zC,EAAA3wD,KAAA8vD,EAAAlzC,IAIAmZ,EAAAt0B,UAAAkvD,gBAiBA56B,EAAAt0B,UAAAmwD,WAAA,WACA,OAAArmD,KAAA4jD,aAAA,EAAAX,EAAAjjD,KAAA2jD,SAAA,mBChXA5vD,EAAOD,QAzDa,CAChBwyD,KAAQ,CACJ3iB,MAAO,KACPnC,OAAQ,KACR+kB,MAAO,GAEXC,OAAU,CACN7iB,MAAO,KACPnC,OAAQ,KACR+kB,MAAO,GAEXE,IAAO,CACH9iB,MAAO,KACPnC,OAAQ,IACR+kB,MAAO,GAEXG,GAAM,CACF/iB,MAAO,KACPnC,OAAQ,IACR+kB,MAAO,GAEXI,IAAO,CACHhjB,MAAO,IACPnC,OAAQ,IACR+kB,MAAO,GAIXK,IAAO,CACHjjB,MAAO,IACPnC,OAAQ,IACR+kB,MAAO,GAEXM,IAAO,CACHljB,MAAO,IACPnC,OAAQ,IACR+kB,MAAO,GAEXO,IAAO,CACHnjB,MAAO,IACPnC,OAAQ,IACR+kB,MAAO,GAIXQ,IAAO,CACHpjB,MAAO,IACPnC,OAAQ,IACR+kB,MAAO,GAEXS,IAAO,CACHrjB,MAAO,IACPnC,OAAQ,IACR+kB,MAAO,kCCrDfnyD,EAAAQ,EAAAmxB,EAAA,sBAAAkhC,IAAA7yD,EAAAQ,EAAAmxB,EAAA,sBAAAmhC,IAAA9yD,EAAAQ,EAAAmxB,EAAA,sBAAAohC,IAMO,IAAMF,EAAU,UAQVC,EAAS,SAOTC,EAAQ,8UChBrB,IA8DIC,EA9DEt+B,EAAS9tB,EAAQ,GAAqB2tB,UAAUQ,GAQhDk+B,EACW,cADXA,EAEY,eAFZA,EAGmB,sBAHnBA,EAIoB,uBAJpBA,EAKe,kBALfA,EAMY,eANZA,EAOoB,uBAPpBA,EASc,iBASdC,EACU,aADVA,EAEY,eAFZA,EAGS,YAHTA,EAIW,cAJXA,EAKU,aALVA,EAMW,cANXA,EAUgB,mBAVhBA,EAWe,kBAXfA,EAYe,kBAZfA,EAagB,mBAOhBC,EAAsB,QAMtBC,EACK,QADLA,EAEK,QAFLA,EAGe,gBAqBAl+B,aAmbjB,SAAAA,EAAYwE,EAAKxc,gGAASg2B,CAAAtnC,KAAAspB,GACtBtpB,KAAKgvB,OAAS1d,EAAQ0d,OACtBhvB,KAAK8tB,IAAMA,EACX9tB,KAAK2rB,eAAiBmC,EAAInC,eAC1B3rB,KAAK6uB,aAAevd,EAAQud,cAAgB04B,EAC5CvnD,KAAKynD,WAAY,EAEjBn+B,EAAUo+B,QAAQt8B,IAAIprB,MAElBspB,EAAUq+B,qBACV3nD,KAAK4nD,gBAK0B,IAA3Bt+B,EAAUo+B,QAAQz6B,MAClB3D,EAAUu+B,kBAAkB7nD,oEA5bXyP,EAAOF,GAC5B+Z,EAAUw+B,SAAqB,YAAVr4C,GACrBqZ,EAAOrZ,MAAP,sBAAAnS,OAAmCmS,EAAnC,UAAAnS,OAAiDiS,0CAUpCE,EAAOF,GAIxB,GAHAuZ,EAAOzZ,IAAP,yBAAA/R,OAAoCmS,EAApC,SAAAnS,OAAiDiS,IAGnC,YAAVE,EAAJ,CAIA6Z,EAAUq+B,oBAAqB,EAG/B,IAAII,GAAmB,EACnBC,EAAkB,KAZO76B,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAc7B,QAAAwyB,EAAAC,EAAgCjE,EAAUo+B,QAAQl6B,SAAlDn4B,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA4D,KAAjD8C,EAAiD3C,EAAA/3B,MACnD06B,EAAkBw3B,YACnB3+B,EAAOpZ,MAAM,+BACTugB,EAAkB23B,kBAClBG,GAAmB,EACdC,IACDA,EAAkB/3B,MApBL,MAAAnW,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,GA0BxB06B,GAILz+B,EAAUu+B,kBAAkBG,8CASPC,GAIrB,IAAMC,EAAgBD,EAAWj5B,OAC3Bm5B,EAAYF,EAAWt8B,eALIqC,GAAA,EAAAC,GAAA,EAAAC,OAAApzB,EAAA,IAQjC,QAAAqzB,EAAAC,EAAqB9E,EAAU8+B,aAA/B/yD,OAAAo4B,cAAAO,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAA6C,KAAlCq6B,EAAkCl6B,EAAA54B,MACzC,GAAI8yD,EAAOh3C,OAASm2C,EAAkB,CAClC,IAAMc,EAAYD,EAAO9kD,KAEzB+lB,EAAUi/B,aACNN,EACAK,EAAUj3C,KACVi3C,EAAU74C,MACV64C,EAAUE,IAAML,QACjB,GAAIE,EAAOh3C,OAASm2C,EAAkB,CAIzC,IAAMiB,EAAYJ,EAAO9kD,KAEzB+lB,EAAUw+B,QAAQY,gBACdL,EAAOG,IAAML,EACbM,EAAU3zB,MACVozB,EACAO,EAAUA,gBACX,GAAIJ,EAAOh3C,OAASm2C,EAA4B,CACnD,IAAMjkD,EAAO8kD,EAAO9kD,KAEpB+lB,EAAUw+B,QAAQa,uBACdN,EAAOG,IAAML,EACb5kD,EAAKqlD,YACLV,EACA3kD,EAAKqtB,KACLrtB,EAAK6uB,WACL7uB,EAAK8uB,eArCgB,MAAAvY,GAAAmU,GAAA,EAAAC,EAAApU,EAAA,YAAAkU,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAyCjC5E,EAAU8+B,aAAanrD,OAAS,uCAahB8yB,EAAI1e,EAAM5B,EAAO+4C,GACjC,IAAIK,EAASp5C,EAERo5C,IACD//B,EAAOlZ,KAAK,uBACZi5C,EAAS,IAAI1qD,MAAM,kBAEnBmrB,EAAUq+B,oBAAsB53B,EAChCzG,EAAUw+B,QAAQgB,YAAYN,EAAIz4B,EAAGf,OAAQ3d,EAAMw3C,GAEnDv/B,EAAU8+B,aAAatqD,KAAK,CACxBuT,KAAMm2C,EACNjkD,KAAM,CACFkM,MAAOo5C,EACPL,KACAn3C,+CAkBI0e,EAAI+E,EAAO2zB,GAC3B,IAAMD,EAAKz4B,GAAMA,EAAGpE,eACdqD,EAASe,GAAMA,EAAGf,OAEpB1F,EAAUq+B,oBAAsB53B,EAChCzG,EAAUw+B,QAAQY,gBAAgBF,EAAI1zB,EAAO9F,EAAQy5B,GAErDn/B,EAAU8+B,aAAatqD,KAAK,CACxBkxB,SACAw5B,KACAn3C,KAAMm2C,EACNjkD,KAAM,CAAEuxB,QACJ2zB,kEAakBM,GAS9B,IARA,IAD0CxQ,EAAA,WASrC,IAAMyQ,EAAUC,EAAAC,GACXC,EAAiBJ,EAAWC,GAElCD,EAAWC,GAAc,WACrB,IAAI,QAAA3a,EAAAxwC,UAAAZ,OAD6BmsD,EAC7B,IAAAhpD,MAAAiuC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAD6B8a,EAC7B9a,GAAAzwC,UAAAywC,GACA,OAAO6a,EAAeprD,MAAMgrD,EAAYK,GAC1C,MAAOnqD,GACL4hC,IAAqBC,iBAAiB7hC,MAPlDiqD,EAAA,EAAAD,EARwB,CACpB,yBACA,kBACA,oBAKJC,EAAAD,EAAAhsD,OAAAisD,IAA0C3Q,IAmB1C,IARA,IApB0C8Q,EAAA,WA4BrC,IAAML,EAAUM,EAAAC,GACXJ,EAAiBJ,EAAWC,GAElCD,EAAWC,GAAc,WAA0B,QAAAza,EAAA1wC,UAAAZ,OAAdmsD,EAAc,IAAAhpD,MAAAmuC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAd4a,EAAc5a,GAAA3wC,UAAA2wC,GAC/C1lB,EAAOpZ,MAAMs5C,EAAYI,GACzBD,EAAeprD,MAAMgrD,EAAYK,KALzCG,EAAA,EAAAD,EARqB,CACjB,yBACA,kBACA,oBAKJC,EAAAD,EAAArsD,OAAAssD,IAAuCF,IAQvC,IAAMG,EAAsBT,EAAWD,YAGvCC,EAAWD,YAAc,SAASN,EAAIz4B,EAAI1e,GAAe,QAAAsvB,EAAA9iC,UAAAZ,OAANW,EAAM,IAAAwC,MAAAugC,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANhjC,EAAMgjC,EAAA,GAAA/iC,UAAA+iC,GAIjDvvB,IAASg2C,EAQJ18B,IAAQC,iBACTpb,SAAWA,QAAQE,MAAM,cAAe84C,EAAIz4B,EAAI1e,GAGpDyX,EAAOpZ,MAAP3R,MAAA+qB,EAAM,CAAO,cAAe0/B,EAAIz4B,EAAI1e,GAA9B/T,OAAuCM,IAEjD,IACI4rD,EAAoB/0D,KAApBsJ,MAAAyrD,EAAmB,CAAMT,EAAYP,EAAIz4B,EAAI1e,GAA1B/T,OAAmCM,IACxD,MAAO6rD,GACDp4C,IAASg2C,EACT73C,SAAWA,QAAQC,MAAM,cAAeg6C,GAExC5oB,IAAqBC,iBAAiB2oB,yCAiCnCn4C,GACf,GAAIgY,EAAUw+B,QACV,MAAM,IAAI3pD,MAAM,mDAEpB,IACI,IAWIurD,EAXEC,EAAmBC,UAEzBtgC,EAAUw+B,QAAU,IAAI6B,EACxBrgC,EAAUugC,2BAA2BvgC,EAAUw+B,SAC/Cx+B,EAAUwgC,OAAS,CACf9/B,UAAW1Y,EAAQ0Y,UACnBR,SAAUlY,EAAQkY,UAEtBF,EAAUM,YAActY,EAAQsY,YAChCN,EAAUO,gBAAkBvY,EAAQuY,gBAIhCvY,EAAQ2Y,kBACRy/B,EAAe,CACXK,mBAAkB,GAAAzsD,OACXgU,EAAQ2Y,gBADG,MAAA3sB,OAEVqtB,IAAQq/B,UAFE,OAO1B1gC,EAAUw+B,QAAQmC,WACd3gC,EAAUM,YACVN,EAAUO,gBACVP,EAAUwgC,OACVxgC,EAAU4gC,mBACVpvD,EACA4uD,GAEJ,IAAMx/B,EAAqB5Y,EAAQ4Y,mBAcnC,OAZIA,IACAZ,EAAUw+B,QAAQqC,uBAAuBjgC,GAEzCA,IAAqB6d,KAAK,SAAAj4B,GAClBA,GACAgZ,EAAOnZ,KAAK,2BACNiH,KAAKwK,MAAMtR,GAAQs6C,aAGhC5e,MAAM,gBAGJ,EACT,MAAOvsC,GAQL,OAJA4hC,IAAqBC,iBAAiB7hC,GACtCqqB,EAAUw+B,QAAU,KACpBh/B,EAAOrZ,MAAMxQ,IAEN,kDAYX,OAAO2mC,QAAQtc,EAAUw+B,2DASIp2B,EAAa3B,GAC1CzG,EAAU+gC,aAAat6B,EAAIu3B,EAA8B51B,8CASnCzyB,EAAG8wB,GACzB,IACIzG,EAAUi/B,aACNx4B,EACAs3B,EACApoD,EACA8wB,GAAMA,EAAGpE,gBACf,MAAOlc,GAIDD,SAAqC,mBAAlBA,QAAQC,OAE3BD,QAAQC,MAAM,4BAA6BA,yCAcnC66C,EAAch2B,EAASC,GACnCjL,EAAUw+B,QACVx+B,EAAUw+B,QAAQyC,iBACdD,EAAc,CACVR,OAAQxgC,EAAUwgC,OAClBx1B,UACAC,YAGRzL,EAAOrZ,MAAM,sGAUSxQ,EAAG8wB,GAC7BzG,EAAUi/B,aAAax4B,EAAIs3B,EAA4BpoD,EAAG,4CASzCu3C,EAAMnlC,EAAM0e,GAC7B,IAAI+E,EAGAA,EADS,UAATzjB,EACQmlC,EAAO8Q,EAAyBA,EAEhC9Q,EAAO8Q,EAAwBA,EAG3Ch+B,EAAU+gC,aAAat6B,EAAI+E,mCAzK3B,OAJKsyB,IACDA,EAAW,IAAI37B,KAGZ27B,iDAmNPt+B,EAAOnZ,KAAK,eAAgB3P,KAAK6uB,cACjC,IACI,IAAM27B,EAAmB,CACrBC,mBACIzqD,KAAK8tB,IAAI8lB,MACHtqB,EAAUw+B,QAAQ4C,aAAaC,KAC/BrhC,EAAUw+B,QAAQ4C,aAAaE,QAEvCrrD,EACA+pB,EAAUw+B,QAAQ+C,aAChB7qD,KAAK2rB,eACL3rB,KAAK6uB,aACLvF,EAAUw+B,QAAQgD,YAAYC,UAC9B/qD,KAAKgvB,OACLw7B,EACAlhC,EAAU0hC,uBAElBhrD,KAAKynD,WAAY,EAEjB,IAAMwD,EAAyB,YAAf1rD,EAAIoa,OAMpB,OAJKsxC,GACDniC,EAAOrZ,MAAM,kCAAmClQ,EAAI2P,SAGjD+7C,EAET,MAAOx7C,GAGL,OAFAoxB,IAAqBC,iBAAiBrxB,IAE/B,uDAqBPmhB,EACAsB,EACAg5B,EACA94B,EACAC,GACJ,GAAK/I,EAAUw+B,QAAf,CAIA,IAAMc,EAAc12B,EAAU5I,EAAUwgC,OAASoB,EAE7C5hC,EAAUq+B,mBACVr+B,EAAUw+B,QAAQa,uBACd3oD,KAAK2rB,eACLi9B,EACA5oD,KAAKgvB,OACL4B,EACAwB,EACAC,GAEJ/I,EAAU8+B,aAAatqD,KAAK,CACxBuT,KAAMm2C,EACNgB,GAAIxoD,KAAK2rB,eACTpoB,KAAM,CACFqlD,cACAv2B,cACAzB,OACAwB,oEAaZ9I,EAAU+gC,aAAarqD,KAAMsnD,gDAQzBh+B,EAAUq+B,oBACVr+B,EAAUw+B,QAAQY,gBACd1oD,KAAK2rB,eACLrC,EAAUw+B,QAAQR,YAAY6D,iBAC9BnrD,KAAKgvB,QAEb1F,EAAUo+B,QAAQj5B,OAAOzuB,6DAOzBspB,EAAUi/B,aACNvoD,KACAqnD,EACA,KACArnD,KAAK2rB,8DAQS1sB,GAClBqqB,EAAUi/B,aACNvoD,KAAMqnD,EAA2BpoD,EAAGe,KAAK2rB,+DAQ1B1sB,GACnBqqB,EAAUi/B,aACNvoD,KAAMqnD,EAA4BpoD,EAAGe,KAAK2rB,8DAQ5B0E,GAClB/G,EAAU+gC,aACNrqD,KACAqwB,EAAWi3B,EAA2BA,kDAUvBzhC,EAAO+K,GAC1B,IAAI63B,EAEA73B,IACA63B,EAAY,CAAE73B,SAGlBtH,EAAU+gC,aACNrqD,KACA6lB,EAAQyhC,EAA+BA,EACvCmB,kDAQexpD,GACnBqqB,EAAUi/B,aACNvoD,KAAMqnD,EAAmCpoD,EAAGe,KAAK2rB,gEAQjC1sB,GACpBqqB,EAAUi/B,aACNvoD,KAAMqnD,EAAoCpoD,EAAGe,KAAK2rB,kEAQhC1sB,GACtBqqB,EAAUi/B,aACNvoD,KAAMqnD,EAA+BpoD,EAAGe,KAAK2rB,yBAQzDrC,EAAUw+B,QAAU,KAKpBx+B,EAAU8+B,aAAe,GAOzB9+B,EAAUq+B,oBAAqB,EAM/Br+B,EAAUM,YAAc,KAMxBN,EAAUO,gBAAkB,KAS5BP,EAAUwgC,OAAS,kFC7wBnB11D,EAAAgB,EAAA2wB,GAAA3xB,EAAAQ,EAAAmxB,EAAA,wCAAAqlC,IAAAh3D,EAAAQ,EAAAmxB,EAAA,yCAAAslC,IAGO,IAAMD,EAAsB,yBAMtBC,EAAuB,y+BCFpC,SAASC,IAA+C,IAAjBC,EAAiB1tD,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,8BAAA2tD,IAAAlkB,EAAAtnC,KAAAwrD,IAAA,GAIpD,gBAAAC,GAII,SAAAC,IAAqB,IAAAC,EAAAjkB,EAAAJ,EAAAtnC,KAAA0rD,GAAA,QAAA/qB,EAAA9iC,UAAAZ,OAANW,EAAM,IAAAwC,MAAAugC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANhjC,EAAMgjC,GAAA/iC,UAAA+iC,GAAA,OACjB8G,EAAAH,EAAAvnC,MAAA2rD,EAAAnkB,EAAAkkB,IAAAj3D,KAAAsJ,MAAA4tD,EAAA,CAAA3rD,MAAA1C,OAASM,MACJ0f,WAAa,KAFDoqB,YAJzB,yOAAAkkB,CAAAF,EAAqBH,KAArBG,KAAA,EAAA71D,IAAA,OAAAN,MAAA,SAaS+nB,GACDtd,KAAKsd,WAAaA,kCAd1BouC,EAAA,GAsBWJ,QAKR,IAAMO,EACPP,EAA8B7jB,uhCClBpC,IAAM3e,EAASH,oBAAUQ,GA0BlB,IAAM2iC,EAAuB,CAChC,CAAEC,KAAM,gCACR,CAAEA,KAAM,iCACR,CAAEA,KAAM,kCASCC,EAAsB,OAKdC,cAQjB,SAAAA,EAAY36C,EAAS46C,GAAO,IAAAxkB,MAAA,mGAAAJ,CAAAtnC,KAAAisD,KACxBjsD,MAAA0nC,MAAAF,EAAAykB,GAAAx3D,KAAAuL,sDACKsd,WAAa,KAClBoqB,EAAKykB,sBAAuB,EAC5BzkB,EAAK0kB,gBAAkB,GACvB1kB,EAAKp2B,QAAUA,EACfo2B,EAAKwkB,MAAQA,EACbxkB,EAAK2kB,mBAAoB,EACzB3kB,EAAK4kB,oBAALrZ,EAAAvL,IAEAA,EAAKpqB,WAtDb,SAA0B4uC,GAA4B,IAArBK,EAAqB1uD,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAd,aAEhCquD,IAEAK,GAAI,GAAAjvD,QAA8B,IAAvBivD,EAAKhuD,QAAQ,KAAc,IAAM,IAAxC,UAAAjB,OAAoD4uD,IAG5D,IAAMM,EAAO,IAAIhmD,UAAQiM,WAAW85C,GAKpC,OAFAC,EAAK/3C,WAAa,EAEX+3C,EA0CeC,CAAiBP,EAAO56C,EAAQi7C,MAElD7kB,EAAKglB,KAAO,IAAIC,IAAKjlB,EAAKpqB,WAAYoqB,EAAKp2B,QAAQs7C,YAGnDllB,EAAKmlB,mBAOL3R,EAAEhnD,QAAQo4B,GAAG,sBAAuBob,EAAKvuB,WAAWrjB,KAAhBm9C,EAAAvL,KAtBZA,wPARED,yDAwC1BznC,KAAK0sD,KAAKI,WAAW,qBACrB9sD,KAAK0sD,KAAKI,WAAW,8BACrB9sD,KAAK0sD,KAAKI,WAAW,wCACrB9sD,KAAK0sD,KAAKI,WAAW,+BACrB9sD,KAAK0sD,KAAKI,WAAW,0CACrB9sD,KAAK0sD,KAAKI,WAAW,kCACrB9sD,KAAK0sD,KAAKI,WAAW,mCAEhB9sD,KAAKsR,QAAQy7C,YAAcpiC,IAAQqiC,eACpChtD,KAAK0sD,KAAKI,WAAW,qBASzB9sD,KAAK0sD,KAAKI,WAAW,qBACrB9sD,KAAK0sD,KAAKI,WAAW,qBAKjBniC,IAAQ+Z,aAA6C,IAA/B1kC,KAAKsR,QAAQ27C,gBACnCnkC,EAAOnZ,KAAK,sBACZ3P,KAAK0sD,KAAKI,WAAW,kCAGrB9sD,KAAKsd,WAAW4vC,MAChBltD,KAAK0sD,KAAKI,WAAW,oEAUzB,OAA+B,IAAxB9sD,KAAKmtD,uDAOZ,OAAOntD,KAAKsd,uDAciC,IAAAouB,EAAA1rC,KAA/BotD,EAA+BvvD,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAjB,GAAI8b,EAAa9b,UAAAZ,OAAA,EAAAY,UAAA,QAAA/C,EAALyU,EAAK1R,UAAAZ,OAAA,EAAAY,UAAA,QAAA/C,EACvCsiB,EAAMlpB,OAAOm5D,YAAYjwC,MACzBkwC,EAAY9mD,UAAQ+mD,gBAAgB5zC,GAAQ3L,cAMlD,GAJAhO,KAAKosD,gBAAgBkB,GAAalwC,EAClC0L,EAAOzZ,IAAP,kBAAA/R,OACsBgwD,GADtBhwD,OACkCiS,EAAG,IAAAjS,OAAOiS,EAAP,KAAgB,GADrD,OAEI6N,GACAzD,IAAWnT,UAAQ6C,OAAOM,WACvBgQ,IAAWnT,UAAQ6C,OAAOS,SAAU,EACnC9J,KAAKsR,QAAQk8C,aACTxtD,KAAKsR,QAAQm8C,KAAOztD,KAAKsR,QAAQm8C,IAAID,cACzCxtD,KAAKsd,WAAW89B,OAAOsS,4BAG3B5kC,EAAOnZ,KAAP,iBAAArS,OAA6B0C,KAAKsd,WAAW/O,MAG7C,IAAMo/C,EAAU3tD,KAAKsd,WAAWvX,OAEhC/F,KAAK0sD,KAAKkB,yBAAyBD,GAC9B5lB,KAAK,SAAAS,GAA8B,IAA3Bx1B,EAA2Bw1B,EAA3Bx1B,SAAU66C,EAAiBrlB,EAAjBqlB,WACX76C,EAAS8b,IAAItoB,UAAQO,GAAG+mD,OACxBpiB,EAAKyhB,gBAAiB,EACtBzhB,EAAKpuB,WAAWywC,KAAKC,cAAcL,IAEnC7kC,EAAOlZ,KAAP,yBAAAtS,OAAqCqwD,IAIzCE,EAAW5sD,QAAQ,SAAAgtD,GACO,iBAAlBA,EAAS58C,OACTq6B,EAAKwiB,6BAA+BD,EAASp5D,KAE7C62C,EAAKpuB,WAAWxF,WACZ4zB,EAAKyiB,kBAAkBr4D,KAAK41C,GAAO,KACnC,UAAW,KAAM,WAIhCF,MAAM,SAAA/7B,GACH,IAAMs1B,EAAS,0BAEflE,IAAqBC,iBACjB,IAAI3iC,MAAJ,GAAAb,OAAaynC,EAAb,MAAAznC,OAAwBmS,KAC5BqZ,EAAOrZ,MAAMs1B,EAAQt1B,KAGzB29C,EAAYgB,WACZpuD,KAAKqsD,mBAAoB,GAEzBrsD,KAAKsd,YAActd,KAAKsd,WAAWvJ,WAChCvN,UAAQmI,mBAAmB3O,KAAKsd,WAAW/O,MAG9CvO,KAAKuqB,aAAa2C,KACdmhC,yBACA7nD,UAAQmI,mBAAmB3O,KAAKsd,WAAW/O,WAEhD,GAAIoL,IAAWnT,UAAQ6C,OAAOG,SACrB,+BAAR+F,EACAvP,KAAKsuD,2BAA4B,EAEjCtuD,KAAKuuD,kBAAmB,EAE5BvuD,KAAKwuD,aAAej/C,EACR,cAARA,GACAvP,KAAKuqB,aAAa2C,KACdmhC,oBACAI,cAAmCl/C,QAExC,GAAIoK,IAAWnT,UAAQ6C,OAAOO,aAAc,CAE/C5J,KAAKsd,WAAWywC,KAAKW,eACrB,IAAMC,EAA2B3uD,KAAKmsD,qBAChCyC,EAASr/C,GAAOvP,KAAKwuD,aAG3B,GADAxuD,KAAKmsD,sBAAuB,EACxBnsD,KAAKsuD,0BAELtuD,KAAKuqB,aAAa2C,KACdmhC,oBACAI,0BACD,GAAIzuD,KAAKuuD,iBACZvuD,KAAKuqB,aAAa2C,KACdmhC,oBACAI,cACAG,OACA9zD,EACAkF,KAAK6uD,0CACN,GAAIF,EACP3uD,KAAKuqB,aAAa2C,KACdmhC,0BAA+CO,OAChD,CAMH9lC,EAAOrZ,MAAM,4BAIb,IAAMq/C,EAAkBtoD,UAAQuoD,qBAE5BD,GAAmB,KAAOA,EAAkB,IAC5C9uD,KAAKuqB,aAAa2C,KACdmhC,oBACAI,eACAG,GAAU,gBAEd5uD,KAAKuqB,aAAa2C,KACdmhC,oBACAI,2BACAG,GAAU,kCAGfj1C,IAAWnT,UAAQ6C,OAAOK,UAEjC1J,KAAKuqB,aAAa2C,KACdmhC,oBACAI,oBACAl/C,EACA69C,oCASH7+C,EAAK6/C,GA4BVpuD,KAAKsuD,2BAA4B,EACjCtuD,KAAKuuD,kBAAmB,EACxBvuD,KAAKwuD,kBAAe1zD,EACpBkF,KAAKsd,WAAW7H,QACZlH,EACA6/C,EACApuD,KAAKgvD,kBAAkBl5D,KAAKkK,KAAM,CAC9BuO,MACA6/C,6CAWL98C,GACH,IAAM8L,EAAMpd,KAAKosD,gBAAgB6C,UAAY/6D,OAAOm5D,YAAYjwC,MAEhE0L,EAAOzZ,IAAP,8BAAA/R,OAAyC8f,IACzCpd,KAAKsd,WAAWlH,OAAO9E,EAAQ/C,IAAK+C,EAAQ+E,IACxCmL,SAASlQ,EAAQgF,IAAK,IAAM,EAC5BtW,KAAKgvD,kBAAkBl5D,KAAKkK,KAAM,CAC9BuO,IAAK+C,EAAQ/C,IACb6/C,SAAU98C,EAAQ88C,4CAStB7/C,EAAK6/C,GACT,IAAK7/C,EAAK,KAAA2gD,EAC8BlvD,KAAKsR,QAAQ69C,MAAzCC,EADFF,EACEE,gBAAiBrpD,EADnBmpD,EACmBnpD,OACrBspD,EAAeD,GAAmBrpD,EAS9B8d,EAAa3vB,OAAb2vB,SAER,GAAIurC,EAAiB,CACjB,IAAMzpC,EAAS9B,GAAYA,EAAS8B,QAE/BA,IAA4C,IAAlCA,EAAOpnB,QAAQ,eACnByB,KAAKksD,SACZmD,EAAetpD,GAKvBwI,EAAM8gD,GAAiBxrC,GAAYA,EAASyrC,SAGhD,OAAOtvD,KAAKmW,SAAS5H,EAAK6/C,sCAQnBp+B,EAAU1e,GAEjB,IAAIi+C,EAAc/oD,UAAQ8H,eAAetO,KAAKsd,WAAW/O,KACrDihD,EAAO,GAAAlyD,OAAM0yB,EAAN,KAAA1yB,OAAkB0C,KAAKsR,QAAQ69C,MAAMM,IAArC,KACLC,EACAp+C,EAAQq+C,UAAYr+C,EAAQs+C,KAAOt+C,EAAQs+C,KAAO,KAkBxD,OAhBIF,EAEAH,EAAcj+C,EAAQs+C,KACd5vD,KAAKqsD,oBAEbkD,EAAcA,EAAYhxC,OAAO,EAAG,KAKpCve,KAAKqsD,mBAAqC,OAAhBqD,KAC1BH,GAAW,IAAAjyD,OAAQw8B,IAAW+1B,gBAAgB,KAGlDL,GAAWD,EAEJvvD,KAAKsd,WAAWwyC,KAAKC,WAAWP,EAAS,KAAMl+C,0CAQtD,IAAM8pC,EAASp7C,KAAKsd,WAAW89B,OAG/B,OAAOA,EAASA,EAAO4U,SAAW,wCAOlC,OAAQhwD,KAAKsd,WAAWwL,QAAU,IAAIzZ,KAAO,oCAMnC,IAAA4gD,GACVA,EAAAjwD,KAAKsd,WAAW4vC,MAAKgD,KAArBnyD,MAAAkyD,EAAApyD,wCAUC+Z,GAAS,IAAAw1B,EAAAptC,KACV,OAAO,IAAIorC,QAAQ,SAACC,EAASC,GACrB8B,EAAK+iB,kBACL/iB,EAAK9vB,WAAWywC,KACXA,KAAK3gB,EAAK9vB,WAAWvX,OAAQslC,EAASC,EAAQ1zB,GAEnD0zB,EAAO,mFAUX/8B,EAAKioC,GACTx2C,KAAKsd,WAAW8yC,SAASC,QAAQ9hD,EAAKioC,iCAOpCjoC,GACFvO,KAAKsd,WAAW8yC,SAASE,MAAM/hD,yCAO/B,OAAOvO,KAAKsd,WAAW89B,OAAOmV,4CASvBC,GACP,IAAIxwD,KAAKmsD,sBAAyBnsD,KAAKsd,WAAvC,CAsBA,GAhBAtd,KAAKmsD,sBAAuB,EAc5BnsD,KAAKsd,WAAW9F,QAEZg5C,QAA0C,CAC1C,IAAMC,EAASD,EAAGn/C,KAEH,iBAAXo/C,GAAwC,WAAXA,IAM7BzwD,KAAKsd,WAAWhM,QAAQ0R,MAAO,GAIvChjB,KAAKsd,WAAWnE,cAEqB,IAAjCnZ,KAAKsd,WAAWhM,QAAQ0R,MACxBhjB,KAAKsd,WAAW9F,aArChBxX,KAAKuqB,aAAa2C,KAAKmhC,6DA6C3B,IAAMhZ,EAAY,CACdqb,IAAK,CAAEC,WAAY,IACnBlD,IAAK,CAAEkD,WAAY,KAGjBC,EAAkB5wD,KAAKsR,QAAQm8C,KAC9BztD,KAAKsR,QAAQm8C,IAAIoD,aAAgB/E,EAEpC1rD,MAAMG,QAAQqwD,KACd9nC,EAAOnZ,KAAK,qBAAsBihD,GAClCvb,EAAUoY,IAAIkD,WAAaC,GAG3B5wD,KAAKsR,QAAQm8C,KAAOztD,KAAKsR,QAAQm8C,IAAIqD,qBACrChoC,EAAOnZ,KAAK,6BACR3P,KAAKsR,QAAQm8C,IAAIqD,oBAErBzb,EAAUoY,IAAIqD,mBACR9wD,KAAKsR,QAAQm8C,IAAIqD,oBAG3BC,YAAS/wD,MACTgxD,YAAWhxD,KAAMA,KAAKuqB,aAAc8qB,GACpC4b,cACAC,YAASlxD,MACTmxD,cACAC,0EAUA,IAAMryB,EAAU,GAGhB,GAAI/+B,KAAKsR,QAAQ+/C,gBACVrxD,KAAKsR,QAAQ+/C,eAAeC,OAC5BtxD,KAAKsd,WAAWzK,QAChB7S,KAAKsd,WAAWzK,OAAO2N,oBAAqB,CAG/C,IAAM+wC,EAAavxD,KAAKsd,WAAWzK,OAAO2N,oBACrCgxC,OAAO10D,MAAM,WACZwmB,EAAU,GAEhBiuC,EAAWtwD,QAAQ,SAAAgO,GACf,IAAMpQ,EAAQoQ,EAAKnS,MAAM,MACnBymB,EAAS1kB,EAAMu3B,QACf7gC,EAAQsJ,EAAMrB,KAAK,MAEzB8lB,EAAQC,GAAUhuB,IAItBwpC,EAAQ0yB,cACFzxD,KAAKsR,QAAQ+/C,eAAeC,QACtBhuC,EAAQ,iBASxB,OAHAyb,EAAQ2yB,aAAe1xD,KAAKsd,WAAWywC,KAAK4D,qBAGrC5yB,mDAQc5N,GAErB,GAAKnxB,KAAKkuD,8BAAiC/8B,EAA3C,CAIA,IAAM5hB,EAAMwP,eAAK,CAAE3C,GAAIpc,KAAKkuD,+BAE5B3+C,EAAI5a,EAAE,eAAgB,CAClB0b,MAAO,2BACPuhD,KAAMzgC,IACL5gB,KAELvQ,KAAKsd,WAAWjG,KAAK9H,kDAYHsiD,GAClB,IACI,IAAMC,EAAOl7C,KAAKwK,MAAMywC,GASxB,GAAIC,GAAwB,WAAhB78B,EAAO68B,GAAmB,CAClC,IAAMzgD,EAAOygD,EAAK9F,GAElB,QAAoB,IAAT36C,EACP,OAAOygD,EAGXhpC,EAAOpZ,MAAM,yDACM,UAAW2B,IAEpC,MAAOpS,GACL,OAAO,EAGX,OAAO,4CAUOsQ,GACd,IAAM3O,EAAO2O,EAAItB,aAAa,QAE9B,GAAKjO,KAAKkuD,8BACHttD,IAASZ,KAAKkuD,6BADrB,CAKA,IAAM6D,EAAc7W,EAAE3rC,GAAKkqB,KAAK,iBAC3B1sB,OACCilD,EAAahyD,KAAKiyD,sBAAsBF,GAS9C,OAPIC,GACuC,iBAApCA,EAAWhG,IACXgG,EAAWE,OACdlyD,KAAKuqB,aAAa2C,KACdilC,IAAWl4D,uBAAwB+3D,EAAWE,QAG/C,0GC1rBf99D,EAAAgB,EAAA2wB,GAAA3xB,EAAAQ,EAAAmxB,EAAA,6CAAAqsC,IAAAh+D,EAAAQ,EAAAmxB,EAAA,gCAAAssC,IAAAj+D,EAAAQ,EAAAmxB,EAAA,sCAAA/sB,IAAA5E,EAAAQ,EAAAmxB,EAAA,iCAAAusC,IAeO,IAAMF,EAA2B,0BAK3BC,EAAc,wBAKdr5D,EAAoB,8BAMpBs5D,EAAe,uDC/B5Bl+D,EAAAQ,EAAAmxB,EAAA,sBAAAwsC,IAAAn+D,EAAAQ,EAAAmxB,EAAA,sBAAAysC,IAMO,IAAMD,EAAqB,sBAOrBC,EAA0B,wNCPvC,IAAM1pC,EAAS9tB,EAAQ,GAAqB2tB,UAAUQ,GAChD0X,EAAuB7lC,EAAQ,IAMjCy3D,GAAqB,EAOrBC,GAA0B,EAE1BC,EAAc,KAWZC,EAAiB,CAOnBC,oBAAqB,KAErBhnB,aAAc,KAYd/2B,KArBmB,WAyBX,IAJHxD,EAIGzT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAJO,CACXi1D,8BAA8B,EAC9BC,0BAA2B,KAC3BC,+BAA+B,GAChCxgC,EAAK30B,UAAAZ,OAAA,EAAAY,UAAA,QAAA/C,EACJkF,KAAKsR,QAAUA,EACfqhD,EAAcngC,EAEdxyB,KAAK6rC,aAAe7rC,KAAKizD,0BAA0B3hD,GAE9CtR,KAAK6rC,cACN/iB,EAAOnZ,KAAK,6BAapBsjD,0BA7CmB,SA6CO3hD,GAAS,IAAAo2B,EAAA1nC,KAC/B,OAAI2qB,IAAQuoC,SACD,SAAC3X,EAAG5+B,EAAWQ,GAClBjpB,OAAOi/D,YAAYC,oBACfz2C,EACA,SAAClN,EAAOijB,GACJ,IAAI2gC,EAmBAA,EADA5jD,GAAwB,sBAAfA,EAAM5a,KACF,IAAI09B,IACbmhB,kCAGS,IAAInhB,IACb9iB,EAAOijB,EAAa,CAAE,YAER,mBAAdvV,GACDA,EAAUk2C,MAGtB1oC,IAAQ2oC,aACRtzD,KAAKuzD,uBACL5oC,IAAQ+Z,YAAc/Z,IAAQ6oC,UACjC7oC,IAAQ8oC,4BACAniD,EAAQwhD,6BAET9yD,KAAK0zD,gCACLpiD,EAAQwhD,+BACXxhD,EAAQyhD,0BAEL,MAGXjqC,EAAOnZ,KAAK,8CACZ3P,KAAK6yD,oBAoYjB,SAA6BvhD,GAIzB,OAnBJ,SAA4BA,GAC2B,IAA/C4pC,EAAE,kCAAkCj+C,QACpCi+C,EAAE,QAAQyY,OAAO,qCAErBzY,EAAE,kCAAkCtuC,KAAK,OACrCgnD,EAAsBtiD,IAY1BuiD,CAAmBviD,GAEZ,IAAI85B,QAAQ,SAAAC,GAEfyoB,EAAwB,SAACC,EAAWC,GAChCvB,EAAqBsB,EACrBrB,EAA0BsB,EAC1BlrC,EAAOnZ,KAAP,+BAAArS,OAEQm1D,EAFR,qBAAAn1D,OAGQo1D,IACRrnB,KACD/5B,KAjZO2iD,CAAoB3iD,GAASy2B,KAAK,WAChCL,EAAKmrB,oBAAsB,OAG5B7yD,KAAKk0D,2BACLvpC,IAAQkO,YACXvnB,EAAQ0hD,8BACD,KACAroC,IAAQ8oC,0BAERzzD,KAAK0zD,gCAIT1zD,KAAKm0D,sBACLxpC,IAAQgY,UAAYhY,IAAQ8oC,0BAC5BzzD,KAAK0zD,iCAGhB5qC,EAAOzZ,IACH,wDACAsb,IAAQq/B,WAEL,OAQXre,YA/HmB,WAgIf,OAA6B,OAAtB3rC,KAAK6rC,cAQhBsoB,sBAxImB,SAwIG7iD,EAASjS,EAAU+uC,IAqL7C,SAA4B98B,EAAS8iD,EAAgBC,GACjD1B,EAAY,CAAE,UAAYrhD,GACrBy2B,KAAK,SAAA7b,GAAM,OAAIkoC,EAAe,CAAEloC,YAAWmoC,GAtL5CC,CAAmBhjD,EAAQq9B,WAAYtvC,EAAU+uC,IAarDmlB,uBAtJmB,WAsJwC,IAApCjiD,EAAoCzT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAA1B,GAAI8e,EAAsB9e,UAAAZ,OAAA,EAAAY,UAAA,QAAA/C,EAAXqiB,EAAWtf,UAAAZ,OAAA,EAAAY,UAAA,QAAA/C,EACvD,GAAI5G,OAAOqgE,yBACJrgE,OAAOqgE,wBAAwBC,kBAAmB,KAC7C9lB,EAAsCp9B,EAAtCo9B,sBAAuBC,EAAer9B,EAAfq9B,WAE/Bz6C,OAAOqgE,wBAAwBC,kBAC3B,CACI9lB,sBAAuBA,GAChB1uC,KAAKsR,QAAQmjD,6BAExB,SAACvgB,EAAUwgB,GAAX,OACIC,EACI,CACI34C,SAAU,CACNk4B,WACAwgB,cAEJ/lB,cAEJhyB,EACAQ,IAER,SAAArD,GAAG,OAAIqD,EAAU,IAAIoV,IACjBmhB,gCACA55B,WAIRqD,EAAU,IAAIoV,IACVmhB,uCAQZwgB,0BA3LmB,SA2LO5iD,EAAS8iD,EAAgBC,GAAc,IAAA3oB,EAAA1rC,KAC7D,GAAiC,OAA7BA,KAAK6yD,oBAAT,CAD6D,IAAA+B,EAazD50D,KAAKsR,QAFLyhD,EAXyD6B,EAWzD7B,0BACA0B,EAZyDG,EAYzDH,4BAIA9lB,EACAr9B,EADAq9B,WAGEkmB,EAAkC,CACpC9B,4BACA0B,4BACInjD,EAAQo9B,uBAAyB+lB,EACrC9lB,cAGA8jB,EAgNZ,SAAkCnhD,EAAS8iD,EAAgBC,GAAc,IAEjEI,EAGAnjD,EAHAmjD,4BACA1B,EAEAzhD,EAFAyhD,0BACApkB,EACAr9B,EADAq9B,WAKJ2O,OAAOwX,QAAQ1d,YACX2b,EACA,CACIgC,WAAW,EACXC,QAASP,GAEb,SAAAz4C,GACI,GAAKA,EAYL8M,EAAOzZ,IAAI,4BAA6B2M,GACxC24C,EACI,CACI34C,WACA2yB,cAEJylB,EACAC,OAnBJ,CAEI,IAAMY,EAAY3X,OAAOwX,QAAQG,UAEjCZ,EAAaY,aAAqB92D,MAC5B82D,EACA,IAAI1iC,IACFmhB,iCACAuhB,OAvOZC,CACIL,EACAT,EACAC,IAEA3B,GAEAyC,MACI,+FAMRn1D,KAAKo1D,sBAAsB9jD,EAAS8iD,EAChCC,SAxCJr0D,KAAK6yD,oBAAoB9qB,KAAK,WAC1B2D,EAAKwoB,0BACD5iD,EAAS8iD,EAAgBC,MA4CzCe,sBA3OmB,SA2OG9jD,EAAS8iD,EAAgBC,EAAcp1D,GACzD,IAAMo2D,EAAqBzB,EAAsB5zD,KAAKsR,SAEtDA,EAAQ+a,SAAS,sBAAuBgpC,GACxCr1D,KAAKs1D,kCAAkChkD,EAAS8iD,EAC5CC,EAAcp1D,IAKtBq2D,kCArPmB,SAqPehkD,EAAS8iD,EAAgBC,GAAc,IAAAjnB,EAAAptC,MACxC,IAAzBsR,EAAQikD,aAwQpB,SAAsCjkD,EAASkkD,EAAcC,GACzD,GAAgB,IAAZA,EACA,OAAOrqB,QAAQE,SAGnB,OAAO,IAAIF,QAAQ,SAACC,EAASC,GACzB,IAAIoqB,EAAiBD,EACfE,EAAWzhE,OAAOo2C,YAAY,WAChCwpB,EAAwB,SAAAC,GAChBA,GACA7/D,OAAOyzC,cAAcguB,GACrBtqB,KAGuB,MADvBqqB,IAEIpqB,IACAp3C,OAAOyzC,cAAcguB,KAG9BrkD,IACJkkD,KAtRHI,CAA6B51D,KAAKsR,QAASA,EAAQqkD,SAAU,GACxD5tB,KAAK,WACF0qB,GAAqB,EACrBnhD,EAAQ+a,SAAS,kBACjB+gB,EAAK8mB,0BAA0B5iD,EAC3B8iD,EAAgBC,KAEvB7oB,MAAM,WACH4B,EAAKkoB,kCAAkChkD,EACnC8iD,EAAgBC,KAdxBA,EAAa,IAAI9hC,IACbmhB,yCAuBZggB,gCA/QmB,SA+QapiD,EAASjS,EAAU+uC,GAC/CtlB,EAAOnZ,KAAK,6CAIRk4B,UAAUguB,gBACQhuB,UAAUguB,gBAAgB//D,KAAK+xC,WAG/BA,UAAUC,aAAa+tB,gBAAgB//D,KAAK+xC,UAAUC,eAG5D,CAAExG,OAAO,IACpByG,KAAK,SAAA7b,IAGEA,GACGA,EAAOkjB,aACPljB,EAAOkjB,YAAYnyC,OAAS,EACLivB,EAAOkjB,YAAY,GACxCC,iBAAiB/9B,EAAQs9B,cAEJxD,QAAQC,WAGdtD,KAAK,kBACzB1oC,EAAS,CACL6sB,SACA8W,SAAU9W,EAAOhtB,SAG5BssC,MAAM,kBACH4C,EAAc,IAAI7b,IAAgBmhB,uCAyBlD,SAASkgB,EAAsBtiD,GAC3B,mDAAAhU,OAEQgU,EAAQyhD,2BAkDpB,SAASe,EAAwBz0D,EAAUiS,GACjB,oBAAXgsC,QAA2BA,QAAWA,OAAOwX,QAMxDxX,OAAOwX,QAAQ1d,YACX9lC,EAAQyhD,0BACR,CAAE+C,YAAY,GACd,SAAA95C,GACI,IAAKA,IAAaA,EAASgI,QAMvB,OAJA8E,EAAOlZ,KACH,6BAA8B0tC,OAAOwX,QAAQG,gBACjD51D,GAAS,GAAO,GAMpB,IAAM02D,EAAa/5C,EAASgI,QAE5B8E,EAAOzZ,IAAP,yBAAA/R,OAAoCy4D,IACpC,IAAM/B,EAjElB,SAA0BgC,EAAYD,GAClC,IAMI,IALA,IAAME,EAAKD,EAAWl5D,MAAM,KACtBo5D,EAAKH,EAAWj5D,MAAM,KAEtB6D,EAAMG,KAAK4gC,IAAIu0B,EAAGh5D,OAAQi5D,EAAGj5D,QAE1B3I,EAAI,EAAGA,EAAIqM,EAAKrM,IAAK,CAC1B,IAAI6hE,EAAK,EACLC,EAAK,EAST,GAPI9hE,EAAI2hE,EAAGh5D,SACPk5D,EAAK30C,SAASy0C,EAAG3hE,GAAI,KAErBA,EAAI4hE,EAAGj5D,SACPm5D,EAAK50C,SAAS00C,EAAG5hE,GAAI,KAGrB8N,MAAM+zD,IAAO/zD,MAAMg0D,GACnB,OAAO,EACJ,GAAID,IAAOC,EACd,OAAOD,EAAKC,EAMpB,OAAO,EACT,MAAOn3D,GAIL,OAHA4hC,EAAqBC,iBAAiB7hC,GACtC6pB,EAAOrZ,MAAM,oCAAqCxQ,IAE3C,GAkCGo3D,CACE/kD,EAAQglD,kCACRP,GAER12D,GAAU20D,EAAgBA,KA1B9B30D,GAAS,GAAO,GAmKxB,SAASs1D,IAMU,IALXrjD,EAKWzT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GALD,CACNme,SAAU,GACV2yB,WAAY,IAEhBhyB,EACW9e,UAAAZ,OAAA,EAAAY,UAAA,QAAA/C,EAAXqiB,EAAWtf,UAAAZ,OAAA,EAAAY,UAAA,QAAA/C,EAAA0tC,EACyBl3B,EAAQ0K,UAAY,GAApDk4B,EADO1L,EACP0L,SAAUwgB,EADHlsB,EACGksB,WAAYjlD,EADf+4B,EACe/4B,MAE9B,GAAIykC,EAAU,CACV,IAAMvF,oUAAU3P,CAAA,CACZmG,cAAe+O,GACZ5iC,EAAQq9B,YAGfgkB,EAAY,CAAE,WAAahkB,GACtB5G,KAAK,SAAA7b,GAAM,OAAIvP,EAAU,CACtBuP,SACA8W,SAAUkR,EACVtH,WAAY8nB,KACZv3C,OACL,CAIH,GAAiB,KAAb+2B,EAIA,YAHA/2B,EAAU,IAAIoV,IACVmhB,mCAKRv2B,EAAU,IAAIoV,IACVmhB,iCACAjkC,KAIGmjD,iFChmBf,IAAA2D,GAAA,EACAC,GAAA,EAGAjwD,EAAA,CACAkwD,WAAA,SAAAC,GACA,wBAAAA,EACA,IAAAv4D,MAAA,yBAAAu4D,EACA,4BAEAH,EAAAG,EACA,gCACA,+BAOAC,gBAAA,SAAAD,GACA,wBAAAA,EACA,IAAAv4D,MAAA,yBAAAu4D,EACA,4BAEAF,GAAAE,EACA,oCAAAA,EAAA,wBAGArnD,IAAA,WACA,oBAAAnb,OAAA,CACA,GAAAqiE,EACA,OAEA,oBAAA/mD,SAAA,mBAAAA,QAAAH,KACAG,QAAAH,IAAAtR,MAAAyR,QAAA3R,aAQA+4D,WAAA,SAAAC,EAAAC,GACAN,GAGAhnD,QAAAI,KAAAinD,EAAA,8BAAAC,EACA,cAWAC,eAAA,SAAAC,EAAAC,EAAAtgB,GACA,IAAAj6B,EAAAs6C,EAAAt6C,MAAAu6C,GACA,OAAAv6C,KAAAzf,QAAA05C,GAAAn1B,SAAA9E,EAAAi6B,GAAA,KASAugB,cAAA,SAAAhjE,GACA,IAAA2zC,EAAA3zC,KAAA2zC,UAGA/3B,EAAA,CACA6a,QAAA,KACA3G,QAAA,MAGA,YAAA9vB,MAAA2zC,UAEA,OADA/3B,EAAA6a,QAAA,iBACA7a,EAIA,GAAA+3B,EAAAsvB,gBACArnD,EAAA6a,QAAA,UACA7a,EAAAkU,QAAAhkB,KAAA+2D,eAAAlvB,EAAAiV,UACA,2BACK,GAAAjV,EAAAuvB,mBAEL,GAAAljE,EAAAmjE,wBACAvnD,EAAA6a,QAAA,SACA7a,EAAAkU,QAAAhkB,KAAA+2D,eAAAlvB,EAAAiV,UACA,+BACO,CACP,IAAAjV,EAAAiV,UAAApgC,MAAA,wBAOA,OAFA5M,EAAA6a,QAAA,2EAEA7a,EANAA,EAAA6a,QAAA,SACA7a,EAAAkU,QAAAhkB,KAAA+2D,eAAAlvB,EAAAiV,UACA,+BAOK,GAAAjV,EAAAC,cACLD,EAAAiV,UAAApgC,MAAA,sBACA5M,EAAA6a,QAAA,OACA7a,EAAAkU,QAAAhkB,KAAA+2D,eAAAlvB,EAAAiV,UACA,4BACK,KAAAjV,EAAAC,eACLD,EAAAiV,UAAApgC,MAAA,wBAOA,OADA5M,EAAA6a,QAAA,2BACA7a,EALAA,EAAA6a,QAAA,SACA7a,EAAAkU,QAAAhkB,KAAA+2D,eAAAlvB,EAAAiV,UACA,0BAMA,OAAAhtC,IAMA/b,EAAAD,QAAA,CACAub,IAAA9I,EAAA8I,IACAunD,WAAArwD,EAAAqwD,WACAH,WAAAlwD,EAAAkwD,WACAE,gBAAApwD,EAAAowD,gBACAI,eAAAxwD,EAAAwwD,eACAO,oBAAA/wD,EAAA+wD,oBACAJ,cAAA3wD,EAAA2wD,cAAAphE,KAAAyQ,mBC3HAxS,EAAOD,QAZkB,CAIrByjE,YAAa,cAKbp0B,KAAM,uBCfV,IAAMq0B,EACA,iEAcN,SAASz9B,EAAUtW,EAAKie,GACpB,OAAO5gC,KAAKE,MAAMF,KAAKwU,UAAYosB,EAAMje,EAAM,IAAMA,EAQzD,SAASg0C,EAAcxS,GACnB,OAAOA,EAAIlrB,EAAU,EAAGkrB,EAAIhoD,OAAS,IAqBzC,IAAM68B,EAAa,CAKf49B,eALe,WAMX,OAAOD,EA7CI,qBAoDf5H,gBAbe,SAaClvD,GAGZ,IAFA,IAAIpB,EAAM,GAEHoB,KACHpB,GAAOS,KAAK03D,iBAGhB,OAAOn4D,GAEXk4D,gBACAE,kBApCJ,SAA2B16D,GAGvB,IAFA,IAAI6S,EAAS,GAEJxb,EAAI,EAAGA,EAAI2I,EAAQ3I,GAAK,EAC7Bwb,GAAU2nD,EAAcD,GAG5B,OAAO1nD,GA8BPiqB,aAGJhmC,EAAOD,QAAUgmC,2YCnEjB,IAAMhR,EAASH,oBAAUQ,GAQnByuC,EAAgC,IAQhCC,EAA2B,IAsBpBC,EAA8B,CAIvC5Q,OAAQ,SAQR6Q,SAAU,WAKVC,YAAa,cAKbC,UAAW,aAOMC,aAmGjB,SAAAA,EAAYC,EAAK9lB,EAAY/gC,gGAASg2B,CAAAtnC,KAAAk4D,GAClCl4D,KAAKm4D,IAAMA,EACXn4D,KAAKqyC,WAAaA,EAQlBryC,KAAKo4D,YAAc,GAQnBp4D,KAAKq4D,kBAAoB,GAazBr4D,KAAKs4D,kBACsC,iBAA9BhnD,EAAQgnD,kBACXhnD,EAAQgnD,kBAAoBV,EAUtC53D,KAAKu4D,eACmC,iBAA3BjnD,EAAQinD,eACXjnD,EAAQinD,eAAiBV,EAuBnC73D,KAAKw4D,kBAAoB,GACzB1vC,EAAOnZ,KAAP,0BAAArS,OAAsC0C,KAAKu4D,iBAY3Cv4D,KAAKy4D,sBAAwB,IAAInuC,IASjCtqB,KAAK04D,gBAAkB,IAAIpuC,kEApKvBquC,EACA3jB,EACA4jB,EACAC,EACAC,GACJ,OAAKH,EAKME,EAIAf,EAA4B5Q,OAInCv8B,IAAQouC,qCACHD,EAGM9jB,EACA4jB,EACDd,EAA4BE,YAC5BF,EAA4BG,UAG/BH,EAA4BC,SAPxBD,EAA4B5Q,OAYpClS,EACD8iB,EAA4B5Q,OAC5B4Q,EAA4BC,SA1BvBD,EAA4BE,2DAyCba,EAAcC,GACxC,OAAKnuC,IAAQouC,qCAMNF,IAAiBC,EAClBhB,EAA4B5Q,OAC5B4Q,EAA4BE,YALvBF,EAA4B5Q,6DAwHpBhoD,GACnB,OAAOc,KAAKm4D,IAAInjB,UAAU91C,GACpBc,KAAKu4D,eAAiBv4D,KAAKs4D,iDASjCt4D,KAAKg5D,6BACCh5D,KAAKi5D,4BAA4BnjE,KAAKkK,MAE5CA,KAAKm4D,IAAI/kB,YACLnN,IAAU/J,6BACVl8B,KAAKg5D,8BAGTh5D,KAAKk5D,aAAel5D,KAAKm5D,8BAA8BrjE,KAAKkK,MAC5DA,KAAKqyC,WAAW/lB,GAAG2oB,aAAkCj1C,KAAKk5D,cAKtDvuC,IAAQouC,uCAER/4D,KAAKo5D,iBAAmBp5D,KAAKq5D,gBAAgBvjE,KAAKkK,MAClDA,KAAKm4D,IAAI/kB,YACLnN,IAAUvJ,kBAAmB18B,KAAKo5D,kBAEtCp5D,KAAKs5D,mBAAqBt5D,KAAKu5D,kBAAkBzjE,KAAKkK,MACtDA,KAAKm4D,IAAI/kB,YACLnN,IAAUrJ,oBAAqB58B,KAAKs5D,oBAIxCt5D,KAAKw5D,oBAAsBx5D,KAAKy5D,mBAAmB3jE,KAAKkK,MACxDA,KAAKqyC,WAAW/lB,GACZ2oB,cACAj1C,KAAKw5D,qBAETx5D,KAAK05D,sBAAwB15D,KAAK25D,qBAAqB7jE,KAAKkK,MAC5DA,KAAKqyC,WAAW/lB,GACZ2oB,gBACAj1C,KAAK05D,uBAIT15D,KAAK45D,yBACC55D,KAAK65D,wBAAwB/jE,KAAKkK,OAG5CA,KAAKgzC,gBAAkBhzC,KAAKgzC,gBAAgBl9C,KAAKkK,MACjDA,KAAKqyC,WAAW/lB,GACZ2oB,2BACAj1C,KAAKgzC,iBAEThzC,KAAK85D,qBACC95D,KAAKm5D,8BAA8BrjE,KAAKkK,MAC9CA,KAAKm4D,IAAI7rC,GACL2Z,IAAU3J,oBAAqBt8B,KAAK85D,wDASxC95D,KAAKm4D,IAAI1rC,eACLwZ,IAAU/J,6BACVl8B,KAAKg5D,8BAELruC,IAAQouC,uCACR/4D,KAAKm4D,IAAI1rC,eACLwZ,IAAUvJ,kBACV18B,KAAKo5D,kBACTp5D,KAAKm4D,IAAI1rC,eACLwZ,IAAUrJ,oBACV58B,KAAKs5D,oBAETt5D,KAAKqyC,WAAW6N,IACZjL,cACAj1C,KAAKw5D,qBACTx5D,KAAKqyC,WAAW6N,IACZjL,gBACAj1C,KAAK05D,wBAGb15D,KAAKqyC,WAAW6N,IACZjL,2BACAj1C,KAAKgzC,iBAEThzC,KAAKm4D,IAAI1rC,eACLwZ,IAAU3J,oBAAqBt8B,KAAK85D,sBAExC95D,KAAKqyC,WAAW6N,IACZjL,aAAkCj1C,KAAKk5D,cAI3C,IAFA,IAEAhQ,EAAA,EAAA6Q,EAFuB/kE,OAAOq5B,KAAKruB,KAAKo4D,aAExClP,EAAA6Q,EAAA98D,OAAAisD,IAA4C,CAAvC,IAAM3pB,EAAaw6B,EAAA7Q,GACpBlpD,KAAKyX,aAAa8nB,GAClBv/B,KAAKg6D,uBAAuBz6B,GAIhCv/B,KAAKq4D,kBAAoB,uDAUD4B,EAAYC,GAEpCpxC,EAAOpZ,MAAP,mDAAApS,OACuDgV,KAAK8K,MAD5D,OAAA9f,OAEQ28D,EAFR,MAAA38D,OAEuB48D,IAGnBD,IAAej6D,KAAKqyC,WAAW8nB,aAE/Bn6D,KAAKq4D,kBAAkB4B,GAAcC,EACrCl6D,KAAKo6D,0BAA0BH,oDASfI,EAAaC,GACjC,GAAID,EAAYE,wBAA0BD,EAAW,CAEjD,IAAML,EAAaI,EAAYG,QAE/BH,EAAYI,qBAAqBH,GAEjCxxC,EAAOpZ,MAAP,6BAAApS,OACiCgV,KAAK8K,MADtC,MAAA9f,OACgD28D,EADhD,MAAA38D,OAEQg9D,IAGRnwC,IAAWmJ,QACP1c,KAAK0K,UAAU,CACXpiB,GAAI,mBACJm7D,YAAaJ,EACbtgD,OAAQ2gD,KAGhBt6D,KAAKqyC,WAAW9nB,aAAa2C,KACzB+nB,kCACAglB,EAAYK,yCAWX/6B,GACLv/B,KAAKo4D,YAAY74B,KACjBrrC,OAAOujB,aAAazX,KAAKo4D,YAAY74B,IACrCv/B,KAAKo4D,YAAY74B,GAAiB,qDAUnBA,GACnBv/B,KAAKw4D,kBAAkBj5B,GAAiB,gDAUzBm7B,GACVA,EAAYxoC,WACNwoC,EAAYxkB,YAAcpJ,MAEjChkB,EAAOpZ,MAAP,uCAAApS,OAEQo9D,EAAYC,qBAEpBD,EAAYpuC,GACRsuC,qBACA56D,KAAK45D,wEAWIc,GACjB,IAAKA,EAAYxoC,WACNwoC,EAAYxkB,YAAcpJ,IAAiB,CAElD,IAAMmtB,EAAaS,EAAYC,mBAE/B7xC,EAAOpZ,MAAP,qCAAApS,OAAkD28D,IAElDS,EAAYxa,IACR0a,qBACA56D,KAAK45D,0BAET55D,KAAKyX,aAAawiD,GAClBj6D,KAAKg6D,uBAAuBC,GAE5Bj6D,KAAKo6D,0BAA0BH,+CAiBpBI,GACf,IAAK1vC,IAAQouC,qCACT,OAAO,EAGX,IAAM75D,EAAKm7D,EAAYG,QACjBK,EAAsBR,EAAYS,8BAClCtC,EAAoBx4D,KAAKw4D,kBAAkBt5D,GAC3C0Y,EAAU5X,KAAK+6D,uBAAuB77D,GAE5C,OAAO27D,GAC6B,iBAAtBrC,GACNlmD,KAAK8K,MAAQo7C,GAAsB5gD,0DAS3C,IAAMojD,EAAeh7D,KAAKqyC,WAAW4oB,kBADT9tC,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAG5B,QAAAwyB,EAAAC,EAA0BytC,EAA1B3lE,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAwC,KAA7BktC,EAA6B/sC,EAAA/3B,MACpCyK,KAAKo6D,0BAA0BC,EAAYG,UAJnB,MAAA1gD,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,sDAeNnuB,GACtB,IAAMm7D,EAAcr6D,KAAKqyC,WAAW6oB,mBAAmBh8D,GAEvD,GAAKm7D,EAAL,CAYA,IAAMc,EAAYn7D,KAAKqyC,WAAW+oB,cAC5BC,EAAsBr7D,KAAKs7D,qBAAqBp8D,GAChDq8D,EAAwC,IAAxBv7D,KAAKm4D,IAAIqD,WAIzB3C,EAAewB,EAAYxB,gBAAkB0C,EAC7CzC,EAAqB94D,KAAK84D,mBAAmBuB,GAC7CrlB,EAAYh1C,KAAKm4D,IAAInjB,UAAU91C,GACjCu8D,EAAoBz7D,KAAKq4D,kBAAkBn5D,GAEd,kBAAtBu8D,IAGP3yC,EAAOpZ,MAAM,uDACb+rD,GAAoB,GAGxB,IAAMC,EACAP,EACIjD,EAAmCyD,uBACjC9C,EACAC,GACFZ,EAAmC0D,uBACjCH,EACAzmB,EACAqmB,EACAxC,EACAC,GAIR4C,IAAa5D,EAA4BG,WACzCj4D,KAAK67D,qBAAqB38D,GAG9B4pB,EAAOpZ,MAAP,8BAAApS,OACkC4B,EADlC,sBAAA5B,OAEQu7D,EAFR,qBAAAv7D,OAGQm+D,EAHR,yBAAAn+D,OAIQw7D,EAJR,eAAAx7D,OAKQ69D,EALR,mBAAA79D,OAMQ03C,EANR,iCAAA13C,OAOQ+8D,EAAYE,sBAPpB,QAAAj9D,OAOgDo+D,IAEhD17D,KAAK87D,wBAAwBzB,EAAaqB,QAlDtC5yC,EAAOlZ,KAAP,gDAAAtS,OAA4D4B,8CA6Db,IAAvC68D,EAAuCl+D,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAxB,GAAIm+D,EAAoBn+D,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GACzCuf,EAAM9K,KAAK8K,MAEjB0L,EAAOpZ,MACH,yBAA0BqsD,EAAcC,EAAe5+C,GAJR,IAAA4Q,GAAA,EAAAC,GAAA,EAAAC,OAAApzB,EAAA,IAMnD,QAAAqzB,EAAAC,EAAiB2tC,EAAjB1mE,OAAAo4B,cAAAO,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAA+B,KAApB9uB,EAAoBivB,EAAA54B,MAC3ByK,KAAKy4D,sBAAsBhqC,OAAOvvB,GAClCc,KAAK67D,qBAAqB38D,GAC1Bc,KAAKo6D,0BAA0Bl7D,IATgB,MAAA4a,GAAAmU,GAAA,EAAAC,EAAApU,EAAA,YAAAkU,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAAA,IAAAkB,GAAA,EAAAC,GAAA,EAAAC,OAAAx0B,EAAA,IAWnD,QAAAy0B,EAAAC,EAAiBwsC,EAAjB3mE,OAAAo4B,cAAA2B,GAAAG,EAAAC,EAAA9B,QAAAC,MAAAyB,GAAA,EAAgC,KAArBlwB,EAAqBqwB,EAAAh6B,MAE5ByK,KAAKy4D,sBAAsB1sC,IAAI7sB,EAAIke,GACnCpd,KAAKo6D,0BAA0Bl7D,IAdgB,MAAA4a,GAAAuV,GAAA,EAAAC,EAAAxV,EAAA,YAAAsV,GAAA,MAAAI,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAAsB,EAAA,MAAAC,iDA0BlCiQ,GACjB,IAAM08B,EAASj8D,KAAK04D,gBAAgBvjE,IAAIoqC,GAEpC08B,IACAxkD,aAAawkD,GACbj8D,KAAK04D,gBAAgBjqC,OAAO8Q,iDAkBfA,GAAe,IAAAmI,EAAA1nC,KAC1By4D,EACAz4D,KAAKy4D,sBAAsBtjE,IAAIoqC,GAErC,SAAIk5B,GACInmD,KAAK8K,MAAQq7C,GAtoBK,OA8oBXz4D,KAAK04D,gBAAgBvjE,IAAIoqC,IAGpCv/B,KAAK04D,gBAAgB3sC,IAAIwT,EAAe3/B,WACpC,kBAAM8nC,EAAK0yB,0BAA0B76B,IAlpBnB,OAspBnB,2CASKsN,GAAO,IAAAnB,EAAA1rC,KACbu/B,EAAgBsN,EAAM8tB,mBACtBN,EAAcr6D,KAAKqyC,WAAW6oB,mBAAmB37B,GAGvD,GADAzW,EAAOpZ,MAAP,6BAAApS,OAA0CiiC,GAAiBjtB,KAAK8K,OAC3Di9C,GAML,GADAr6D,KAAKw4D,kBAAkBj5B,GAAiBjtB,KAAK8K,OACxCi9C,EAAYxB,eAAgB,CAI7B74D,KAAKyX,aAAa8nB,GAGlB,IAAM3nB,EAAU5X,KAAK+6D,uBAAuBx7B,GAE5Cv/B,KAAKo4D,YAAY74B,GAAiBrrC,OAAO0L,WAAW,WAChDkpB,EAAOpZ,MAAP,6BAAApS,OACiCiiC,EADjC,4BAAAjiC,OAEUsa,EAFV,QAGA8zB,EAAKj0B,aAAa8nB,GAClBmM,EAAK0uB,0BAA0B76B,IAChC3nB,SApBHkR,EAAOrZ,MAAP,0BAAAnS,OAAuCiiC,8CA8B7BsN,GACd,IAAMtN,EAAgBsN,EAAM8tB,mBAE5B7xC,EAAOpZ,MAAP,+BAAApS,OACmCiiC,GAAiBjtB,KAAK8K,OAEzDpd,KAAKyX,aAAa8nB,GAClBv/B,KAAKg6D,uBAAuBz6B,GAE5Bv/B,KAAKo6D,0BAA0B76B,mDASXsN,GACpB,IAAMtN,EAAgBsN,EAAM8tB,mBAE5B7xC,EAAOpZ,MAAP,8CAAApS,OACkDiiC,GAC9CsN,EAAMqvB,WAEVl8D,KAAKo6D,0BAA0B76B,6GC3vBxBxZ,EAAA,GAQXo2C,wBARW,SAQaC,GACpB,IAAMC,EAAcD,GACbA,EAAS7hD,qBAAqB,0BAA0B,GAE/D,GAAK8hD,EAIL,MAAO,CACH5sD,MAAO4sD,EAAYpuD,aAAa,kBAChCquD,cAAeD,EAAYpuD,aAAa,kBACxCsuD,UAAWF,EAAYpuD,aAAa,cACpC0L,OAAQ0iD,EAAYpuD,aAAa,YAWzCuuD,sBA/BW,SA+BWJ,GAClB,IAAMK,EACAL,EAAS7hD,qBAAqB,wBAAwB,GACtDmiD,EAAoBD,GACnBA,EAA2Bx8C,YAC5B08C,EACAP,EAAS7hD,qBAAqB,QAAQ,GACtC9kB,EAAOknE,GACNA,EAAc18C,aACd08C,EAAc18C,YAAYjS,cAC3B4uD,EACAR,EAAS7hD,qBAAqB,cAAc,GAIlD,MAAO,CACHmiD,oBACAjnE,OACA8mE,UALEK,GAAsBA,EAAmB38C,cAenD48C,mBA3DW,SA2DQ7gD,GACf,IAAM8gD,EAAQ9gD,GAAYA,EAASzB,qBAAqB,SAAS,GAEjE,OAAOuiD,GAASA,EAAM7uD,aAAa,eASvC8uD,aAvEW,SAuEEX,GACT,IAAMY,EACAZ,EAAS7hD,qBAAqB,cAAc,GAGlD,OAFkByiD,GAAsBA,EAAmB/8C,aAW/Dg9C,YArFW,SAqFCb,GACR,OAAOA,EAASnuD,aAAa,QAAQ+9B,SAAS,0BC1FtD,IAAAkxB,EAGAA,EAAA,WACA,OAAAl9D,KADA,GAIA,IAEAk9D,KAAA,IAAAj9D,SAAA,iBACC,MAAAhB,GAED,iBAAA/K,SAAAgpE,EAAAhpE,QAOAH,EAAAD,QAAAopE,kgCCIA,IAAMp0C,EAASH,oBAAUQ,GA2CJg0C,cAiDjB,SAAAA,EACQ9mD,EACA+mD,EACAC,EACA//C,EACAggD,EACAjoB,EACAzB,EACA2pB,GAAa,IAAA71B,MAAA,mGAAAJ,CAAAtnC,KAAAm9D,KACjBn9D,MAAA0nC,MAAAF,EAAA21B,GAAA1oE,KAAAuL,KACIqW,EACA+mD,EACAC,EAAW//C,EAAYggD,EAAkBjoB,EAAWkoB,mDAWnDC,iBAAmB,KAQxB91B,EAAK+1B,6BAA+B,KAYpC/1B,EAAKg2B,2BAA6B,KAgBlCh2B,EAAKi2B,mBAAoB,EAYzBj2B,EAAKk2B,oBAAqB,EAS1Bl2B,EAAKm2B,oBAAqB,EAE1Bn2B,EAAKo2B,kBAAmB,EACxBp2B,EAAKq2B,QAAS,EAQdr2B,EAAKkM,MAAQA,EAMblM,EAAKs2B,eAAiB,IAAIC,IAE1Bv2B,EAAKw2B,kBACC5wD,IAAM6wD,MAAMz2B,EAAK02B,mBAAmBtoE,KAAxBm9C,EAAAvL,IAAoC,GAOtDA,EAAK22B,cAAe,EAQpB32B,EAAK42B,2BAAwBxjE,EA3GZ4sC,8OAzDoB62B,0DAShBC,GACrB,IAAMC,EAAgBD,EAAe/kC,KAAK,0BAE1C,GAAIglC,EAAcxhE,OAAQ,CACtB,IAAMu9C,EAAUikB,EAAc,GAAGxwD,aAAa,WAE9C,GAAgB,SAAZusC,GACe,cAAZA,GACY,cAAZA,GACY,SAAZA,EACH,OAAOA,EAIf,OAAO,oDA2JKkkB,GACZ,OAAI1+D,KAAK0kD,QAAUia,MACf71C,EAAOzZ,IAAP,8CAAA/R,OACkDohE,KAE3C,wCAUFptD,GAAS,IAAAo6B,EAAA1rC,KAClBA,KAAKi4C,QAAUrS,QAAQt0B,EAAQ2mC,SAC/Bj4C,KAAK89D,kBAAmB,EACxB99D,KAAKsR,QAAUA,EAMftR,KAAK4+D,aAAc,EAMnB5+D,KAAK6+D,WAAY,EACjB7+D,KAAK8+D,oBAAsBl5B,QAAQt0B,EAAQwtD,qBAC3C9+D,KAAK++D,oBAAsBn5B,QAAQt0B,EAAQytD,qBAE3C,IAAMC,EAAY,CAAEjS,WAAYz7C,EAAQy7C,YAMxC,GAJIz7C,EAAQ2tD,cACRD,EAAUE,SArPI,KAwPdl/D,KAAK4zC,MAAO,CAEZorB,EAAUG,kBAAmB,EAC7BH,EAAUI,YAAc9tD,EAAQm8C,KAAOn8C,EAAQm8C,IAAI2R,YACnDJ,EAAUK,WAAa/tD,EAAQm8C,KAAOn8C,EAAQm8C,IAAI4R,WAElD,IAAM9pB,EAAqBv1C,KAAKs/D,2BAA2BhuD,QAEzB,IAAvBikC,IACPypB,EAAUzpB,mBAAqBA,QAInCypB,EAAUG,iBACJ7tD,EAAQ6tD,kBACF7tD,EAAQ+tD,aAAe/tD,EAAQ8tD,YAC3CJ,EAAUK,WAAa/tD,EAAQ+tD,WAC/BL,EAAUO,uBACJjuD,EAAQkuD,SAAWluD,EAAQkuD,QAAQD,uBACzCP,EAAUS,sBAAwBnuD,EAAQmuD,sBAG9Cz/D,KAAK2rB,eACC3rB,KAAKm4D,IAAIuH,qBACH1/D,KAAKg+D,eACLh+D,KAAKq1C,UACLr1C,KAAK4zC,MACLorB,GAEZh/D,KAAK2rB,eAAeg0C,eAAiB,SAAAnP,GACjC,GAAKA,EAAL,CAUA,IAAMr5B,EAAYq5B,EAAGr5B,UACf/Z,EAAMlpB,OAAOm5D,YAAYjwC,MAE/B,GAAI+Z,EAAW,CAC6B,OAApCuU,EAAKgyB,6BACLhyB,EAAKgyB,2BAA6BtgD,GAItC,IAAIxK,EAAWukB,EAAUvkB,SAEzB,GAAwB,iBAAbA,EAEP,GAAiB,SADjBA,EAAWA,EAAS5E,gBACmB,WAAb4E,GACtB,GAAI84B,EAAKqzB,oBACL,YAED,GAAiB,QAAbnsD,GACH84B,EAAKozB,oBACL,YAIJpzB,EAAKmyB,qBAEb1zC,IAAW+K,cACPmJ,IACA,CACIuhC,MAAO,YACPrqE,MAAO6nB,EAAMsuB,EAAKgyB,2BAClBjQ,IAAK/hB,EAAKkI,MACVisB,UAAWn0B,EAAK6xB,cAExB7xB,EAAKmyB,oBAAqB,GAE9BnyB,EAAKo0B,iBAAiB3oC,KAU1Bn3B,KAAK2rB,eAAeo0C,uBAAyB,WACpCr0B,EAAK/f,iBAGiC,WAAvC+f,EAAK/f,eAAeq0C,eACpBt0B,EAAKmzB,WAAY,EAEuB,WAAvCnzB,EAAK/f,eAAeq0C,gBACsB,WAAxCt0B,EAAK/f,eAAes0C,iBACnBv0B,EAAKqyB,QACTryB,EAAKkmB,KAAKrnC,aAAa2C,KAAKilC,IAAW/3D,iBAAkBsxC,KAUjE1rC,KAAK2rB,eAAeu0C,2BAA6B,WAC7C,GAAKx0B,EAAK/f,gBACE+f,EAAKy0B,gBAAgB,8BADjC,CAIA,IAAM/iD,EAAMlpB,OAAOm5D,YAAYjwC,MA0B/B,OAxBKsuB,EAAKkI,QACNlI,EAAKkmB,KAAKxF,gBAAV,aAAA9uD,OACiBouC,EAAK/f,eAAey0C,qBAC/BhjD,GAEV0L,EAAOzZ,IACH,cAAA/R,OAAcouC,EAAK/f,eAAey0C,oBAAlC,SAAA9iE,OACeouC,EAAKkI,MADpB,OAEAx2B,GAEJ+M,IAAW+K,cACPqJ,IACA,CACIkvB,IAAK/hB,EAAKkI,MACV8Q,MAAOhZ,EAAK/f,eAAey0C,mBAC3BC,gBAAmB30B,EAAK/f,eAAeq0C,eACvCM,UAAW50B,EAAKkzB,YAChBrpE,MAAO6nB,IAGfsuB,EAAKkmB,KAAKrnC,aAAa2C,KACnBilC,IAAW13D,6BACXixC,EACAA,EAAK/f,eAAey0C,oBAChB10B,EAAK/f,eAAey0C,oBAC5B,IAAK,WACD10B,EAAK+xB,6BAA+BrgD,EACpC,MACJ,IAAK,YAUD,GAP2C,WAAvCsuB,EAAK/f,eAAeq0C,gBAChBt0B,EAAKkzB,aACLlzB,EAAKkmB,KAAKrnC,aAAa2C,KACnBilC,IAAWh7D,oBAAqBu0C,IAIvCA,EAAK2yB,cAAgB3yB,EAAKmzB,UAAW,CAEtC10C,IAAW+K,cACPmJ,IACA,CACIuhC,MAAO,WACPrqE,MAAO6nB,EAAMsuB,EAAK+xB,6BAClBhQ,IAAK/hB,EAAKkI,MACVisB,UAAWn0B,EAAK6xB,cAMxB,IAAMgD,EACAz/D,KAAK2iB,IACHioB,EAAK+xB,6BACL/xB,EAAKgyB,4BAEbhyB,EAAK4yB,sBAAwBlhD,EAAMmjD,EAEnCp2C,IAAW+K,cACPmJ,IACA,CACIuhC,MAAO,gBACPrqE,MAAOm2C,EAAK4yB,sBACZ7Q,IAAK/hB,EAAKkI,MACVisB,UAAWn0B,EAAK6xB,cAGxB7xB,EAAK2yB,cAAe,EACpB3yB,EAAKkmB,KAAKrnC,aAAa2C,KACnBilC,IAAWn7D,uBAAwB00C,GAE3CA,EAAKkzB,aAAc,EACnB,MACJ,IAAK,eACD,GAAIlzB,EAAKqyB,OACL,MAEJryB,EAAKkzB,aAAc,EAIflzB,EAAKmzB,WACLnzB,EAAKkmB,KAAKrnC,aAAa2C,KACnBilC,IAAWj7D,uBAAwBw0C,GAE3C,MACJ,IAAK,SACDA,EAAKkmB,KAAKrnC,aAAa2C,KACnBilC,IAAW/6D,sBAAuBs0C,MAI9C1rC,KAAK2rB,eAAe60C,oBAAsB,WACtC90B,EAAKkmB,KAAKrnC,aAAa2C,KAAKilC,IAAWl5D,qBAAsByyC,IAIjE1rC,KAAKg+D,eAAeyC,YAAYzgE,KAAK4xD,OAEhC5xD,KAAK4zC,OAAStiC,EAAQmuD,uBAGvBz/D,KAAKm4D,IAAI/kB,YAAYnN,IAAU5J,oBAC3B,SAAAqkC,GACIh1B,EAAK/f,eAAeg1C,cAAcD,GAClC53C,EAAOnZ,KAAK,oDAEZ+7B,EAAKwyB,kBAAkBpgE,KAAK,SAAA8iE,GACxBl1B,EAAKm1B,eACA94B,KAAK64B,GACLp1B,MAAMo1B,gDAYdzpC,GAAW,IAAAiW,EAAAptC,KAClB8gE,EAAW,IAAI/oB,IAAI/3C,KAAK2rB,eAAeo1C,iBAAiBvmC,KAE9D,GAAIrD,IAAcn3B,KAAK89D,iBAAkB,CACrC,IAAMkD,EACA5rC,IAAQE,UACNwrC,EAAS3qC,MAAMgB,EAAU8pC,eAAgBH,EAAS3/C,SACpD+/C,EAAQ9rC,IAAQuD,kBAAkBxB,EAAUA,WAElD,IAAM6pC,IAAOE,EAAQ,CAMjB,OAHArgC,IAAqBC,iBAAiB,IAAI3iC,MAFpB,oCAGtB2qB,EAAOrZ,MAHe,8BAO1BuxD,EAAI3wD,MAAQ,uCAERrQ,KAAKmhE,SAC6B,IAA9BnhE,KAAKohE,cAAcnkE,QAEnB2C,WAAW,WAC2B,IAA9BwtC,EAAKg0B,cAAcnkE,SAGvBmwC,EAAKi0B,kBAAkBj0B,EAAKg0B,eAC5Bh0B,EAAKg0B,cAAgB,KACtB,IAEPphE,KAAKohE,cAActjE,KAAKq5B,IAExBn3B,KAAKqhE,kBAAkB,CAAElqC,SAG7BrO,EAAOzZ,IAAI,qCAGXrP,KAAK89D,kBAAmB,4CAUdwD,GAAY,IAAAvzB,EAAA/tC,KAC1B,GAAKA,KAAKmgE,gBAAgB,qBAA1B,CAKAr3C,EAAOzZ,IAAI,oBAAqBiyD,GAUhC,IATA,IAAM1pC,EAAOhxB,cAAI,CAAEwV,GAAIpc,KAAKq9D,UACxBhsD,KAAM,QACL1c,EAAE,SAAU,CAAE0b,MAAO,oBAClBquB,OAAQ,iBACRmhC,UAAW7/D,KAAKuhE,aAChBlrD,IAAKrW,KAAKqW,MAEZyqD,EAAW,IAAI/oB,IAAI/3C,KAAK2rB,eAAeo1C,iBAAiBvmC,KAdpC+d,EAAA,SAgBjBE,GACL,IAAM+oB,EAAQF,EAAWnoC,OAAO,SAAAxtB,GAAE,OAAIA,EAAGs1D,gBAAkBxoB,IACrDjiB,EACApB,IAAQc,WAAW4qC,EAAS3qC,MAAMsiB,GAAK37C,MAAM,QAAQ,IAE3D,GAAI0kE,EAAMvkE,OAAS,EAAG,CAClB,IAAM+jE,EACA5rC,IAAQE,UAAUwrC,EAAS3qC,MAAMsiB,GAAMqoB,EAAS3/C,SAEtD6/C,EAAI3wD,MAAQ,uCACZunB,EAAKjjC,EAAE,UAAW,CACd2kD,QAASvL,EAAKwzB,eAAiBxzB,EAAKqvB,SAC9B,YAAc,YACpBvoE,KAAM2sE,EAAM,GAAGC,OAASD,EAAM,GAAGC,OAASjrC,EAAML,QACjDxhC,EAAE,YAAaqsE,GAClB,IAAK,IAAI1sE,EAAI,EAAGA,EAAIktE,EAAMvkE,OAAQ3I,IAAK,CACnC,IAAM6iC,EACA/B,IAAQuD,kBAAkB6oC,EAAMltE,GAAG6iC,WAIrC4W,EAAKkK,UACL9gB,EAAUI,GAAK,WAEnBK,EAAKjjC,EAAE,YAAawiC,GAAW5mB,KAInC,IAAMmxD,EACAtsC,IAAQO,SACNmrC,EAAS3qC,MAAMsiB,GACf,iBAAkBqoB,EAAS3/C,SAEnC,GAAIugD,EAAiB,CACjB,IAAMrpB,EAAMjjB,IAAQ2B,iBAAiB2qC,GAErCrpB,EAAIsB,UAAW,EACf/hB,EAAKjjC,EACD,cACA,CAAE0b,MAAO,gCACR7a,EAAE6iD,EAAIrhB,oBACJqhB,EAAIrhB,YACXY,EAAKlxB,MAAM2xC,GACXzgB,EAAKrnB,KAETqnB,EAAKrnB,KACLqnB,EAAKrnB,OA9CJkoC,EAAM,EAAGA,EAAMqoB,EAAS3qC,MAAMl5B,OAAQw7C,IAAOF,EAA7CE,GAqDTz4C,KAAKsd,WAAWnF,OACZyf,EAAM,KAAM53B,KAAK2hE,sBAAsB/pC,GA/lBhC,0DA0mBX,IAAMgqC,EACAh7D,cAAI,CACFwV,GAAIpc,KAAKq9D,UACThsD,KAAM,QACT1c,EAAE,SAAU,CAAE0b,MAAO,oBAClBquB,OAAQ,eACRmhC,UAAW7/D,KAAKuhE,aAChBlrD,IAAKrW,KAAKqW,MACb1hB,EAAE,YAAa,CAAE0b,MAAO,oCACxB7a,EAAE,UACF+a,KAELvQ,KAAKw9D,kBACEoE,EAAYjtE,EACX,iBAAkB,CACd0b,MAAO,kCACPnR,GAAIc,KAAKw9D,mBAGrBx9D,KAAKsd,WAAWnF,OACZypD,EACA,KACA5hE,KAAK2hE,sBAAsBC,GAKvB,6CAMKv2D,GAAM,IAAAwjC,EAAA7uC,KACnB,GAA2C,WAAvCA,KAAK2rB,eAAeq0C,eAAxB,CAMA,IAAM6B,EAAgB,GAyBtB,GAvBAx2D,EAAKouB,KAAK,gCACLwhB,KAAK,SAACtC,EAAKxhB,GACR,IAAIloB,EAAOmmB,IAAQwD,oBAAoBzB,GAEvCloB,EAAOA,EAAK7R,QAAQ,OAAQ,IAAIA,QAAQ,KAAM,IAI9C,IAAM0kE,EAAe,IAAIC,gBAAgB,CACrCd,cAAe,EAOfQ,OAAQ,GACRtqC,UAAWloB,IAGf4yD,EAAc/jE,KAAKgkE,KAGtBD,EAAc5kE,OAAnB,CAsBA6rB,EAAOpZ,MAAP,eAAApS,OACmBukE,EAAc5kE,OADjC,6BAEA+C,KAAKk+D,kBAAkBpgE,KAbF,SAAA8iE,GACjB,QAAA1X,EAAA,EAAA8Y,EAA2BH,EAA3B3Y,EAAA8Y,EAAA/kE,OAAAisD,IAA0C,CAArC,IAAM+Y,EAAYD,EAAA9Y,GACnBra,EAAKljB,eAAeu2C,gBAAgBD,GAC/Bl6B,KACG,kBAAMjf,EAAOpZ,MAAM,wBACnB,SAAAoK,GAAG,OAAIgP,EAAOrZ,MAAM,0BAA2BqK,KAG3D8mD,WAlBA93C,EAAOrZ,MACH,6BAA8BpE,EAAK,IAAMA,EAAK,GAAG82D,gBAhCrDr5C,EAAOlZ,KAAK,uFA6DP0rC,GAAU,IAAA8mB,EAAApiE,KAEbk7C,EAAEI,GAAU7hB,KACV,gEAGFwhB,KAAK,SAAC3mD,EAAG+tE,GACX,IAAMzxC,EAAO/vB,OAAOwhE,EAAYp0D,aAAa,SAEzCm0D,EAAKxuB,MAELwuB,EAAKpE,eAAesE,aAChB1xC,EAAMpqB,UAAQmI,mBAAmByzD,EAAK/E,YAE1CniB,EAAEmnB,GACG5oC,KAAK,gDACLwhB,KAAK,SAACsnB,EAAIC,GACP,IAAM5rB,EAAQ4rB,EAAgBv0D,aAAa,SAEvC2oC,GAASA,EAAM35C,SACXmF,MAAMwuB,IAASA,EAAO,EACtB9H,EAAOlZ,KACH,gBAAAtS,OAAgBszB,EAAhB,2BAAAtzB,OACcs5C,IAElBwrB,EAAKpE,eAAesE,aAChB1xC,EACApqB,UAAQmI,mBAAmBioC,wDAcnD52C,KAAK2rB,eACL3rB,KAAK2rB,eAAe82C,uBAEpB35C,EAAOrZ,MACH,4FAwBAizD,EAAazX,EAAS0X,EAASpwB,GAAa,IAAAqwB,EAAA5iE,KACpDA,KAAK6iE,oBACDH,EACA,WAIIE,EAAKE,kBAAkB7X,EAAS0X,IAEpCA,EACApwB,kCAWDA,GAAa,IAAAwwB,EAAA/iE,KAChB,IAAKA,KAAKu9D,YACN,MAAM,IAAIp/D,MAAM,+CA8BpB6B,KAAKk+D,kBAAkBpgE,KA5BF,SAAA8iE,GAAoB,IAAAzzC,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IACrC,QAAAwyB,EAAAC,EAAyBglB,EAAzBl9C,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAsC,KAA3B0kB,EAA2BvkB,EAAA/3B,MAClCwtE,EAAKp3C,eAAe8gB,SAASoF,IAFI,MAAA/3B,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,GAIrC01C,EAAKp3C,eAAeq3C,YAAYD,EAAKzF,kBAChCv1B,KAAK,SAAAk7B,GACFF,EAAKp3C,eAAeu3C,oBAAoBD,GACnCl7B,KAAK,WAIFg7B,EAAKI,oBACDJ,EAAKp3C,eAAeo1C,iBAAiBvmC,KACzComC,KACD,SAAAnxD,GACCqZ,EAAOrZ,MACH,0BAA2BA,EAAOwzD,GACtCrC,EAAiBnxD,MAE1B,SAAAA,GACCqZ,EAAOrZ,MACH,4BACAA,EACAszD,EAAKzF,kBACTsD,EAAiBnxD,MAMzB,SAAAA,GACQA,EACAqZ,EAAOrZ,MAAM,eAAgBA,GAE7BqZ,EAAOpZ,MAAM,sEAeTuzD,GAChB,IAAInuD,EAAOlO,cAAI,CACXwV,GAAIpc,KAAKq9D,UACThsD,KAAM,QACP1c,EAAE,SAAU,CACX0b,MAAO,oBACPquB,OAAQ,mBACRmhC,UAAW7/D,KAAKuhE,aAChBlrD,IAAKrW,KAAKqW,MAGd,IAAI0hC,IAAIkrB,GAAU9pB,SACdrkC,EACA9U,KAAKu9D,YAAc,YAAc,aACrCzoD,EAAOA,EAAK/E,OACZ+Y,EAAOnZ,KAAK,qBAAsBmF,GAClC9U,KAAKsd,WAAWnF,OAAOrD,EACnB,WACIgU,EAAOnZ,KAAK,sCAEhB,SAAAF,GACIqZ,EAAOrZ,MAAM,2BAA4BA,IA92BtC,uCAu3BL2zD,GACN,IAAKpjE,KAAKu9D,YACN,MAAM,IAAIp/D,MAAM,oDAEpB6B,KAAK6iE,oBACDO,EACA,WACIt6C,EAAOnZ,KAAK,0BAEhB,SAAAF,GACIqZ,EAAOrZ,MAAM,qBAAsBA,iDAmB3B4zD,EAAqBpY,EAAS0X,EAASpwB,GAAa,IAAA+wB,EAAAtjE,KAqEpEA,KAAKk+D,kBAAkBpgE,KApEF,SAAA8iE,GAEjB,GAAIruB,EAAa,KAAAvkB,GAAA,EAAAC,GAAA,EAAAC,OAAApzB,EAAA,IACb,QAAAqzB,EAAAC,EAAoBmkB,EAApBl9C,OAAAo4B,cAAAO,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAAiC,KAAtB6e,EAAsB1e,EAAA54B,MAC7B+tE,EAAK33C,eAAe8gB,SAASI,IAFpB,MAAA/yB,GAAAmU,GAAA,EAAAC,EAAApU,EAAA,YAAAkU,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,IAMjB,IAAMq1C,EACAD,EAAKE,yBAAyBH,GAC9BI,EACAH,EAAK33C,eAAeo1C,iBAAiBvmC,IAMrCkpC,EAHAxoB,EAAEmoB,GACC5pC,KAAK,4DAEwB7sB,KAAK,MAEvC82D,IAAoBJ,EAAK9F,mBACzB8F,EAAK9F,iBAAmBkG,GAG5BJ,EAAKzC,aAAa0C,EAAavpD,KAC1B+tB,KAAK,WAwBF,GAvBIu7B,EAAK5e,QAAUia,MACf2E,EAAK5e,MAAQia,IAaT2E,EAAK1vB,QAAU0vB,EAAK3F,mBACpB2F,EAAKK,kBAAkBL,EAAK3F,oBAQhC8F,EAAa,CACb,IAAMG,EACA,IAAI7rB,IAAIurB,EAAK33C,eAAeo1C,iBAAiBvmC,KAEnD8oC,EAAKO,mBACD,IAAI9rB,IAAI0rB,GAAcG,GAG9BhD,KACD,SAAAnxD,GACCqZ,EAAOrZ,MAAP,gDAAAnS,OAEQgmE,EAAK/F,YAAc,WAAa,WAFxCjgE,OAEoDmS,GAChD8zD,GAEJD,EAAKQ,oBAAoBr0D,GACzBmxD,EAAiBnxD,MAMzB,SAAAA,GACIA,EAAQkzD,EAAQlzD,GAASw7C,+CAcpB8Y,EAAiB9Y,EAAS0X,GAAS,IAAAqB,EAAAhkE,KAChDA,KAAK4xD,KAAKrnC,aAAa2C,KAAKilC,IAAWv6D,eAAgBoI,MAMvD,IAAMikE,EAAgBF,EAAgBG,QAEtCH,EACKtqC,KAAK,yBACL7sB,KAAK,UAAW,YAQrBm3D,EACKtqC,KAAK,+BACL0qC,SACLJ,EACKtqC,KAAK,mCACL0qC,SAGLnkE,KAAK6iE,oBACDkB,EACA,WAEIC,EAAKnB,oBACDoB,EACA,WACI,IAAMnD,EACA,IAAI/oB,IAAIisB,EAAKr4C,eAAeo1C,iBAAiBvmC,KAEnDwpC,EAAKI,oBAAoBtD,EAAU7V,EAAS0X,GAE5CqB,EAAKpS,KAAKrnC,aAAa2C,KACnBilC,IAAWt6D,oBACXmsE,EACAC,IAERtB,IAERA,6CAYU1X,EAAS0X,GAAS,IAAA0B,EAAArkE,KAG1B8gE,EAAW,IAAI/oB,IAAI/3C,KAAK2rB,eAAeo1C,iBAAiBvmC,KAC1D8pC,EAAS19D,cAAI,CAAEwV,GAAIpc,KAAKq9D,UACxBhsD,KAAM,QACL1c,EAAE,SAAU,CAAE0b,MAAO,oBAClBquB,OAAQ,iBACRmhC,UAAW7/D,KAAKuhE,aAChBgD,UAAWvkE,KAAKwkE,aAChBnuD,IAAKrW,KAAKqW,MAEdrW,KAAK++D,sBACL+B,EAAS5oB,qBAAsB,GAE/Bl4C,KAAK8+D,sBACLgC,EAAS3oB,qBAAsB,GAE/Bn4C,KAAKi4C,UACL6oB,EAAS7oB,SAAU,GAEvB6oB,EAAS3nB,SACLmrB,EACAtkE,KAAKuhE,eAAiBvhE,KAAKo9D,SAAW,YAAc,YACpD,MAGJkH,EAASA,EAAOv0D,OAChB+Y,EAAOnZ,KAAK,yBAA0B20D,GACtCtkE,KAAKsd,WAAWnF,OAAOmsD,EACnBrZ,EACAjrD,KAAK2hE,sBAAsB2C,EAAQ,SAAA70D,GAC/BkzD,EAAQlzD,GAIR40D,EAAKzS,KAAKrnC,aAAa2C,KACnBilC,IAAWn4D,uBAAwBqqE,KAzkCpC,+CA2mCGI,GACd,IAAMC,EAAkBD,EAAsB,OAAS,OAEjDE,EACA/9D,cAAI,CACFwV,GAAIpc,KAAKq9D,UACThsD,KAAM,QAEL1c,EAAE,SAAU,CACT0b,MAAO,oBACPquB,OAAQ,iBACRmhC,UAAW7/D,KAAKuhE,aAChBlrD,IAAKrW,KAAKqW,MAEb1hB,EAAE,UAAW,CACVE,KAAM,QACN2lD,QAASkqB,IAGrB57C,EAAOnZ,KAAP,0CAAArS,OAC8ConE,IAE9C1kE,KAAKsd,WAAWnF,OACZwsD,EACA,KACA3kE,KAAK2hE,sBAAsBgD,GApoCpB,iDAkpCK7D,EAAU7V,EAAS0X,GAAS,IAAAiC,EAAA5kE,KACxC6kE,EAAkBj+D,cAAI,CAAEwV,GAAIpc,KAAKq9D,UACjChsD,KAAM,QACL1c,EAAE,SAAU,CACT0b,MAAO,oBACPquB,OAAQ,mBACRmhC,UAAW7/D,KAAKuhE,aAChBlrD,IAAKrW,KAAKqW,MAGlByqD,EAAS3qC,MAAMl1B,QAAQ,SAAC6jE,EAAYnsB,GAChC,IAAMniB,EAAQpB,IAAQc,WAAW4uC,EAAWhoE,MAAM,QAAQ,IAE1D+nE,EAAgBlwE,EAAE,UACd,CACI2kD,QACIsrB,EAAKrD,eAAiBqD,EAAKxH,SACrB,YACA,YACVvoE,KAAM2hC,EAAML,QAGpB2qC,EAASrmB,kBAAkB9B,EAAKksB,GAChCA,EAAgBt0D,OAIpBs0D,EAAkBA,EAAgB90D,OAClC+Y,EAAOnZ,KAAK,6BAA8Bk1D,GAE1C7kE,KAAKsd,WAAWnF,OAAO0sD,EACnB5Z,EACAjrD,KAAK2hE,sBAAsBkD,EAAiBlC,GAlrCrC,iDAisCK1X,EAAS0X,GAGzB,IAAIoC,EAAkBn+D,cAAI,CAAEwV,GAAIpc,KAAKq9D,UACjChsD,KAAM,QACL1c,EAAE,SAAU,CACT0b,MAAO,oBACPquB,OAAQ,mBACRmhC,UAAW7/D,KAAKuhE,aAChBlrD,IAAKrW,KAAKqW,MAGlB0uD,EAAkBA,EAAgBh1D,OAClC+Y,EAAOnZ,KAAK,4BAA8Bo1D,GAE1C/kE,KAAKsd,WAAWnF,OAAO4sD,EACnB9Z,EACAjrD,KAAK2hE,sBAAsBoD,EAAiBpC,GAltCrC,uCAytCL1X,EAAS0X,EAASrxD,GACxB,GAAItR,KAAK0kD,QAAUia,IAAnB,CAIA,IAAKrtD,GAAWs0B,QAAQt0B,EAAQ0zD,sBAAuB,CACnD,IAAIC,EACEr+D,cAAI,CACFwV,GAAIpc,KAAKq9D,UACThsD,KAAM,QAEL1c,EAAE,SAAU,CACT0b,MAAO,oBACPquB,OAAQ,oBACRmhC,UAAW7/D,KAAKuhE,aAChBlrD,IAAKrW,KAAKqW,MAEb1hB,EAAE,UACFA,EAAG2c,GAAWA,EAAQ8H,QAAW,WAEtC9H,GAAWA,EAAQ4zD,mBACnBD,EAAiB10D,KACZ5b,EAAE,QACFa,EAAE8b,EAAQ4zD,mBAInBD,EAAmBA,EAAiBl1D,OACpC+Y,EAAOnZ,KAAK,4BAA6Bs1D,GACzCjlE,KAAKsd,WAAWnF,OACZ8sD,EACAha,EACAjrD,KAAK2hE,sBAAsBsD,EAAkBtC,GAzvC1C,UA4vCP75C,EAAOnZ,KAAP,yCAAArS,OAAqD0C,OAIzDA,KAAKsd,WAAW89B,OAAO+pB,UAAUnlE,KAAKqW,2CAQ7B+uD,EAAiBC,GAC1BrlE,KAAK0kD,MAAQia,IACb3+D,KAAKs+D,2BAAwBxjE,EAK7BguB,EAAOnZ,KAAP,sBAAArS,OAAkC0C,MAAQolE,EAAiBC,GAE3DrlE,KAAKulB,4DAamB+/C,EAAeC,GACvC,IAAMC,EAAc,GAiEpB,OA/DAtqB,EAAEoqB,GAAerqB,KAAK,SAACwqB,EAAI5kD,GACvB,IAAMhsB,EAAOqmD,EAAEr6B,GAASjU,KAAK,QACzBorB,EAAQ,GAEZkjB,EAAEr6B,GACG4Y,KAAK,uDACLwhB,KAAK,WAEF,IAAMthB,EAAY35B,KAAKiO,aAAa,aAC9BgrB,EACAiiB,EAAEl7C,MACCy5B,KAAK,WACL18B,IAAI,WAED,OAAOiD,KAAKiO,aAAa,UAE5B9Y,MAEL8jC,EAAMh8B,SACN+6B,GAAK,gBAAA16B,OACkBq8B,EADlB,KAAAr8B,OAEG27B,EAAMz7B,KAAK,KAFd,WAQX09C,EAAEr6B,GAAS4Y,KACT,mDAGJwhB,KAAK,WACL,IAAMrqB,EAAOsqB,EAAEl7C,MAAM4M,KAAK,QAEtB24D,EAAiB3sB,aAAahoB,GAC9B9H,EAAOlZ,KAAP,yCAAAtS,OAC6CszB,IAMjDsqB,EAAEl7C,MAAMy5B,KAAK,cAAcwhB,KAAK,WAC5BjjB,GAAK,UAAA16B,OAAcszB,EAAd,KAAAtzB,OAAsB49C,EAAEl7C,MAAM4M,KAAK,SACpCsuC,EAAEl7C,MAAM4M,KAAK,UAAYsuC,EAAEl7C,MAAM4M,KAAK,SAAS3P,SAC/C+6B,GAAK,IAAA16B,OAAQ49C,EAAEl7C,MAAM4M,KAAK,WAE9BorB,GAAS,WAKjButC,EAAiBpvC,MAAMl1B,QAAQ,SAACk1B,EAAOuvC,GAC9BtwC,IAAQO,SAASQ,EAAjB,SAAA74B,OAAiCzI,MAGjC2wE,EAAYE,KACbF,EAAYE,GAAM,IAEtBF,EAAYE,IAAO1tC,OAIpBwtC,0CAOKn6D,GACZrL,KAAK2lE,0BAAyB,EAAgBt6D,8CAO/BA,GACfrL,KAAK2lE,0BAAyB,EAAoBt6D,oDAW7Bu6D,EAAOv6D,GAAM,IAAAw6D,EAAA7lE,KAC5B8lE,EAAYF,EAAQ,kBAAoB,qBAE1CA,GACA5lE,KAAK+lE,aAAa16D,GA+CtBrL,KAAKk+D,kBAAkBpgE,KA5CF,SAAA8iE,GACjB,IAAKiF,EAAKl6C,eAAeo1C,mBACjB8E,EAAKl6C,eAAeo1C,iBAAiBvmC,IAAK,CAC9C,IAAMo0B,EAAM,GAAAtxD,OAAMwoE,EAAN,qCAKZ,OAHAh9C,EAAOrZ,MAAMm/C,QACbgS,EAAiBhS,GAKrB9lC,EAAOzZ,IAAP,cAAA/R,OAAyBwoE,IACzBh9C,EAAOzZ,IACH,yBACAw2D,EAAKl6C,eAAey0C,oBAExB,IAAMqD,EACA,IAAI1rB,IAAI8tB,EAAKl6C,eAAeo1C,iBAAiBvmC,KAC7CA,EAAM,IAAIud,IAAI8tB,EAAKl6C,eAAeq6C,kBAAkBxrC,KACpDyrC,EACAL,EACIC,EAAKK,4BAA4B76D,EAAMmvB,GACvCqrC,EAAKM,+BAA+B96D,EAAMmvB,GAC9C+oC,EACAqC,EACIC,EAAKO,wBAAwBH,GAC7BJ,EAAKQ,2BAA2BJ,GAE1CJ,EAAKhF,aAAa0C,EAAavpD,KAC1B+tB,KAAK,WACF,IAAM67B,EACA,IAAI7rB,IAAI8tB,EAAKl6C,eAAeo1C,iBAAiBvmC,KAEnD1R,EAAOzZ,IAAP,GAAA/R,OACOwoE,EADP,iBACiCrC,EAAaG,GAC9CiC,EAAKhC,mBAAmBJ,EAAaG,GACrChD,KACD,SAAAnxD,GACCqZ,EAAOrZ,MAAP,GAAAnS,OAAgBwoE,EAAhB,YAAqCr2D,GACrCmxD,EAAiBnxD,kDAsBd62D,EAAM1F,GACrB0F,EAAK1F,oDAQgB2F,GACrB,IAAMC,EAAY,IAAIzuB,IAAI,IAe1B,OAbI/3C,KAAK++D,sBACLyH,EAAUtuB,qBAAsB,GAEhCl4C,KAAK8+D,sBACL0H,EAAUruB,qBAAsB,GAEhCn4C,KAAKi4C,UACLuuB,EAAUvuB,SAAU,GAGxBuuB,EAAUrrB,WAAWorB,GACrBvmE,KAAK+lE,aAAa7qB,EAAEqrB,GAAS9sC,KAAK,aAE3B+sC,qDAUgBC,GACvB,IAAMD,EAAY,IAAIzuB,IAAI/3C,KAAK2rB,eAAeq6C,kBAAkBxrC,KAahE,OAXAisC,EAAexlE,QAAQ,SAAC+2B,EAAO2gB,IAE3B3gB,EAAQA,EAAMl7B,MAAM,SACdqd,MACN6d,EAAM/2B,QAAQ,SAAAgO,GACVu3D,EAAUrwC,MAAMwiB,GACV6tB,EAAUrwC,MAAMwiB,GAAKv7C,QAArB,GAAAE,OAAgC2R,EAAhC,QAA4C,QAG1Du3D,EAAUxsD,IAAMwsD,EAAUrlD,QAAUqlD,EAAUrwC,MAAM34B,KAAK,IAElDgpE,kDAUahB,GACpB,IAAMgB,EAAY,IAAIzuB,IAAI/3C,KAAK2rB,eAAeq6C,kBAAkBxrC,KAOhE,OALAgrC,EAAYvkE,QAAQ,SAAC+2B,EAAO2gB,GACxB6tB,EAAUrwC,MAAMwiB,IAAQ3gB,IAE5BwuC,EAAUxsD,IAAMwsD,EAAUrlD,QAAUqlD,EAAUrwC,MAAM34B,KAAK,IAElDgpE,uCAYEE,GACT,GAA2C,WAAvC1mE,KAAK2rB,eAAeq0C,eACpB,OAAO50B,QAAQE,OAAO,4CAG1B,IAAMk7B,EACAE,GAAqB1mE,KAAK2rB,eAAeq6C,kBAAkBxrC,IAEjE,IAAKgsC,EACD,OAAOp7B,QAAQE,OACX,sEAAAhuC,OAC0B0C,KAAK0kD,QAGvC,IAAMshB,EAAoB,IAAIW,sBAAsB,CAChDt1D,KAAMrR,KAAKu9D,YAAc,SAAW,QACpC/iC,IAAKgsC,IAGT,OAAIxmE,KAAKu9D,YACEv9D,KAAK4mE,sBAAsBZ,GAG/BhmE,KAAK6mE,sBAAsBb,iDAShBA,GAAmB,IAAAc,EAAA9mE,KAGrC,OAFA8oB,EAAOpZ,MAAM,2CAEN1P,KAAK2rB,eAAeo7C,qBAAqBf,GAC3Cj+B,KAAK,WAGF,OAFAjf,EAAOpZ,MAAM,gCAENo3D,EAAKn7C,eAAeq7C,aAAaF,EAAKxJ,kBACxCv1B,KAAK,SAAAk/B,GAGF,OAFAn+C,EAAOpZ,MAAM,0CAENo3D,EAAKn7C,eAAeu3C,oBAAoB+D,qDAW7CjB,GAAmB,IAAAkB,EAAAlnE,KACrC,MAA2C,qBAAvCA,KAAK2rB,eAAeq0C,gBAEpBl3C,EAAOpZ,MACH,2CAIG1P,KAAK2rB,eAAeo7C,qBAAqBf,GAC3Cj+B,KAAK,WASF,OAAOm/B,EAAKN,sBAAsBZ,OAK9Cl9C,EAAOpZ,MAAM,+BAEN1P,KAAK2rB,eAAeq3C,YAAYhjE,KAAKs9D,kBACvCv1B,KAAK,SAAAo/B,GAGF,OAFAr+C,EAAOpZ,MAAM,0CAENw3D,EAAKv7C,eAAeu3C,oBAAoBiE,GAC1Cp/B,KAAK,WAKF,OAJAjf,EAAOpZ,MACH,2CAGGw3D,EAAKv7C,eAAeo7C,qBAAqBf,6CAiBvDoB,EAAUC,GAAU,IAAAC,EAAAtnE,KACvBunE,EAAe,SAAA3G,GAIjB,GAA2C,WAAvC0G,EAAK37C,eAAeq0C,gBACuB,WAAxCsH,EAAK37C,eAAes0C,iBACpBqH,EAAKvJ,OAER6C,QAJJ,CASA,IAAM6C,EAAc6D,EAAK37C,eAAeo1C,iBAAiBvmC,KAKpD4sC,GAAYC,GAAYA,EAASG,eAMlCF,EAAK37C,eAAe87C,oBAGbL,GAAYA,EAASI,iBAAmBH,IAK/CC,EAAK37C,eAAe87C,oBACpBH,EAAK37C,eAAe82C,wBAGxB6E,EAAK37C,eAAe+7C,aAAaN,EAAUC,GAC1Ct/B,KAAK,SAAA4/B,GACEA,IACIP,GAAYC,IACbC,EAAK5iB,QAAUia,IAClB2I,EAAKzG,eACA94B,KAAK,WACF,IAAM6/B,EACA,IAAI7vB,IACFuvB,EAAK37C,eAAeo1C,iBAAiBvmC,KAE7C8sC,EAAKzD,mBACD,IAAI9rB,IAAI0rB,GAAcmE,GAC1BhH,KAEJA,GAEJA,QAKZ,OAAO,IAAIx1B,QAAQ,SAACC,EAASC,GACzBg8B,EAAKpJ,kBAAkBpgE,KACnBypE,EACA,SAAA93D,GACQA,GACAqZ,EAAOrZ,MAAM,uBAAwBA,GACrC67B,EAAO77B,KAEPqZ,EAAOnZ,KAAK,uBACZ07B,gEAgBWw8B,EAAkBtC,GAC7C,IAAMkB,EAAiB,GA2DvB,OAzDAvrB,EAAE2sB,GAAkB5sB,KAAK,SAACwqB,EAAI5kD,GAC1B,IAAMhsB,EAAOqmD,EAAEr6B,GAASjU,KAAK,QACzBorB,EAAQ,GAEZkjB,EAAEr6B,GACG4Y,KAAK,uDACLwhB,KAAK,WAEF,IAAMthB,EAAY35B,KAAKiO,aAAa,aAC9BgrB,EACAiiB,EAAEl7C,MACCy5B,KAAK,WACL18B,IAAI,WACD,OAAOiD,KAAKiO,aAAa,UAE5B9Y,MAEL8jC,EAAMh8B,SACN+6B,GAAK,gBAAA16B,OACkBq8B,EADlB,KAAAr8B,OAEG27B,EAAMz7B,KAAK,KAFd,WAOjB,IAAMy7B,EAAQ,GAIRiiB,EAAEr6B,GAAS4Y,KACT,mDAEJwhB,KAAK,WAEL,IAAMrqB,EAAOsqB,EAAEl7C,MAAM4M,KAAK,QAE1BqsB,EAAMn7B,KAAK8yB,KAEf20C,EAAiBpvC,MAAMl1B,QAAQ,SAACk1B,EAAOuvC,GAC9BtwC,IAAQO,SAASQ,EAAjB,SAAA74B,OAAiCzI,MAGjC4xE,EAAef,KAChBe,EAAef,GAAM,IAEzBzsC,EAAMh4B,QAAQ,SAAA2vB,GACV,IAAMk3C,EACA1yC,IAAQqD,UAAUtC,EAAlB,UAAA74B,OAAmCszB,IAErCk3C,EAAU7qE,SACVwpE,EAAef,IAAf,GAAApoE,OAAyBwqE,EAAUtqE,KAAK,QAAxC,WAGRipE,EAAef,IAAO1tC,OAIvByuC,+CAeUsB,EAAeC,GAChC,IAAMC,EACA,IAAIlwB,IAAI/3C,KAAK2rB,eAAeo1C,iBAAiBvmC,KAC/C0tC,EAAU,IAAIC,IAAUH,EAAQC,GAC9BG,EAAaF,EAAQG,cAE3B,GAAIrzE,OAAOq5B,KAAK+5C,GAAYnrE,OAKxB,OAJA6rB,EAAOrZ,MAAP,GAAAnS,OACO0C,KADP,+BAAA1C,OACyCyqE,GACrCK,IAEG,EAIX,IAAME,GADNJ,EAAU,IAAIC,IAAUF,EAAiBD,IACZK,cAE7B,OAAIrzE,OAAOq5B,KAAKi6C,GAAcrrE,SAC1B6rB,EAAOrZ,MAAP,GAAAnS,OACO0C,KADP,kCAAA1C,OAC4CyqE,GACxCO,IAEG,4CAcEz7B,GACb,OAAO7sC,KAAKuoE,6BACR,EAA2B17B,6CAWjBA,GACd,OAAO7sC,KAAKuoE,6BACR,EAA2B17B,uDAUP27B,EAAQ37B,GAAO,IAAA47B,EAAAzoE,KACvC,IAAK6sC,EACD,OAAOzB,QAAQE,OAAO,kCAE1B,IAAMy8B,EAAgBS,EAAS,kBAAoB,iBAC7CjB,EAAe,SAAA3G,GACjB,IAAM9yC,EAAM26C,EAAK98C,eAEjB,GAAKmC,EAAL,CAOA,IAAM46C,EAAc56C,EAAIizC,iBAAiBvmC,KAEnCguC,EACI16C,EAAI66C,gBAAgB7yE,KAAKg4B,EAAK+e,GAC9B/e,EAAI86C,eAAe9yE,KAAKg4B,EAAK+e,MAI3B67B,GAAgB56C,EAAIk4C,kBAAkBxrC,IAG9CiuC,EAAK5H,eACA94B,KAAK,WAIF0gC,EAAKI,qBACDd,EAAe,IAAIhwB,IAAI2wB,IAC3B9H,KAEJA,GAXJA,IAFAA,EAAgB,GAAAtjE,OAAIyqE,EAAJ,kBAbhBnH,EACI,iBAAAtjE,OAAiByqE,EAAjB,8BACM,eA4BlB,OAAO,IAAI38B,QAAQ,SAACC,EAASC,GACzBm9B,EAAKvK,kBAAkBpgE,KACnBypE,EACA,SAAA93D,GACQA,EACA67B,EAAO77B,GAEP47B,uDAgBGy9B,EAAaC,GAAa,IAAAC,EAAAhpE,KAC7C,IAAKA,KAAK2rB,eACN,OAAOyf,QAAQE,OACX,uEAIR,IAAM29B,EAAcH,EAAc,eAAiB,iBAC7CI,EAAcH,EAAc,eAAiB,iBAEnDjgD,EAAOnZ,KAAP,eAAArS,OAA2B4rE,EAA3B,MAAA5rE,OAA2C2rE,EAA3C,aAEA,IAAM1B,EAAe,SAAA3G,GACjB,IAAMuI,EAAkBH,EAAKtkB,QAAUia,IAMjCyK,EACAJ,EAAKr9C,eAAe09C,uBAAuBP,GAE7CE,EAAKrL,oBAAsBoL,IAC3BC,EAAKrL,kBAAoBoL,EAUrBC,EAAKp1B,OAASu1B,GACdH,EAAKrF,kBAAkBoF,IAI/B,IAAMO,EACAN,EAAKr9C,eAAe49C,uBAClBP,EAAKrL,mBAAqBqL,EAAKpL,oBAInCuL,IACQC,GAAsBE,GAC9BN,EAAKnI,eACA94B,KACG64B,EACAA,GAERA,KAIR,OAAO,IAAIx1B,QAAQ,SAACC,EAASC,GACzB09B,EAAK9K,kBAAkBpgE,KACnBypE,EACA,SAAA93D,GACQA,EACA67B,EAAO77B,GAEP47B,+CAgBLmzB,GAAgB,IAAAgL,EAAAxpE,KACrBypE,EACAtM,EAAgBuM,kBAAkBlL,GAExC,GAAwB,OAApBiL,EAAJ,CAoBA3gD,EAAOpZ,MACH,GAAApS,OAAG0C,KAAH,oDAAA1C,OACyBmsE,EADzB,OAGJzpE,KAAKk+D,kBAAkBpgE,KAhBF,SAAA8iE,GACb4I,EAAKrJ,gBAAgB,mBACdqJ,EAAKG,yBAAyBF,GAGrCD,EAAK3I,eACA94B,KAAK64B,EAAkBA,GAE5BA,KAUJ,SAAAnxD,GACQA,GACAqZ,EAAOrZ,MAAM,0BAA2BA,UA3BhDqZ,EAAOrZ,MACH,GAAAnS,OAAG0C,KAAH,mDACM,4EAwCO4pE,GACrB,IAAMC,EACuB,SAAvBD,GAC6B,cAAvBA,GAAsC5pE,KAAKu9D,aACpB,cAAvBqM,IAAuC5pE,KAAKu9D,YAQxD,OANIsM,IAAwB7pE,KAAK49D,qBAC7B90C,EAAOpZ,MAAP,GAAApS,OACO0C,KADP,8BAAA1C,OACwCusE,IACxC7pE,KAAK49D,mBAAqBiM,GAGvB7pE,KAAK2rB,eAAe49C,uBACvBvpE,KAAK29D,mBAAqB39D,KAAK49D,+DAQpBoK,EAAQ8B,GAEvB,GAAI9pE,KAAK0kD,QAAUia,IAAnB,CAOA,IAAIoL,EAAY,IAAI5B,IAAU2B,EAAQ9B,GAChC7D,EAASv9D,cAAI,CAAEwV,GAAIpc,KAAKq9D,UAC1BhsD,KAAM,QACL1c,EAAE,SAAU,CACT0b,MAAO,oBACPquB,OAAQ,gBACRmhC,UAAW7/D,KAAKuhE,aAChBlrD,IAAKrW,KAAKqW,MAGM0zD,EAAU5wB,SAASgrB,IAGvCr7C,EAAOnZ,KAAK,wBAAyBw0D,EAAOp0D,QAC5C/P,KAAKsd,WAAWnF,OACZgsD,EAAQ,KACRnkE,KAAK2hE,sBAAsBwC,GA7jExB,MA+jEPr7C,EAAOzZ,IAAI,yBAIf06D,EAAY,IAAI5B,IAAUH,EAAQ8B,GAClC,IAAM1+C,EAAMxkB,cAAI,CAAEwV,GAAIpc,KAAKq9D,UACvBhsD,KAAM,QACL1c,EAAE,SAAU,CACT0b,MAAO,oBACPquB,OAAQ,aACRmhC,UAAW7/D,KAAKuhE,aAChBlrD,IAAKrW,KAAKqW,MAIO0zD,EAAU5wB,SAAS/tB,IAGxCtC,EAAOnZ,KAAK,qBAAsByb,EAAIrb,QACtC/P,KAAKsd,WAAWnF,OACZiT,EAAK,KAAMprB,KAAK2hE,sBAAsBv2C,GAnlEnC,MAqlEPtC,EAAOzZ,IAAI,+BA9CXyZ,EAAOlZ,KAAP,4BAAAtS,OAAwC0C,KAAK0kD,MAA7C,4DAoEcslB,EAASC,GAAW,IAAAC,EAAAlqE,KACtC,OAAO,SAAAmqE,GAEH,IAAM16D,EAAQ,GAGR26D,EAAalvB,EAAEivB,GAAa1wC,KAAK,SAEvC,GAAI2wC,EAAWntE,OAAQ,CACnBwS,EAAMgW,KAAO2kD,EAAWx9D,KAAK,QAC7B,IAAMy9D,EAAiBnvB,EAAEivB,GAAa1wC,KAAK,gBAEvC4wC,EAAeptE,SACfwS,EAAM2J,OAASixD,EAAe,GAAGz+D,SAGrC,IAAM0+D,EAAcF,EAAW3wC,KAAK,SAEhC6wC,EAAYrtE,SACZwS,EAAMF,IAAM+6D,EAAYv9D,QAI3Bo9D,IACD16D,EAAM2J,OAAS,WAGnB3J,EAAM0R,QAAU+oD,EAAKzpE,WAEjBwpE,EACAA,EAAUx6D,GACHy6D,EAAKxlB,QAAUia,KACM,mBAAjBlvD,EAAM2J,OAMjB0P,EAAOpZ,MAAP,iBAAApS,OAA8BsZ,KAAK0K,UAAU7R,KAE7CoxB,IAAqBC,iBACjB,IAAI3iC,MAAJ,iBAAAb,OACqBsZ,KAAK0K,UAAU7R,mDAUhCA,GACZzP,KAAK4xD,OACL5xD,KAAK4xD,KAAKrnC,aAAa2C,KACnBilC,IAAWp7D,wBAAyBiJ,KAAMyP,GAC9CzP,KAAK4xD,KAAKrnC,aAAa2C,KACnBilC,IAAWp6D,mBAAoBiI,KAAMyP,oDAS7C,OAAOzP,KAAK2rB,eAAey0C,mDAO3BpgE,KAAK+9D,QAAS,EAGd/9D,KAAKg+D,eAAeyC,YAAY,MAGhCzgE,KAAK2rB,iBACI3rB,KAAK2rB,eAAeq0C,gBACyB,WAAvChgE,KAAK2rB,eAAeq0C,gBACvBhgE,KAAK2rB,eAAes0C,iBACuB,WAAxCjgE,KAAK2rB,eAAes0C,kBAC5BjgE,KAAK2rB,eAAepG,2CAQ3B,MAAO,uBAAAjoB,OAAuB0C,KAAK4zC,MAA5B,kBAAAt2C,OACoB0C,KAAKu9D,YADzB,SAAAjgE,OAC4C0C,KAAKqW,IADjD,2DAU+B,IAAbk0D,EAAa/hC,EAAb+hC,UACzB,GAAKA,GAAcA,EAAUC,uBAA7B,CAOA,IAAMj8D,EAAMvO,KAAKyqE,mBAEjB,OAAOC,sBAAYn8D,GAAO,GAAM,yFCzvExCna,EAAAgB,EAAA2wB,GAAA3xB,EAAAQ,EAAAmxB,EAAA,wCAAAiX,IAAA5oC,EAAAQ,EAAAmxB,EAAA,+CAAA4kD,IAYO,IAAM3tC,EAAsB,4BAWtB2tC,EACP,wDClBN,IAAAC,IAIC,WAKD,IAAAp1E,GAAA,EAEA,SAAAq1E,EAAAC,GAEA,SAAAC,EAAAC,GACA,IAAAtuD,EAAAouD,EAAApuD,MAAAsuD,GACA,OAAAtuD,KAAAzf,OAAA,GAAAyf,EAAA,OAGA,SAAAuuD,EAAAD,GACA,IAAAtuD,EAAAouD,EAAApuD,MAAAsuD,GACA,OAAAtuD,KAAAzf,OAAA,GAAAyf,EAAA,OAGA,IAoBA5M,EApBAo7D,EAAAH,EAAA,uBAAA/8D,cAEAm9D,GADA,gBAAAhuE,KAAA2tE,IACA,WAAA3tE,KAAA2tE,GACAM,EAAA,oBAAAjuE,KAAA2tE,GACAO,GAAAD,GAAA,kBAAAjuE,KAAA2tE,GACAQ,EAAA,OAAAnuE,KAAA2tE,GACAS,EAAA,QAAApuE,KAAA2tE,GACAU,EAAA,YAAAruE,KAAA2tE,GACAW,EAAA,SAAAtuE,KAAA2tE,GACAY,EAAA,eAAAvuE,KAAA2tE,GACAa,EAAA,iBAAAxuE,KAAA2tE,GAEAc,GADA,kBAAAzuE,KAAA2tE,IACAa,GAAA,WAAAxuE,KAAA2tE,IACAe,GAAAX,IAAAK,GAAA,aAAApuE,KAAA2tE,GACAgB,GAAAX,IAAAK,IAAAC,IAAAC,GAAA,SAAAvuE,KAAA2tE,GACAiB,EAAAd,EAAA,iCACAe,EAAAjB,EAAA,2BACAkB,EAAA,UAAA9uE,KAAA2tE,KAAA,aAAA3tE,KAAA2tE,GACAoB,GAAAD,GAAA,YAAA9uE,KAAA2tE,GACAqB,EAAA,QAAAhvE,KAAA2tE,GAGA,SAAA3tE,KAAA2tE,GAEAh7D,EAAA,CACAjb,KAAA,QACAu3E,MAAA52E,EACAwuB,QAAAgoD,GAAAjB,EAAA,4CAEK,eAAA5tE,KAAA2tE,GAELh7D,EAAA,CACAjb,KAAA,QACAu3E,MAAA52E,EACAwuB,QAAA+mD,EAAA,sCAAAiB,GAGA,kBAAA7uE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,+BACAw3E,eAAA72E,EACAwuB,QAAAgoD,GAAAjB,EAAA,2CAGA,SAAA5tE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,cACAy3E,MAAA92E,EACAwuB,QAAAgoD,GAAAjB,EAAA,kCAGA,aAAA5tE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,iBACA03E,cAAA/2E,EACAwuB,QAAAgoD,GAAAjB,EAAA,sCAGA,aAAA5tE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,aACA23E,UAAAh3E,EACAwuB,QAAA+mD,EAAA,wCAGA,SAAA5tE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,UACA43E,QAAAj3E,EACAwuB,QAAA+mD,EAAA,oCAGA,YAAA5tE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,WACA63E,SAAAl3E,EACAwuB,QAAA+mD,EAAA,uCAGA,UAAA5tE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,SACA83E,OAAAn3E,EACAwuB,QAAA+mD,EAAA,qCAGA,YAAA5tE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,WACA+3E,SAAAp3E,EACAwuB,QAAA+mD,EAAA,uCAGA,YAAA5tE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,WACAg4E,QAAAr3E,EACAwuB,QAAA+mD,EAAA,uCAGAY,GACA77D,EAAA,CACAjb,KAAA,gBACAi4E,OAAA,gBACAnB,aAAAn2E,GAEAu2E,GACAj8D,EAAAi9D,OAAAv3E,EACAsa,EAAAkU,QAAA+nD,IAGAj8D,EAAAk9D,KAAAx3E,EACAsa,EAAAkU,QAAA+mD,EAAA,8BAGA,gBAAA5tE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,oBACAm4E,KAAAx3E,EACAwuB,QAAA+mD,EAAA,gCAEKO,EACLx7D,EAAA,CACAjb,KAAA,SACAi4E,OAAA,YACAxB,SAAA91E,EACAy3E,WAAAz3E,EACA8nD,OAAA9nD,EACAwuB,QAAA+mD,EAAA,0CAEK,iBAAA5tE,KAAA2tE,GACLh7D,EAAA,CACAjb,KAAA,iBACAk4E,OAAAv3E,EACAwuB,QAAA+nD,GAGA,WAAA5uE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,UACAq4E,QAAA13E,EACAwuB,QAAA+mD,EAAA,4BAAAiB,GAGAR,EACA17D,EAAA,CACAjb,KAAA,WACAi4E,OAAA,cACAtB,SAAAh2E,EACAwuB,QAAA+mD,EAAA,uCAGA,eAAA5tE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,YACAs4E,UAAA33E,EACAwuB,QAAA+mD,EAAA,8BAGA,2BAAA5tE,KAAA2tE,IACAh7D,EAAA,CACAjb,KAAA,UACAu4E,QAAA53E,EACAwuB,QAAA+mD,EAAA,mDAEA,wCAA6B5tE,KAAA2tE,KAC7Bh7D,EAAAu9D,UAAA73E,EACAsa,EAAAg9D,OAAA,eAGAvB,EACAz7D,EAAA,CACAjb,KAAA,cACA02E,KAAA/1E,EACAwuB,QAAA+mD,EAAA,yBAGA,WAAA5tE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,YACAy4E,QAAA93E,EACAwuB,QAAA+mD,EAAA,8BAGA,YAAA5tE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,WACA04E,OAAA/3E,EACAwuB,QAAA+mD,EAAA,6BAGA,sBAAA5tE,KAAA2tE,IAAA,eAAA3tE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,aACAi4E,OAAA,gBACAU,WAAAh4E,EACAwuB,QAAAgoD,GAAAjB,EAAA,oCAGAW,GACA57D,EAAA,CACAjb,KAAA,QACAi4E,OAAA,QACApB,MAAAl2E,EACAwuB,QAAAgoD,GAAAjB,EAAA,sCAEA,cAAA5tE,KAAA2tE,KAAAh7D,EAAA29D,SAAAj4E,IAEA,QAAA2H,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,OACAi4E,OAAA,OACAY,KAAAl4E,EACAwuB,QAAA+mD,EAAA,2BAGAU,EACA37D,EAAA,CACAjb,KAAA,QACAi4E,OAAA,QACArB,MAAAj2E,EACAwuB,QAAA+mD,EAAA,yCAAAiB,GAGA,YAAA7uE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,WACA84E,SAAAn4E,EACAwuB,QAAA+mD,EAAA,uCAAAiB,GAGA,YAAA7uE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,WACA+4E,SAAAp4E,EACAwuB,QAAA+mD,EAAA,uCAAAiB,GAGA,qBAAA7uE,KAAA2tE,GACAh7D,EAAA,CACAjb,KAAA,SACAyoD,OAAA9nD,EACAwuB,QAAA+mD,EAAA,0CAGAI,EACAr7D,EAAA,CACAjb,KAAA,UACAmvB,QAAAgoD,GAGA,sBAAA7uE,KAAA2tE,IACAh7D,EAAA,CACAjb,KAAA,SACAg5E,OAAAr4E,GAEAw2E,IACAl8D,EAAAkU,QAAAgoD,IAGAd,GACAp7D,EAAA,CACAjb,KAAA,UAAAq2E,EAAA,iBAAAA,EAAA,eAGAc,IACAl8D,EAAAkU,QAAAgoD,IAIAl8D,EADA,aAAA3S,KAAA2tE,GACA,CACAj2E,KAAA,YACAi5E,UAAAt4E,EACAwuB,QAAA+mD,EAAA,6BAAAiB,GAIA,CACAn3E,KAAAk2E,EAAA,gBACA/mD,QAAAinD,EAAA,kBAKAn7D,EAAAi9D,QAAA,kBAAA5vE,KAAA2tE,IACA,2BAAA3tE,KAAA2tE,IACAh7D,EAAAjb,KAAAib,EAAAjb,MAAA,QACAib,EAAAi+D,MAAAv4E,IAEAsa,EAAAjb,KAAAib,EAAAjb,MAAA,SACAib,EAAAk+D,OAAAx4E,IAEAsa,EAAAkU,SAAAgoD,IACAl8D,EAAAkU,QAAAgoD,KAEKl8D,EAAAs8D,OAAA,WAAAjvE,KAAA2tE,KACLh7D,EAAAjb,KAAAib,EAAAjb,MAAA,QACAib,EAAAm+D,MAAAz4E,EACAsa,EAAAkU,QAAAlU,EAAAkU,SAAA+mD,EAAA,0BAIAj7D,EAAA67D,eAAAR,IAAAr7D,EAAAy7D,MAGKz7D,EAAA67D,cAAAT,GACLp7D,EAAAo7D,GAAA11E,EACAsa,EAAAo+D,IAAA14E,EACAsa,EAAAg9D,OAAA,OACKjB,GACL/7D,EAAA+7D,IAAAr2E,EACAsa,EAAAg9D,OAAA,SACKX,GACLr8D,EAAAq8D,KAAA32E,EACAsa,EAAAg9D,OAAA,QACKlB,GACL97D,EAAA87D,QAAAp2E,EACAsa,EAAAg9D,OAAA,WACKhB,IACLh8D,EAAAg8D,MAAAt2E,EACAsa,EAAAg9D,OAAA,UAjBAh9D,EAAAq7D,QAAA31E,EACAsa,EAAAg9D,OAAA,WAoCA,IAAAqB,EAAA,GACAr+D,EAAA87D,QACAuC,EAnBA,SAAA93E,GACA,OAAAA,GACA,oBACA,oBACA,0BACA,wBACA,0BACA,2BACA,uBACA,uBACA,yBACA,yBACA,gBAOA+3E,CAAArD,EAAA,mCACKj7D,EAAA67D,aACLwC,EAAApD,EAAA,0CACKj7D,EAAA+7D,IAELsC,GADAA,EAAApD,EAAA,iCACA3tE,QAAA,cACK8tE,EAELiD,GADAA,EAAApD,EAAA,uCACA3tE,QAAA,cACK+tE,EACLgD,EAAApD,EAAA,+BACKj7D,EAAA47D,MACLyC,EAAApD,EAAA,iCACKj7D,EAAA09D,WACLW,EAAApD,EAAA,mCACKj7D,EAAA49D,KACLS,EAAApD,EAAA,wBACKj7D,EAAA27D,QACL0C,EAAApD,EAAA,8BAEAoD,IACAr+D,EAAAu+D,UAAAF,GAIA,IAAAG,GAAAx+D,EAAA87D,SAAAuC,EAAArxE,MAAA,QAkDA,OAhDAmvE,GACAZ,GACA,QAAAH,GACAC,IAAA,GAAAmD,MAAA,IAAApC,IACAp8D,EAAAy7D,KAEAz7D,EAAAm8D,OAAAz2E,GAEA02E,GACA,UAAAhB,GACA,QAAAA,GACAC,GACAC,GACAt7D,EAAA09D,YACA19D,EAAA47D,OACA57D,EAAA49D,QAEA59D,EAAAo8D,OAAA12E,GAKAsa,EAAAi9D,QACAj9D,EAAAk9D,MAAAl9D,EAAAkU,SAAA,IACAlU,EAAAy8D,eAAAz8D,EAAAkU,SAAA,IACAlU,EAAAo9D,SAAAp9D,EAAAkU,SAAA,GACAlU,EAAAwtC,QAAAxtC,EAAAkU,SAAA,IACAlU,EAAAu8D,gBAAAv8D,EAAAkU,SAAA,GACAlU,EAAAs9D,SAAAt9D,EAAAkU,SAAA,IACAlU,EAAA+9D,QAAA/9D,EAAAkU,SAAA,GACAlU,EAAAs8D,OAAAt8D,EAAAkU,SAAA,IACAlU,EAAAo+D,KAAAp+D,EAAAu+D,WAAAv+D,EAAAu+D,UAAAvxE,MAAA,YACAgT,EAAA09D,YAAA19D,EAAAkU,SAAA,MACAlU,EAAA89D,UAAA99D,EAAAkU,SAAA,GAEAlU,EAAA9M,EAAAxN,EAEAsa,EAAAk9D,MAAAl9D,EAAAkU,QAAA,IACAlU,EAAAwtC,QAAAxtC,EAAAkU,QAAA,IACAlU,EAAAs9D,SAAAt9D,EAAAkU,QAAA,IACAlU,EAAA+9D,QAAA/9D,EAAAkU,QAAA,GACAlU,EAAAs8D,OAAAt8D,EAAAkU,QAAA,IACAlU,EAAAo+D,KAAAp+D,EAAAu+D,WAAAv+D,EAAAu+D,UAAAvxE,MAAA,WACAgT,EAAA89D,UAAA99D,EAAAkU,QAAA,GAEAlU,EAAAnb,EAAAa,EACKsa,EAAArN,EAAAjN,EAELsa,EAGA,IAAAutC,EAAAwtB,EAAA,oBAAAhjC,qBAAAiV,WAAA,IAuBA,SAAAyxB,EAAAvqD,GACA,OAAAA,EAAAlnB,MAAA,KAAAG,OAUA,SAAAF,EAAAkoD,EAAAx3B,GACA,IAAAn5B,EAAAwb,EAAA,GACA,GAAA1P,MAAAlK,UAAA6G,IACA,OAAAqD,MAAAlK,UAAA6G,IAAAtI,KAAAwwD,EAAAx3B,GAEA,IAAAn5B,EAAA,EAAeA,EAAA2wD,EAAAhoD,OAAgB3I,IAC/Bwb,EAAAhS,KAAA2vB,EAAAw3B,EAAA3wD,KAEA,OAAAwb,EAeA,SAAA8tC,EAAA4wB,GAgBA,IAdA,IAAAC,EAAA3tE,KAAA4gC,IAAA6sC,EAAAC,EAAA,IAAAD,EAAAC,EAAA,KACAE,EAAA3xE,EAAAyxE,EAAA,SAAAxqD,GACA,IAAA2qD,EAAAF,EAAAF,EAAAvqD,GAMA,OAAAjnB,GAHAinB,GAAA,IAAA5jB,MAAAuuE,EAAA,GAAAnxE,KAAA,OAGAV,MAAA,cAAA8xE,GACA,WAAAxuE,MAAA,GAAAwuE,EAAA3xE,QAAAO,KAAA,KAAAoxE,IACOC,cAIPJ,GAAA,IAEA,GAAAC,EAAA,GAAAD,GAAAC,EAAA,GAAAD,GACA,SAEA,GAAAC,EAAA,GAAAD,KAAAC,EAAA,GAAAD,GAOA,SANA,OAAAA,EAEA,UA2BA,SAAAK,EAAAC,EAAAC,EAAAlE,GACA,IAAAmE,EAAA5xB,EAGA,iBAAA2xB,IACAlE,EAAAkE,EACAA,OAAA,QAGA,IAAAA,IACAA,GAAA,GAEAlE,IACAmE,EAAApE,EAAAC,IAGA,IAAA9mD,EAAA,GAAAirD,EAAAjrD,QACA,QAAA2G,KAAAokD,EACA,GAAAA,EAAA54E,eAAAw0B,IACAskD,EAAAtkD,GAAA,CACA,oBAAAokD,EAAApkD,GACA,UAAAxsB,MAAA,6DAAAwsB,EAAA,KAAAroB,OAAAysE,IAIA,OAAAnxB,EAAA,CAAA55B,EAAA+qD,EAAApkD,KAAA,EAKA,OAAAqkD,EA+BA,OAvKA3xB,EAAAlgD,KAAA,SAAA+xE,GACA,QAAA56E,EAAA,EAAmBA,EAAA46E,EAAAjyE,SAAwB3I,EAAA,CAC3C,IAAA66E,EAAAD,EAAA56E,GACA,oBAAA66E,GACAA,KAAA9xB,EACA,SAIA,UA8IAA,EAAAyxB,uBACAzxB,EAAAO,kBACAP,EAAA+xB,MANA,SAAAL,EAAAC,EAAAlE,GACA,OAAAgE,EAAAC,EAAAC,EAAAlE,IAYAztB,EAAAH,QAAA2tB,EAMAxtB,EAAAwtB,SACAxtB,GAnmBkCtpD,EAAAD,QAAAC,EAAAD,QAAA82E,IACoBx2E,EAAA,IAAAA,CAErD,SAF2Dw2E,iCCR5Dx2E,EAAAQ,EAAAmxB,EAAA,sBAAAoiD,IAAA,IAAAkH,EAAAj7E,EAAA,GAQA,SAASk7E,EAAYC,EAAQC,GAEzB,IAAKA,EACD,OAAO,EAIX,GAAID,EAAOtyE,SAAWuyE,EAAOvyE,OACzB,OAAO,EAGX,IAAK,IAAI3I,EAAI,EAAGC,EAAIg7E,EAAOtyE,OAAQ3I,EAAIC,EAAGD,IAEtC,GAAIi7E,EAAOj7E,aAAc8L,OAASovE,EAAOl7E,aAAc8L,OAEnD,IAAKmvE,EAAOj7E,GAAGm7E,OAAOD,EAAOl7E,IACzB,OAAO,OAER,GAAIi7E,EAAOj7E,KAAOk7E,EAAOl7E,GAG5B,OAAO,EAIf,OAAO,EAQI,SAAS6zE,EAAUuH,EAAOC,GAGrC,GAFA3vE,KAAK0vE,MAAQA,EACb1vE,KAAK2vE,SAAWA,GACXD,EACD,MAAM,IAAIvxE,MAAM,yBACb,IAAKwxE,EACR,MAAM,IAAIxxE,MAAM,4BAQxBgqE,EAAUjyE,UAAUmyE,YAAc,WAE9B,IAAMuH,EAAW5vE,KAAK0vE,MAAMt3B,kBACtBy3B,EAAe7vE,KAAK2vE,SAASv3B,kBAC7B03B,EAAW,GAoFjB,OAlFA96E,OAAOq5B,KAAKwhD,GAAc5uE,QAAQ,SAAA8uE,GAC9B,IAAMC,EAAUJ,EAASG,GACnBE,EAAcJ,EAAaE,GAE5BC,IAAWC,GAQhBj7E,OAAOq5B,KAAK4hD,EAAYh3C,OAAOh4B,QAAQ,SAAA2vB,GACnC,IAAkD,IAA9C57B,OAAOq5B,KAAK2hD,EAAQ/2C,OAAO16B,QAAQqyB,GAG9Bk/C,EAASC,KACVD,EAASC,GAAkB,CACvBv3B,WAAYy3B,EAAYz3B,WACxBC,IAAKw3B,EAAYx3B,IACjBxf,MAAO,GACPK,WAAY,KAGpBw2C,EAASC,GAAgB92C,MAAMrI,GAAQq/C,EAAYh3C,MAAMrI,QACtD,GAAIq/C,EAAYh3C,MAAMrI,GAAMoH,OACpBg4C,EAAQ/2C,MAAMrI,GAAMoH,MAAO,MAGOl9B,IADvBk1E,EAAQ/2C,MAAMrI,GAAMoH,MAAMyB,KAC5C,SAAAxqB,GAAI,OAA8B,IAA1BA,EAAK1Q,QAAQ,kBAEoBzD,IADtBm1E,EAAYh3C,MAAMrI,GAAMoH,MAAMyB,KACjD,SAAAxqB,GAAI,OAA8B,IAA1BA,EAAK1Q,QAAQ,aAGhBuxE,EAASC,KACVD,EAASC,GAAkB,CACvBv3B,WAAYy3B,EAAYz3B,WACxBC,IAAKw3B,EAAYx3B,IACjBxf,MAAO,GACPK,WAAY,KAGpBw2C,EAASC,GAAgB92C,MAAMrI,GACzBq/C,EAAYh3C,MAAMrI,OAMpCq/C,EAAY32C,WAAWr4B,QAAQ,SAAAivE,GAK3B,IAFA,IAAIn1D,GAAU,EAELzmB,EAAI,EAAGA,EAAI07E,EAAQ12C,WAAWr8B,OAAQ3I,IAAK,CAChD,IAAM67E,EAAcH,EAAQ12C,WAAWhlC,GAEvC,GAAI47E,EAAev2C,YAAcw2C,EAAYx2C,WACtC21C,EAAYY,EAAej3C,MAAOk3C,EAAYl3C,OAAQ,CAEzDle,GAAU,EACV,OAIHA,IAII+0D,EAASC,KACVD,EAASC,GAAkB,CACvBv3B,WAAYy3B,EAAYz3B,WACxBC,IAAKw3B,EAAYx3B,IACjBxf,MAAO,GACPK,WAAY,KAGpBw2C,EAASC,GAAgBz2C,WAAWx7B,KAAKoyE,OAvE7CJ,EAASC,GAAkBE,IA4E5BH,GAMX3H,EAAUjyE,UAAUijD,SAAW,SAASi3B,GACpC,IAAMC,EAAgBrwE,KAAKqoE,cAEvBiI,GAAW,EA+Df,OA7DAt7E,OAAOq5B,KAAKgiD,GAAepvE,QAAQ,SAAAu3C,GAC/B83B,GAAW,EACX,IAAMn6C,EAAQk6C,EAAc73B,GAE5B43B,EAAOz7E,EAAE,UAAW,CAAEE,KAAMshC,EAAMsiB,MAElC23B,EAAOz7E,EAAE,cACL,CAAE0b,MAAO,6BACL8lB,MAAOA,EAAMsiB,MAKrBzjD,OAAOq5B,KAAK8H,EAAM8C,OAAOh4B,QAAQ,SAAAwgD,GAC7B,IAAM8uB,EAAYp6C,EAAM8C,MAAMwoB,GAE9B2uB,EAAOz7E,EAAE,SAAU,CAAE0b,MAAO,oCAC5B+/D,EAAO1pE,MAAM,CAAEkqB,KAAM2/C,EAAU3/C,OAG/B2/C,EAAUv4C,MAAM/2B,QAAQ,SAAAgO,GACpB,IAAM0pC,EAAM1pC,EAAK1Q,QAAQ,KACnB27C,EAAKjrC,EAAKsP,OAAOo6B,EAAM,GAG7B,GADAy3B,EAAOz7E,EAAE,cACgB,IAArBulD,EAAG37C,QAAQ,KACX6xE,EAAO1pE,MAAM,CAAE7R,KAAMqlD,QAClB,CACH,IAAMs2B,EAAKt2B,EAAGp9C,MAAM,IAAK,GACnBjI,EAAO27E,EAAG,GACVj7E,EAAQ6/B,IAAQC,mBAAmBm7C,EAAG,IAE5CJ,EAAO1pE,MAAM,CAAE7R,SACfu7E,EAAO1pE,MAAM,CAAEnR,UAEnB66E,EAAO7/D,OAEX6/D,EAAO7/D,OAIX4lB,EAAMmD,WAAWr4B,QAAQ,SAAAo5B,GACjBA,EAAUpB,MAAMh8B,SAEhBmzE,EAAOz7E,EAAE,aAAc,CACnBglC,UAAWU,EAAUV,UACrBtpB,MAAO,oCAGXgqB,EAAUpB,MAAMh4B,QAAQ,SAAA2vB,GACpBw/C,EAAOz7E,EAAE,SAAU,CAAEi8B,SAChBrgB,OAET6/D,EAAO7/D,QAIf6/D,EAAO7/D,KACP6/D,EAAO7/D,OAGJ+/D,kBCtNX,IAOAG,EACAC,EARAC,EAAA58E,EAAAD,QAAA,GAUA,SAAA88E,IACA,UAAAzyE,MAAA,mCAEA,SAAA0yE,IACA,UAAA1yE,MAAA,qCAsBA,SAAA2yE,EAAAC,GACA,GAAAN,IAAA7wE,WAEA,OAAAA,WAAAmxE,EAAA,GAGA,IAAAN,IAAAG,IAAAH,IAAA7wE,WAEA,OADA6wE,EAAA7wE,WACAA,WAAAmxE,EAAA,GAEA,IAEA,OAAAN,EAAAM,EAAA,GACK,MAAA9xE,GACL,IAEA,OAAAwxE,EAAAh8E,KAAA,KAAAs8E,EAAA,GACS,MAAA9xE,GAET,OAAAwxE,EAAAh8E,KAAAuL,KAAA+wE,EAAA,MAvCA,WACA,IAEAN,EADA,mBAAA7wE,WACAA,WAEAgxE,EAEK,MAAA3xE,GACLwxE,EAAAG,EAEA,IAEAF,EADA,mBAAAj5D,aACAA,aAEAo5D,EAEK,MAAA5xE,GACLyxE,EAAAG,GAjBA,GAwEA,IAEAG,EAFA7S,EAAA,GACA8S,GAAA,EAEAC,GAAA,EAEA,SAAAC,IACAF,GAAAD,IAGAC,GAAA,EACAD,EAAA/zE,OACAkhE,EAAA6S,EAAA1zE,OAAA6gE,GAEA+S,GAAA,EAEA/S,EAAAlhE,QACAm0E,KAIA,SAAAA,IACA,IAAAH,EAAA,CAGA,IAAAr5D,EAAAk5D,EAAAK,GACAF,GAAA,EAGA,IADA,IAAAtwE,EAAAw9D,EAAAlhE,OACA0D,GAAA,CAGA,IAFAqwE,EAAA7S,EACAA,EAAA,KACA+S,EAAAvwE,GACAqwE,GACAA,EAAAE,GAAAh/D,MAGAg/D,GAAA,EACAvwE,EAAAw9D,EAAAlhE,OAEA+zE,EAAA,KACAC,GAAA,EAnEA,SAAAI,GACA,GAAAX,IAAAj5D,aAEA,OAAAA,aAAA45D,GAGA,IAAAX,IAAAG,IAAAH,IAAAj5D,aAEA,OADAi5D,EAAAj5D,aACAA,aAAA45D,GAEA,IAEAX,EAAAW,GACK,MAAApyE,GACL,IAEA,OAAAyxE,EAAAj8E,KAAA,KAAA48E,GACS,MAAApyE,GAGT,OAAAyxE,EAAAj8E,KAAAuL,KAAAqxE,KAgDAC,CAAA15D,IAiBA,SAAA25D,EAAAR,EAAA33C,GACAp5B,KAAA+wE,MACA/wE,KAAAo5B,QAYA,SAAAo4C,KA5BAb,EAAAc,SAAA,SAAAV,GACA,IAAAnzE,EAAA,IAAAwC,MAAAvC,UAAAZ,OAAA,GACA,GAAAY,UAAAZ,OAAA,EACA,QAAA3I,EAAA,EAAuBA,EAAAuJ,UAAAZ,OAAsB3I,IAC7CsJ,EAAAtJ,EAAA,GAAAuJ,UAAAvJ,GAGA6pE,EAAArgE,KAAA,IAAAyzE,EAAAR,EAAAnzE,IACA,IAAAugE,EAAAlhE,QAAAg0E,GACAH,EAAAM,IASAG,EAAAr7E,UAAAgc,IAAA,WACAlS,KAAA+wE,IAAAhzE,MAAA,KAAAiC,KAAAo5B,QAEAu3C,EAAAe,MAAA,UACAf,EAAAhmD,SAAA,EACAgmD,EAAAgB,IAAA,GACAhB,EAAAiB,KAAA,GACAjB,EAAA3sD,QAAA,GACA2sD,EAAAnC,SAAA,GAIAmC,EAAArkD,GAAAklD,EACAb,EAAAv9B,YAAAo+B,EACAb,EAAA7qB,KAAA0rB,EACAb,EAAAzwB,IAAAsxB,EACAb,EAAAlkD,eAAA+kD,EACAb,EAAAniD,mBAAAgjD,EACAb,EAAAzjD,KAAAskD,EACAb,EAAA9qB,gBAAA2rB,EACAb,EAAA5qB,oBAAAyrB,EAEAb,EAAA/qB,UAAA,SAAA/wD,GAAqC,UAErC87E,EAAAkB,QAAA,SAAAh9E,GACA,UAAAsJ,MAAA,qCAGAwyE,EAAAmB,IAAA,WAA2B,WAC3BnB,EAAAoB,MAAA,SAAAC,GACA,UAAA7zE,MAAA,mCAEAwyE,EAAAsB,MAAA,WAA4B,wCCvL5B79E,EAAAgB,EAAA2wB,GAAA3xB,EAAAQ,EAAAmxB,EAAA,oCAAAmsD,IAGO,IAAMA,EAAkB,wDCH/B99E,EAAAQ,EAAAmxB,EAAA,sBAAAosD,IAgBAj+E,OAAOk+E,aAAel+E,OAAOk+E,cAAgBl+E,OAAOm+E,mBAEpD,IAAIpkC,EAAU,KAkEC,SAASkkC,EAAoBjmD,EAAQypC,EAAUt2D,GAC1DW,KAAKksB,OAASA,EACdlsB,KAAKsyE,WAAa,KAClBtyE,KAAKuyE,cAAgB5c,EACrB31D,KAAKg3C,WAAa,EAClBh3C,KAAKX,SAAWA,EArEhBnL,OAAOk+E,eACPnkC,EAAU,IAAImkC,cAUNI,SAAWvkC,EAAQukC,UAgE/BL,EAAoBj8E,UAAU2vB,MAAQ,WAClC,GAAKssD,EAAoBM,wBAAzB,CAGAxkC,EAAQ/4B,SACR,IAAMw9D,EAAWzkC,EAAQ0kC,iBAEzBD,EAASE,sBAxF2B,GAyFpCF,EAASG,QA/FsB,KAiGhB5kC,EAAQ6kC,wBAAwB9yE,KAAKksB,QAE7CzW,QAAQi9D,GAGf,IAAMhwD,EAAO1iB,KAEbA,KAAKsyE,WAAahoC,YACd,WACI,IAAMlR,EAAQ,IAAI25C,WAAWL,EAASM,mBAEtCN,EAASO,sBAAsB75C,GAC/B,IAzDU85C,EAAUC,EACxB59E,EACE69E,EAuDQp8B,EA9ElB,SAAoCq8B,GAMhC,IAJA,IAAIC,EAAY,EAEVr2E,EAASo2E,EAAQp2E,OAEd3I,EAAI,EAAGA,EAAI2I,EAAQ3I,IACpBg/E,EAAYD,EAAQ/+E,KACpBg/E,EAAYD,EAAQ/+E,IAI5B,OAAOi/E,aAAaD,EAAY,KAAO,KAAKE,QAAQ,IAkEzBC,CAA2Br6C,GAE1C4d,IAAet0B,EAAKs0B,aACpBt0B,EAAKs0B,YA5DCk8B,EA4DyBl8B,EA5Dfm8B,EA4D2BzwD,EAAKs0B,WA3DxDzhD,EAAQ,EAIRA,GAHE69E,EAAOD,EAAYD,GAEd,GACCC,EAAY,GACbC,GAAQ,GACPD,EAAY,GAEZD,EAGLK,WAAWh+E,EAAMi+E,QAAQ,KAiDpB9wD,EAAKrjB,SAASqjB,EAAKs0B,cAG3Bh3C,KAAKuyE,iBAObJ,EAAoBj8E,UAAUy4B,KAAO,WAC7B3uB,KAAKsyE,aACL3qC,cAAc3nC,KAAKsyE,YACnBtyE,KAAKsyE,WAAa,OAU1BH,EAAoBM,sBAAwB,WACxC,OAAO7sC,QAAQqI,qBCjJnB,IAAMylC,EAAyB14E,EAAQ,KAQjC6vB,EAAa,CAgBfC,WAhBe,SAiBP8d,EACAt7B,EACA22C,EACA0vB,EACAC,EACAxlC,GACJ,IAAMx5C,EAAIuR,SAEJ0tE,EAASj/E,EAAEyX,cADD,UAEVynE,EAAgBl/E,EAAE2lB,qBAFR,UAEsC,GAItD,GAFAs5D,EAAOvmE,MAAQA,EAEXqmE,EAAa,CAGb,IAAMI,EAAWL,IAEjB,GAAIK,EAAU,CACV,IAAMC,EAAYD,EAASnrC,IACrBqrC,EACAD,EAAUx1E,UAAU,EAAGw1E,EAAUE,YAAY,KAAO,GAEtDF,GAAaC,IAEbrrC,EAAMqrC,EAAgBrrC,IAK9BgrC,IACAC,EAAOM,OAASP,GAEhBxlC,IACAylC,EAAOpvD,QAAU2pB,GAGrBylC,EAAOjrC,IAAMA,EACTqb,EACA6vB,EAActjE,WAAW4jE,aAAaP,EAAQC,GAE9CA,EAActjE,WAAWpE,YAAYynE,KAOjD9/E,EAAOD,QAAU+2B,gCCzEjBz2B,EAAAgB,EAAA2wB,GAAA3xB,EAAAQ,EAAAmxB,EAAA,uBAAAsuD,IAAAjgF,EAAAQ,EAAAmxB,EAAA,wBAAAuuD,IAKO,IAAMD,EAAK,KAOLC,EAAM,26BCLnB,IAAMxrD,EAASH,oBAAUQ,GAKnBorD,EAAoB,CACtBC,WAAc,SACdC,aAAgB,WAChBC,YAAe,WAQnB,SAASC,EAA8B/kC,EAAa5gC,GAChD4gC,EAAYglC,WAAa5lE,MAMR6lE,cAcjB,SAAAA,EACQxiC,EACAnmB,EACA2gB,EACAioC,EACAC,EACAhoC,GAAW,IAAArF,EAAA,mGAAAJ,CAAAtnC,KAAA60E,IACfntC,EAAAH,EAAAvnC,KAAAwnC,EAAAqtC,GAAApgF,KAAAuL,QAGKqqC,iBAAmB3C,EAAK0L,YAC7B1L,EAAKuY,oBAAsBvY,EAAKwY,IAAMxY,EAAKjb,eAM3Cib,EAAKstC,WAAa,GAClBttC,EAAK2K,WAAaA,EAClB3K,EAAKsP,YAAc,EACnBtP,EAAKr2B,KAAO0jE,EACZrtC,EAAKmF,MAAQA,EACbnF,EAAKqF,UAAYA,EACjBrF,EAAKrsC,SAAW,IAAIivB,IASpBod,EAAKutC,UAAW,EAShBvtC,EAAKwtC,uBAAyBJ,EAE9BptC,EAAKytC,WAAWjpD,GArCDwb,wPApBiBld,+CAoExBnZ,EAAMrC,GACd,GAAKulE,EAAkBp+E,eAAekb,IAWtC,GANIrC,EACAhP,KAAK3E,SAAS0wB,IAAI1a,EAAMrC,GAExBhP,KAAK3E,SAASozB,OAAOpd,GAGrBrR,KAAKksB,OAAQ,KAAAiB,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAEb,QAAAwyB,EAAAC,EAAoBvtB,KAAKksB,OAAO6Z,iBAAhC1wC,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAkD,CAAAG,EAAA/3B,MACxCg/E,EAAkBljE,IAASrC,GAHxB,MAAA8K,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,UAVbvE,EAAOrZ,MAAP,wBAAAnS,OAAqC+T,kDAuBzC,GAAKrR,KAAKksB,OAAV,CADkB,IAAA8B,GAAA,EAAAC,GAAA,EAAAC,OAAApzB,EAAA,IAQlB,QAAAqzB,EAAAC,EAAmBpuB,KAAK3E,SAASgzB,OAAjCh5B,OAAAo4B,cAAAO,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAAyC,KAA9B3c,EAA8B8c,EAAA54B,MAAA65B,GAAA,EAAAC,GAAA,EAAAC,OAAAx0B,EAAA,IAErC,QAAAy0B,EAAAC,EAAyBxvB,KAAKksB,OAAO6Z,iBAArC1wC,OAAAo4B,cAAA2B,GAAAG,EAAAC,EAAA9B,QAAAC,MAAAyB,GAAA,EAAuD,CAAAG,EAAAh6B,MACxCg/E,EAAkBljE,SAASvW,GAHL,MAAAgf,GAAAuV,GAAA,EAAAC,EAAAxV,EAAA,YAAAsV,GAAA,MAAAI,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAAsB,EAAA,MAAAC,KARvB,MAAAxV,GAAAmU,GAAA,EAAAC,EAAApU,EAAA,YAAAkU,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAcdluB,KAAKk1E,wBACLP,EAA8B30E,KAAKksB,YAAQpxB,QAb3CguB,EAAOlZ,KAAP,GAAAtS,OACO0C,KADP,0FAwBGksB,GACP,GAAIlsB,KAAKksB,SAAWA,IAIpBlsB,KAAKksB,OAASA,EAMVlsB,KAAKksB,QAAQ,KAAAwD,GAAA,EAAAC,GAAA,EAAAC,OAAA90B,EAAA,IACb,QAAA+0B,EAAAC,EAAmB9vB,KAAK3E,SAASgzB,OAAjCh5B,OAAAo4B,cAAAiC,GAAAG,EAAAC,EAAApC,QAAAC,MAAA+B,GAAA,EAAyC,KAA9Bre,EAA8Bwe,EAAAt6B,MACrCyK,KAAKo1E,YAAY/jE,EAAMrR,KAAK3E,SAASlG,IAAIkc,KAFhC,MAAAyI,GAAA6V,GAAA,EAAAC,EAAA9V,EAAA,YAAA4V,GAAA,MAAAI,EAAA/B,QAAA+B,EAAA/B,SAAA,WAAA4B,EAAA,MAAAC,GAIT5vB,KAAKk1E,wBACLP,EACI30E,KAAKksB,OAAQlsB,KAAKk1E,2DAS9B,OAAOl1E,KAAKqR,4CAOZ,OAAOrR,KAAKk2C,YAAcpJ,iDAU1B,OAAO9sC,KAAK6sC,OAAS7sC,KAAK6sC,MAAMnc,6CAOhC,OAAO1wB,KAAKk2C,YAAcpJ,sCAS1B,MAAM,IAAI3uC,MAAM,2EAOhB,OAAO6B,KAAKksB,6CAQZ,OAAOlsB,KAAKksB,OAASlsB,KAAKksB,OAAOhtB,GAAK,wCAQtC,OAAOc,KAAK6sC,2CAQZ,OAAO7sC,KAAK6sC,MAAQ7sC,KAAK6sC,MAAM3tC,GAAK,6CASpC,OAAIc,KAAKk3C,eACE,MAGJl3C,KAAK+sC,UAAY/sC,KAAK+sC,UAAY,0DASrBsoC,GAChBr1E,KAAKqyC,YAAcgjC,GACnBr1E,KAAKqyC,WAAWijC,eAAet1E,KAAMq1E,kCActCA,GACCr1E,KAAKksB,QACLmb,IAASe,kBAAkBitC,EAAWr1E,KAAKksB,QAE/ClsB,KAAKg1E,WAAWl3E,KAAKu3E,GACrBr1E,KAAKu1E,wBAAwBF,GAC7Br1E,KAAKw1E,mBAAmBH,kCAWrBA,GACH,IAAK,IAAItlD,EAAK/vB,KAAKg1E,WAAY1gF,EAAIy7B,EAAG9yB,OAAS,EAAG3I,GAAK,IAAKA,EAAG,CAC3D,IAAMK,EAAIo7B,EAAGz7B,GAER+gF,GACDhuC,IAASe,kBAAkBzzC,EAAG,MAE7B0gF,GAAa1gF,IAAM0gF,GACpBtlD,EAAGxyB,OAAOjJ,EAAG,GAIjB+gF,GACAhuC,IAASe,kBAAkBitC,EAAW,iDAY3BA,sCAcf,OAJAr1E,KAAKwuB,qBAELxuB,KAAKi1E,UAAW,EAET7pC,QAAQC,qFAgBf,OAAIrrC,KAAKksB,OACEmb,IAASkB,YAAYvoC,KAAKksB,QAG9B,wCAUP,YAAkC,IAAvBlsB,KAAKksB,OAAOupD,QACZz1E,KAAKksB,OAAOupD,6CAcbz+B,EAAYlpB,GAClB9tB,KAAKg3C,aAAeA,IACpBh3C,KAAKg3C,WAAaA,EAClBh3C,KAAKktB,KACD0tC,4BACA5jB,EACAlpB,sCASR,IAAMomB,EAAWl0C,KAAK01E,cAChBC,EAAU31E,KAAK41E,aAErB,OAAO1hC,GAAYyhC,EAAZ,GAAAr4E,OAAyB42C,EAAzB,KAAA52C,OAAqCq4E,GAAY,4CAW7C/zC,GAAqB,IAAA8J,EAAA1rC,KAChC,OAAKqnC,IAAS2I,wBAAwB,UAOlChwC,KAAKwnE,eACEp8B,QAAQC,UAIfD,QAAQsL,IACJ12C,KAAKg1E,WAAWj4E,IACZ,SAAAsb,GAAO,OACHA,EAAQgqB,UAAUT,GACb4J,MAAM,SAAA/7B,GAOH,MANAqZ,EAAOlZ,KACH,+GAGAyI,EACA5I,GACEA,OAGrBs4B,KAAK,WACF2D,EAAKxe,KACD0tC,6BACAh5B,KA5BLwJ,QAAQE,OACX,IAAIntC,MAAM,4JC/YnB,SAASyzC,EAAqBgJ,GACjC,IAAIi7B,EAAYj7B,EAMhB,OAJIA,GAAU/5C,OAAOi1E,mBACjBD,EAAY,GAGTA,EAAY,EAfvBzhF,EAAAQ,EAAAmxB,EAAA,sBAAA6rB,6LCKMmkC,aAWF,SAAAA,EAAY5jD,EAAQ6jD,EAAaC,gGAAc3uC,CAAAtnC,KAAA+1E,GAC3C/1E,KAAKk2E,QAAU/jD,EACfnyB,KAAKm2E,eAAeH,GACpBh2E,KAAKo2E,cAAgBH,IAAgB,EACrCj2E,KAAKq2E,oBAAmB,GACxBr2E,KAAKs2E,yBAA2B,EAChCt2E,KAAKu2E,sBAAwB,EAC7Bv2E,KAAKw2E,UAAW,6DAShB,OAAOx2E,KAAKk2E,iDASZ,OAAOl2E,KAAKg2E,mDASDS,GACXz2E,KAAKg2E,YAAcS,yCASnB,OAAOz2E,KAAKo2E,0DASZ,OAAOp2E,KAAKu2E,sBAAwB,6CAWrBG,GACf,IAAK12E,KAAK22E,qBAAuBD,EAC7B12E,KAAKu2E,sBAAwBjkE,KAAK8K,WAC/B,GAAIpd,KAAK22E,sBAAwBD,EAAsB,CAC1D,IACME,EADMtkE,KAAK8K,MACSpd,KAAKu2E,sBAE/Bv2E,KAAKs2E,0BAA4BM,EACjC52E,KAAKu2E,sBAAwB,yDAUjC,IAAIM,EAAQ72E,KAAKs2E,yBAMjB,OAJIt2E,KAAK22E,sBACLE,GAASvkE,KAAK8K,MAAQpd,KAAKu2E,uBAGxBM,oCASP,OAAO72E,KAAKw2E,iDASZx2E,KAAKw2E,UAAW,EAChBx2E,KAAKq2E,oBAAmB,wCAIhCtiF,EAAOD,QAAUiiF,iBCrHjBhiF,EAAOD,QAZsB,CASzBgjF,iBAAkB,yvCCiBtB,IAAMhuD,EAASH,oBAAUQ,GAMJ2oB,cAmBjB,SAAAA,EAAAtJ,GAWG,IAAAd,MAVC3E,EAUDyF,EAVCzF,SACAE,EASDuF,EATCvF,WACAlD,EAQDyI,EARCzI,UACA0D,EAOD+E,EAPC/E,WACAsO,EAMDvJ,EANCuJ,MACA/O,EAKDwF,EALCxF,SACA4J,EAIDpE,EAJCoE,WACA1gB,EAGDsc,EAHCtc,OACA2gB,EAEDrE,EAFCqE,MACAE,EACDvE,EADCuE,UACD,mGAAAzF,CAAAtnC,KAAA8xC,KACC9xC,OAAAwnC,EAAAsK,GAAAr9C,KAAAuL,KACqB,KACjBksB,EACA2gB,EAC4B,kBAAMnF,EAAKxa,KAAK0qB,wBAC5C7X,EACAgN,IANJrF,oDAaKqK,MAAQA,EACbrK,EAAK1E,SAAWA,EAChB0E,EAAKkF,WAAaA,EAEdjiB,IAAQsd,kBAGRP,EAAKjE,WAAaoJ,EAAMsF,cAAc3Q,OAItCkG,EAAKqvC,aAAelqC,EAAMvK,kBAK1BoF,EAAKjE,WAAa9Y,IAAQkO,YAAc,KAAO4K,EAGnDiE,EAAK3E,SAAWA,EAUhB2E,EAAKsvC,cAAgB5rC,QAAQC,UAS7B3D,EAAKuvC,YAAch0C,EAMnByE,EAAKwvC,aAAc,EAKnBxvC,EAAKyvC,cAAe,EAOpBzvC,EAAK0vC,eAAgB,EAQrB1vC,EAAK2vC,cAAkC,KAAlB3vC,EAAK3E,cAAkBjoC,EAAY4sC,EAAK3E,SAO7D2E,EAAK4vC,yBAA2B,KAEhC5vC,EAAK6vC,wBAA0B,SAAAxrC,GAC3BrE,EAAK8vC,+BAA+BzrC,QAKM,IAA/BrE,EAAK+vC,WAAWv1D,iBACc,IAAvBwlB,EAAK2vC,eACXtrC,EAAQtS,KAAK,SAAA7kC,GAAC,OAAIA,EAAEmuC,WAAa2E,EAAK2vC,kBAC9C3vC,EAAKwvC,aAAc,IAQvBxvC,EAAKwP,gBAAkB7P,IAAS2I,wBAAwB,YACxDtI,EAAKgwC,4BAA8BhwC,EAAK4P,eAAexhD,KAApBm9C,EAAAvL,IACnCL,IAAS+L,YACLnN,IAAUlJ,4BACV2K,EAAKgwC,8BAGbrwC,IAAS+L,YAAYnN,IAAUhJ,wBAAyByK,EAAK6vC,yBAE7D7vC,EAAKiwC,gCAjHNjwC,wPA9BsCmtC,gDAwJrC,MAAsC,UAA/B70E,KAAKy3E,WAAWv1D,YAA0BliB,KAAKk3E,oEAO1B,IAAAxrC,EAAA1rC,KAC5B,GAAIA,KAAKwnE,gBAAkBxnE,KAAK+sC,YAAcC,IAAUE,OAAQ,CAC5D,IAAM0qC,EACA53E,KAAK43E,yBAAyB9hF,KAAKkK,MAEzCA,KAAKo1E,YAAY,aAAc,WAC3B,GAAI1pC,EAAKmsC,wBAAyB,CAC9B,IAAMz6D,EAAMlpB,OAAOm5D,YAAYjwC,MAE/BsuB,EAAK4rC,yBACC13E,WAAWg4E,EAA0B,KAC3ClsC,EAAK0pC,YAAY,eAAgB,WAC7B1pC,EAAKosC,sCACL3tD,IAAW0K,oBACP2J,IACA,CACIwB,WAAc0L,EAAKwK,UACnB6hC,WAAc,QACdxiF,MAAOrB,OAAOm5D,YAAYjwC,MAAQA,SAKtDpd,KAAKo1E,YAAY,cAAewC,kEAShC53E,KAAKs3E,2BACL7/D,aAAazX,KAAKs3E,0BAClBt3E,KAAKs3E,yBAA2B,MAEpCt3E,KAAKo1E,YAAY,oBAAgBt6E,sDASjCkF,KAAK83E,sCACD93E,KAAK63E,yBACL73E,KAAKg4E,kFAQTh4E,KAAKktB,KAAKmkB,uBAEVlnB,IAAW+K,cAAc4K,YAA4B9/B,KAAKk2C,YAC1D,IAAM7mC,EAAM,CAAExa,KAAMw8C,uBAEhBrxC,KAAKk3C,iBACL7nC,EAAI4oE,gBAAkBj4E,KAAKyzC,oBAE/BtpB,IAAWmJ,QAAQ1c,KAAK0K,UAAUjS,2DAWP08B,GAC3B,IAAMc,EAAQ7sC,KAAKy3E,WACbpxC,EAAI,GAAA/oC,OAAMuvC,EAAMxG,KAAZ,SACNI,EAASsF,EAAQtS,KAAK,SAAA7kC,GAAC,OAAIA,EAAEyxC,OAASA,GAAQzxC,EAAEuyC,QAAU0F,EAAM1F,QAEpE,IAAKV,GAAiC,YAAvBzmC,KAAKq3E,cAA6B,CAI7C,IAAMlwC,GAAS0F,EAAM1F,OAAS,IAAI/pC,QAAQ,aAAc,IAExDqpC,EAASsF,EAAQtS,KAAK,SAAA7kC,GAAC,OAAIA,EAAEyxC,OAASA,GAAQzxC,EAAEuyC,QAAUA,IAG1DV,IACAzmC,KAAKq3E,cAAgB5wC,EAAO1D,6CAWzB7W,GACPgsD,EAAA1wC,EAAAsK,EAAA57C,WAAA,aAAA8J,MAAAvL,KAAAuL,KAAiBksB,GAEbA,GAEAlsB,KAAKm4E,WAAan4E,KAAKo4E,UACvBtvD,EAAOpZ,MAAP,qBAAApS,OAAkC0C,KAAKm4E,WAAvC,QAAA76E,OAAwD0C,QAExD8oB,EAAOpZ,MAAP,4BAAApS,OAAyC0C,sCAU7C,OAAOA,KAAKq4E,gBAAe,oCAS3B,OAAOr4E,KAAKq4E,gBAAe,0CAYhB3nD,GACX,IAAM4nD,EAAWt4E,KAAKu4E,UAAUziF,KAAKkK,KAAM0wB,GAI3C,OAFA1wB,KAAKg3E,cAAgBh3E,KAAKg3E,cAAcjvC,KAAKuwC,EAAUA,GAEhDt4E,KAAKg3E,gDAWNtmD,GAAO,IAAA0c,EAAAptC,KACb,GAAIA,KAAKk8D,YAAcxrC,EACnB,OAAO0a,QAAQC,UAGnB,GAAIrrC,KAAKi1E,SACL,OAAO7pC,QAAQE,OAAO,IAAI/Y,IAAgB2e,sBAG9C,IAAIZ,EAAUlF,QAAQC,UAGhBmtC,EAAc,kBAAM1vD,EAAOnZ,KAAP,QAAArS,OAAoB8vC,EAApB,MAAA9vC,OAA6BozB,KAEvD,GAAI1wB,KAAKk3C,gBACEl3C,KAAK+sC,YAAcC,IAAUC,UAC5BtiB,IAAQ8tD,8BAChBD,IACIx4E,KAAK6sC,QACL7sC,KAAK6sC,MAAM6rC,SAAWhoD,QAEvB,GAAIA,EACP4f,EAAU,IAAIlF,QAAQ,SAACC,EAASC,GAC5BktC,IACAprC,EAAKurC,kCACD,WAIIvrC,EAAKwrC,sBACLxrC,EAAKyrC,aACLzrC,EAAK+nC,WAAW,MAChB9pC,KAEJC,SAEL,CACHktC,IAGA,IAAMM,EAAgB,CAClBh2C,eAAgB9iC,KAAK+4E,cACrBhtC,QAAS,CAAEe,KACX7J,WAAYjjC,KAAKg5E,uBAGjBruD,IAAQsd,iBACRqI,EACMjJ,IAASgM,kCAAkCr+C,OAAOikF,OAChD,GACAH,EACA,CAAEpmD,YAAa,CAAE4O,MAAOthC,KAAK+2E,kBAEjC/2E,KAAKyjC,aACLq1C,EAAcr1C,WAAazjC,KAAKyjC,YAGpC6M,EACMjJ,IAASiM,+BAA+BwlC,IAGlDxoC,EAAQvI,KAAK,SAAAmxC,GACT,IAAMn5C,EAAYqN,EAAK8I,UACjBijC,EACAxuD,IAAQsd,iBACJixC,EAAYz/C,KACV,SAAA9pB,GAAI,OAAIA,EAAKk9B,MAAMxG,OAAStG,IAC9Bm5C,EAAYz/C,KACV,SAAA9pB,GAAI,OAAIA,EAAKowB,YAAcA,IAEvC,IAAIo5C,EAaA,MAAM,IAAI5mD,IAAgB4e,yBAM9B,OAlBI/D,EAAK+nC,WAAWgE,EAAWjtD,QAC3BkhB,EAAKP,MAAQssC,EAAWtsC,MAIpBO,EAAKL,YAAcosC,EAAWpsC,YAC9BjkB,EAAOlZ,KAAP,GAAAtS,OACO8vC,EADP,0CAEIA,EAAKL,UAAWosC,EAAWpsC,WAC/BK,EAAKL,UAAYosC,EAAWpsC,WAMpCK,EAAK4nC,WAAWj4E,IACZ,SAAAq8E,GAAI,OAAI/xC,IAASe,kBAAkBgxC,EAAMhsC,EAAKlhB,UAE3CkhB,EAAKisC,mCAIpB,OAAO/oC,EACFvI,KAAK,kBAAMqF,EAAKksC,gBAAgB5oD,KAChCqX,KAAK,kBAAMqF,EAAKlgB,KAAK1F,qBAAoB4lB,8DASjB,IAAAW,EAAA/tC,KAC7B,OAAKA,KAAKqyC,WAcH,IAAIjH,QAAQ,SAACC,EAASC,GACzByC,EAAKsE,WAAWknC,uBAAuBxrC,GAClChG,KAAKsD,EAAS,SAAA57B,GAAK,OAAI67B,EAAO,IAAIntC,MAAMsR,QAftC27B,QAAQC,oEA0BW6C,EAAiBE,GAC1CpuC,KAAKqyC,WAKVryC,KAAKqyC,WAAWmnC,wBAAwBx5E,MAAM+nC,KAC1CmG,EACA,SAAAz+B,GAAK,OAAI2+B,EAAc,IAAIjwC,MAAMsR,MANjCy+B,4CAgBQsI,GAAM,IAAA3H,EAAA7uC,KAClB,OAAKA,KAAKqyC,YAAeryC,KAAKqyC,WAAWuf,KAIlC,IAAIxmB,QAAQ,SAAAC,GACfwD,EAAKwD,WAAWuf,KACZ/iB,EAAKqI,eACC,eACA,gBAAgBV,EAAMnL,KAPzBD,QAAQC,4CAoBb,IAAA+2B,EAAApiE,KACFswC,EAAUlF,QAAQC,UAkBtB,OAhBIrrC,KAAKqyC,aACL/B,EAAUtwC,KAAKqyC,WAAWonC,YAAYz5E,OAGtCA,KAAKksB,SACLlsB,KAAK64E,aACL74E,KAAK05E,UAGTryC,IAAS5a,eAAewZ,IAAUhJ,wBAAyBj9B,KAAKu3E,yBAE5Dv3E,KAAK03E,6BACLrwC,IAAS5a,eAAewZ,IAAUlJ,4BAC9B/8B,KAAK03E,6BAGNpnC,EAAQvI,KAAK,kBAAAmwC,EAAA1wC,EAAAsK,EAAA57C,WAAA,UAAAksE,GAAA3tE,KAAA2tE,uCAYpB,OAAKpiE,KAAKksB,YAGNlsB,KAAKwnE,gBAAmBxnE,KAAKk6D,eAIzBl6D,KAAK6sC,QAAU7sC,KAAK6sC,MAAM6rC,iDASvBrmC,GACXryC,KAAKqyC,WAAaA,EAMlB,IAAK,IAAI/9C,EAAI,EAAGA,EAAI0L,KAAKg1E,WAAW/3E,OAAQ3I,IACxC0L,KAAKu1E,wBAAwBv1E,KAAKg1E,WAAW1gF,sCAUjD,OAAO,wCASP,OAAO0L,KAAKq3E,eAAiBr3E,KAAK+iC,oDAUlC,OAAO/iC,KAAKqyC,YAAcryC,KAAKqyC,WAAW8nB,4DAUrBrsC,EAAK6rD,GAAW,IAAA/W,EAAA5iE,KACjC25E,EAAY,IACZ35E,KAAKm3E,cAAe,GAExB,IAAM/W,EAAqBtyC,EAAI8rD,qBAE3B55E,KAAKo3E,eAAwC,cAAvBhX,IACtBxgE,WAAW,WACFgjE,EAAKuU,eACNruD,EAAOlZ,KAAP,GAAAtS,OAAeslE,EAAf,gDAAAtlE,OACMslE,EAAKiX,aAGXjX,EAAKoV,+BAEV,KACHh4E,KAAKo3E,eAAgB,iDAWzB,GAAIp3E,KAAKwnE,gBAAkBxnE,KAAK+sC,YAAcC,IAAUE,OAAQ,CAQ5D,IAAI4sC,EAEJ,IACIA,EAAgB95E,KAAK6sC,MAAMsF,cAC7B,MAAOlzC,IAKT,OAAI66E,GAAiB,eAAgBA,EAC1BA,EAAc72C,gBAGO,IAArBjjC,KAAKi3E,YACLj3E,KAAKi3E,YAMT/zC,IAAiBC,2CAmB5BnjC,KAAK+5E,uBAAwB,EAE7B,IACI1yC,IAASoG,gBAAgBztC,KAAKksB,QADlC,QAGIlsB,KAAK+5E,uBAAwB,2CAkB7B/5E,KAAKwnE,gBACExnE,KAAK+sC,YAAcC,IAAUE,QACO,mBAA7BltC,KAAK6sC,MAAMmtC,gBACzBh6E,KAAK6sC,MAAMmtC,gBAEXh6E,KAAKi3E,YACCj3E,KAAKi3E,cAAgB/zC,IAAiBq0B,YAClCr0B,IAAiBC,KACjBD,IAAiBq0B,6DAW/B,SAAKv3D,KAAKwnE,gBACCxnE,KAAK+5E,uBACL/5E,KAAK+sC,YAAcC,IAAUC,WAIhCjtC,KAAKyzC,8DAeb,QAAKzzC,KAAKksB,QAWHlsB,KAAKksB,OAAOkjB,YAAYoE,KAAK,SAAA3G,GAAK,QAClC,eAAgBA,GAA+B,SAArBA,EAAM3qB,YACzB,UAAW2qB,IAA0B,IAAhBA,EAAMnc,4CASzC,oBAAApzB,OAAqB0C,KAAK+xC,MAA1B,KAAAz0C,OAAmC0C,KAAKk2C,UAAxC,mVC5vBa+jC,aAMjB,SAAAA,IAA0B,IAAd3oE,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,gGAAIypC,CAAAtnC,KAAAi6E,GACtBj6E,KAAKud,YAAcjM,EAAQgM,WAC3Btd,KAAKk6E,MAAQ5oE,EAAQ7b,KAErBuK,KAAKm6E,cAAc7oE,EAAQirD,WAC3Bv8D,KAAKo6E,UAAU9oE,EAAQqI,kEASvB,OAAO3Z,KAAK6oD,uCASZ,OAAO7oD,KAAKq6E,0DASZ,OAAOr6E,KAAKs6E,uDASZ,OAAOt6E,KAAKu6E,0CASZ,OAAOv6E,KAAKk6E,uCAUPzqE,GACLzP,KAAK6oD,OAASp5C,+CAUGqgC,GACjB9vC,KAAKs6E,mBAAqBxqC,oCASpBn2B,GACN3Z,KAAKu6E,QAAU5gE,mCAoBoC,IAAA+tB,EAAA1nC,KAA/Cw6E,EAA+ChyC,EAA/CgyC,QAASC,EAAsCjyC,EAAtCiyC,YAAaC,EAAyBlyC,EAAzBkyC,YAAaxmC,EAAY1L,EAAZ0L,SACvC,OAAO,IAAI9I,QAAQ,SAACC,EAASC,GACzB5D,EAAKnqB,YAAYpF,OACbuvB,EAAKizC,UAAU,CACXj8C,OAAQ,QACR87C,UACAE,cACAD,cACAvmC,aAEJ,SAAApkC,GAKI43B,EAAK0yC,UAAU,WACf1yC,EAAKyyC,cACDS,IAAkB/d,mBAAmB/sD,IAEzCu7B,KAEJ,SAAA57B,GACIi4B,EAAKmzC,gBAAgBprE,GAErB67B,EAAO77B,uCAcD,IAAAi8B,EAAA1rC,KAAf06E,EAAehyC,EAAfgyC,YACH,OAAO,IAAItvC,QAAQ,SAACC,EAASC,GACzBI,EAAKnuB,YAAYpF,OACbuzB,EAAKivC,UAAU,CACXj8C,OAAQ,OACRg8C,gBAEJrvC,EACAC,0CAqBuD,IAAvD5M,EAAuDwK,EAAvDxK,OAAQ87C,EAA+CtxC,EAA/CsxC,QAASC,EAAsCvxC,EAAtCuxC,YAAaC,EAAyBxxC,EAAzBwxC,YAAaxmC,EAAYhL,EAAZgL,SACnD,OAAOttC,cAAI,CACPwV,GAAIs+D,EACJrpE,KAAM,QAET1c,EAAE,QAAS,CACR0b,MAAS,kCACTquB,OAAUA,EACVo8C,SAAYN,EACZO,eAAkB/6E,KAAKk6E,MACvBc,SAAY9mC,EACZ+mC,sBAAyBR,IAE5BlqE,6CAUW2qE,GACZ,IAAMzrE,EAAQyrE,EAAQ3gE,qBAAqB,SAAS,GAEpDva,KAAKm7E,SAAS1rE,EAAM2rE,SAAS,GAAGxvE,+CAUtB2wD,GACVv8D,KAAKq6E,WAAa9d,6aCjN1B,IAEM8e,EAAwB,SAKxBC,aAKF,SAAAA,IAAc,IAAA5zC,EAAA1nC,kGAAAsnC,CAAAtnC,KAAAs7E,GACVt7E,KAAKu7E,cAAgB,IAAI/wD,IACzBxqB,KAAKw7E,oBAAsB,GAE3BppC,IAAIgB,YACAnN,IAAUjJ,oBACV,SAAA+O,GAAO,OACHrE,EAAK6zC,cAAcruD,KACfuuD,sBACA1vC,KACZqG,IAAIgB,YACAnN,IAAU/I,sBACV,SAAA6O,GAAO,OACHrE,EAAKg0C,iBACDh0C,EAAK0I,uBACLrE,KACZqG,IAAIgB,YACAnN,IAAU7J,oBACV,SAAA4J,GAAkB,OACd0B,EAAKi0C,0BAA0B31C,KAKvChmC,KAAK47E,yBAA2B,IAAIxwC,QAAQ,SAAAC,GACnCxD,UAAUg0C,YAMfh0C,UAAUg0C,YAAYC,MAAM,CAAEjnF,KAAMwmF,IAC/BtzC,KAAK,kBAAMsD,GAAQ,IAAO,kBAAMA,GAAQ,KANzCA,GAAQ,8EAkBMrF,GACtBhmC,KAAKw7E,sVAALx8C,CAAA,GACOh/B,KAAKw7E,oBACLx1C,4CASM+1C,EAAUhwC,GACvB,IAAMtF,EACAsF,EAAQtS,KACN,SAAA7kC,GAAC,MAAe,gBAAXA,EAAEyxC,MAA0BzxC,EAAEmuC,WAAag5C,IAEpDt1C,GACAtc,IAAWsH,0BACP2gB,IAAI2B,4BAA4BtN,6CAQ3BpnC,GACb+yC,IAAIxK,iBAAiBvoC,mDAUrB,OAAO+yC,IAAI1I,wEAUSiG,GACpB,OAAOyC,IAAIpC,wBAAwBL,qDAUbt+B,GAAM,IAAAq6B,EAAA1rC,KAC5B,OAAO,IAAIorC,QAAQ,SAAAC,GAGXh6B,KAAQq6B,EAAK8vC,oBACbnwC,EAAQK,EAAK8vC,oBAAoBnqE,IAMrCq6B,EAAKkwC,yBAAyB7zC,KAAK,SAAAi0C,GAC/B,GAAKA,EAAL,CAMA,IAAMC,EAAW,GAEjB,OAAQ5qE,GACR,KAAKy7B,IACDmvC,EAASn+E,KACL+pC,UAAUg0C,YAAYC,MAAM,CACxBjnF,KAAMwmF,KAEd,MACJ,KAAKvuC,IACDmvC,EAASn+E,KACL+pC,UAAUg0C,YAAYC,MAAM,CACxBjnF,KAjJE,gBAmJV,MACJ,QACIonF,EAASn+E,KACL+pC,UAAUg0C,YAAYC,MAAM,CACxBjnF,KAAMwmF,KAEdY,EAASn+E,KACL+pC,UAAUg0C,YAAYC,MAAM,CACxBjnF,KA3JE,gBA+Jdu2C,QAAQsL,IAAIulC,GAAUl0C,KAClB,SAAAm0C,GAAO,OAAI7wC,EAAQ6wC,EAAQC,MAAM,SAAAC,GAO7B,MAtKU,aAmKUA,EAAiB13B,OAC9B03B,EAAiBziE,YAI5B,kBAAM0xB,GAAQ,UAzCdA,GAAQ,+DAsDpB,OAAQ1gB,IAAQkO,2DAShB,OAAOuZ,IAAIhC,oEAWMrN,GACjB,IAAM7B,EAAmBkR,IAAI0B,oCAU7B,OARI5S,GAAoBA,EAAiBjkC,OAAS,GAI9C+C,KAAK07E,iBACD34C,EAAUqP,IAAI0B,qCAGf1B,IAAI4B,qBAAqBjR,4CAQnBjO,EAAO9lB,GACpBhP,KAAKu7E,cAAcnoC,YAAYte,EAAO9lB,+CAQtB8lB,EAAO9lB,GACvBhP,KAAKu7E,cAAc9uD,eAAeqI,EAAO9lB,qCAOnC8lB,GAAgB,QAAAunD,EAAA17C,EAAA9iC,UAAAZ,OAANW,EAAM,IAAAwC,MAAAugC,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANhjC,EAAMgjC,EAAA,GAAA/iC,UAAA+iC,IACtBy7C,EAAAr8E,KAAKu7E,eAAcruD,KAAnBnvB,MAAAs+E,EAAA,CAAwBvnD,GAAxBx3B,OAAkCM,4CAalC,OAAO+sB,IAAQihB,qDAIR7lB,EAAA,MAAIu1D,iBCxPnB,IAAAhzD,EAAA,CACAg0D,MAAA,EACA5sE,MAAA,EACAC,KAAA,EACAN,IAAA,EACAO,KAAA,EACAH,MAAA,GAOAwY,EAAAs0D,iBAAA/sE,QAMA,IAAAgtE,EAAA,CAAAv0D,EAAAs0D,kBAyEA,SAAAltE,IACA,IAAAyZ,EAAAjrB,UAAA,GAAAyR,EAAAzR,UAAA,GACAD,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,UAAA,GACA,KAAAyqB,EAAAhZ,GAAAwZ,EAAAxZ,OAMA,IAFA,IAAAmtE,EAjDA,WACA,IAAAA,EAAA,CACAzzB,WAAA,GACA0zB,aAAA,GACAztE,KAAA,KACA0tE,OAAA,MAGAltE,EAAA,IAAAtR,MACA0Q,EAAAY,EAAAZ,MAAAY,EAAAZ,MAAA/R,MAAA,SACA,IAAA+R,KAAA5R,OAAA,EACA,OAAAw/E,EAEA,IAAA/nF,EAAA,KAIA,OAHAma,EAAA,KACAna,EAAAma,EAAA,GAAA6N,MAAA,iDAEAhoB,KAAAuI,QAAA,GAEA,IAAA4R,EAAA,GAAAtQ,QAAA,QAEAk+E,EAAAzzB,WAAAn6C,EAAA,GAAA0P,OAAA,EAAA1P,EAAA,GAAAtQ,QAAA,MAGAk+E,EAAAzzB,WAAAn6C,EAAA,GAAA0P,OAAA,EAAA1P,EAAA,GAAAtQ,QAAA,MAEAk+E,IAGAA,EAAAzzB,WAAAt0D,EAAA,GACA+nF,EAAAC,aAAAhoF,EAAA,GACA+nF,EAAAxtE,KAAAva,EAAA,GACA+nF,EAAAE,OAAAjoF,EAAA,GACA+nF,GAgBAG,GACAh0D,EAAA4zD,EAAAl/E,OAAAwrB,EAAAF,YACAt0B,EAAA,EAAkBA,EAAAs0B,EAAA3rB,OAAuB3I,IAAA,CACzC,IAAAkB,EAAAozB,EAAAt0B,GACAC,EAAAiB,EAAA8Z,GACA/a,GAAA,sBACAA,EAAAuB,KAAAN,EAAAszB,EAAA5pB,GAAA,IAAA4pB,EAAA5pB,GAAA,WAAAu9E,EAAAzzB,WAAA,OACAjrD,MAAAvI,EAAAoI,IAcA,SAAAqqB,EAAA3Y,EAAApQ,EAAA0pB,EAAAC,GACA7oB,KAAAd,KACAc,KAAA6oB,SACA7oB,KAAA4oB,aACA5oB,KAAA4oB,aACA5oB,KAAA4oB,WAAA,IAEA5oB,KAAAsP,MAAAgZ,EAAAhZ,GAEA,IADA,IAAAutE,EAAA7nF,OAAAq5B,KAAA/F,GACAh0B,EAAA,EAAkBA,EAAAuoF,EAAA5/E,OAAoB3I,IACtC0L,KAAA68E,EAAAvoF,IACA+a,EAAAvZ,KAAA,KAAAkK,KAAA68E,EAAAvoF,IAzGA2zB,EAAAO,mBAAA,SAAAC,IACA,IAAA+zD,EAAAj+E,QAAAkqB,IACA+zD,EAAA1+E,KAAA2qB,IASAR,EAAAS,sBAAA,SAAAD,GACA,IAAAq0D,EAAAN,EAAAj+E,QAAAkqB,IACA,IAAAq0D,GACAN,EAAAj/E,OAAAu/E,EAAA,IAmGA70D,EAAA/xB,UAAA8yB,SAAA,SAAA1Z,GACAtP,KAAAsP,MAAAgZ,EAAAhZ,IAEAvb,EAAAD,QAAAm0B,EAKAA,EAAAK,OAAA,CACAC,MAAA,QACA/d,MAAA,QACAC,KAAA,OACAsyE,IAAA,MACAryE,KAAA,OACApB,MAAA,uCCvKA,IAAA0zE,EAAA,CAIAC,mBAAA,WACA,OAAAn8E,KAAAwU,SAAA7U,SAAA,IAAA8d,OAAA,QAIAy+D,EAAAE,WAAAF,EAAAC,qBAGAD,EAAAG,WAAA,SAAAC,GACA,OAAAA,EAAA5rB,OAAA10D,MAAA,MAAAC,IAAA,SAAAkS,GACA,OAAAA,EAAAuiD,UAIAwrB,EAAAK,cAAA,SAAAD,GAEA,OADAA,EAAAtgF,MAAA,QACAC,IAAA,SAAAH,EAAA0B,GACA,OAAAA,EAAA,OAAA1B,KAAA40D,OAAA,UAKAwrB,EAAAM,eAAA,SAAAF,GACA,IAAAG,EAAAP,EAAAK,cAAAD,GACA,OAAAG,KAAA,IAIAP,EAAAQ,iBAAA,SAAAJ,GACA,IAAAG,EAAAP,EAAAK,cAAAD,GAEA,OADAG,EAAAnnD,QACAmnD,GAIAP,EAAAS,YAAA,SAAAL,EAAA/+E,GACA,OAAA2+E,EAAAG,WAAAC,GAAAjkD,OAAA,SAAAlqB,GACA,WAAAA,EAAA1Q,QAAAF,MAOA2+E,EAAAU,eAAA,SAAAzuE,GAqBA,IApBA,IAAApQ,EAQAs4B,EAAA,CACAE,YANAx4B,EADA,IAAAoQ,EAAA1Q,QAAA,gBACA0Q,EAAAzQ,UAAA,IAAA1B,MAAA,KAEAmS,EAAAzQ,UAAA,IAAA1B,MAAA,MAIA,GACAw6B,UAAA9V,SAAA3iB,EAAA,OACA+T,SAAA/T,EAAA,GAAAmP,cACAqN,SAAAmG,SAAA3iB,EAAA,OACA04B,GAAA14B,EAAA,GACA8+E,QAAA9+E,EAAA,GACAw3B,KAAA7U,SAAA3iB,EAAA,OAEAwS,KAAAxS,EAAA,IAGAvK,EAAA,EAAiBA,EAAAuK,EAAA5B,OAAkB3I,GAAA,EACnC,OAAAuK,EAAAvK,IACA,YACA6iC,EAAAymD,eAAA/+E,EAAAvK,EAAA,GACA,MACA,YACA6iC,EAAA0mD,YAAAr8D,SAAA3iB,EAAAvK,EAAA,OACA,MACA,cACA6iC,EAAA2mD,QAAAj/E,EAAAvK,EAAA,GACA,MACA,YACA6iC,EAAAzB,MAAA72B,EAAAvK,EAAA,GACA6iC,EAAA4mD,iBAAAl/E,EAAAvK,EAAA,GACA,MACA,QACA6iC,EAAAt4B,EAAAvK,IAAAuK,EAAAvK,EAAA,GAIA,OAAA6iC,GAIA6lD,EAAAgB,eAAA,SAAA7mD,GACA,IAAAqD,EAAA,GACAA,EAAA18B,KAAAq5B,EAAAE,YACAmD,EAAA18B,KAAAq5B,EAAAG,WACAkD,EAAA18B,KAAAq5B,EAAAvkB,SAAAqrE,eACAzjD,EAAA18B,KAAAq5B,EAAA9b,UACAmf,EAAA18B,KAAAq5B,EAAAwmD,SAAAxmD,EAAAI,IACAiD,EAAA18B,KAAAq5B,EAAAd,MAEA,IAAAhlB,EAAA8lB,EAAA9lB,KAkBA,OAjBAmpB,EAAA18B,KAAA,OACA08B,EAAA18B,KAAAuT,GACA,SAAAA,GAAA8lB,EAAAymD,gBACAzmD,EAAA0mD,cACArjD,EAAA18B,KAAA,SACA08B,EAAA18B,KAAAq5B,EAAAymD,gBACApjD,EAAA18B,KAAA,SACA08B,EAAA18B,KAAAq5B,EAAA0mD,cAEA1mD,EAAA2mD,SAAA,QAAA3mD,EAAAvkB,SAAA5E,gBACAwsB,EAAA18B,KAAA,WACA08B,EAAA18B,KAAAq5B,EAAA2mD,WAEA3mD,EAAA4mD,kBAAA5mD,EAAAzB,SACA8E,EAAA18B,KAAA,SACA08B,EAAA18B,KAAAq5B,EAAA4mD,kBAAA5mD,EAAAzB,QAEA,aAAA8E,EAAAh9B,KAAA,MAKAw/E,EAAAkB,gBAAA,SAAAjvE,GACA,OAAAA,EAAAsP,OAAA,IAAAzhB,MAAA,MAKAkgF,EAAAmB,YAAA,SAAAlvE,GACA,IAAApQ,EAAAoQ,EAAAsP,OAAA,GAAAzhB,MAAA,KACAshF,EAAA,CACAtjD,YAAAtZ,SAAA3iB,EAAAu3B,QAAA,KAUA,OAPAv3B,IAAA,GAAA/B,MAAA,KAEAshF,EAAAvpF,KAAAgK,EAAA,GACAu/E,EAAAC,UAAA78D,SAAA3iB,EAAA,OACAu/E,EAAAznD,SAAA,IAAA93B,EAAA5B,OAAAukB,SAAA3iB,EAAA,SAEAu/E,EAAAE,YAAAF,EAAAznD,SACAynD,GAKApB,EAAAuB,YAAA,SAAAvjD,GACA,IAAA9C,EAAA8C,EAAAF,iBACAhgC,IAAAkgC,EAAAwjD,uBACAtmD,EAAA8C,EAAAwjD,sBAEA,IAAA7nD,EAAAqE,EAAArE,UAAAqE,EAAAsjD,aAAA,EACA,kBAAApmD,EAAA,IAAA8C,EAAAnmC,KAAA,IAAAmmC,EAAAqjD,WACA,IAAA1nD,EAAA,IAAAA,EAAA,YAMAqmD,EAAA5kD,YAAA,SAAAnpB,GACA,IAAApQ,EAAAoQ,EAAAsP,OAAA,GAAAzhB,MAAA,KACA,OACAoC,GAAAsiB,SAAA3iB,EAAA,OACAw5B,UAAAx5B,EAAA,GAAAN,QAAA,OAAAM,EAAA,GAAA/B,MAAA,mBACAqC,IAAAN,EAAA,KAMAm+E,EAAAyB,YAAA,SAAAC,GACA,mBAAAA,EAAAx/E,IAAAw/E,EAAAC,cACAD,EAAArmD,WAAA,aAAAqmD,EAAArmD,UACA,IAAAqmD,EAAArmD,UACA,IACA,IAAAqmD,EAAAv/E,IAAA,QAMA69E,EAAA/lD,UAAA,SAAAhoB,GAIA,IAHA,IACAirC,EADAkkC,EAAA,GAEAv/E,EAAAoQ,EAAAsP,OAAAtP,EAAA1Q,QAAA,QAAAzB,MAAA,KACAH,EAAA,EAAiBA,EAAAkC,EAAA5B,OAAkBN,IAEnCyhF,GADAlkC,EAAAr7C,EAAAlC,GAAA60D,OAAA10D,MAAA,MACA,GAAA00D,QAAAtX,EAAA,GAEA,OAAAkkC,GAIApB,EAAA4B,UAAA,SAAA5jD,GACA,IAAA/rB,EAAA,GACAipB,EAAA8C,EAAAF,YAIA,QAHAhgC,IAAAkgC,EAAAwjD,uBACAtmD,EAAA8C,EAAAwjD,sBAEAxjD,EAAA6jD,YAAA7pF,OAAAq5B,KAAA2M,EAAA6jD,YAAA5hF,OAAA,CACA,IAAAk7B,EAAA,GACAnjC,OAAAq5B,KAAA2M,EAAA6jD,YAAA59E,QAAA,SAAA69E,GACA9jD,EAAA6jD,WAAAC,GACA3mD,EAAAr6B,KAAAghF,EAAA,IAAA9jD,EAAA6jD,WAAAC,IAEA3mD,EAAAr6B,KAAAghF,KAGA7vE,GAAA,UAAAipB,EAAA,IAAAC,EAAA36B,KAAA,KAAiD,OAEjD,OAAAyR,GAKA+tE,EAAA+B,YAAA,SAAA9vE,GACA,IAAApQ,EAAAoQ,EAAAsP,OAAAtP,EAAA1Q,QAAA,QAAAzB,MAAA,KACA,OACAuU,KAAAxS,EAAAu3B,QACA4oD,UAAAngF,EAAArB,KAAA,OAIAw/E,EAAAiC,YAAA,SAAAjkD,GACA,IAAAhD,EAAA,GACAE,EAAA8C,EAAAF,YAYA,YAXAhgC,IAAAkgC,EAAAwjD,uBACAtmD,EAAA8C,EAAAwjD,sBAEAxjD,EAAAkkD,cAAAlkD,EAAAkkD,aAAAjiF,QAEA+9B,EAAAkkD,aAAAj+E,QAAA,SAAAk+E,GACAnnD,GAAA,aAAAE,EAAA,IAAAinD,EAAA9tE,MACA8tE,EAAAH,WAAAG,EAAAH,UAAA/hF,OAAA,IAAAkiF,EAAAH,UAAA,IACA,SAGAhnD,GAKAglD,EAAAoC,eAAA,SAAAnwE,GACA,IAAAowE,EAAApwE,EAAA1Q,QAAA,KACAM,EAAA,CACA+xB,KAAApP,SAAAvS,EAAAsP,OAAA,EAAA8gE,EAAA,QAEAC,EAAArwE,EAAA1Q,QAAA,IAAA8gF,GAOA,OANAC,GAAA,GACAzgF,EAAAqK,UAAA+F,EAAAsP,OAAA8gE,EAAA,EAAAC,EAAAD,EAAA,GACAxgF,EAAAtJ,MAAA0Z,EAAAsP,OAAA+gE,EAAA,IAEAzgF,EAAAqK,UAAA+F,EAAAsP,OAAA8gE,EAAA,GAEAxgF,GAGAm+E,EAAAuC,eAAA,SAAAtwE,GACA,IAAApQ,EAAAoQ,EAAAsP,OAAA,IAAAzhB,MAAA,KACA,OACA68B,UAAA96B,EAAAu3B,QACA6C,MAAAp6B,EAAA9B,IAAA,SAAA6zB,GACA,OAAApP,SAAAoP,EAAA,QAOAosD,EAAAwC,OAAA,SAAAC,GACA,IAAAhnC,EAAAukC,EAAAS,YAAAgC,EAAA,aACA,GAAAhnC,EACA,OAAAA,EAAAl6B,OAAA,IAIAy+D,EAAAjmD,iBAAA,SAAA9nB,GACA,IAAApQ,EAAAoQ,EAAAsP,OAAA,IAAAzhB,MAAA,KACA,OACA4iF,UAAA7gF,EAAA,GAAAmP,cACAzY,MAAAsJ,EAAA,KAOAm+E,EAAA2C,kBAAA,SAAAF,EAAAjnD,GAKA,OACAonD,KAAA,OACAC,aANA7C,EAAAS,YAAAgC,EAAAjnD,EACA,kBAKAz7B,IAAAigF,EAAAjmD,oBAKAimD,EAAA8C,oBAAA,SAAA3nD,EAAA4nD,GACA,IAAAvlD,EAAA,WAAAulD,EAAA,OAIA,OAHA5nD,EAAA0nD,aAAA5+E,QAAA,SAAA++E,GACAxlD,GAAA,iBAAAwlD,EAAAN,UAAA,IAAAM,EAAAzqF,MAAA,SAEAilC,GAKAwiD,EAAAiD,iBAAA,SAAAR,EAAAjnD,GACA,IAAAR,EAAAglD,EAAAG,WAAAsC,GAWA,MARA,CACA1B,kBAFA/lD,IAAA16B,OAAA0/E,EAAAG,WAAA3kD,KAEAW,OAAA,SAAAlqB,GACA,WAAAA,EAAA1Q,QAAA,kBACK,GAAAggB,OAAA,IACL6vC,SAAAp2B,EAAAmB,OAAA,SAAAlqB,GACA,WAAAA,EAAA1Q,QAAA,gBACK,GAAAggB,OAAA,MAMLy+D,EAAAkD,mBAAA,SAAA/nD,GACA,qBAAAA,EAAA4lD,iBAAA,iBACA5lD,EAAAi2B,SAAA,QAIA4uB,EAAAmD,mBAAA,SAAAV,GASA,IARA,IAAAW,EAAA,CACAC,OAAA,GACAC,iBAAA,GACAC,cAAA,GACAC,KAAA,IAGAhqD,EADAwmD,EAAAG,WAAAsC,GACA,GAAA3iF,MAAA,KACAxI,EAAA,EAAiBA,EAAAkiC,EAAAv5B,OAAkB3I,IAAA,CACnC,IAAA4jC,EAAA1B,EAAAliC,GACAmsF,EAAAzD,EAAAS,YACAgC,EAAA,YAAAvnD,EAAA,QACA,GAAAuoD,EAAA,CACA,IAAAzlD,EAAAgiD,EAAAmB,YAAAsC,GACAC,EAAA1D,EAAAS,YACAgC,EAAA,UAAAvnD,EAAA,KAQA,OANA8C,EAAA6jD,WAAA6B,EAAAzjF,OAAA+/E,EAAA/lD,UAAAypD,EAAA,OACA1lD,EAAAkkD,aAAAlC,EAAAS,YACAgC,EAAA,aAAAvnD,EAAA,KACAn7B,IAAAigF,EAAA+B,aACAqB,EAAAC,OAAAviF,KAAAk9B,GAEAA,EAAAnmC,KAAAopF,eACA,UACA,aACAmC,EAAAG,cAAAziF,KAAAk9B,EAAAnmC,KAAAopF,iBAWA,OAJAjB,EAAAS,YAAAgC,EAAA,aAAAx+E,QAAA,SAAAgO,GACAmxE,EAAAE,iBAAAxiF,KAAAk/E,EAAA5kD,YAAAnpB,MAGAmxE,GAKApD,EAAA2D,oBAAA,SAAAt6C,EAAAqmB,GACA,IAAAlyB,EAAA,GAGAA,GAAA,KAAA6L,EAAA,IACA7L,GAAAkyB,EAAA2zB,OAAApjF,OAAA,UACAu9B,GAAA,sBACAA,GAAAkyB,EAAA2zB,OAAAtjF,IAAA,SAAAi+B,GACA,YAAAlgC,IAAAkgC,EAAAwjD,qBACAxjD,EAAAwjD,qBAEAxjD,EAAAF,cACGt9B,KAAA,YAEHg9B,GAAA,uBACAA,GAAA,8BAGAkyB,EAAA2zB,OAAAp/E,QAAA,SAAA+5B,GACAR,GAAAwiD,EAAAuB,YAAAvjD,GACAR,GAAAwiD,EAAA4B,UAAA5jD,GACAR,GAAAwiD,EAAAiC,YAAAjkD,KAEA,IAAA4lD,EAAA,EAiBA,OAhBAl0B,EAAA2zB,OAAAp/E,QAAA,SAAA+5B,GACAA,EAAA4lD,aACAA,EAAA5lD,EAAA4lD,YAGAA,EAAA,IACApmD,GAAA,cAAAomD,EAAA,QAEApmD,GAAA,iBAEAkyB,EAAA4zB,kBACA5zB,EAAA4zB,iBAAAr/E,QAAA,SAAA4/E,GACArmD,GAAAwiD,EAAAyB,YAAAoC,KAIArmD,GAKAwiD,EAAA8D,2BAAA,SAAArB,GACA,IAcAv9B,EAdA6+B,EAAA,GACAX,EAAApD,EAAAmD,mBAAAV,GACAuB,GAAA,IAAAZ,EAAAG,cAAAhiF,QAAA,OACA0iF,GAAA,IAAAb,EAAAG,cAAAhiF,QAAA,UAGA06B,EAAA+jD,EAAAS,YAAAgC,EAAA,WACA1iF,IAAA,SAAAkS,GACA,OAAA+tE,EAAAoC,eAAAnwE,KAEAkqB,OAAA,SAAAt6B,GACA,gBAAAA,EAAAqK,YAEAqwB,EAAAN,EAAAh8B,OAAA,GAAAg8B,EAAA,GAAArI,KAGAswD,EAAAlE,EAAAS,YAAAgC,EAAA,oBACA1iF,IAAA,SAAAkS,GAEA,OADAA,EAAAsP,OAAA,IAAAzhB,MAAA,KACAC,IAAA,SAAAH,GACA,OAAA4kB,SAAA5kB,EAAA,QAGAskF,EAAAjkF,OAAA,GAAAikF,EAAA,GAAAjkF,OAAA,GAAAikF,EAAA,QAAA3nD,IACA2oB,EAAAg/B,EAAA,OAGAd,EAAAC,OAAAp/E,QAAA,SAAA+5B,GACA,WAAAA,EAAAnmC,KAAAopF,eAAAjjD,EAAA6jD,WAAAsC,IAAA,CACA,IAAAC,EAAA,CACAxwD,KAAA2I,EACA8nD,iBAAA7/D,SAAAwZ,EAAA6jD,WAAAsC,IAAA,KAEA5nD,GAAA2oB,IACAk/B,EAAAE,IAAA,CAAwB1wD,KAAAsxB,IAExB6+B,EAAAjjF,KAAAsjF,GACAJ,KACAI,EAAAxqE,KAAAwK,MAAAxK,KAAA0K,UAAA8/D,KACAG,IAAA,CACA3wD,KAAA2I,EACArgB,UAAA+nE,EAAA,oBAEAF,EAAAjjF,KAAAsjF,OAIA,IAAAL,EAAA9jF,QAAAs8B,GACAwnD,EAAAjjF,KAAA,CACA8yB,KAAA2I,IAKA,IAAAyL,EAAAg4C,EAAAS,YAAAgC,EAAA,MAeA,OAdAz6C,EAAA/nC,SAEA+nC,EADA,IAAAA,EAAA,GAAAzmC,QAAA,WACAijB,SAAAwjB,EAAA,GAAAzmB,OAAA,OACK,IAAAymB,EAAA,GAAAzmC,QAAA,SAEL,IAAAijB,SAAAwjB,EAAA,GAAAzmB,OAAA,WACA,UAEAzjB,EAEAimF,EAAA9/E,QAAA,SAAAk3B,GACAA,EAAAqpD,WAAAx8C,KAGA+7C,GAIA/D,EAAAyE,oBAAA,SAAAhC,GACA,IAAAiC,EAAA,GAIAC,EAAA3E,EAAAS,YAAAgC,EAAA,WACA1iF,IAAA,SAAAkS,GACA,OAAA+tE,EAAAoC,eAAAnwE,KAEAkqB,OAAA,SAAAp9B,GACA,gBAAAA,EAAAmN,YACO,GACPy4E,IACAD,EAAAE,MAAAD,EAAApsF,MACAmsF,EAAA9wD,KAAA+wD,EAAA/wD,MAKA,IAAAixD,EAAA7E,EAAAS,YAAAgC,EAAA,gBACAiC,EAAAI,YAAAD,EAAA5kF,OAAA,EACAykF,EAAAK,SAAA,IAAAF,EAAA5kF,OAIA,IAAA+kF,EAAAhF,EAAAS,YAAAgC,EAAA,cAGA,OAFAiC,EAAAM,MAAA/kF,OAAA,EAEAykF,GAKA1E,EAAAiF,UAAA,SAAAxC,GACA,IAAA5gF,EACAqjF,EAAAlF,EAAAS,YAAAgC,EAAA,WACA,OAAAyC,EAAAjlF,OAEA,OAAYivB,QADZrtB,EAAAqjF,EAAA,GAAA3jE,OAAA,GAAAzhB,MAAA,MACY,GAAA+vC,MAAAhuC,EAAA,IAEZ,IAAAsjF,EAAAnF,EAAAS,YAAAgC,EAAA,WACA1iF,IAAA,SAAAkS,GACA,OAAA+tE,EAAAoC,eAAAnwE,KAEAkqB,OAAA,SAAAipD,GACA,eAAAA,EAAAl5E,YAEA,OAAAi5E,EAAAllF,OAAA,EAEA,CAAYivB,QADZrtB,EAAAsjF,EAAA,GAAA5sF,MAAAuH,MAAA,MACY,GAAA+vC,MAAAhuC,EAAA,SAFZ,GAUAm+E,EAAAqF,kBAAA,WACA,OAAAvhF,KAAAwU,SAAA7U,WAAA8d,OAAA,OAQAy+D,EAAAsF,wBAAA,SAAAC,EAAAC,EAAAC,GACA,IACAz+D,OAAAlpB,IAAA0nF,IAAA,EAQA,mBAFAC,GAAA,qBAGA,KARAF,GAGAvF,EAAAqF,qBAKA,IAAAr+D,EACA,yCAKAg5D,EAAA0F,kBAAA,SAAAC,EAAAj2B,EAAAr7C,EAAA6a,GACA,IAAAsO,EAAAwiD,EAAA2D,oBAAAgC,EAAAt8C,KAAAqmB,GAyBA,GAtBAlyB,GAAAwiD,EAAAkD,mBACAyC,EAAAC,YAAAC,sBAGAroD,GAAAwiD,EAAA8C,oBACA6C,EAAAG,cAAAD,qBACA,UAAAxxE,EAAA,oBAEAmpB,GAAA,SAAAmoD,EAAAlqC,IAAA,OAEAkqC,EAAAtqD,UACAmC,GAAA,KAAAmoD,EAAAtqD,UAAA,OACGsqD,EAAAI,WAAAJ,EAAAK,YACHxoD,GAAA,iBACGmoD,EAAAI,UACHvoD,GAAA,iBACGmoD,EAAAK,YACHxoD,GAAA,iBAEAA,GAAA,iBAGAmoD,EAAAI,UAAA,CAEA,IAAAphC,EAAA,QAAAz1B,EAAAhtB,GAAA,IACAyjF,EAAAI,UAAAl2C,MAAA3tC,GAAA,OACAs7B,GAAA,KAAAmnB,EAGAnnB,GAAA,UAAAmoD,EAAAM,uBAAA,GAAAryD,KACA,IAAA+wB,EACAghC,EAAAM,uBAAA,GAAA3B,MACA9mD,GAAA,UAAAmoD,EAAAM,uBAAA,GAAA3B,IAAA1wD,KACA,IAAA+wB,EACAnnB,GAAA,oBACAmoD,EAAAM,uBAAA,GAAAryD,KAAA,IACA+xD,EAAAM,uBAAA,GAAA3B,IAAA1wD,KACA,QAUA,OANA4J,GAAA,UAAAmoD,EAAAM,uBAAA,GAAAryD,KACA,UAAAosD,EAAAE,WAAA,OACAyF,EAAAI,WAAAJ,EAAAM,uBAAA,GAAA3B,MACA9mD,GAAA,UAAAmoD,EAAAM,uBAAA,GAAA3B,IAAA1wD,KACA,UAAAosD,EAAAE,WAAA,QAEA1iD,GAIAwiD,EAAAkG,aAAA,SAAAzD,EAAAjnD,GAGA,IADA,IAAAR,EAAAglD,EAAAG,WAAAsC,GACAnrF,EAAA,EAAiBA,EAAA0jC,EAAA/6B,OAAkB3I,IACnC,OAAA0jC,EAAA1jC,IACA,iBACA,iBACA,iBACA,iBACA,OAAA0jC,EAAA1jC,GAAAiqB,OAAA,GAKA,OAAAia,EACAwkD,EAAAkG,aAAA1qD,GAEA,YAGAwkD,EAAAmG,QAAA,SAAA1D,GAGA,OAFAzC,EAAAG,WAAAsC,GACA,GAAA3iF,MAAA,KACA,GAAAyhB,OAAA,IAGAy+D,EAAAoG,WAAA,SAAA3D,GACA,YAAAA,EAAA3iF,MAAA,WAGAkgF,EAAA9mD,WAAA,SAAAupD,GACA,IACA5gF,EADAm+E,EAAAG,WAAAsC,GACA,GAAAlhE,OAAA,GAAAzhB,MAAA,KACA,OACAupC,KAAAxnC,EAAA,GACAw3B,KAAA7U,SAAA3iB,EAAA,OACA+T,SAAA/T,EAAA,GACAy3B,IAAAz3B,EAAAjD,MAAA,GAAA4B,KAAA,OAIAw/E,EAAAqG,WAAA,SAAA5D,GACA,IACA5gF,EADAm+E,EAAAS,YAAAgC,EAAA,SACAlhE,OAAA,GAAAzhB,MAAA,KACA,OACA8jD,SAAA/hD,EAAA,GACAoiD,UAAApiD,EAAA,GACAykF,eAAA9hE,SAAA3iB,EAAA,OACA0kF,QAAA1kF,EAAA,GACA2kF,YAAA3kF,EAAA,GACA8+E,QAAA9+E,EAAA,KAKAm+E,EAAAyG,WAAA,SAAArG,GACA,oBAAAA,GAAA,IAAAA,EAAAngF,OACA,SAGA,IADA,IAAA+6B,EAAAglD,EAAAG,WAAAC,GACA9oF,EAAA,EAAiBA,EAAA0jC,EAAA/6B,OAAkB3I,IACnC,GAAA0jC,EAAA1jC,GAAA2I,OAAA,SAAA+6B,EAAA1jC,GAAA+I,OAAA,GACA,SAIA,UAKAtJ,EAAAD,QAAAkpF,iBCrsBA,IAAA0G,EAAA3vF,EAAAD,QAAA,CACAqmD,EAAA,EACAtlD,KAAA,UACA8uF,IAAA,YAEA5uF,EAAA,EAEAF,KAAA,SACA8uF,IAAA,wCACAC,MAAA,sEACA/6D,OAAA,wBAGAxyB,EAAA,EAAOxB,KAAA,SACPP,EAAA,EAAOO,KAAA,gBACPgvF,EAAA,EAAOhvF,KAAA,QACPoK,EAAA,EAAOpK,KAAA,UACPuB,EAAA,EAAOvB,KAAA,UACPivF,EAAA,EAAOjvF,KAAA,cACPO,EAAA,EAAOP,KAAA,YAEPW,EAAA,EACAX,KAAA,SACA8uF,IAAA,eACAC,MAAA,iBACA/6D,OAAA,UAEAl0B,EAAA,EACAE,KAAA,aACA8uF,IAAA,mBACAC,MAAA,iBACA/6D,OAAA,eAEA5lB,EAAA,EACAnF,KAAA,YACA6lF,IAAA,4BACAC,MAAA,iBACA/6D,OAAA,UAEAn0B,EAAA,EAGAivF,IAAA,mCACAC,MAAA,sCACA/6D,OAAA,gBAEA7lB,EAAA,CACA,CACAlF,KAAA,MACA6lF,IAAA,0DACAC,MAAA,sCACA/6D,OAAA,SAAA9zB,GACA,OAAAA,EAAA,SACA,qBACAA,EAAAgvF,KACA,kBACA,iBAGA,CAEAjmF,KAAA,OACA6lF,IAAA,wBACAC,MAAA,qBACA/6D,OAAA,cAEA,CACAh0B,KAAA,UACA8uF,IAAA,gBACA96D,OAAA,cAEA,CACAh0B,KAAA,OACA8uF,IAAA,sCACAC,MAAA,qCACA/6D,OAAA,SAAA9zB,GACA,aAAAA,EAAA4oF,QACA,qBACA,YAGA,CACA7/E,KAAA,eACA6lF,IAAA,kCACAC,MAAA,oBACA/6D,OAAA,yBAEA,CACA/qB,KAAA,SACA6lF,IAAA,6CACAC,MAAA,6BACA/6D,OAAA,SAAA9zB,GACA,aAAAA,EAAAgmD,QACA,mBACA,kBAGA,CAEAj9C,KAAA,MACA6lF,IAAA,6CACAC,MAAA,qCACA/6D,OAAA,SAAA9zB,GACA,mBAAAA,EAAAsjC,UAAA,mBAAAtjC,EAAAyG,OAAA,YAGA,CACAsC,KAAA,SACA6lF,IAAA,0CACAC,MAAA,wCACA/6D,OAAA,SAAA9zB,GACA,aAAAA,EAAAivF,cACA,qBACA,oBAGA,CACAnvF,KAAA,QACA8uF,IAAA,eACA96D,OAAA,YAEA,CACAh0B,KAAA,MACA8uF,IAAA,gBACA96D,OAAA,UAEA,CACAh0B,KAAA,OACA8uF,IAAA,aACA96D,OAAA,WAEA,CACAh0B,KAAA,QACA8uF,IAAA,eACA96D,OAAA,YAEA,CACAh0B,KAAA,WACA8uF,IAAA,kBACA96D,OAAA,eAEA,CACAh0B,KAAA,YACA8uF,IAAA,0CAEA,CACA9uF,KAAA,UACA8uF,IAAA,eAEA,CACA9uF,KAAA,WACA8uF,IAAA,mBACA96D,OAAA,gBAEA,CACAh0B,KAAA,SACA8uF,IAAA,iBACA96D,OAAA,cAEA,CACAh0B,KAAA,cACA8uF,IAAA,2BACAC,MAAA,gBACA/6D,OAAA,qBAEA,CAKA/qB,KAAA,aACA6lF,IAAA,+KACAC,MAAA,wIACA/6D,OAAA,SAAA9zB,GACA,IAAAkP,EAAA,qCAaA,OAXAA,GAAA,MAAAlP,EAAAkvF,MAAA,4BAGAhgF,GAAA,MAAAlP,EAAA0iC,QAAA,mBAEA,MAAA1iC,EAAAyiC,aACAvzB,GAAA,kBAGAA,GAAA,MAAAlP,EAAA,oCACAkP,GAAA,MAAAlP,EAAA,0CAIA,CACAF,KAAA,kBACA8uF,IAAA,wBAEA,CACA9uF,KAAA,mBACA8uF,IAAA,0BACA96D,OAAA,wBAEA,CACAh0B,KAAA,aACA8uF,IAAA,qBACA96D,OAAA,kBAEA,CACA/qB,KAAA,QACA6lF,IAAA,iCACAC,MAAA,2BACA/6D,OAAA,SAAA9zB,GACA,IAAAkP,EAAA,UAOA,OANA,MAAAlP,EAAAmU,YACAjF,GAAA,MACA,MAAAlP,EAAAQ,QACA0O,GAAA,QAGAA,IAGA,CAEAnG,KAAA,aAEA6lF,IAAA,mEACAC,MAAA,sBACA/6D,OAAA,oBAEA,CACAh0B,KAAA,eACA8uF,IAAA,gCACAC,MAAA,qBACA/6D,OAAA,wBAEA,CACA/qB,KAAA,SACA6lF,IAAA,oBACAC,MAAA,gBACA/6D,OAAA,eAEA,CACAh0B,KAAA,UACA8uF,IAAA,eAEA,CACA9uF,KAAA,YACA8uF,IAAA,iBAEA,CACA9uF,KAAA,UACA8uF,IAAA,uCACAC,MAAA,yCACA/6D,OAAA,SAAA9zB,GACA,aAAAA,EAAAmvF,eACA,mBACA,kBAGA,CACArvF,KAAA,cACA8uF,IAAA,0BACA96D,OAAA,oBAEA,CACA/qB,KAAA,OACA6lF,IAAA,sCACAC,MAAA,4BACA/6D,OAAA,SAAA9zB,GACA,OAAAA,EAAA,oCAGA,CAGA+I,KAAA,aACA6lF,IAAA,IAAAQ,OAEA,wKAMAP,MAAA,uCACA/6D,OAAA,SAAA9zB,GACA,4BAAAA,EAAAqvF,KAAA,eAGA,CAEAvvF,KAAA,YACA8uF,IAAA,IAAAQ,OAEA,2FAQAP,MAAA,gCACA/6D,OAAA,SAAA9zB,GACA,yBAAAA,EAAAqvF,KAAA,eAGA,CAIAvvF,KAAA,eACA8uF,IAAA,kCACAC,MAAA,UACA/6D,OAAA,iBAEA,CAGAh0B,KAAA,YACA8uF,IAAA,8BACA96D,OAAA,gBAEA,CACA/qB,KAAA,UACA8lF,MAAA,aAMA5uF,OAAAq5B,KAAAq1D,GAAAziF,QAAA,SAAApL,GACA6tF,EAAA7tF,GACAoL,QAAA,SAAAlF,GACAA,EAAA4nF,MACA5nF,EAAA4nF,IAAA,QAEA5nF,EAAA8sB,SACA9sB,EAAA8sB,OAAA,2BC9UA,IAAMw7D,EAAkBrpF,EAAQ,KAK1BspF,EAAa,aACbC,EAAY,YAOZC,EAAgB,SAAS33C,GAE3B7sC,KAAK6sC,MAAQA,EAGb7sC,KAAKykF,SAAW,KAIhBzkF,KAAKuD,KAAO,KAIZvD,KAAKnL,KAAO,KAGZmL,KAAK0kF,UAAY,MAQrB,SAASC,EAAcC,GACnB,QAA+B9pF,IAA3B8pF,EAAcH,SACd,MAAM,IAAItmF,MAAM,yEAGpBymF,EAAcH,SAAS5+D,QACvB++D,EAAcF,UAAY,IAAIpyE,KAQlC,SAASuyE,EAAaD,GAClB,QAA+B9pF,IAA3B8pF,EAAcH,SACd,MAAM,IAAItmF,MAAM,wEAGpBymF,EAAcH,SAAS91D,OAO3B,SAASm2D,IACL,GAAIC,cAAcC,gBAAgBV,GAC9B,OAAOA,EACJ,GAAIS,cAAcC,gBAAgBT,GACrC,OAAOA,EAEX,MAAM,IAAIpmF,MACN,6DASR,SAAS8mF,EAAcC,GAGnBllF,KAAKmlF,UAAY,GAGjBnlF,KAAKolF,SAAWN,IAGhB9kF,KAAKqlF,aAAc,EAGnBrlF,KAAKklF,gBAAkBA,EAM3BD,EAAcH,yBAA2BA,EAOzCG,EAAc/uF,UAAUu2C,SAAW,SAASI,GACxC,GAAIA,EAAMqK,eAAgB,CAEtB,IAAM0tC,EAAgB5kF,KAAKslF,yBAAyBz4C,GAIpD7sC,KAAKmlF,UAAUrnF,KAAK8mF,GAGpB5kF,KAAKulF,cAIDvlF,KAAKqlF,aACLV,EAAcC,KAU1BK,EAAc/uF,UAAUovF,yBAA2B,SAASz4C,GACxD,IAAM+3C,EAAgB,IAAIJ,EAAc33C,GAGlC24C,EAAiBZ,EAAc/3C,MAAM44C,oBACrCv5D,EA2KV,WACI,GAA2B,oBAAhBkd,YACP,OAAO,IAAIA,YAEf,MAAM,IAAIjrC,MAAM,qCA/KDunF,GAmBf,OAjBAF,EAAe3/C,iBAAiB5kC,QAAQ,SAAAzL,GAAC,OAAI02B,EAAOugB,SAASj3C,KAG7DovF,EAAcH,SAAW,IAAIM,cAAc74D,EACvC,CAAEy5D,SAAU3lF,KAAKolF,WAIrBR,EAAcrhF,KAAO,GAGrBqhF,EAAcH,SAASmB,gBAAkB,SAASC,GAC1CA,EAAUtiF,KAAK0pB,KAAO,GACtB23D,EAAcrhF,KAAKzF,KAAK+nF,EAAUtiF,OAInCqhF,GAaXK,EAAc/uF,UAAUujF,YAAc,SAAS5sC,GAC3C,IAAIA,EAAM26B,eAAV,CAIA,IACIlzE,EADE8kC,EAAQp5B,KAAKmlF,UAGnB,IAAK7wF,EAAI,EAAGA,EAAI8kC,EAAMn8B,OAAQ3I,IAC1B,GAAI8kC,EAAM9kC,GAAGu4C,MAAM8tB,qBAAuB9tB,EAAM8tB,mBAAoB,CAChE,IAAMmrB,EAAmB1sD,EAAM9kC,GAE3B0L,KAAKqlF,YACLR,EAAaiB,GAGb1sD,EAAM77B,OAAOjJ,EAAG,GAM5B0L,KAAKulF,gBAQTN,EAAc/uF,UAAUqvF,YAAc,WAClC,IAAMlzC,EAAaryC,KAAKklF,gBAExBllF,KAAKmlF,UAAUlkF,QAAQ,SAAA2jF,GACnB,GAAIA,EAAc/3C,MAAM3a,UACpB0yD,EAAc/vF,KAAO,sBAClB,CACH,IAAMqK,EAAK0lF,EAAc/3C,MAAM8tB,mBAEzB8b,EADcpkC,EAAW6oB,mBAAmBh8D,GACtB6mF,iBAEZ,cAAZtP,IACAmO,EAAc/vF,KAAO4hF,OASrCwO,EAAc/uF,UAAU2vB,MAAQ,WAC5B,GAAI7lB,KAAKqlF,YACL,MAAM,IAAIlnF,MAAM,sCAKpB6B,KAAKqlF,aAAc,EAGnBrlF,KAAKmlF,UAAUlkF,QAAQ,SAAA2jF,GAAa,OAAID,EAAcC,KAGtDp1E,QAAQH,IAAR,2DAAA/R,OAEQ0C,KAAKmlF,UAAUloF,OAFvB,wBAQJgoF,EAAc/uF,UAAUy4B,KAAO,WAE3B3uB,KAAKqlF,aAAc,EAGnBrlF,KAAKmlF,UAAUlkF,QAAQ,SAAA2jF,GAAa,OAAIC,EAAaD,KACrDp1E,QAAQH,IAAI,sBAMhB41E,EAAc/uF,UAAU8vF,SAAW,WAAW,IAAAt+C,EAAA1nC,KAC1CA,KAAKmlF,UAAUlkF,QAAQ,SAAA2jF,GACnB,IAAMxH,EAAO,IAAI6I,KAAKrB,EAAcrhF,KAAM,CAAE8N,KAAMq2B,EAAK09C,WACjDt1C,EAAM/G,IAAIC,gBAAgBo0C,GAC1Bp6E,EAAImD,SAASkG,cAAc,KAEjClG,SAAS0C,KAAKuD,YAAYpJ,GAC1BA,EAAEoG,MAAQ,gBACVpG,EAAEkjF,KAAOp2C,EACT9sC,EAAEgjF,SAAF,QAAA1oF,OAAqBoqC,EAAK09C,SAAStoF,MAAM,KAAK,IAC9CkG,EAAEmjF,QACFjyF,OAAO60C,IAAIgH,gBAAgBD,MASnCm1C,EAAc/uF,UAAUkwF,oBAAsB,WAAW,IAAA16C,EAAA1rC,KACrD,GAAIA,KAAKqlF,YACL,MAAM,IAAIlnF,MACN,kEAIR6B,KAAKulF,cAEL,IAAMnsD,EAAQ,GAUd,OARAp5B,KAAKmlF,UAAUlkF,QACX,SAAAwjF,GAAQ,OACJrrD,EAAMt7B,KACF,IAAIumF,EACA,IAAI4B,KAAKxB,EAASlhF,KAAM,CAAE8N,KAAMq6B,EAAK05C,WACrCX,EAAS5vF,KACT4vF,EAASC,cAElBtrD,GAOX6rD,EAAc/uF,UAAUmwF,YAAc,WAClC,OAAOrmF,KAAKolF,UAkBhBrxF,EAAOD,QAAUmxF,iBC3RjBlxF,EAAOD,QAlCU,CAsBbwyF,gBAtBa,SAsBGC,EAAYv2D,EAAUw2D,GAGlC,MAAmB,iBAFPD,EAGD,KAHCA,EAMDnpF,QAAQ,SAAU4yB,GACxB5yB,QAAQ,iBAAiC,IAAhBopF,mCC9BtCpyF,EAAAQ,EAAAmxB,EAAA,sBAAA0gE,IAAA,IAAAC,EAAAtyF,EAAA,GAAAuyF,EAAAvyF,EAAA,IAAAwyF,EAAAxyF,EAAA,IAAAyyF,EAAAzyF,EAAA,GAAA0yF,EAAA1yF,EAAA,IAmBe,SAASqyF,EAAgBM,EAAO76B,EAAO56C,GAClDtR,KAAK+mF,MAAQA,EACb/mF,KAAKksD,MAAQA,EACblsD,KAAKsR,QAAUA,EACftR,KAAKoqB,KAAO,IAAI6hC,IAAK36C,EAAS46C,GAG9BlsD,KAAKqqC,iBAAiBgkB,oBAClB,SAAC24B,EAASz3E,EAAK69C,EAAaruB,GACxB5U,IAAW0K,oBACP+J,YAA4BooD,EAASz3E,EAAKwvB,MAItD/+B,KAAKqqC,iBAAiBgkB,0BAClB,SAAA9+C,GAMQA,GACA4a,IAAW+K,cACP+xD,IACA,CAAE/3E,QAASK,IAEnB4a,IAAWmJ,QACP1c,KAAK0K,UACD,CACIpiB,GAAI+nF,IACJ13E,WAUxBk3E,EAAgBvwF,UAAUuf,QAAU,WAAuB,IAAdnE,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GACnDmC,KAAKoqB,KAAK3U,QAAQnE,EAAQpS,GAAIoS,EAAQ88C,WAU1Cq4B,EAAgBvwF,UAAUkgB,OAAS,SAAS9E,GACxCtR,KAAKoqB,KAAKhU,OAAO9E,IAMrBm1E,EAAgBvwF,UAAUijB,WAAa,WAAkB,IAAA+tE,GAKrDA,EAAAlnF,KAAKoqB,MAAKjR,WAAVpb,MAAAmpF,EAAArpF,YAOJ4oF,EAAgBvwF,UAAUixF,SAAW,SAASj7B,GAC1ClsD,KAAKksD,MAAQA,GAWjBu6B,EAAgBvwF,UAAUkxF,oBAAsB,SAASvyF,EAAMyc,GAC3D,OAAO,IAAI+1E,IAAgB,CACvBxyF,OACA2G,OAAQ8V,EACRgM,WAAYtd,QASpBymF,EAAgBvwF,UAAUm0C,iBAAmB,SAASvV,EAAOzI,GACzDrsB,KAAKoqB,KAAKgpB,YAAYte,EAAOzI,IAQjCo6D,EAAgBvwF,UAAU+pD,oBAAsB,SAASnrB,EAAOzI,GAC5DrsB,KAAKoqB,KAAKqC,eAAeqI,EAAOzI,IAMpCo6D,EAAgBvwF,UAAUoxF,mBAAqB,WAC3C,OAAOtnF,KAAKoqB,KAAKgiC,iBAUrBq6B,EAAgBvwF,UAAU42D,WAAa,SAASy6B,GAAyB,IAAhBC,EAAgB3pF,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,IAAAA,UAAA,GACrE,OAAOmC,KAAKoqB,KAAKsiC,KAAKI,WAAWy6B,EAASC,IAU9Cf,EAAgBvwF,UAAUuxF,cAAgB,SAASF,GAAyB,IAAhBC,EAAgB3pF,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,IAAAA,UAAA,GACxE,OAAOmC,KAAKoqB,KAAKsiC,KAAK+6B,cAAcF,EAASC,gqBClGjD,IAAM1+D,EAASH,oBAAUQ,GAiDV,SAASk+D,EAAgB/1E,GACpC,IAAKA,EAAQzc,MAAQyc,EAAQzc,KAAKmZ,gBAAkBsD,EAAQzc,KAAM,CAC9D,IAAMkwC,EACA,8GAIN,MADAjc,EAAOrZ,MAAMs1B,GACP,IAAI5mC,MAAM4mC,GAEpB/kC,KAAKuqB,aAAe,IAAIC,IACxBxqB,KAAKsR,QAAUA,EACftR,KAAK0nF,aAAe,IAAIC,IAA4B3nF,MACpDA,KAAKg7D,aAAe,GACpBh7D,KAAK4nF,MAAMt2E,GACXtR,KAAK6nF,mBAAqB,IAAIC,IAAmB9nF,MAMjDA,KAAK+nF,iBAAmB,KACxB/nF,KAAKgoF,oBAAsB,KAC3BhoF,KAAKioF,YAAc,KACnBjoF,KAAKkoF,sBAAuB,EAC5BloF,KAAKmoF,aAAc,EACnBnoF,KAAKooF,iBAAkB,EACvBpoF,KAAKqoF,iBAAkB,EACvBroF,KAAKsoF,iBAAmB,CACpB9lD,OAAO,EACPlB,OAAO,GAEXthC,KAAKuoF,gBAAiB,EAMtBvoF,KAAKwoF,YAAa,EAGlBxoF,KAAKg1B,WAAa,GAOlBh1B,KAAKyoF,kBACC,IAAIC,IAAkB1oF,KAAMA,KAAKuqB,aAAcjZ,GAMrDtR,KAAK2oF,oBACC,IAAIC,IAAoB5oF,KAAMsR,EAAQ9V,OAAOqtF,cAAgB,IAKnE7oF,KAAK8oF,4BAA6B,EAKlC9oF,KAAK+oF,sBAAwB,IAAIC,IAAsBhpF,MAUvDA,KAAKipF,qBAAuB,KAE5B,IAAMC,EACA1nE,SAASlQ,EAAQ9V,OAAOiyD,KAAOn8C,EAAQ9V,OAAOiyD,IAAI07B,eAAgB,IAOxEnpF,KAAKmpF,eAAiB/mF,MAAM8mF,GAAS,EAAIA,EACzCpgE,EAAOnZ,KAAP,mBAAArS,OAA+B0C,KAAKmpF,iBAQpCnpF,KAAKopF,4BAA6B,EAQlCppF,KAAKytD,KAAM,EAMXztD,KAAKqpF,iBAAmB,KAExBrpF,KAAKspF,kBAAoB,IAAIC,IAAWvpF,KAAK4xD,MAC7C5xD,KAAKwpF,iBAAmB,IAAIC,IAAiBzpF,KAAK4xD,MAItDy1B,EAAgBnxF,UAAUyhD,YAAc0vC,EAOxCA,EAAgBnxF,UAAU0xF,MAAQ,WAAuB,IAAAlgD,EAAA1nC,KAAdsR,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GAG7CyT,EAAQgM,aACRtd,KAAKsd,WAAahM,EAAQgM,WAC1Btd,KAAKoqB,KAAOpqB,KAAKsd,WAAW8M,KAG5BpqB,KAAK0nF,aAAagC,sBAR+B,IAW7CluF,EAAWwE,KAAKsR,QAAhB9V,OAwDR,GAtDAwE,KAAK4xD,KAAO5xD,KAAKoqB,KAAK2lC,WAAW/vD,KAAKsR,QAAQzc,KAAM2G,GAGpDwE,KAAK2pF,4BACC3pF,KAAK2pF,4BAA4B7zF,KAAKkK,MAC5CA,KAAK4xD,KAAKxe,YACN+e,yBAAmCnyD,KAAK2pF,6BAE5C3pF,KAAK4pF,yBAA2B5pF,KAAK4pF,yBAAyB9zF,KAAKkK,MACnEA,KAAK4xD,KAAKxe,YACN+e,sBAAgCnyD,KAAK4pF,0BAEzC5pF,KAAK6pF,4BACC7pF,KAAK6pF,4BAA4B/zF,KAAKkK,MAC5CA,KAAK4xD,KAAKxe,YACN+e,yBAAmCnyD,KAAK6pF,6BAE5C7pF,KAAK8pF,kBAAoB9pF,KAAK8pF,kBAAkBh0F,KAAKkK,MACrDA,KAAK4xD,KAAKxe,YAAY+e,gCAClBnyD,KAAK8pF,mBAET9pF,KAAK+pF,WAAa,IAAIC,IAAWxuF,EAAOuuF,YAAc,IAEtD/pF,KAAKiqF,QAAU,IAAIC,IACflqF,KACAxE,EACA,SAAC0T,EAASkN,GACN,IACIsrB,EAAK0P,YACDloC,EAASkN,GAAI,GACnB,MAAO3M,GACLqZ,EAAOlZ,KAAK,iDAInB5P,KAAKm4D,MACNn4D,KAAKm4D,IAAM,IAAI/lB,IAAIpyC,KAAMsR,GACzBtR,KAAK0nF,aAAayC,qBAGtBnqF,KAAKoqF,4BACC,IAAIlyB,IACFl4D,KAAKm4D,IACLn4D,KACA,CAKIu4D,eAAgB/8D,EAAO6uF,8BACvB/xB,kBAAmB98D,EAAO8uF,mCAEtCtqF,KAAKoqF,4BAA4Bt1E,QAE5B9U,KAAKyvB,WAAY,CAOlB,IAAM86D,EAAiBr2F,OAAO2vB,SAE1BkG,EAAqB/pB,KAAKm6D,WAE1B3+D,EAAOgvF,0BAA4BhvF,EAAOw6E,cAC1CjsD,EAAqBvuB,EAAOw6E,aAGhCh2E,KAAKyvB,WAAa,IAAItF,IAAWnqB,KAAKoqB,KAAM,CACxCL,qBACAkB,yBACIzvB,EAAOyvB,0BACCs/D,GAAkBA,EAAej7B,UACjC9zD,EAAO2zD,OAAS3zD,EAAO2zD,MAAMppD,OACzCglB,gBAAiBvvB,EAAOivF,yBACxB7gE,YAAapuB,EAAOouB,YACpBC,gBAAiBruB,EAAOquB,gBACxBmG,SAAUhwB,KAAKsR,QAAQzc,KACvBi1B,qBAAsBtuB,EAAOkvF,cAC7BzgE,gBAAiBzuB,EAAOyuB,gBACxBC,mBAAoB1uB,EAAO0uB,qBAInClqB,KAAK0nF,aAAaiD,yBAIlB3qF,KAAK0nF,aAAakD,2BAEdpvF,EAAOqvF,sBAEP,IAAIC,IACA9qF,KACA,kBACI0nC,EAAKnd,aAAa2C,KAAK+nB,sBAG/B,iBAAkBz5C,GAClBwE,KAAK+qF,SAASvvF,EAAOwvF,cAOzBhrF,KAAKirF,aAAe,IAAIC,IAAqBlrF,MAG7CA,KAAKmrF,4BAA8B,IAAIC,IAA4BprF,MAE/DxE,GAAUA,EAAO61D,gBAAkB71D,EAAO61D,eAAeg6B,YACzDrrF,KAAKsrF,4BACD,SAAU9vF,EAAO61D,eAAeg6B,aAQ5ChE,EAAgBnxF,UAAUsH,KAAO,SAAS4wD,GAAU,IAAA1iB,EAAA1rC,KAC5CA,KAAK4xD,MACL5xD,KAAK4xD,KAAKp0D,KAAK4wD,GAAUrmB,KAAK,kBAAM2D,EAAK6/C,wBAYjDlE,EAAgBnxF,UAAUs1F,2BAA6B,WAAkB,QAAA7qD,EAAA9iC,UAAAZ,OAANW,EAAM,IAAAwC,MAAAugC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANhjC,EAAMgjC,GAAA/iC,UAAA+iC,GACrE,OAAO4qD,IAA2BztF,MAAMiC,KAAMpC,IAMlDypF,EAAgBnxF,UAAUu1F,SAAW,WACjC,OAAOzrF,KAAK4xD,MAAQ5xD,KAAK4xD,KAAK85B,QAOlCrE,EAAgBnxF,UAAUy1F,aAAe,WACrC,OAAO/lD,QAAQ5lC,KAAKsR,QAAQ9V,OAAOiyD,KAAOztD,KAAKsR,QAAQ9V,OAAOiyD,IAAIirB,eAGxB,IAA5B14E,KAAKsR,QAAQ9V,OAAOiyD,KAQtC45B,EAAgBnxF,UAAU01F,qBAAuB,WAC7C,OAAOhmD,QAAQ5lC,KAAKsR,QAAQ9V,OAAOgkE,SAC5Bx/D,KAAKsR,QAAQ9V,OAAOgkE,QAAQqsB,cAOvCxE,EAAgBnxF,UAAU41F,MAAQ,WAAW,IAAA1+C,EAAAptC,KAwCzC,GAvCIA,KAAKoqF,8BACLpqF,KAAKoqF,4BAA4Bp9D,UACjChtB,KAAKoqF,4BAA8B,MAEnCpqF,KAAK2oF,sBACL3oF,KAAK2oF,oBAAoB37D,UACzBhtB,KAAK2oF,oBAAsB,MAG3B3oF,KAAK+pF,aACL/pF,KAAK+pF,WAAWp7D,OAChB3uB,KAAK+pF,WAAa,MAGlB/pF,KAAKiqF,UACLjqF,KAAKiqF,QAAQt7D,OACb3uB,KAAKiqF,QAAU,MAGnBjqF,KAAKg2C,iBAAiB/0C,QAAQ,SAAA4rC,GAAK,OAAIO,EAAK2+C,oBAAoBl/C,KAEhE7sC,KAAKm4D,IAAI6zB,qBACLhsF,KAAKyvB,YACLzvB,KAAKyvB,WAAWzC,UAGpBhtB,KAAKisF,mBAAqBjsF,KAAKisF,kBAAkBC,SAG7ClsF,KAAK+nF,mBACL/nF,KAAK+nF,iBAAiBxiE,QACtBvlB,KAAK+nF,iBAAmB,MAExB/nF,KAAKqpF,mBACLrpF,KAAKqpF,iBAAiB9jE,QACtBvlB,KAAKqpF,iBAAmB,MAIxBrpF,KAAK4xD,KAAM,CACX,IAAMA,EAAO5xD,KAAK4xD,KAqBlB,OAlBAA,EAAKnlC,eACD0lC,yBACAnyD,KAAK2pF,6BACT/3B,EAAKnlC,eACD0lC,sBACAnyD,KAAK4pF,0BACTh4B,EAAKnlC,eACD0lC,yBACAnyD,KAAK6pF,6BAETj4B,EAAKnlC,eACD0lC,gCACAnyD,KAAK8pF,mBAET9pF,KAAK0nF,aAAayE,sBAElBnsF,KAAK4xD,KAAO,KAELA,EAAKk6B,QACP/jD,KAAK,WACEqF,EAAK+qB,KACL/qB,EAAK+qB,IAAIi0B,YAGhB5gD,MAAM,SAAA/7B,GAOH,MAHA29B,EAAK6tB,kBAAkBh6D,QACnB,SAAAo5D,GAAW,OAAIjtB,EAAKi/C,aAAahyB,EAAYiyB,YAE3C78E,IAKlB,OAAO27B,QAAQE,OACX,IAAIntC,MAAM,6CAMlBkpF,EAAgBnxF,UAAU8zD,QAAU,WAChC,OAAOhqD,KAAKsR,QAAQzc,MAMxBwyF,EAAgBnxF,UAAUq2F,cAAgB,WACtC,OAAOvsF,KAAKsd,YAMhB+pE,EAAgBnxF,UAAUs2F,cAAgB,WACtC,OAAOxsF,KAAKmoF,aAMhBd,EAAgBnxF,UAAUu2F,WAAa,WACnC,OAAO7mD,QAAQ5lC,KAAK0sF,eAMxBrF,EAAgBnxF,UAAUy2F,aAAe,WACrC,OAAO3sF,KAAK0sF,cAMhBrF,EAAgBnxF,UAAU02F,sBAAwB,WAC9C,OAAO5sF,KAAK4xD,MAAQ5xD,KAAK4xD,KAAKi7B,UAAUD,yBAS5CvF,EAAgBnxF,UAAU42F,mBAAqB,SAASC,GAAa,IAAAh/C,EAAA/tC,KACjE,OAAO,IAAIorC,QAAQ,SAACC,EAASC,GACpByC,EAAK6+C,wBAKNG,EACAh/C,EAAK6jB,KAAKi7B,UAAUG,iBAAiB3hD,EAASC,GAE9CyC,EAAK6jB,KAAKi7B,UAAUI,YAAY5hD,EAASC,GAPzCA,OAiBZ+7C,EAAgBnxF,UAAU8/C,eAAiB,SAASjW,GAChD,IAAIwT,EAAS,GAMb,OAJIvzC,KAAKm4D,MACL5kB,EAASvzC,KAAKm4D,IAAIniB,eAAejW,IAG9BwT,GAOX8zC,EAAgBnxF,UAAUg3F,mBAAqB,WAC3C,OAAOltF,KAAKm4D,IAAMn4D,KAAKm4D,IAAI+0B,qBAAuB,MAOtD7F,EAAgBnxF,UAAUi3F,mBAAqB,WAC3C,OAAOntF,KAAKm4D,IAAMn4D,KAAKm4D,IAAIg1B,qBAAuB,MAYtD9F,EAAgBnxF,UAAUo2B,GAAK,SAAS8gE,EAASp+E,GACzChP,KAAKuqB,cACLvqB,KAAKuqB,aAAa+B,GAAG8gE,EAASp+E,IAYtCq4E,EAAgBnxF,UAAUgqD,IAAM,SAASktC,EAASp+E,GAC1ChP,KAAKuqB,cACLvqB,KAAKuqB,aAAakC,eAAe2gE,EAASp+E,IAKlDq4E,EAAgBnxF,UAAUm0C,iBAAmBg9C,EAAgBnxF,UAAUo2B,GACvE+6D,EAAgBnxF,UAAU+pD,oBAAsBonC,EAAgBnxF,UAAUgqD,IAQ1EmnC,EAAgBnxF,UAAUm3F,mBAAqB,SAASC,EAASt+E,GACzDhP,KAAK4xD,MACL5xD,KAAK4xD,KAAK27B,oBAAoBD,EAASt+E,IAQ/Cq4E,EAAgBnxF,UAAUs3F,sBAAwB,SAASF,GACnDttF,KAAK4xD,MACL5xD,KAAK4xD,KAAK67B,uBAAuBH,IAUzCjG,EAAgBnxF,UAAUw3F,gBAAkB,SACpCx+E,GAA+B,IAAtBy+E,EAAsB9vF,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAR,OACvBmC,KAAK4xD,MACL5xD,KAAK4xD,KAAKxa,YAAYloC,EAASy+E,IAWvCtG,EAAgBnxF,UAAU03F,uBAAyB,SAC3C1uF,EAAIgQ,GAA+B,IAAtBy+E,EAAsB9vF,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAR,OAC3BmC,KAAK4xD,MACL5xD,KAAK4xD,KAAKi8B,mBAAmB3uF,EAAIgQ,EAASy+E,IASlDtG,EAAgBnxF,UAAU43F,YAAc,SAASj5F,EAAM24B,GAC/CxtB,KAAK4xD,MACL5xD,KAAK4xD,KAAKm8B,cAAcl5F,EAAM24B,GAC9BxtB,KAAK4xD,KAAKl6C,gBAEVoR,EAAOlZ,KAAK,iDAUpBy3E,EAAgBnxF,UAAU83F,gBAAkB,SAASn5F,EAAM24B,GACvDxtB,KAAK8tF,YAAYj5F,EAAM24B,GACvBxtB,KAAKiuF,cAAcp5F,IAOvBwyF,EAAgBnxF,UAAU+3F,cAAgB,SAASp5F,GAC3CmL,KAAK4xD,MACL5xD,KAAK4xD,KAAKs8B,mBAAmBr5F,IAQrCwyF,EAAgBnxF,UAAUigF,eAAiB,SAASthF,GAC5CmL,KAAK4xD,OAEL5xD,KAAK4xD,KAAKs8B,mBAAmB,QAE7BluF,KAAK4xD,KAAKm8B,cAAc,OAAQ,CAC5B7lF,WAAY,CAAEmI,MAAO,mCACrB9a,MAAOV,IAEXmL,KAAK4xD,KAAKl6C,iBAQlB2vE,EAAgBnxF,UAAUi4F,WAAa,SAASC,GACxCpuF,KAAK4xD,MAAQ5xD,KAAKquF,eAClBruF,KAAK4xD,KAAKu8B,WAAWC,IAQ7B/G,EAAgBnxF,UAAUo4F,eAAiB,WACvC,QAAyBxzF,IAArBkF,KAAKuuF,YAA2B,CAChCvuF,KAAKuuF,YAAc,IAAIC,IAGvB,IAAMC,EAAmBzuF,KAAKg2C,eAAelJ,KAJb3f,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAMhC,QAAAwyB,EAAAC,EAAyBkhE,EAAzBp5F,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA2C,KAAhC8oB,EAAgC3oB,EAAA/3B,MACvCyK,KAAKuuF,YAAY9hD,SAASwJ,IAPE,MAAAn8B,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,GAWhC,IAAMgqB,EAAoBr3C,KAAKm4D,IAAI9hB,gBAAgBvJ,KAXnB9e,GAAA,EAAAC,GAAA,EAAAC,OAAApzB,EAAA,IAahC,QAAAqzB,EAAAC,EAA0BipB,EAA1BhiD,OAAAo4B,cAAAO,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAA6C,KAAlC0sC,EAAkCvsC,EAAA54B,MACzCyK,KAAKuuF,YAAY9hD,SAASiuB,IAdE,MAAA5gD,GAAAmU,GAAA,EAAAC,EAAApU,EAAA,YAAAkU,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,IAkBpC,OAAOluB,KAAKuuF,aAQhBlH,EAAgBnxF,UAAUw4F,uBAAyB,WAC/C,OAAO1uF,KAAK4xD,KAAK+8B,qBAUrBtH,EAAgBnxF,UAAUu2C,SAAW,SAASI,GAC1C,GAAIA,EAAM26B,eAAgB,CAEtB,IAAMonB,EAAkB5uF,KAAKm4D,IAAIg1B,qBAEjC,GAAIyB,EAGA,OAAI/hD,IAAU+hD,EACHxjD,QAAQC,QAAQwB,GAGpBzB,QAAQE,OAAO,IAAIntC,MACtB,oDAKZ,OAAO6B,KAAK0nE,aAAa,KAAM76B,IAQnCw6C,EAAgBnxF,UAAU24F,2BAA6B,SAC/C73C,EACAlpB,GACJ,IAAMghE,EAAY9uF,KAAK+uF,0BAOlBjhE,GAAOghE,IAAchhE,GACtB9tB,KAAKuqB,aAAa2C,KACd+nB,4BACAj1C,KAAKm6D,WAAYnjB,IAQ7BqwC,EAAgBnxF,UAAU84F,qBAAuB,SAASniD,GAElD7sC,KAAKuoF,gBAAkB17C,EAAMqK,iBAAmBrK,EAAMqvB,YACtDl8D,KAAKuoF,gBAAiB,EAGtBvoF,KAAK4xD,KAAKq9B,gBAAgBjvF,KAAK4xD,KAAKs9B,WAAW,IAEnDlvF,KAAKuqB,aAAa2C,KAAK+nB,qBAA0CpI,IAOrEw6C,EAAgBnxF,UAAU61F,oBAAsB,SAASl/C,GACrDA,EAAMsiD,eAAe,MACrBnvF,KAAKm4D,IAAIi3B,iBAAiBviD,GAC1BA,EAAMoT,oBAAoB2a,qBACtB/tB,EAAMwiD,aACVxiD,EAAMoT,oBAAoB2a,4BACtB/tB,EAAMyiD,mBAKNziD,EAAM26B,gBAAkB36B,EAAME,YAAcC,IAAUC,SACtDjtC,KAAKyvB,WAAWkB,wBAAuB,GAG3C3wB,KAAKuqB,aAAa2C,KAAK+nB,gBAAqCpI,IAShEw6C,EAAgBnxF,UAAUujF,YAAc,SAAS5sC,GAC7C,OAAO7sC,KAAK0nE,aAAa76B,EAAO,OAYpCw6C,EAAgBnxF,UAAUwxE,aAAe,SAASN,EAAUC,GAAU,IAAAx4B,EAAA7uC,KAElE,OAAIonE,GACIA,EAAS6N,SACF7pC,QAAQE,OACX,IAAI/Y,IAAgBmhB,sBAG5B2zB,GACIA,EAAS4N,SACF7pC,QAAQE,OACX,IAAI/Y,IAAgBmhB,sBAKzB1zC,KAAKuvF,gBAAgBnoB,EAAUC,GACjCt/B,KAAK,WAUF,OATIq/B,GACAv4B,EAAKk9C,oBAAoB3kB,GAEzBC,GAGAx4B,EAAK2gD,eAAenoB,GAGjBj8B,QAAQC,WAChB,SAAA57B,GAAK,OAAI27B,QAAQE,OAAO,IAAIntC,MAAMsR,OAe7C43E,EAAgBnxF,UAAUq5F,gBAAkB,SAASnoB,EAAUC,GAC3D,IAAMooB,EAAuB,GAgB7B,OAdIzvF,KAAK+nF,iBACL0H,EAAqB3xF,KACjBkC,KAAK+nF,iBAAiBrgB,aAAaN,EAAUC,IAEjDv+C,EAAOnZ,KAAK,0CAGZ3P,KAAKqpF,iBACLoG,EAAqB3xF,KACjBkC,KAAKqpF,iBAAiB3hB,aAAaN,EAAUC,IAEjDv+C,EAAOnZ,KAAK,0CAGTy7B,QAAQsL,IAAI+4C,IAOvBpI,EAAgBnxF,UAAUs5F,eAAiB,SAASnoB,GAChD,GAAIA,EAASnwB,gBAAmBmwB,EAASG,gBAC9BH,EAASt6B,YAAcC,IAAUC,QAAU,CAElD,IACMxG,EADU2L,IAAI0B,oCAENra,KACN,SAAA7kC,GAAC,OACGA,EAAEyxC,OAAF,GAAA/oC,OAAc+pE,EAASoQ,WAAWpxC,KAAlC,UACOzxC,EAAEuyC,QAAUkgC,EAASoQ,WAAWtwC,QAE/CV,GACAtc,IAAWsH,0BACP2gB,IAAI2B,4BAA4BtN,IAGxC4gC,EAASG,iBACTxnE,KAAKiuF,cAAc,aACnBjuF,KAAK8tF,YAAY,YAAa,CAC1Bv4F,MAAO8xE,EAASt6B,UAChB7kC,WAAY,CACRmI,MAAO,qCAInBrQ,KAAKm4D,IAAIu3B,cAAcroB,GAGnBA,EAASnwB,eACTl3C,KAAK4xD,KAAK+9B,aAAatoB,EAASnL,WAEhCl8D,KAAK4xD,KAAKg+B,aAAavoB,EAASnL,WAGpCmL,EAASgoB,YAAcrvF,KAAKgvF,qBAAqBl5F,KAAKkK,KAAMqnE,GAC5DA,EAASioB,kBAAoBtvF,KAAK6uF,2BAA2B/4F,KAAKkK,MAClEqnE,EAASh9B,iBACLuwB,qBACAyM,EAASgoB,aACbhoB,EAASh9B,iBACLuwB,4BACAyM,EAASioB,mBAEbjoB,EAAS8nB,eAAenvF,MAExBA,KAAKuqB,aAAa2C,KAAK+nB,cAAmCoyB,IAY9DggB,EAAgBnxF,UAAUqjF,uBAAyB,SAAS1sC,GACxD,IAAMgjD,EAAsB,GAkB5B,OAhBI7vF,KAAK+nF,iBACL8H,EAAoB/xF,KAAKkC,KAAK+nF,iBAAiB+H,iBAAiBjjD,IAEhE/jB,EAAOnZ,KACH,uEAIJ3P,KAAKqpF,iBACLwG,EAAoB/xF,KAAKkC,KAAKqpF,iBAAiByG,iBAAiBjjD,IAEhE/jB,EAAOnZ,KACH,uEAIDy7B,QAAQsL,IAAIm5C,IAUvBxI,EAAgBnxF,UAAUsjF,wBAA0B,SAAS3sC,GACzD,IAAMkjD,EAAuB,GAiB7B,OAfI/vF,KAAK+nF,iBACLgI,EAAqBjyF,KACjBkC,KAAK+nF,iBAAiBiI,kBAAkBnjD,IAE5C/jB,EAAOnZ,KACH,+DAEJ3P,KAAKqpF,iBACL0G,EAAqBjyF,KACjBkC,KAAKqpF,iBAAiB2G,kBAAkBnjD,IAE5C/jB,EAAOnZ,KACH,+DAGDy7B,QAAQsL,IAAIq5C,IAOvB1I,EAAgBnxF,UAAU+5F,QAAU,WAChC,OAAOjwF,KAAK4xD,KAAKguB,MAQrByH,EAAgBnxF,UAAUm4F,YAAc,WACpC,OAAOruF,KAAK4xD,KAAO5xD,KAAK4xD,KAAKy8B,cAAgB,MAQjDhH,EAAgBnxF,UAAUg6F,KAAO,SAAS9hC,GAAU,IAAAgU,EAAApiE,KAChD,OAAKA,KAAKquF,cAIH,IAAIjjD,QAAQ,SAACC,EAASC,GACzB82B,EAAKxQ,KAAKu+B,SACN/hC,GAAY,GACZ,kBAAM/iB,KACN,SAAAvxB,GAAG,OAAIwxB,EAAOxxB,IACd,kBAAMwxB,EAAO8kD,8BARVhlD,QAAQE,UAgBvB+7C,EAAgBnxF,UAAUm6F,OAAS,WAC/B,OAAOrwF,KAAKkwF,QAWhB7I,EAAgBnxF,UAAUo6F,kBAAoB,SAAS/wD,GACnDv/B,KAAKuwF,mBAAmB,CAAEhxD,KAe9B8nD,EAAgBnxF,UAAUq6F,mBAAqB,SAASC,GACpD,IAAKpwF,MAAMG,QAAQiwF,GACf,MAAM,IAAIryF,MAAM,sDAGpB6B,KAAKm4D,IAAIs4B,gBAAgBD,IAU7BnJ,EAAgBnxF,UAAUw6F,eAAiB,SAASnxD,GAChDv/B,KAAKm4D,IAAIw4B,YAAYpxD,IAOzB8nD,EAAgBnxF,UAAUslE,SAAW,WACjC,OAAOx7D,KAAKm4D,IAAIqD,YAWpB6rB,EAAgBnxF,UAAU60F,SAAW,SAAS6F,GAC1C,IAAK/vF,OAAOgwF,UAAUD,KAAW/vF,OAAO2gB,SAASovE,EAAO,IACpD,MAAM,IAAIzyF,MAAJ,4BAAAb,OAAsCszF,IAEhD,IAAM76F,EAAI8K,OAAO+vF,GAEjB,GAAI76F,GAAK,EACL,MAAM,IAAIuvD,WAAW,mCAMzB,GAJAtlD,KAAKm4D,IAAI4yB,SAASh1F,GAIdiK,KAAKqpF,iBAAkB,CACvB,IAAMyH,EAAsB,IAAN/6F,EAEtBiK,KAAKqpF,iBACA0H,wBAAuB,EAAMD,GAC7BtlD,MAAM,SAAA/7B,GACHqZ,EAAOrZ,MAAP,2CAAAnS,OAC+CwzF,EAD/C,KAEIrhF,OAepB43E,EAAgBnxF,UAAU8+C,UAAY,SAASzV,GAC3C,OAAOv/B,KAAKm4D,IAAInjB,UAAUzV,IAO9B8nD,EAAgBnxF,UAAU+kE,gBAAkB,WACxC,OAAOjmE,OAAOq5B,KAAKruB,KAAKg7D,cAAcj+D,IAAI,SAASlH,GAC/C,OAAOmK,KAAKg7D,aAAanlE,IAC1BmK,OASPqnF,EAAgBnxF,UAAU86F,oBACpB,WAA8B,IAArBC,EAAqBpzF,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,IAAAA,UAAA,GAExBm9D,EAAeh7D,KAAKi7D,kBAOxB,OALKg2B,IACDj2B,EAAeA,EAAa7hC,OAAO,SAAA/iC,GAAC,OAAKA,EAAE86F,cAIxCl2B,EAAa/9D,OAAS,GAQrCoqF,EAAgBnxF,UAAUglE,mBAAqB,SAASh8D,GACpD,OAAOc,KAAKg7D,aAAa97D,IAO7BmoF,EAAgBnxF,UAAUi7F,gBAAkB,SAASjyF,GACjD,IAAMm7D,EAAcr6D,KAAKk7D,mBAAmBh8D,GAEvCm7D,GAGLr6D,KAAK4xD,KAAKw/B,KAAK/2B,EAAYiyB,WAQ/BjF,EAAgBnxF,UAAUm7F,qBAAuB,WACzCrxF,KAAKsxF,0BACGtxF,KAAK+nF,kBAAoB/nF,KAAKgxF,sBAAwB,KAC9D98F,OAAOujB,aAAazX,KAAKsxF,yBACzBtxF,KAAKsxF,wBAA0B,OASvCjK,EAAgBnxF,UAAUq1F,mBAAqB,WAAW,IAAA3oB,EAAA5iE,MAEjDA,KAAK+nF,kBACC/nF,KAAKgxF,uBAAyB,IAC7BhxF,KAAKsxF,0BACbtxF,KAAKsxF,wBAA0Bp9F,OAAO0L,WAAW,WAC7CgjE,EAAK0uB,wBAA0B,KAC/BnnE,IAAW+K,cAAc2K,YACrBjC,IACA,CACI6vB,KAAK,EACLl4D,MAzrCM,eAmsC1B8xF,EAAgBnxF,UAAU+4F,gBAAkB,SAAS/vF,GACjD,IAAMm7D,EAAcr6D,KAAKk7D,mBAAmBh8D,GAEvCm7D,GAGLr6D,KAAK4xD,KAAKq9B,gBAAgB50B,EAAYiyB,UAAU,IAoBpDjF,EAAgBnxF,UAAUq7F,eAAiB,SACnChjF,EAAKqhD,EAAMgwB,EAAMsR,EAAUM,EAAS73E,EAAQs0C,EAAUwjC,GAAS,IAAA1uB,EAAA/iE,KAC7Dd,EAAKsH,UAAQmI,mBAAmBJ,GAEtC,GAAW,UAAPrP,GAAkBc,KAAKm6D,aAAej7D,EAA1C,CAGA,IAAMm7D,EACA,IAAIq3B,IAAiBnjF,EAAKvO,KAAM4vD,EAAMshC,EAAUM,EAAS73E,GAE/D0gD,EAAYs3B,MAAQ/R,EACpBvlB,EAAYu3B,SAAWH,EACvBzxF,KAAKg7D,aAAa97D,GAAMm7D,EACxBr6D,KAAKuqB,aAAa2C,KACd+nB,cACA/1C,EACAm7D,GACJr6D,KAAKoqB,KAAKsiC,KAAKmlC,YAAYtjF,GACtBw5B,KAAK,SAAA/0B,GACFqnD,EAAYy3B,cAAgB9+E,EAAS8b,IAAI,0BACzCi0C,EAAKgvB,qBAET,SAAAtiF,GAAK,OAAIqZ,EAAOlZ,KAAP,kCAAAtS,OAA8CiR,GAAOkB,KAElEzP,KAAKgyF,uBACLhyF,KAAKurF,uBAWTlE,EAAgBnxF,UAAU+7F,wBAA0B,SAAS1jF,EAAKkjF,GAI9D,IACMS,EADQlyF,KAAKi7D,kBACUxhC,KAAK,SAAArjC,GAAC,OAAIA,EAAEk2F,WAAa/9E,IAEtD,GAAI2jF,EAAgB,CAChBA,EAAeN,SAAWH,EAC1B,IAAMvyF,EAAKsH,UAAQmI,mBAAmBJ,GAEtCvO,KAAKuqB,aAAa2C,KACd+nB,mBACA/1C,EACAuyF,GAOHS,EAAeN,UAChB5xF,KAAKgyF,wBAIb3K,EAAgBnxF,UAAUm2F,aAAe,SAAS99E,GAAK,IAAA+0D,EAAAtjE,KAC7Cd,EAAKsH,UAAQmI,mBAAmBJ,GAEtC,GAAW,UAAPrP,GAAkBc,KAAKm6D,aAAej7D,EAA1C,CAGA,IAAMm7D,EAAcr6D,KAAKg7D,aAAa97D,UAE/Bc,KAAKg7D,aAAa97D,GAEHc,KAAKm4D,IAAIphB,mBAAmB73C,GAEpC+B,QACV,SAAA4rC,GAAK,OACDy2B,EAAK/4C,aAAa2C,KAAK+nB,gBAAqCpI,KAGhEwtB,GACAr6D,KAAKuqB,aAAa2C,KACd+nB,YAAiC/1C,EAAIm7D,GAG7Cr6D,KAAKgyF,sBAAqB,GAC1BhyF,KAAKqxF,yBAOThK,EAAgBnxF,UAAUi8F,mBAAqB,SAASvS,GAEpD5/E,KAAKuqB,aAAa2C,KACd+nB,oBAAyCj1C,KAAKm6D,WAAYylB,GAG9D5/E,KAAKgyF,wBAGT3K,EAAgBnxF,UAAUk8F,kBAAoB,SAAS7jF,EAAKqxE,GACxD,IAAM1gF,EAAKsH,UAAQmI,mBAAmBJ,GAChC8rD,EAAcr6D,KAAKk7D,mBAAmBh8D,GAEvCm7D,IAGLA,EAAYs3B,MAAQ/R,EACpB5/E,KAAKuqB,aAAa2C,KAAK+nB,oBAAyC/1C,EAAI0gF,KAGxEyH,EAAgBnxF,UAAUm8F,qBAAuB,SAAS9jF,EAAKynE,GAC3D,IAAM92E,EAAKsH,UAAQmI,mBAAmBJ,GAChC8rD,EAAcr6D,KAAKk7D,mBAAmBh8D,GAEvCm7D,GAIDA,EAAYi4B,eAAiBtc,IAIjC3b,EAAYi4B,aAAetc,EAC3Bh2E,KAAKuqB,aAAa2C,KACd+nB,uBACA/1C,EACA82E,KAURqR,EAAgBnxF,UAAUujE,mBAAqB,SAAS5sB,GAAO,IAAAm3B,EAAAhkE,KAC3D,IAAI6sC,EAAM+G,OAAU5zC,KAAKo7D,cAKlB,GAAKvuB,EAAM+G,QAAS5zC,KAAKo7D,cAAzB,CAOP,IAAMl8D,EAAK2tC,EAAM8tB,mBACXN,EAAcr6D,KAAKk7D,mBAAmBh8D,GAE5C,GAAKm7D,EAAL,CAOAA,EAAYk4B,QAAQz0F,KAAK+uC,GAErB7sC,KAAKuuF,aACLvuF,KAAKuuF,YAAY9hD,SAASI,GAG9B,IAAM0X,EAAUvkD,KAAKuqB,aAErBsiB,EAAMxC,iBACFuwB,qBACA,kBAAMrW,EAAQr3B,KAAK+nB,qBAA0CpI,KACjEA,EAAMxC,iBACFuwB,4BACA,SAAC5jB,EAAYlpB,GACSk2C,EAAK+qB,4BAELjhE,GACdy2B,EAAQr3B,KACJ+nB,4BACA/1C,EACA83C,KAKhBuN,EAAQr3B,KAAK+nB,cAAmCpI,QA/B5C/jB,EAAOrZ,MAAP,gCAAAnS,OAA6C4B,SAV7C4pB,EAAOnZ,KACH,8DANJmZ,EAAOnZ,KACH,8DAuDZ03E,EAAgBnxF,UAAUs8F,eAAiB,SAASrxE,EAAS8lD,GACrDjnE,KAAKqpF,mBAAqBloE,IAC1B2H,EAAOnZ,KAAK,iBACZ3P,KAAKqpF,iBAAiBoJ,UAAUxrB,KAYxCogB,EAAgBnxF,UAAUw8F,gBAAkB,SAASvxE,EAASwxE,GACtD3yF,KAAKqpF,mBAAqBloE,IAC1B2H,EAAOnZ,KAAK,wBACZ3P,KAAKqpF,iBAAiBuJ,iBAAiBD,KAU/CtL,EAAgBnxF,UAAUyjE,qBAAuB,SAASk5B,GAAc,IAAAxuB,EAAArkE,KACpEA,KAAKi7D,kBAAkBh6D,QAAQ,SAAAo5D,GAG3B,IAFA,IAAM9mB,EAAS8mB,EAAYjrB,YAElB96C,EAAI,EAAGA,EAAIi/C,EAAOt2C,OAAQ3I,IAC/B,GAAIi/C,EAAOj/C,KAAOu+F,EAAc,CAG5Bx4B,EAAYk4B,QAAQh1F,OAAOjJ,EAAG,GAE9B+vE,EAAK95C,aAAa2C,KACd+nB,gBAAqC49C,GAErCxuB,EAAKkqB,aACLlqB,EAAKkqB,YAAY9U,YAAYoZ,GAGjC,QAGT7yF,OAMPqnF,EAAgBnxF,UAAU48F,mBAAqB,SACvCC,EACArwB,GAEJ,IAAIswB,EAGS,cAFAhzF,KAAK4xD,KAAKqhC,cAAcF,EAAc11B,WAG/C21B,EAAe,CACX55E,OAAQ,iBACR8rD,kBAAmB,oCACnBguB,SAAU,uEAAA51F,OAC2By1F,EAAc11B,YAE/C1yC,IAAQwoE,cAMRnzF,KAAK2rF,gBAAmB3rF,KAAK4rF,uBAM9B5rF,KAAKqpF,mBAEZ2J,EAAe,CACX55E,OAAQ,OACR8rD,kBAAmB,0BACnBguB,SAAU,sCAVdF,EAAe,CACX55E,OAAQ,UACR8rD,kBAAmB,eACnBguB,SAAU,0CATdF,EAAe,CACX55E,OAAQ,2BACR8rD,kBAAmB,oBACnBguB,SAAU,gDAiBdF,EACAhzF,KAAKozF,oBAAoBL,EAAeC,GAExChzF,KAAKqzF,uBAAuBN,EAAerwB,IAOnD2kB,EAAgBnxF,UAAUo9F,eAAiB,SACnCP,EACArwB,EACAtlD,GAEJ,GAAI21E,EAAcn/C,MACd5zC,KAAK8yF,mBAAmBC,EAAerwB,OACpC,CACH,IAAK1iE,KAAK4xD,KAAK2hC,QAAQR,EAAc11B,WAAY,CAC7C,IAAM+iB,EAAc,6CASpB,YAPApgF,KAAKozF,oBACDL,EAAe,CACX35E,OAAQ,iBACR8rD,kBAAmBkb,EACnB8S,SAAU9S,IAKtBpgF,KAAKwzF,uBAAuBT,EAAerwB,EAAatlD,KAOhEiqE,EAAgBnxF,UAAUs9F,uBAAyB,SAC3CT,EACArwB,EACAtlD,GAAK,IAAAwnD,EAAA5kE,KAGTA,KAAK+nF,iBAAmBgL,EACxB/yF,KAAK4xD,KAAKxF,gBAAgB,oBAAsBhvC,EAE5Cpd,KAAKwoF,YACLr+D,IAAW0K,oBACPgL,YAAkBpC,IAAuB,CAAEgwB,KAAK,KAGxD,IAAMgmC,EACAv4C,EAAEwnB,GACCjpC,KAAK,4DACL7sB,KAAK,UAEd5M,KAAKuqB,aAAa2C,KACd+nB,wBACAw+C,GAEJzzF,KAAKqxF,uBACLlnE,IAAW+K,cAAc2K,YACrBlC,IACA,CACI8vB,KAAK,EACLl4D,MAAO6nB,KAEf,IACI21E,EAAc9oC,WAAWjqD,KAAK4xD,KAAM5xD,KAAKm4D,IAAKn4D,KAAKsR,QAAQ9V,QAC7D,MAAOiU,GACLoxB,IAAqBC,iBAAiBrxB,GAI1CzP,KAAK0zF,kBAAkBhxB,EAAaqwB,EAAcpnE,gBAGlD,IACIonE,EAAcY,YACVjxB,EACA,WAIQkC,EAAKxJ,eAAiBwJ,EAAKmjB,kBAC3BnjB,EAAKgvB,yCAGb,SAAAnkF,GACIoxB,IAAqBC,iBAAiBrxB,GACtCqZ,EAAOrZ,MACH,2CAA4CA,IAEpDzP,KAAKg2C,kBAOTltB,EAAOnZ,KAAK,4CACZ3P,KAAKyvB,WAAWb,eACZ5uB,KAAK+nF,iBAAiBp8D,eACtB,SACJ3rB,KAAKyvB,WAAW/D,iBAAiB1rB,KAAK+nF,iBAAiBp8D,gBACzD,MAAO1sB,GACL4hC,IAAqBC,iBAAiB7hC,GACtC6pB,EAAOrZ,MAAMxQ,KAarBooF,EAAgBnxF,UAAUw9F,kBAAoB,SAASntB,EAAS/d,GAC5D,IAUIqrC,EAVAx/C,EAAQ,KACNy/C,EACA54C,EAAEqrB,GACC9sC,KAAK,iCACLs6D,QAQT,OANyB,IAArBD,EAAU72F,SACVo3C,EAAQy/C,EAAU,GAAG7lF,aAAa,QAK9BjO,KAAKsR,QAAQ9V,OAAOw4F,mBAC5B,IAAK,cACL,KAAK,EACL,UAAKl5F,EACD+4F,EAAoB,cACpB,MACJ,IAAK,YACDA,EAAoB,YAIE,gBAAtBA,GACIlpE,IAAQspE,yBACZJ,EAAoB,aAGE,gBAAtBA,EACA7zF,KAAKm4D,IAAI+7B,wBAAwB1rC,EAAI,MACR,cAAtBqrC,GAAqCx/C,GAC5Cr0C,KAAKm4D,IAAI+7B,wBAAwB,KAAM7/C,IAgB/CgzC,EAAgBnxF,UAAUk9F,oBAAsB,SACxCL,EACAzhF,GACAA,GAAWA,EAAQ4hF,UACnBryD,IAAqBC,iBAAiB,IAAI3iC,MAAMmT,EAAQ4hF,WAI5DH,EAAc5tB,UACV,KACA,SAAA11D,GACIqZ,EAAOlZ,KACH,qEACiCH,IACtC,CACC2J,OAAQ9H,GAAWA,EAAQ8H,OAC3B8rD,kBAAmB5zD,GAAWA,EAAQ4zD,kBACtCF,sBAAsB,KAclCqiB,EAAgBnxF,UAAUi+F,YAAc,SAChCpB,EACA3tB,EACAC,GACJv8C,EAAOnZ,KAAP,eAAArS,OACmB8nE,EADnB,OAAA9nE,OACwC+nE,EADxC,UAAA/nE,OAEQy1F,EAAcn/C,QAClBm/C,IAAkB/yF,KAAK+nF,kBACvB/nF,KAAKwoF,YAAa,EAElBr+D,IAAW+K,cACP2K,YAAkBhC,IAAyB,CAAE4vB,KAAK,KAGlDztD,KAAKyvB,aACLzvB,KAAKyvB,WAAW7D,gBACZ5rB,KAAK+nF,iBAAiBp8D,gBAC1B7C,EAAOnZ,KAAK,0BACZ3P,KAAKyvB,WAAW5B,cACZ7tB,KAAK+nF,iBAAiBp8D,iBAI9B3rB,KAAK+nF,iBAAmB,KAGxB/nF,KAAKm4D,IAAIg8B,eACFpB,IAAkB/yF,KAAKqpF,kBAGN,YAApBjkB,GAAgD,iBAAfC,GACjCv8C,EAAOnZ,KAAK,6BACZwa,IAAWqB,UAAUiqB,uBAAuB,CAAE2+C,aAAa,KAChC,uBAApBhvB,GACW,eAAfC,GAIHl7C,IAAWqB,UAAUiqB,uBAAuB,CAAE4+C,WAAW,IAE7Dr0F,KAAKs0F,mBAELxrE,EAAOrZ,MACH,2CACAsjF,EAAc18E,IACd08E,EAAc11B,UACd+H,EACAC,IAQZgiB,EAAgBnxF,UAAUq+F,kBAAoB,SAASxB,GAC9CA,EAAcn/C,QACf5zC,KAAK8rF,QACL9rF,KAAKuqB,aAAa2C,KAAK+nB,sBAI/BoyC,EAAgBnxF,UAAU67F,kBAAoB,WAK1C,IAJA,IAAI7J,GAAuB,EACrBltB,EAAeh7D,KAAKi7D,kBAGjB3mE,EAAI,EAAGA,EAAI0mE,EAAa/9D,OAAQ3I,GAAK,EAC1C,GAAI0mE,EAAa1mE,GAAGkgG,eAAgB,CAChCtM,GAAuB,EACvB,MAGJA,IAAyBloF,KAAKkoF,uBAC9BloF,KAAKkoF,qBAAuBA,EAC5BloF,KAAKuqB,aAAa2C,KACd+nB,uBACAizC,KASZb,EAAgBnxF,UAAUu+F,gBAAkB,WACxC,OAAOz0F,KAAKkoF,sBAOhBb,EAAgBnxF,UAAUikE,SAAW,WACjC,OACIn6D,KAAK4xD,MAAQ5xD,KAAK4xD,KAAKs9B,UACjB1oF,UAAQmI,mBAAmB3O,KAAK4xD,KAAKs9B,WACrC,MAGd7H,EAAgBnxF,UAAUw+F,UAAY,SAASC,EAAOC,EAAU3/E,GAC5D,IAAKjV,KAAKioF,YAAa,CACnB,IAAM4M,EAAiB70F,KAAK+uF,0BAE5B,IAAK8F,EAGD,YAFA/rE,EAAOlZ,KAAK,wCAKhB,IAAMqmC,EAAaj2C,KAAKktF,qBAExB,IAAKj3C,EAGD,YAFAntB,EAAOlZ,KAAK,2CAIhB5P,KAAKioF,YAAc,IAAI6M,IAAiB7+C,EAAY4+C,GAGxD70F,KAAKioF,YAAYyM,UAAUC,EAAOC,EAAU3/E,IAUhDoyE,EAAgBnxF,UAAU6+F,eAAiB,SAASzjF,GAChD,OAAItR,KAAK4xD,KACE5xD,KAAKwpF,iBAAiBuL,eAAezjF,GAGzC85B,QAAQE,OAAO,IAAIntC,MAAM,wCAUpCkpF,EAAgBnxF,UAAU8+F,cAAgB,SAASz4B,GAC/C,OAAIv8D,KAAK4xD,KACE5xD,KAAKwpF,iBAAiBwL,cAAcz4B,GAGxCnxB,QAAQE,OAAO,IAAIntC,MAAM,wCAMpCkpF,EAAgBnxF,UAAU++F,sBAAwB,WAC9C,QAAIj1F,KAAK4xD,MACE5xD,KAAK4xD,KAAKqjC,yBAUzB5N,EAAgBnxF,UAAUg6D,KAAO,SAAStV,GACtC,OAAI56C,KAAK4xD,KACE5xD,KAAK4xD,KAAK1B,KAAKtV,GAGnB,IAAIxP,QAAQ,SAACC,EAASC,GACzBA,EAAO,IAAIntC,MAAM,0CAOzBkpF,EAAgBnxF,UAAUg/F,OAAS,WAC/B,OAAIl1F,KAAK4xD,KACE5xD,KAAK4xD,KAAKsjC,SAGd,IAAI9pD,QAAQ,SAACC,EAASC,GACzBA,EAAO,IAAIntC,MAAM,0CAOzBkpF,EAAgBnxF,UAAUi/F,iBAAmB,WACzC,OAAOn1F,KAAKkwD,KAAK,0BAOrBm3B,EAAgBnxF,UAAUk/F,gBAAkB/N,EAAgBnxF,UAAUg/F,OAKtE7N,EAAgBnxF,UAAUm/F,eAAiB,WACvC,OAAIr1F,KAAK4xD,KACE5xD,KAAK4xD,KAAKyjC,iBAGd,MAMXhO,EAAgBnxF,UAAUo/F,YAAc,WACpC,OAAIt1F,KAAK4xD,KACE5xD,KAAK4xD,KAAK0jC,cAGd,MAWXjO,EAAgBnxF,UAAU64F,wBAA0B,WAChD,OAAI/uF,KAAKo7D,cACEp7D,KAAKqpF,iBAAiB19D,eAG1B3rB,KAAK+nF,iBAAmB/nF,KAAK+nF,iBAAiBp8D,eAAiB,MAW1E07D,EAAgBnxF,UAAU0jF,mBAAqB,WAC3C,IAAMib,EAAiB70F,KAAK+uF,0BAE5B,OAAO8F,EAAiBA,EAAejb,qBAAuB,MASlEyN,EAAgBnxF,UAAUq/F,oBAAsB,SAASC,GAChDx1F,KAAKquF,gBAGVruF,KAAKsoF,iBAAmBkN,EACxBx1F,KAAK4xD,KAAKs8B,mBAAmB,cAC7BluF,KAAK4xD,KAAKm8B,cAAc,aAAc,CAClC7lF,WAAY,CACRs6B,MAAOgzD,EAAOhzD,MACdlB,MAAOk0D,EAAOl0D,MACdjxB,MAAO,0CAGfrQ,KAAK4xD,KAAKl6C,iBAOd2vE,EAAgBnxF,UAAUu/F,oBAAsB,WAC5C,OAAOz1F,KAAKsoF,kBAMhBjB,EAAgBnxF,UAAUw/F,kBAAoB,WAC1C,OAAO11F,KAAKooF,iBAMhBf,EAAgBnxF,UAAUy/F,kBAAoB,WAC1C,OAAO31F,KAAKqoF,iBAMhBhB,EAAgBnxF,UAAU0/F,QAAU,WAChC,IAAMryF,EAAOvD,KAAKoqB,KAAKyrE,eAEjBC,EAAW,GAEjBA,EAASC,KAAO,IAAIzjF,KACpBwjF,EAAShmD,IAAM57C,OAAO2vB,SAASqiE,KAC/B4P,EAAShrB,GAAKjjC,UAAUiV,UAExB,IAAMztC,EAAMrP,KAAKoqB,KAAK4rE,aAQtB,OANI3mF,IACAymF,EAAS1rE,KAAO/a,GAGpB9L,EAAKuyF,SAAWA,EAETvyF,GAMX8jF,EAAgBnxF,UAAUoxF,mBAAqB,WAC3C,OAAOtnF,KAAK4xD,KAAKxF,iBAMrBi7B,EAAgBnxF,UAAUo1F,4BAA8B,SAASz2F,EAAMU,GACnEyK,KAAK8tF,YAAL,qBAAAxwF,OAAsCzI,GAAQ,CAAEU,WAMpD8xF,EAAgBnxF,UAAU+/F,+BAAiC,SAASphG,GAChEmL,KAAKiuF,cAAL,qBAAA3wF,OAAwCzI,IACxCmL,KAAK4xD,KAAKl6C,gBASd2vE,EAAgBnxF,UAAUggG,4BAA8B,SAASrhG,GAC7D,IAAMoB,EAAW+J,KAAK4xD,KAAKukC,QAAQC,MAAM38D,KAAK,SAAAz9B,GAAI,OAC9CA,EAAK4P,UAAL,qBAAAtO,OAAsCzI,KAG1C,OAAOoB,EAAWA,EAASV,WAAQuF,GAUvCusF,EAAgBnxF,UAAUm+B,aAAe,SACjCgiE,EACAC,GACJt2F,KAAKyvB,WAAW4E,aAAagiE,EAAiBC,IAUlDjP,EAAgBnxF,UAAUi6B,mBAAqB,WAC3C,OAAOnwB,KAAKyvB,WAAWU,sBAU3Bk3D,EAAgBnxF,UAAUo/E,eAAiB,SAASzoC,EAAOwoC,GACvD,IAAMnjD,EAAU2a,EAAM3a,UAClBtB,EAAO,KACLgjB,EAAQ/G,EAAM+G,MACd2iD,EAAe3iD,EAAQ/G,EAAM8tB,mBAAqB,QAClDk6B,EACAjhD,EACI5zC,KAAKqpF,kBAAoBrpF,KAAKqpF,iBAAiB19D,eAC/C3rB,KAAK+nF,kBAAoB/nF,KAAK+nF,iBAAiBp8D,eAErDuG,EAEI2iE,IACAjkE,EAAOikE,EAAe2B,aAAa3pD,IAGvCjc,EAAOic,EAAM4pD,UAEZphB,EAAUn2E,IAAO0xB,GAASikE,GAI/B70F,KAAKyvB,WAAWwC,4BACZ4iE,EACAjkE,EACAsB,EACAqkE,EACA1pD,EAAM6pD,gBACNrhB,EAAUn2E,KAUlBmoF,EAAgBnxF,UAAUk+B,mBAAqB,SAASllB,GACpDib,IAAWmJ,QAAQpkB,IAWvBm4E,EAAgBnxF,UAAUygG,SAAW,SAASC,GAC1C,OAAO52F,KAAK4xD,KAAO5xD,KAAK4xD,KAAK2hC,QAAQqD,GAAU,MAMnDvP,EAAgBnxF,UAAU2gG,+BAAiC,WACvD72F,KAAKuqB,aAAa2C,KAAK+nB,oBACnBm7C,iCAWR/I,EAAgBnxF,UAAU4gG,oBAAsB,SAAS16E,EAAI6e,GACzDj7B,KAAKm4D,IAAI4+B,mBAAmB36E,EAAI6e,IASpCosD,EAAgBnxF,UAAU8gG,yBAA2B,SAAS/7D,GAC1Dj7B,KAAK82F,oBAAoB,GAAI77D,IAiBjCosD,EAAgBnxF,UAAUkhD,YAAc,SAChCloC,GAEgC,IADhCkN,EACgCve,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAD3B,GACLo5F,EAAgCp5F,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,IAAAA,UAAA,GAC9Bq5F,EAAWjiE,EAAU/lB,GAK3B,GAAoB,WAAhBgoF,IACQD,GAA0C,WAAhBC,EAMtC,GAAID,EACAj3F,KAAK82F,oBAAoB16E,EAAIlN,OAC1B,CACH,IAAIioF,EAAgBjoF,EAIhBy+E,EAAc,OAElB,GAAoB,WAAhBuJ,EAA0B,CAC1BvJ,EAAc,eAGTwJ,EAAchhG,eAAe61D,OAC9BmrC,EAAcnrC,KAAuB,IAGzC,IACImrC,EAAgBvgF,KAAK0K,UAAU61E,GACjC,MAAOl4F,GAGL,YAFA6pB,EAAOrZ,MAAM,6CAA8CxQ,IAM/Dmd,EACApc,KAAK4tF,uBAAuBxxE,EAAI+6E,EAAexJ,GAG/C3tF,KAAK0tF,gBAAgByJ,EAAexJ,QAnCxC7kE,EAAOrZ,MAAP,kCAAAnS,OAA+C45F,KAyCvD7P,EAAgBnxF,UAAUkhG,wBAA0B,WAChD,OAAOp3F,KAAKo7D,cACNp7D,KAAKopF,2BAA6BppF,KAAK8oF,4BAQjDzB,EAAgBnxF,UAAUyzF,4BAA8B,SAASxoE,GACzDA,EAAQyyB,MACR5zC,KAAKopF,4BAA6B,EAElCppF,KAAK8oF,4BAA6B,EAElC3nE,EAAQyyB,QAAU5zC,KAAKo7D,eACvBp7D,KAAKuqB,aAAa2C,KAAK+nB,2BAS/BoyC,EAAgBnxF,UAAUmhG,uBAAyB,SAASl2E,GAGpDA,EAAQyyB,OAGRzpB,IAAWqB,UAAUiqB,uBAAuB,CAAE4+C,WAAW,IAErDr0F,KAAKqpF,kBACLl/D,IAAW0K,oBACPoL,YACIhC,IACA,CACI4hC,UAAW7/D,KAAKqpF,iBAAiB9rB,eAIjDv9D,KAAKs0F,gBAAgB,qBAAsB,eACpCnzE,GAAWnhB,KAAK+nF,mBAAqB5mE,IACxCnhB,KAAKoqB,KAAK+lC,mBACVnwD,KAAKisF,kBAAoB,IAAIqL,IAAsBt3F,MACnDA,KAAKisF,kBAAkBpmE,MAAM1E,KAG7B2H,EAAOnZ,KAAK,uDACZwR,EAAQo2E,+BAUpBlQ,EAAgBnxF,UAAU0zF,yBAA2B,SAASzoE,GACtDA,EAAQyyB,MACR5zC,KAAKopF,4BAA6B,GAElCppF,KAAK8oF,4BAA6B,EAClC9oF,KAAKisF,mBAAqBjsF,KAAKisF,kBAAkBC,UAGjD/qE,EAAQyyB,QAAU5zC,KAAKo7D,eACvBp7D,KAAKuqB,aAAa2C,KAAK+nB,wBAU/BoyC,EAAgBnxF,UAAUm9F,uBAAyB,SAC3CN,EACArwB,GACJ1iE,KAAKopF,4BAA6B,EAGlCppF,KAAKqpF,iBAAmB0J,EAExB/yF,KAAKqpF,iBAAiBp/B,WAAWjqD,KAAK4xD,KAAM5xD,KAAKm4D,IAAKn4D,KAAKsR,QAAQ9V,QAEnEstB,EAAOnZ,KAAK,4CAEZ,IAAI6nF,EAAWhxF,UAAQmI,mBAAmB3O,KAAKqpF,iBAAiBhsB,WAEhE,GAAIr9D,KAAKsR,QAAQ9V,OAAOkvF,cAAe,CACnC,IAAMrwB,EAAcr6D,KAAKg7D,aAAaw8B,GAElCn9B,IACAm9B,EAAWn9B,EAAYo9B,cAAgBD,GAI/Cx3F,KAAKyvB,WAAWb,eACZ5uB,KAAKqpF,iBAAiB19D,eACtB6rE,GAEJ,IAAMjlD,EAAcvyC,KAAKg2C,iBAEzBh2C,KAAKqpF,iBAAiBsK,YAClBjxB,EACA,WACI55C,EAAOpZ,MAAM,wCAEjB,SAAAD,GACIqZ,EAAOrZ,MACH,+CAAgDA,IAExD8iC,IAOR80C,EAAgBnxF,UAAUwhG,oBAAsB,WAC5C13F,KAAK23F,iBACD,MAAO33F,KAAK+nF,iBAAiBp8D,eAAe0qB,oBAOpDgxC,EAAgBnxF,UAAU0hG,oBAAsB,WAC5C53F,KAAK23F,iBACD,MAAO33F,KAAKqpF,iBAAiB19D,eAAe0qB,oBAUpDgxC,EAAgBnxF,UAAUyhG,iBAAmB,SAASE,EAAS1hD,GAAc,IAAA/mB,GAAA,EAAAC,GAAA,EAAAC,OAAAx0B,EAAA,IACzE,QAAAy0B,EAAAC,EAAoB2mB,EAApB9gD,OAAAo4B,cAAA2B,GAAAG,EAAAC,EAAA9B,QAAAC,MAAAyB,GAAA,EAAkC,KAAvByd,EAAuBtd,EAAAh6B,MAC9BuzB,EAAOnZ,KAAP,iBAAArS,OAA6Bu6F,EAA7B,YAAAv6F,OAA+CuvC,IAC/C7sC,KAAKm4D,IAAI5tC,aAAa2C,KAAK+Y,qBAA8B4G,IAHY,MAAA/yB,GAAAuV,GAAA,EAAAC,EAAAxV,EAAA,YAAAsV,GAAA,MAAAI,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAAsB,EAAA,MAAAC,KAc7E+3D,EAAgBnxF,UAAU2zF,4BAA8B,SAChDkJ,GAC0B,OAA1B/yF,KAAKqpF,mBAILrpF,KAAK83F,yBACC93F,KAAKqpF,iBAAiB/qB,uBAGF,OAA1Bt+D,KAAK+nF,mBACL/nF,KAAK+3F,yBACC/3F,KAAK+nF,iBAAiBzpB,uBAGhC,IAAI3wC,GAAO,EACLqqE,EAAmBh4F,KAAKsR,QAAQ9V,OAAOw8F,iBAmB7C,GAhBKjF,EAAcn/C,MAER5zC,KAAKqpF,mBAAqB0J,GACjCjqE,EAAOrZ,MAAM,0DAEbke,GAAO,IACColE,EAAcx1B,aACS,iBAArBy6B,GACPl3F,KAAKwU,SAAW0iF,IACnBlvE,EAAOnZ,KAAP,+BAAArS,OAA2C06F,EAA3C,SACA7tE,IAAWqB,UAAUiqB,uBAAuB,CAAE2+C,aAAa,IAC3Dp0F,KAAKs0F,gBAAgB,UAAW,gBAEhC3mE,GAAO,GAZPA,GAAO,GAeNvrB,MAAMpC,KAAK83F,4BACR11F,MAAMpC,KAAK+3F,0BAA2B,CAC1C,IAAME,EACAj4F,KAAK83F,yBAA2B93F,KAAK+3F,yBAE3C5tE,IAAW+K,cACPoJ,IACA,CAAE/oC,MAAO0iG,IAGblF,EAAcn/C,QAAU5zC,KAAKo7D,eAC7Bp7D,KAAKuqB,aAAa2C,KAAK+nB,0BAGvBtnB,IAMJ3tB,KAAKk4F,eAAc,GAGfl4F,KAAK+nF,iBACL/nF,KAAKm4F,yBAELrvE,EAAOnZ,KAAK,mDAGhB3P,KAAK43F,sBAGD53F,KAAK+nF,kBACL/nF,KAAK4zF,wCAGT9qE,EAAOnZ,KAAK,6CACZ3P,KAAKyvB,WAAW/D,iBAAiB1rB,KAAKqpF,iBAAiB19D,gBAEvDxB,IAAW0K,oBACPoL,YACIjC,IACA,CACI6hC,UAAW7/D,KAAKqpF,iBAAiB9rB,iBAajD8pB,EAAgBnxF,UAAU4zF,kBAAoB,WAA0B,IAAjB90D,EAAiBn3B,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GAC1Du6F,GAAWC,IAAQrjE,EAAYh1B,KAAKg1B,YAG1C,GADAh1B,KAAKg1B,WAAaA,EACdojE,EAAS,CACTp4F,KAAKuqB,aAAa2C,KACd+nB,qBACAj1C,KAAKg1B,YAGa,CAIlB,eAGA,aACA,gBAGU/zB,QAAQ,SAAApL,QACMiF,IAApBk6B,EAAWn/B,IACXs0B,IAAWqB,UAAUiqB,6IAArB6iD,CAAA,GACKziG,EAAIuH,QAAQ,IAAK,KAAO43B,EAAWn/B,SAaxDwxF,EAAgBnxF,UAAUqiG,YAAc,SAAS1iG,GAC7C,OAAOmK,KAAKg1B,WAAWn/B,IAO3BwxF,EAAgBnxF,UAAUsiG,4BAA8B,WAChDx4F,KAAKipF,uBACLngE,EAAOnZ,KAAK,mCACZ8H,aAAazX,KAAKipF,sBAClBjpF,KAAKipF,qBAAuB,OASpC5B,EAAgBnxF,UAAUiiG,uBAAyB,WAC/Cn4F,KAAKy4F,oBACD,MAAOz4F,KAAK+nF,iBAAiBp8D,eAAe0qB,oBAQpDgxC,EAAgBnxF,UAAUwiG,uBAAyB,WAC/C14F,KAAKy4F,oBACD,MAAOz4F,KAAKqpF,iBAAiB19D,eAAe0qB,oBAUpDgxC,EAAgBnxF,UAAUuiG,oBAAsB,SACxCE,EACAxiD,GAAc,IAAAzmB,GAAA,EAAAC,GAAA,EAAAC,OAAA90B,EAAA,IAClB,QAAA+0B,EAAAC,EAAoBqmB,EAApB9gD,OAAAo4B,cAAAiC,GAAAG,EAAAC,EAAApC,QAAAC,MAAA+B,GAAA,EAAkC,KAAvBmd,EAAuBhd,EAAAt6B,MAC9BuzB,EAAOnZ,KAAP,mBAAArS,OAA+Bq7F,EAA/B,YAAAr7F,OAAyDuvC,IACzD7sC,KAAKm4D,IAAI5tC,aAAa2C,KAAK+Y,uBAAgC4G,IAH7C,MAAA/yB,GAAA6V,GAAA,EAAAC,EAAA9V,EAAA,YAAA4V,GAAA,MAAAI,EAAA/B,QAAA+B,EAAA/B,SAAA,WAAA4B,EAAA,MAAAC,KAWtBy3D,EAAgBnxF,UAAU0iG,qCAAuC,WAC7D9vE,EAAOnZ,KAAK,sDACZ3P,KAAK+nF,iBAAiBgJ,wBAAuB,GAAM,GAAMhpD,KACrD,WACIjf,EAAOnZ,KAAK,oDAEhB,SAAAF,GACIqZ,EAAOrZ,MACH,2DACAA,MAWhB43E,EAAgBnxF,UAAUgiG,cAAgB,SAAS59B,GAC/C,GAAIt6D,KAAKytD,MAAQ6M,EAAjB,CAMA,GADAt6D,KAAKytD,IAAM6M,EACPA,EAAW,CACXxxC,EAAOnZ,KAAK,wCAIZwa,IAAWqB,UAAUiqB,uBAAuB,CACxC4+C,WAAW,EACXD,aAAa,IAKjB,IAAMtD,EAAwC,IAAxB9wF,KAAKm4D,IAAIqD,WAE/Bx7D,KAAKqpF,iBACA0H,wBAAuB,EAAMD,GAC7BtlD,MAAM,SAAA/7B,GACHqZ,EAAOrZ,MACH,kDAAAnS,OACUwzF,EADV,KAC4BrhF,UAGxCqZ,EAAOnZ,KAAK,mCAIZ3P,KAAK+nF,kBACL/nF,KAAKyvB,WAAWW,gCACZpwB,KAAK+nF,iBAAiBp8D,gBAAiB2uC,GAI/Ct6D,KAAKioF,YAAc,KAGnBjoF,KAAKuqB,aAAa2C,KACd+nB,aACAj1C,KACAA,KAAKytD,KAGTztD,KAAKuqB,aAAa2C,KACdltB,KAAKo3F,0BACCniD,yBACAA,4BAjDNnsB,EAAOpZ,MAAP,8CAAApS,OAA2Dg9D,KAyDnE+sB,EAAgBnxF,UAAU2iG,iBAAmB,SAASx7B,GAElD,GADAr9D,KAAKw4F,8BACDx4F,KAAKqpF,iBACLvgE,EAAOrZ,MAAM,oCADjB,CAMAzP,KAAKopF,4BAA6B,EAClCppF,KAAKqpF,iBACCrpF,KAAKoqB,KAAK9M,WAAW89B,OAAO09C,oBAC1B94F,KAAK4xD,KAAKs9B,UACV7xB,GACRv0C,EAAOnZ,KACH,gCAAiC3P,KAAK4xD,KAAKs9B,UAAW7xB,GAE1Dr9D,KAAKqpF,iBAAiBp/B,WAAWjqD,KAAK4xD,KAAM5xD,KAAKm4D,IAAKn4D,KAAKsR,QAAQ9V,QAEnEstB,EAAOnZ,KAAK,4CAEZ,IAAI6nF,EAAWhxF,UAAQmI,mBAAmB3O,KAAKqpF,iBAAiBhsB,WAEhE,GAAIr9D,KAAKsR,QAAQ9V,OAAOkvF,cAAe,CACnC,IAAMrwB,EAAcr6D,KAAKg7D,aAAaw8B,GAElCn9B,IACAm9B,EAAWn9B,EAAYo9B,cAAgBD,GAI/Cx3F,KAAKyvB,WAAWb,eACZ5uB,KAAKqpF,iBAAiB19D,eACtB6rE,GAKJ,IAAMjlD,EAAcvyC,KAAKg2C,iBAEzBh2C,KAAKqpF,iBAAiB0P,OAAOxmD,KAOjC80C,EAAgBnxF,UAAU09F,sCAAwC,WAC9D9qE,EAAOnZ,KAAK,wDACZ3P,KAAK+nF,iBAAiBgJ,wBAAuB,GAAO,GAAOhpD,KACvD,WACIjf,EAAOnZ,KAAK,uDAEhB,SAAAF,GACIqZ,EAAOrZ,MACH,4DACAA,MAWhB43E,EAAgBnxF,UAAU87F,qBAAuB,SAASgH,GACtD,GAAKruE,IAAQwoE,eACLnzF,KAAK2rF,iBACN3rF,KAAK4rF,uBAFZ,CAOA,IAAMqN,EAAQj5F,KAAKi7D,kBACbi+B,EAAYD,EAAMh8F,OAClBoxF,EAAcruF,KAAKquF,cACnB8K,OACkDr+F,IAAlDm+F,EAAMx/D,KAAK,SAAArjC,GAAC,MAAmB,gBAAfA,EAAEw7F,WAGlBwH,EAA8B,IAAdF,IAAoBC,EAa1C,GAXArwE,EAAOpZ,MAAP,qBAAApS,OACyB+wF,EADzB,iBAAA/wF,OAEQ47F,EAFR,kBAAA57F,OAEkC67F,EAFlC,QAAA77F,OAGQ87F,KAGHA,GAAiBp5F,KAAKipF,sBACvBjpF,KAAKw4F,8BAILnK,IAAgBruF,KAAKqpF,kBAAoB+P,EAAe,CACxD,IAAMzuC,EAAOuuC,GAAaD,EAAM,GAGhC,GAAI5K,GAAkC,cAAnB1jC,EAAKslC,UAA2B,CAC/C,IAAMoJ,EAAOr5F,KAAKm6D,WACZm/B,EAAU3uC,EAAK6P,QAErB,GAAI6+B,EAAOC,EAKP,YAJAxwE,EAAOpZ,MACH,2DACqC2pF,EAAMC,GAG5C,GAAID,IAASC,EAGhB,YAFAxwE,EAAOrZ,MAAM,kBAAmB4pF,EAAMC,GAK9C,IAAM/qF,EAAMo8C,EAAK2hC,SAEjB,GAAI0M,EAAe,CACf,GAAIh5F,KAAKipF,qBAGL,YAFAngE,EAAOrZ,MAAM,+CAIjBqZ,EAAOnZ,KAAP,wBAAArS,OAC4BiR,EAD5B,WAAAjR,OAEQ0C,KAAKmpF,eAFb,gBAGAnpF,KAAKipF,qBAAuBrpF,WACxBI,KAAK64F,iBAAiB/iG,KAAKkK,KAAMuO,GACX,IAAtBvO,KAAKmpF,qBAETrgE,EAAOnZ,KAAP,wBAAArS,OAAoCiR,IACpCvO,KAAK64F,iBAAiBtqF,QAEnBvO,KAAKqpF,mBAAqB+P,IACjCtwE,EAAOnZ,KAAP,uBAAArS,OAAmC0C,KAAKqpF,iBAAiBhsB,YAGrDr9D,KAAKqpF,iBAAiB9rB,aAAe27B,EAAY,GACjD/uE,IAAW0K,oBACPoL,YAAe/B,MAEvBl+B,KAAKs0F,wBAtELxrE,EAAOnZ,KAAK,sBAkFpB03E,EAAgBnxF,UAAUo+F,gBAAkB,SACpCl7E,EACA8rD,GACJ,GAAKllE,KAAKqpF,iBAAV,CAMA,IAAMkQ,EAAoBv5F,KAAKo7D,cAG3Bm+B,IACIv5F,KAAK+nF,kBACL/nF,KAAK44F,uCAIT54F,KAAK04F,0BAIT5vE,EAAOnZ,KAAK,4CACZ3P,KAAKyvB,WAAW7D,gBAAgB5rB,KAAKqpF,iBAAiB19D,gBACtD7C,EAAOnZ,KAAK,yCACZ3P,KAAKyvB,WAAW5B,cAAc7tB,KAAKqpF,iBAAiB19D,gBAEpD3rB,KAAKqpF,iBAAiBlkB,UAClB,WACIr8C,EAAOnZ,KAAK,iCAEhB,SAAAF,GAcQ2J,GACA0P,EAAOrZ,MACH,iEAC6BA,IAEtC,CACC2J,OAAQA,GAAkB,UAC1B8rD,kBAAmBA,GACO,yBAC1BF,qBAAsBhlE,KAAK4xD,MACpB5xD,KAAKk7D,mBACJ10D,UAAQmI,mBAAmB3O,KAAKqpF,iBAAiBhsB,cAGjEr9D,KAAKqpF,iBAAmB,KAGxBrpF,KAAKk4F,eAAc,GAEfqB,IAEIv5F,KAAK+nF,iBACL/nF,KAAK03F,sBAEL5uE,EAAOnZ,KAAK,uDAjEhBmZ,EAAOrZ,MAAM,kCA4ErB43E,EAAgBnxF,UAAUklE,YAAc,WACpC,OAAOp7D,KAAKytD,KAShB45B,EAAgBnxF,UAAUsjG,sBAAwB,WAC9C,OAAIx5F,KAAKo7D,cACEp7D,KAAKqpF,iBAAiB19D,eAAeiuD,qBAGzC,MAOXyN,EAAgBnxF,UAAUujG,gBAAkB,WACxC,IAAMR,EAAQj5F,KAAKi7D,kBAGnB,GAAqB,IAAjBg+B,EAAMh8F,OAKN,MAAM,IAAIkB,MACN,kEALJ,IAAMu7F,EAAUT,EAAM,GAAG3M,SAEzBtsF,KAAK64F,iBAAiBa,IAU9BrS,EAAgBnxF,UAAUyjG,eAAiB,WACvC35F,KAAKs0F,mBAOTjN,EAAgBnxF,UAAU0jG,gBAAkB,WACxC,OAAO55F,KAAK+oF,sBAAsB8Q,YAWtCxS,EAAgBnxF,UAAU4jG,2BAA6B,SAC/C5kD,GACJl1C,KAAKm4D,IAAI2hC,2BAA2B5kD,IAgBxCmyC,EAAgBnxF,UAAU6jG,wBACpB,SAASC,EAAYhkB,GACnB,OAAKh2E,KAAK4xD,KAIH5xD,KAAKspF,kBACPyQ,wBAAwBC,EAAYhkB,GAJ9B,IAAI73E,MAAM87F,4EC1/F7B,SAAAC,EAAAnmG,GAUA,IAAAomG,EAAA,IAGAC,EAAA,4BAGAC,EAAA,EACAC,EAAA,EAGAxkB,EAAA,iBAGAykB,EAAA,qBACAC,EAAA,iBACAC,EAAA,yBACAC,EAAA,mBACAC,EAAA,gBACAC,EAAA,iBACAC,EAAA,oBACAC,EAAA,6BACAC,EAAA,eACAC,EAAA,kBACAC,EAAA,gBACAC,EAAA,kBAEAC,EAAA,iBACAC,EAAA,kBACAC,EAAA,eACAC,EAAA,kBACAC,EAAA,kBACAC,EAAA,qBAGAC,EAAA,uBACAC,EAAA,oBAkBAC,EAAA,8BAGAC,EAAA,mBAGAC,EAAA,GACAA,EAxBA,yBAwBAA,EAvBA,yBAwBAA,EAvBA,sBAuBAA,EAtBA,uBAuBAA,EAtBA,uBAsBAA,EArBA,uBAsBAA,EArBA,8BAqBAA,EApBA,wBAqBAA,EApBA,yBAoBA,EACAA,EAAAtB,GAAAsB,EAAArB,GACAqB,EAAAJ,GAAAI,EAAAnB,GACAmB,EAAAH,GAAAG,EAAAlB,GACAkB,EAAAjB,GAAAiB,EAAAhB,GACAgB,EAAAd,GAAAc,EAAAb,GACAa,EAAAX,GAAAW,EAAAT,GACAS,EAAAR,GAAAQ,EAAAP,GACAO,EAxCA,qBAwCA,EAGA,IAAAC,EAAA,iBAAA5B,QAAAllG,iBAAAklG,EAGA6B,EAAA,iBAAAr5E,iBAAA1tB,iBAAA0tB,KAGA9uB,EAAAkoG,GAAAC,GAAA97F,SAAA,cAAAA,GAGA+7F,EAA4CloG,MAAA2X,UAAA3X,EAG5CmoG,EAAAD,GAAA,iBAAAjoG,SAAA0X,UAAA1X,EAGAmoG,EAAAD,KAAAnoG,UAAAkoG,EAGAG,EAAAD,GAAAJ,EAAAnrB,QAGAyrB,EAAA,WACA,IACA,OAAAD,KAAAtqB,SAAAsqB,EAAAtqB,QAAA,QACG,MAAA5yE,KAHH,GAOAo9F,EAAAD,KAAAE,aAuDA,SAAAC,EAAAnjE,EAAAojE,GAIA,IAHA,IAAAl+F,GAAA,EACArB,EAAA,MAAAm8B,EAAA,EAAAA,EAAAn8B,SAEAqB,EAAArB,GACA,GAAAu/F,EAAApjE,EAAA96B,KAAA86B,GACA,SAGA,SAkEA,SAAAqjE,EAAA1/F,GACA,IAAAuB,GAAA,EACAwR,EAAA1P,MAAArD,EAAAkwB,MAKA,OAHAlwB,EAAAkE,QAAA,SAAA1L,EAAAM,GACAia,IAAAxR,GAAA,CAAAzI,EAAAN,KAEAua,EAwBA,SAAA4sF,EAAA3wE,GACA,IAAAztB,GAAA,EACAwR,EAAA1P,MAAA2rB,EAAAkB,MAKA,OAHAlB,EAAA9qB,QAAA,SAAA1L,GACAua,IAAAxR,GAAA/I,IAEAua,EAIA,IAeA6sF,EAvCAz8F,EAAAuiD,EAwBAm6C,EAAAx8F,MAAAlK,UACA2mG,EAAA58F,SAAA/J,UACA4mG,EAAA9nG,OAAAkB,UAGA6mG,EAAAnpG,EAAA,sBAGAopG,EAAAH,EAAAp8F,SAGAtK,EAAA2mG,EAAA3mG,eAGA8mG,GACAN,EAAA,SAAAO,KAAAH,KAAA1uE,MAAA0uE,EAAA1uE,KAAA8uE,UAAA,KACA,iBAAAR,EAAA,GAQAS,EAAAN,EAAAr8F,SAGA48F,GAAAlZ,OAAA,IACA6Y,EAAAvoG,KAAA0B,GAAAiH,QA7PA,sBA6PA,QACAA,QAAA,uEAIAkgG,GAAApB,EAAAtoG,EAAA0pG,YAAAxiG,EACAzF,GAAAzB,EAAAyB,OACA09E,GAAAn/E,EAAAm/E,WACAwqB,GAAAT,EAAAS,qBACAhgG,GAAAq/F,EAAAr/F,OACAigG,GAAAnoG,MAAAC,iBAAAwF,EAGA2iG,GAAAzoG,OAAAwuD,sBACAk6C,GAAAJ,MAAAK,cAAA7iG,EACA8iG,IAnEA19F,EAmEAlL,OAAAq5B,KAnEAo0B,EAmEAztD,OAlEA,SAAAwL,GACA,OAAAN,EAAAuiD,EAAAjiD,MAoEAq9F,GAAAC,GAAAlqG,EAAA,YACA02B,GAAAwzE,GAAAlqG,EAAA,OACAw3C,GAAA0yD,GAAAlqG,EAAA,WACA63B,GAAAqyE,GAAAlqG,EAAA,OACAmqG,GAAAD,GAAAlqG,EAAA,WACAoqG,GAAAF,GAAA9oG,OAAA,UAGAipG,GAAAC,GAAAL,IACAM,GAAAD,GAAA5zE,IACA8zE,GAAAF,GAAA9yD,IACAizD,GAAAH,GAAAzyE,IACA6yE,GAAAJ,GAAAH,IAGAQ,GAAAlpG,MAAAa,eAAA4E,EACA0jG,GAAAD,MAAAE,aAAA3jG,EASA,SAAA4jG,GAAAC,GACA,IAAArgG,GAAA,EACArB,EAAA,MAAA0hG,EAAA,EAAAA,EAAA1hG,OAGA,IADA+C,KAAA4+F,UACAtgG,EAAArB,GAAA,CACA,IAAA4hG,EAAAF,EAAArgG,GACA0B,KAAA+rB,IAAA8yE,EAAA,GAAAA,EAAA,KA+FA,SAAAC,GAAAH,GACA,IAAArgG,GAAA,EACArB,EAAA,MAAA0hG,EAAA,EAAAA,EAAA1hG,OAGA,IADA+C,KAAA4+F,UACAtgG,EAAArB,GAAA,CACA,IAAA4hG,EAAAF,EAAArgG,GACA0B,KAAA+rB,IAAA8yE,EAAA,GAAAA,EAAA,KA4GA,SAAAE,GAAAJ,GACA,IAAArgG,GAAA,EACArB,EAAA,MAAA0hG,EAAA,EAAAA,EAAA1hG,OAGA,IADA+C,KAAA4+F,UACAtgG,EAAArB,GAAA,CACA,IAAA4hG,EAAAF,EAAArgG,GACA0B,KAAA+rB,IAAA8yE,EAAA,GAAAA,EAAA,KA+FA,SAAAG,GAAAxxE,GACA,IAAAlvB,GAAA,EACArB,EAAA,MAAAuwB,EAAA,EAAAA,EAAAvwB,OAGA,IADA+C,KAAAi/F,SAAA,IAAAF,KACAzgG,EAAArB,GACA+C,KAAAorB,IAAAoC,EAAAlvB,IA2CA,SAAA4gG,GAAAP,GACA,IAAAp7F,EAAAvD,KAAAi/F,SAAA,IAAAH,GAAAH,GACA3+F,KAAAitB,KAAA1pB,EAAA0pB,KAmGA,SAAAkyE,GAAA5pG,EAAA6pG,GACA,IAAAC,EAAA9+F,GAAAhL,GACA+pG,GAAAD,GAAAE,GAAAhqG,GACAiqG,GAAAH,IAAAC,GAAA3B,GAAApoG,GACAkqG,GAAAJ,IAAAC,IAAAE,GAAAlD,GAAA/mG,GACAmqG,EAAAL,GAAAC,GAAAE,GAAAC,EACA3vF,EAAA4vF,EAloBA,SAAA3pG,EAAA4pG,GAIA,IAHA,IAAArhG,GAAA,EACAwR,EAAA1P,MAAArK,KAEAuI,EAAAvI,GACA+Z,EAAAxR,GAAAqhG,EAAArhG,GAEA,OAAAwR,EA2nBA8vF,CAAArqG,EAAA0H,OAAAqF,QAAA,GACArF,EAAA6S,EAAA7S,OAEA,QAAApH,KAAAN,GACA6pG,IAAAjpG,EAAA1B,KAAAc,EAAAM,IACA6pG,IAEA,UAAA7pG,GAEA2pG,IAAA,UAAA3pG,GAAA,UAAAA,IAEA4pG,IAAA,UAAA5pG,GAAA,cAAAA,GAAA,cAAAA,IAEAgqG,GAAAhqG,EAAAoH,KAEA6S,EAAAhS,KAAAjI,GAGA,OAAAia,EAWA,SAAAgwF,GAAA1mE,EAAAvjC,GAEA,IADA,IAAAoH,EAAAm8B,EAAAn8B,OACAA,KACA,GAAA8iG,GAAA3mE,EAAAn8B,GAAA,GAAApH,GACA,OAAAoH,EAGA,SA0BA,SAAA+iG,GAAAzqG,GACA,aAAAA,OACAuF,IAAAvF,EAAAimG,EAAAP,EAEAuC,UAAAxoG,OAAAO,GA0aA,SAAAA,GACA,IAAA0qG,EAAA9pG,EAAA1B,KAAAc,EAAAioG,IACAx0F,EAAAzT,EAAAioG,IAEA,IACAjoG,EAAAioG,SAAA1iG,EACA,IAAAolG,GAAA,EACG,MAAAjhG,IAEH,IAAA6Q,EAAAstF,EAAA3oG,KAAAc,GACA2qG,IACAD,EACA1qG,EAAAioG,IAAAx0F,SAEAzT,EAAAioG,KAGA,OAAA1tF,EA1bAqwF,CAAA5qG,GA4iBA,SAAAA,GACA,OAAA6nG,EAAA3oG,KAAAc,GA5iBA6qG,CAAA7qG,GAUA,SAAA8qG,GAAA9qG,GACA,OAAA+qG,GAAA/qG,IAAAyqG,GAAAzqG,IAAAglG,EAiBA,SAAAgG,GAAAhrG,EAAAirG,EAAAC,EAAAC,EAAA7xF,GACA,OAAAtZ,IAAAirG,IAGA,MAAAjrG,GAAA,MAAAirG,IAAAF,GAAA/qG,KAAA+qG,GAAAE,GACAjrG,MAAAirG,KAmBA,SAAAxqG,EAAAwqG,EAAAC,EAAAC,EAAAC,EAAA9xF,GACA,IAAA+xF,EAAArgG,GAAAvK,GACA6qG,EAAAtgG,GAAAigG,GACAM,EAAAF,EAAApG,EAAAuG,GAAA/qG,GACAgrG,EAAAH,EAAArG,EAAAuG,GAAAP,GAKAS,GAHAH,KAAAvG,EAAAW,EAAA4F,IAGA5F,EACAgG,GAHAF,KAAAzG,EAAAW,EAAA8F,IAGA9F,EACAiG,EAAAL,GAAAE,EAEA,GAAAG,GAAAxD,GAAA3nG,GAAA,CACA,IAAA2nG,GAAA6C,GACA,SAEAI,GAAA,EACAK,GAAA,EAEA,GAAAE,IAAAF,EAEA,OADApyF,MAAA,IAAAqwF,IACA0B,GAAAtE,GAAAtmG,GACAorG,GAAAprG,EAAAwqG,EAAAC,EAAAC,EAAAC,EAAA9xF,GAiKA,SAAA7Y,EAAAwqG,EAAAx3F,EAAAy3F,EAAAC,EAAAC,EAAA9xF,GACA,OAAA7F,GACA,KAAA0yF,EACA,GAAA1lG,EAAAqrG,YAAAb,EAAAa,YACArrG,EAAAsrG,YAAAd,EAAAc,WACA,SAEAtrG,IAAAurG,OACAf,IAAAe,OAEA,KAAA9F,EACA,QAAAzlG,EAAAqrG,YAAAb,EAAAa,aACAV,EAAA,IAAA5tB,GAAA/8E,GAAA,IAAA+8E,GAAAytB,KAKA,KAAA9F,EACA,KAAAC,EACA,KAAAK,EAGA,OAAA+E,IAAA/pG,GAAAwqG,GAEA,KAAA5F,EACA,OAAA5kG,EAAAnB,MAAA2rG,EAAA3rG,MAAAmB,EAAAkZ,SAAAsxF,EAAAtxF,QAEA,KAAAksF,EACA,KAAAE,EAIA,OAAAtlG,GAAAwqG,EAAA,GAEA,KAAAzF,EACA,IAAAyG,EAAA/E,EAEA,KAAApB,EACA,IAAAoG,EAAAhB,EAAApG,EAGA,GAFAmH,MAAA9E,GAEA1mG,EAAAi3B,MAAAuzE,EAAAvzE,OAAAw0E,EACA,SAGA,IAAAC,EAAA7yF,EAAA1Z,IAAAa,GACA,GAAA0rG,EACA,OAAAA,GAAAlB,EAEAC,GAAAnG,EAGAzrF,EAAAkd,IAAA/1B,EAAAwqG,GACA,IAAA1wF,EAAAsxF,GAAAI,EAAAxrG,GAAAwrG,EAAAhB,GAAAC,EAAAC,EAAAC,EAAA9xF,GAEA,OADAA,EAAA,OAAA7Y,GACA8Z,EAEA,KAAAyrF,EACA,GAAAiD,GACA,OAAAA,GAAA/pG,KAAAuB,IAAAwoG,GAAA/pG,KAAA+rG,GAGA,SA9NAmB,CAAA3rG,EAAAwqG,EAAAM,EAAAL,EAAAC,EAAAC,EAAA9xF,GAEA,KAAA4xF,EAAApG,GAAA,CACA,IAAAuH,EAAAX,GAAA9qG,EAAA1B,KAAAuB,EAAA,eACA6rG,EAAAX,GAAA/qG,EAAA1B,KAAA+rG,EAAA,eAEA,GAAAoB,GAAAC,EAAA,CACA,IAAAC,EAAAF,EAAA5rG,EAAAT,QAAAS,EACA+rG,EAAAF,EAAArB,EAAAjrG,QAAAirG,EAGA,OADA3xF,MAAA,IAAAqwF,IACAyB,EAAAmB,EAAAC,EAAAtB,EAAAC,EAAA7xF,IAGA,IAAAsyF,EACA,SAGA,OADAtyF,MAAA,IAAAqwF,IA6NA,SAAAlpG,EAAAwqG,EAAAC,EAAAC,EAAAC,EAAA9xF,GACA,IAAA4yF,EAAAhB,EAAApG,EACA2H,EAAAC,GAAAjsG,GACAksG,EAAAF,EAAA/kG,OAEAklG,EADAF,GAAAzB,GACAvjG,OAEA,GAAAilG,GAAAC,IAAAV,EACA,SAGA,IADA,IAAAnjG,EAAA4jG,EACA5jG,KAAA,CACA,IAAAzI,EAAAmsG,EAAA1jG,GACA,KAAAmjG,EAAA5rG,KAAA2qG,EAAArqG,EAAA1B,KAAA+rG,EAAA3qG,IACA,SAIA,IAAA6rG,EAAA7yF,EAAA1Z,IAAAa,GACA,GAAA0rG,GAAA7yF,EAAA1Z,IAAAqrG,GACA,OAAAkB,GAAAlB,EAEA,IAAA1wF,GAAA,EACAjB,EAAAkd,IAAA/1B,EAAAwqG,GACA3xF,EAAAkd,IAAAy0E,EAAAxqG,GAGA,IADA,IAAAosG,EAAAX,IACAnjG,EAAA4jG,GAAA,CACArsG,EAAAmsG,EAAA1jG,GACA,IAAA+jG,EAAArsG,EAAAH,GACAysG,EAAA9B,EAAA3qG,GAEA,GAAA6qG,EACA,IAAA6B,EAAAd,EACAf,EAAA4B,EAAAD,EAAAxsG,EAAA2qG,EAAAxqG,EAAA6Y,GACA6xF,EAAA2B,EAAAC,EAAAzsG,EAAAG,EAAAwqG,EAAA3xF,GAGA,UAAA/T,IAAAynG,EACAF,IAAAC,GAAA3B,EAAA0B,EAAAC,EAAA7B,EAAAC,EAAA7xF,GACA0zF,GACA,CACAzyF,GAAA,EACA,MAEAsyF,MAAA,eAAAvsG,GAEA,GAAAia,IAAAsyF,EAAA,CACA,IAAAI,EAAAxsG,EAAA2hD,YACA8qD,EAAAjC,EAAA7oD,YAGA6qD,GAAAC,GACA,gBAAAzsG,GAAA,gBAAAwqG,KACA,mBAAAgC,mBACA,mBAAAC,qBACA3yF,GAAA,GAKA,OAFAjB,EAAA,OAAA7Y,GACA6Y,EAAA,OAAA2xF,GACA1wF,EAzRA4yF,CAAA1sG,EAAAwqG,EAAAC,EAAAC,EAAAC,EAAA9xF,GA3DA8zF,CAAAptG,EAAAirG,EAAAC,EAAAC,EAAAH,GAAA1xF,IAsEA,SAAA+zF,GAAArtG,GACA,SAAAstG,GAAAttG,KAwaA2K,EAxaA3K,EAyaA0nG,QAAA/8F,MAtaA4iG,GAAAvtG,GAAA8nG,GAAA1B,GACAx+F,KAAA+gG,GAAA3oG,IAoaA,IAAA2K,EA9YA,SAAA6iG,GAAA/sG,GACA,GAyZAgtG,GADAztG,EAxZAS,IAyZAT,EAAAoiD,YACAhlC,EAAA,mBAAAqwF,KAAA9sG,WAAA4mG,EAEAvnG,IAAAod,EA3ZA,OAAAirF,GAAA5nG,GAuZA,IAAAT,EACAytG,EACArwF,EAvZA7C,EAAA,GACA,QAAAja,KAAAb,OAAAgB,GACAG,EAAA1B,KAAAuB,EAAAH,IAAA,eAAAA,GACAia,EAAAhS,KAAAjI,GAGA,OAAAia,EAgBA,SAAAsxF,GAAAhoE,EAAAonE,EAAAC,EAAAC,EAAAC,EAAA9xF,GACA,IAAA4yF,EAAAhB,EAAApG,EACA4I,EAAA7pE,EAAAn8B,OACAklG,EAAA3B,EAAAvjG,OAEA,GAAAgmG,GAAAd,KAAAV,GAAAU,EAAAc,GACA,SAGA,IAAAvB,EAAA7yF,EAAA1Z,IAAAikC,GACA,GAAAsoE,GAAA7yF,EAAA1Z,IAAAqrG,GACA,OAAAkB,GAAAlB,EAEA,IAAAliG,GAAA,EACAwR,GAAA,EACAozF,EAAAzC,EAAAnG,EAAA,IAAA0E,QAAAlkG,EAMA,IAJA+T,EAAAkd,IAAAqN,EAAAonE,GACA3xF,EAAAkd,IAAAy0E,EAAApnE,KAGA96B,EAAA2kG,GAAA,CACA,IAAAE,EAAA/pE,EAAA96B,GACAgkG,EAAA9B,EAAAliG,GAEA,GAAAoiG,EACA,IAAA6B,EAAAd,EACAf,EAAA4B,EAAAa,EAAA7kG,EAAAkiG,EAAApnE,EAAAvqB,GACA6xF,EAAAyC,EAAAb,EAAAhkG,EAAA86B,EAAAonE,EAAA3xF,GAEA,QAAA/T,IAAAynG,EAAA,CACA,GAAAA,EACA,SAEAzyF,GAAA,EACA,MAGA,GAAAozF,GACA,IAAA3G,EAAAiE,EAAA,SAAA8B,EAAAc,GACA,GA72BAvtG,EA62BAutG,GAAAF,EA52BAp0E,IAAAj5B,KA62BAstG,IAAAb,GAAA3B,EAAAwC,EAAAb,EAAA7B,EAAAC,EAAA7xF,IACA,OAAAq0F,EAAAplG,KAAAslG,GA/2BA,IAAAvtG,IAi3BW,CACXia,GAAA,EACA,YAEK,GACLqzF,IAAAb,IACA3B,EAAAwC,EAAAb,EAAA7B,EAAAC,EAAA7xF,GACA,CACAiB,GAAA,EACA,OAKA,OAFAjB,EAAA,OAAAuqB,GACAvqB,EAAA,OAAA2xF,GACA1wF,EAyKA,SAAAmyF,GAAAjsG,GACA,OApZA,SAAAA,EAAAqtG,EAAAC,GACA,IAAAxzF,EAAAuzF,EAAArtG,GACA,OAAAuK,GAAAvK,GAAA8Z,EAhuBA,SAAAspB,EAAA5L,GAKA,IAJA,IAAAlvB,GAAA,EACArB,EAAAuwB,EAAAvwB,OACAsmG,EAAAnqE,EAAAn8B,SAEAqB,EAAArB,GACAm8B,EAAAmqE,EAAAjlG,GAAAkvB,EAAAlvB,GAEA,OAAA86B,EAwtBAoqE,CAAA1zF,EAAAwzF,EAAAttG,IAkZAytG,CAAAztG,EAAAq4B,GAAAq1E,IAWA,SAAAC,GAAA5mG,EAAAlH,GACA,IAsHAN,EACA8b,EAvHA9N,EAAAxG,EAAAkiG,SACA,OAuHA,WADA5tF,SADA9b,EArHAM,KAuHA,UAAAwb,GAAA,UAAAA,GAAA,WAAAA,EACA,cAAA9b,EACA,OAAAA,GAxHAgO,EAAA,iBAAA1N,EAAA,iBACA0N,EAAAxG,IAWA,SAAA+gG,GAAA9nG,EAAAH,GACA,IAAAN,EAxjCA,SAAAS,EAAAH,GACA,aAAAG,OAAA8E,EAAA9E,EAAAH,GAujCA+tG,CAAA5tG,EAAAH,GACA,OAAA+sG,GAAArtG,UAAAuF,EAp2BA4jG,GAAAxoG,UAAA0oG,MAvEA,WACA5+F,KAAAi/F,SAAAjB,MAAA,SACAh+F,KAAAitB,KAAA,GAsEAyxE,GAAAxoG,UAAA,OAzDA,SAAAL,GACA,IAAAia,EAAA9P,KAAA8uB,IAAAj5B,WAAAmK,KAAAi/F,SAAAppG,GAEA,OADAmK,KAAAitB,MAAAnd,EAAA,IACAA,GAuDA4uF,GAAAxoG,UAAAf,IA3CA,SAAAU,GACA,IAAA0N,EAAAvD,KAAAi/F,SACA,GAAAjB,GAAA,CACA,IAAAluF,EAAAvM,EAAA1N,GACA,OAAAia,IAAAsqF,OAAAt/F,EAAAgV,EAEA,OAAA3Z,EAAA1B,KAAA8O,EAAA1N,GAAA0N,EAAA1N,QAAAiF,GAsCA4jG,GAAAxoG,UAAA44B,IA1BA,SAAAj5B,GACA,IAAA0N,EAAAvD,KAAAi/F,SACA,OAAAjB,QAAAljG,IAAAyI,EAAA1N,GAAAM,EAAA1B,KAAA8O,EAAA1N,IAyBA6oG,GAAAxoG,UAAA61B,IAZA,SAAAl2B,EAAAN,GACA,IAAAgO,EAAAvD,KAAAi/F,SAGA,OAFAj/F,KAAAitB,MAAAjtB,KAAA8uB,IAAAj5B,GAAA,IACA0N,EAAA1N,GAAAmoG,SAAAljG,IAAAvF,EAAA6kG,EAAA7kG,EACAyK,MAuHA8+F,GAAA5oG,UAAA0oG,MApFA,WACA5+F,KAAAi/F,SAAA,GACAj/F,KAAAitB,KAAA,GAmFA6xE,GAAA5oG,UAAA,OAvEA,SAAAL,GACA,IAAA0N,EAAAvD,KAAAi/F,SACA3gG,EAAAwhG,GAAAv8F,EAAA1N,GAEA,QAAAyI,EAAA,IAIAA,GADAiF,EAAAtG,OAAA,EAEAsG,EAAA4W,MAEA5c,GAAA9I,KAAA8O,EAAAjF,EAAA,KAEA0B,KAAAitB,KACA,KA0DA6xE,GAAA5oG,UAAAf,IA9CA,SAAAU,GACA,IAAA0N,EAAAvD,KAAAi/F,SACA3gG,EAAAwhG,GAAAv8F,EAAA1N,GAEA,OAAAyI,EAAA,OAAAxD,EAAAyI,EAAAjF,GAAA,IA2CAwgG,GAAA5oG,UAAA44B,IA/BA,SAAAj5B,GACA,OAAAiqG,GAAA9/F,KAAAi/F,SAAAppG,IAAA,GA+BAipG,GAAA5oG,UAAA61B,IAlBA,SAAAl2B,EAAAN,GACA,IAAAgO,EAAAvD,KAAAi/F,SACA3gG,EAAAwhG,GAAAv8F,EAAA1N,GAQA,OANAyI,EAAA,KACA0B,KAAAitB,KACA1pB,EAAAzF,KAAA,CAAAjI,EAAAN,KAEAgO,EAAAjF,GAAA,GAAA/I,EAEAyK,MAyGA++F,GAAA7oG,UAAA0oG,MAtEA,WACA5+F,KAAAitB,KAAA,EACAjtB,KAAAi/F,SAAA,CACAr7F,KAAA,IAAA86F,GACA3hG,IAAA,IAAAutB,IAAAw0E,IACA35E,OAAA,IAAAu5E,KAkEAK,GAAA7oG,UAAA,OArDA,SAAAL,GACA,IAAAia,EAAA6zF,GAAA3jG,KAAAnK,GAAA,OAAAA,GAEA,OADAmK,KAAAitB,MAAAnd,EAAA,IACAA,GAmDAivF,GAAA7oG,UAAAf,IAvCA,SAAAU,GACA,OAAA8tG,GAAA3jG,KAAAnK,GAAAV,IAAAU,IAuCAkpG,GAAA7oG,UAAA44B,IA3BA,SAAAj5B,GACA,OAAA8tG,GAAA3jG,KAAAnK,GAAAi5B,IAAAj5B,IA2BAkpG,GAAA7oG,UAAA61B,IAdA,SAAAl2B,EAAAN,GACA,IAAAgO,EAAAogG,GAAA3jG,KAAAnK,GACAo3B,EAAA1pB,EAAA0pB,KAIA,OAFA1pB,EAAAwoB,IAAAl2B,EAAAN,GACAyK,KAAAitB,MAAA1pB,EAAA0pB,QAAA,IACAjtB,MAyDAg/F,GAAA9oG,UAAAk1B,IAAA4zE,GAAA9oG,UAAA4H,KAnBA,SAAAvI,GAEA,OADAyK,KAAAi/F,SAAAlzE,IAAAx2B,EAAA6kG,GACAp6F,MAkBAg/F,GAAA9oG,UAAA44B,IANA,SAAAv5B,GACA,OAAAyK,KAAAi/F,SAAAnwE,IAAAv5B,IAqGA2pG,GAAAhpG,UAAA0oG,MA3EA,WACA5+F,KAAAi/F,SAAA,IAAAH,GACA9+F,KAAAitB,KAAA,GA0EAiyE,GAAAhpG,UAAA,OA9DA,SAAAL,GACA,IAAA0N,EAAAvD,KAAAi/F,SACAnvF,EAAAvM,EAAA,OAAA1N,GAGA,OADAmK,KAAAitB,KAAA1pB,EAAA0pB,KACAnd,GA0DAovF,GAAAhpG,UAAAf,IA9CA,SAAAU,GACA,OAAAmK,KAAAi/F,SAAA9pG,IAAAU,IA8CAqpG,GAAAhpG,UAAA44B,IAlCA,SAAAj5B,GACA,OAAAmK,KAAAi/F,SAAAnwE,IAAAj5B,IAkCAqpG,GAAAhpG,UAAA61B,IArBA,SAAAl2B,EAAAN,GACA,IAAAgO,EAAAvD,KAAAi/F,SACA,GAAA17F,aAAAu7F,GAAA,CACA,IAAA+E,EAAAtgG,EAAA07F,SACA,IAAA30E,IAAAu5E,EAAA5mG,OAAAk9F,EAAA,EAGA,OAFA0J,EAAA/lG,KAAA,CAAAjI,EAAAN,IACAyK,KAAAitB,OAAA1pB,EAAA0pB,KACAjtB,KAEAuD,EAAAvD,KAAAi/F,SAAA,IAAAF,GAAA8E,GAIA,OAFAtgG,EAAAwoB,IAAAl2B,EAAAN,GACAyK,KAAAitB,KAAA1pB,EAAA0pB,KACAjtB,MA+hBA,IAAA0jG,GAAAjG,GAAA,SAAAznG,GACA,aAAAA,EACA,IAEAA,EAAAhB,OAAAgB,GA9sCA,SAAAojC,EAAAojE,GAMA,IALA,IAAAl+F,GAAA,EACArB,EAAA,MAAAm8B,EAAA,EAAAA,EAAAn8B,OACA6mG,EAAA,EACAh0F,EAAA,KAEAxR,EAAArB,GAAA,CACA,IAAA1H,EAAA6jC,EAAA96B,GACAk+F,EAAAjnG,EAAA+I,EAAA86B,KACAtpB,EAAAg0F,KAAAvuG,GAGA,OAAAua,EAmsCAi0F,CAAAtG,GAAAznG,GAAA,SAAAguG,GACA,OAAAzG,GAAA9oG,KAAAuB,EAAAguG,OAsdA,WACA,UA5cAjD,GAAAf,GAkCA,SAAAH,GAAAtqG,EAAA0H,GAEA,SADAA,EAAA,MAAAA,EAAA64E,EAAA74E,KAEA,iBAAA1H,GAAAqmG,EAAAz+F,KAAA5H,KACAA,GAAA,GAAAA,EAAA,MAAAA,EAAA0H,EA4DA,SAAAihG,GAAAh+F,GACA,SAAAA,EAAA,CACA,IACA,OAAA88F,EAAAvoG,KAAAyL,GACK,MAAAjB,IACL,IACA,OAAAiB,EAAA,GACK,MAAAjB,KAEL,SAmCA,SAAA8gG,GAAAxqG,EAAAirG,GACA,OAAAjrG,IAAAirG,GAAAjrG,MAAAirG,MA5IA3C,IAAAkD,GAAA,IAAAlD,GAAA,IAAAoG,YAAA,MAAAvI,GACApxE,IAAAy2E,GAAA,IAAAz2E,KAAAywE,GACA3vD,IAzzCA,oBAyzCA21D,GAAA31D,GAAAC,YACA5f,IAAAs1E,GAAA,IAAAt1E,KAAA4vE,GACA0C,IApzCA,oBAozCAgD,GAAA,IAAAhD,OACAgD,GAAA,SAAAxrG,GACA,IAAAua,EAAAkwF,GAAAzqG,GACAytG,EAAAlzF,GAAAorF,EAAA3lG,EAAAoiD,iBAAA78C,EACAopG,EAAAlB,EAAA9E,GAAA8E,GAAA,GAEA,GAAAkB,EACA,OAAAA,GACA,KAAAjG,GAAA,OAAAvC,EACA,KAAAyC,GAAA,OAAApD,EACA,KAAAqD,GAAA,MAr0CA,mBAs0CA,KAAAC,GAAA,OAAAhD,EACA,KAAAiD,GAAA,MAh0CA,mBAm0CA,OAAAxuF,IA8IA,IAAAyvF,GAAAc,GAAA,WAA8C,OAAAxiG,UAA9C,IAAkEwiG,GAAA,SAAA9qG,GAClE,OAAA+qG,GAAA/qG,IAAAY,EAAA1B,KAAAc,EAAA,YACAgoG,GAAA9oG,KAAAc,EAAA,WA0BAgL,GAAAH,MAAAG,QAgDA,IAAAo9F,GAAAD,IA4OA,WACA,UA1LA,SAAAoF,GAAAvtG,GACA,IAAAstG,GAAAttG,GACA,SAIA,IAAAyT,EAAAg3F,GAAAzqG,GACA,OAAAyT,GAAA6xF,GAAA7xF,GAAA8xF,GAAA9xF,GAAAyxF,GAAAzxF,GAAAmyF,EA6BA,SAAAgJ,GAAA5uG,GACA,uBAAAA,GACAA,GAAA,GAAAA,EAAA,MAAAA,GAAAugF,EA4BA,SAAA+sB,GAAAttG,GACA,IAAA8b,SAAA9b,EACA,aAAAA,IAAA,UAAA8b,GAAA,YAAAA,GA2BA,SAAAivF,GAAA/qG,GACA,aAAAA,GAAA,iBAAAA,EAoBA,IAAA+mG,GAAAD,EAhiDA,SAAAn8F,GACA,gBAAA3K,GACA,OAAA2K,EAAA3K,IA8hDA6uG,CAAA/H,GAnvBA,SAAA9mG,GACA,OAAA+qG,GAAA/qG,IACA4uG,GAAA5uG,EAAA0H,WAAA4+F,EAAAmE,GAAAzqG,KA+wBA,SAAA84B,GAAAr4B,GACA,OA1NA,OADAT,EA2NAS,IA1NAmuG,GAAA5uG,EAAA0H,UAAA6lG,GAAAvtG,GA0NA4pG,GAAAnpG,GAAA+sG,GAAA/sG,GA3NA,IAAAT,EAqQAxB,EAAAD,QAlNA,SAAAyB,EAAAirG,GACA,OAAAD,GAAAhrG,EAAAirG,gECtmDA,SAAAr3E,GAAA/0B,EAAAQ,EAAAmxB,EAAA,sBAAA4hE,IAAA,IAAA0c,EAAAjwG,EAAA,GAAAkwG,EAAAlwG,EAAA,GAAAmwG,EAAAnwG,EAAA,IAAAowG,EAAApwG,EAAA2B,EAAAwuG,GAAAE,EAAArwG,EAAA,IAAAswG,EAAAtwG,EAAA2B,EAAA0uG,GAAAE,EAAAvwG,EAAA,GAAAwwG,EAAAxwG,EAAA,IAAAywG,EAAAzwG,EAAA,GAAA0wG,EAAA1wG,EAAA,GAAA2wG,EAAA3wG,EAAA,GAAA4wG,EAAA5wG,EAAA2B,EAAAgvG,GAAAE,EAAA7wG,EAAA,IAAA8wG,EAAA9wG,EAAA2B,EAAAkvG,GAAAE,EAAA/wG,EAAA,GAAAgxG,EAAAhxG,EAAA,GAAAixG,EAAAjxG,EAAA2B,EAAAqvG,GAuBMt8E,EAASH,oBAAUQ,GAMV,SAASw+D,EAA4Bt1C,GAChDryC,KAAKqyC,WAAaA,EAClBryC,KAAKslG,cAAgB,GAGrBjzD,EAAW/lB,GAAG2oB,qBACV,SAAApI,GACI,GAAKA,EAAM3a,WAAcmgB,EAAW5iB,WAApC,CAGA,IAAMtO,EACA0rB,EAAM+G,MACFvB,EAAWg3C,iBAAmBh3C,EAAW01C,iBAI7Cj6D,EAAO3M,GAAWA,EAAQwK,gBAAmB,KAEnD0mB,EAAW5iB,WAAWgB,cAClB3C,EACA+e,EAAMqvB,UACNrvB,EAAMqJ,cAOtByxC,EAA4BzxF,UAAUy0F,uBAAyB,WAAW,IAAAjjD,EAAA1nC,KAChEqyC,EAAaryC,KAAKqyC,WAClBkzD,EAAWlzD,EAAWuf,KAE5B5xD,KAAKwlG,kBAAoB,IAAIC,IAAsBF,EAC/CvlG,KAAKqyC,WAAW9nB,cAEpBg7E,EAASnyD,YAAY+e,IAAWv6D,eAAgB,SAAAm7F,GACvCA,EAAcn/C,OAMfvB,EAAW8lB,IAAI6zB,uBAMvBuZ,EAASnyD,YACL+e,IAAWt6D,oBACX,SAACk7F,EAAexsB,IAGXwsB,EAAcn/C,OACRvB,EAAWqhD,kBACVntB,EAASwsB,EAAcpnE,kBAIvC45E,EAASnyD,YAAY+e,IAAW57D,qBAC5B,WAII4zB,IAAW+K,cAAcgL,eAGzBmS,EAAW8lB,IAAIw3B,cAAa,GAAM5nD,KAC9B,WACIsK,EAAWk2C,gBAAiB,GAEhC,kBACIz/D,EAAOlZ,KACH,qDAIpB5P,KAAKwlG,kBAAkBE,QAAQvzC,IAAWh4D,gBACtC86C,mBAEJj1C,KAAKwlG,kBAAkBE,QAAQvzC,IAAW75D,WACtC28C,qBAGJswD,EAASnyD,YAAY+e,IAAW75D,WAC5B,WACIovC,EAAK2K,WAAWy2C,4BAA6B,EAG7C9zF,OAAOq5B,KAAKk3E,EAASn5C,iBAAiBnrD,QAAQ,SAAApL,GAC1C,IAAMi/B,EACAqK,YAAiC,cAAA7hC,OACjBzH,GACd,CAAEN,MAAOgwG,EAASn5C,gBAAgBv2D,KAE1Cs0B,IAAW+K,cAAcJ,KAI7B9/B,OAAOq5B,KAAKk3E,EAASn7E,KAAKgiC,iBAAiBnrD,QAAQ,SAAApL,GAC/C,IAAMi/B,EACAqK,YAAiC,QAAA7hC,OACvBzH,GACR,CAAEN,MAAOgwG,EAASn7E,KAAKgiC,gBAAgBv2D,KAE/Cs0B,IAAW+K,cAAcJ,OAIrC90B,KAAKwlG,kBAAkBE,QAAQvzC,IAAWv4D,gBACtCq7C,oBACAm7C,oBAEJpwF,KAAKwlG,kBAAkBE,QAAQvzC,IAAWz4D,mBACtCu7C,oBACAm7C,oBACJpwF,KAAKwlG,kBAAkBE,QAAQvzC,IAAWx4D,+BACtCs7C,oBACAm7C,qBAEJpwF,KAAKwlG,kBAAkBE,QAAQvzC,IAAWt4D,qBACtCo7C,oBACAm7C,wBAEJpwF,KAAKwlG,kBAAkBE,QAAQvzC,IAAWn5D,kBACtCi8C,oBACAm7C,qBAEJpwF,KAAKwlG,kBAAkBE,QAAQvzC,IAAW37D,wBACtCy+C,oBACAm7C,2BAEJpwF,KAAKwlG,kBAAkBE,QAAQvzC,IAAW17D,YACtCw+C,oBACAm7C,6BACJmV,EAASnyD,YACL+e,IAAW17D,YACX,kBAAM0zB,IAAW+K,cAAcuJ,iBAEnCz+B,KAAKwlG,kBAAkBE,QAAQvzC,IAAW14D,kBACtCw7C,oBACAm7C,qBAEJpwF,KAAKwlG,kBAAkBE,QAAQvzC,IAAWx6D,kBACtCs9C,oBACAm7C,qBAEJmV,EAASnyD,YAAY+e,IAAWp6D,mBAC5B,SAACopB,EAAS1R,GACD0R,EAAQyyB,OACTvB,EAAW9nB,aAAa2C,KACpB+nB,oBACAm7C,qBAA0C3gF,KAI1D81F,EAASnyD,YAAY+e,IAAW/6D,sBAC5B,SAAA27F,GACI1gD,EAAWglD,uBAAuBtE,KAG1C/yF,KAAKwlG,kBAAkBE,QAAQvzC,IAAW95D,cACtC48C,oBACAm7C,wBAEJpwF,KAAKwlG,kBAAkBE,QAAQvzC,IAAWt7D,oBACtCo+C,mBACAm7C,cAEJpwF,KAAKwlG,kBAAkBE,QAAQvzC,IAAW16D,mBACtCw9C,oBACAm7C,sBAEJmV,EAASnyD,YAAY+e,IAAWz6D,WAC5B,WACIyyB,IAAW+K,cAAcyK,eACzB0S,EAAW9nB,aAAa2C,KACpB+nB,oBACAm7C,gBAGZmV,EAASnyD,YAAY+e,IAAWn4D,uBAC5B,SAAA+4F,GACI5oE,IAAW0K,oBACPgL,YACInC,IACA,CAAE+vB,IAAKslC,EAAcn/C,WAGrC5zC,KAAKwlG,kBAAkBE,QAAQvzC,IAAW54D,uBACtC07C,0BAEJj1C,KAAKwlG,kBAAkBE,QAAQvzC,IAAW93D,6BACtC46C,gCAEJj1C,KAAKwlG,kBAAkBE,QAAQvzC,IAAW53D,kCACtC06C,qCAEJj1C,KAAKwlG,kBAAkBE,QACnBvzC,IAAW33D,mCACXy6C,sCAEJj1C,KAAKwlG,kBAAkBE,QAAQvzC,IAAWj5D,qBACtC+7C,wBAEJswD,EAASnyD,YACL+e,IAAWp7D,wBACX,SAACg8F,EAAetjF,GACPsjF,EAAcn/C,OACfvB,EAAW9nB,aAAa2C,KACpB+nB,oBACAm7C,eACA3gF,KAIhB81F,EAASI,+BAA+B,SAACj5F,EAAM9L,GAC3C,IAAMy5D,EAAchoB,EAAW6oB,mBAAmBt6D,GAE7Cy5D,GAILA,EAAYurC,YACRl5F,EAAKd,QAAQpN,UAAU,qBAAqBvB,QAC5CyP,EAAKnX,SAGbyK,KAAKwlG,kBAAkBE,QAAQvzC,IAAWn6D,OACtCi9C,UACJswD,EAASnyD,YAAY+e,IAAWn6D,OAC5B,WACIq6C,EAAWy5C,UAEnByZ,EAASnyD,YAAY+e,IAAW/3D,iBAC5Bi4C,EAAWkiD,kBAAkBz+F,KAAKu8C,IAEtCryC,KAAKwlG,kBAAkBE,QAAQvzC,IAAWx5D,iBACtCs8C,sBAEJswD,EAASnyD,YAAY+e,IAAW55D,kBAC5B85C,EAAWk/C,eAAez7F,KAAKu8C,IACnCkzD,EAASnyD,YAAY+e,IAAW/5D,4BAC5Bi6C,EAAW4/C,wBAAwBn8F,KAAKu8C,IAC5CkzD,EAASnyD,YAAY+e,IAAW35D,gBAC5B65C,EAAWg6C,aAAav2F,KAAKu8C,IACjCryC,KAAKwlG,kBAAkBE,QAAQvzC,IAAW15D,SACtCw8C,mBAEJswD,EAASnyD,YAAY+e,IAAW96D,qBAC5Bg7C,EAAWggD,qBAAqBv8F,KAAKu8C,IAEzCkzD,EAASnyD,YAAY+e,IAAWl6D,mBAAoB,SAAA2nF,GAChDvtC,EAAW8/C,mBAAmBvS,GAG1BvtC,EAAW5iB,YAAc4iB,EAAWg8C,eACpCh8C,EAAW/lB,GAAG2oB,yBACV,SAAA4wD,GACI,IAAMC,EAAY,CACdr2F,MAAOo2F,EAAgBE,WACvB7mG,GAAI,kBACJya,OAAQksF,EAAgBG,aAG5B77E,IAAWmJ,QAAQ1c,KAAK0K,UAAUwkF,QAKlDP,EAASnyD,YAAY+e,IAAWz5D,iBAC5B25C,EAAW+/C,kBAAkBt8F,KAAKu8C,IAEtCkzD,EAASnyD,YAAY6yD,IAAqBnvB,iBACtC,SAACqR,EAAauE,GACVr6C,EAAW81C,YAAcA,EACzB91C,EAAWq6C,aAAeA,EAC1Br6C,EAAW9nB,aAAa2C,KACpB+nB,sBAA2CkzC,EAC3CuE,KAGZ6Y,EAASnyD,YACL+e,IAAWj6D,iBAGX,SAACqW,EAAKynE,EAAakwB,EAAKC,EAAOC,GAC3B,IAAMlnG,EAAKsH,UAAQmI,mBAAmBJ,GAEtC8jC,EAAW9nB,aAAa2C,KACpB+nB,mBACA/1C,EAAIgnG,EAAKE,KAGrBb,EAASnyD,YACL+e,IAAWh6D,yBAGX,SAACoW,EAAKynE,EAAakwB,EAAKC,EAAOC,GAC3B,IAAMlnG,EAAKsH,UAAQmI,mBAAmBJ,GAEtC8jC,EAAW9nB,aAAa2C,KACpB+nB,2BACA/1C,EAAIgnG,EAAKE,KAGrBb,EAASnyD,YAAY+e,IAAW/4D,gBAC5B,SAACmV,EAAKoL,GACF,IAAMza,EAAKsH,UAAQmI,mBAAmBJ,GAChC8rD,EAAchoB,EAAW6oB,mBAAmBh8D,GAE7Cm7D,GAAeA,EAAYkgB,UAAY5gE,IAG5C0gD,EAAYkgB,QAAU5gE,EACtB04B,EAAW9nB,aAAa2C,KACpB+nB,sBAA2C/1C,EAAIya,MAG3D4rF,EAASnyD,YAAY+e,IAAWz3D,sBAC5B,SAACkG,EAAMq6B,GACH,IAAM/7B,EAAKsH,UAAQmI,mBAAmB/N,GAChCy5D,EAAchoB,EAAW6oB,mBAAmBh8D,GAE9Cm7D,EACAhoB,EAAW9nB,aAAa2C,KACpB+nB,4BACAolB,EAAap/B,GAEjBnS,EAAOlZ,KACH,6EAAAtS,OACkBsD,GAClBq6B,KAIhBsqE,EAAShY,oBAAoB,aAAc,SAAChqF,EAAM3C,GAC9C,IAAIytF,GAAc,EAElB,GAAIh8C,EAAW8nB,aAAev5D,GAAQyxC,EAAWg8C,cAC7CA,GAAc,MACX,CACH,IAAMh0B,EAAchoB,EAAW6oB,mBAAmBt6D,GAE9Cy5D,GAAeA,EAAYg0B,gBAC3BA,GAAc,GAItB,GAAKA,EAAL,CAIA,IAAMjG,EAA4C,SAA1B7kF,EAAK2E,WAAWs6B,MAClC6lD,EAA4C,SAA1B9kF,EAAK2E,WAAWo5B,MAEpC+kE,GAAU,EAEVje,IAAoB/1C,EAAWi2C,iBAAiB9lD,QAChD6P,EAAWi2C,iBAAiB9lD,MAAQ4lD,EACpCie,GAAU,GAGVhe,IAAoBh2C,EAAWi2C,iBAAiBhnD,QAChD+Q,EAAWi2C,iBAAiBhnD,MAAQ+mD,EACpCge,GAAU,GAGVA,GACAh0D,EAAW9nB,aAAa2C,KACpB+nB,6BACA5C,EAAWi2C,qBAKnBj2C,EAAW5iB,aAEX81E,EAASnyD,YAAY+e,IAAW/6D,sBAC5B,SAAA+pB,GACIkxB,EAAW5iB,WAAWe,6BAClBrP,EAAQwK,kBAIpB45E,EAASnyD,YAAY+e,IAAW77D,yBAC5B,SAAC2I,EAAGupD,GACAnW,EAAW5iB,WAAW4D,0BAA0Bp0B,EAAGupD,OAQnEm/B,EAA4BzxF,UAAUi0F,kBAAoB,WACtD,IAAM93C,EAAaryC,KAAKqyC,WAClB8lB,EAAM9lB,EAAW8lB,IAEvBA,EAAI/kB,YACAnN,IAAUxJ,mBACV4V,EAAWonB,mBAAmB3jE,KAAKu8C,IAEvC8lB,EAAI/kB,YACAnN,IAAUtJ,qBACV0V,EAAWsnB,qBAAqB7jE,KAAKu8C,IAEzC8lB,EAAI/kB,YAAYnN,IAAUzf,yBACtB,SAAAtnB,GACQmzC,EAAW21C,sBAAwB9oF,GAAMmzC,EAAWuf,OACpDvf,EAAW21C,oBAAsB9oF,EACjCmzC,EAAW9nB,aAAa2C,KACpB+nB,2BAAgD/1C,IAEpDmzC,EAAW5iB,YAAc4iB,EAAW8nB,aAAej7D,GAEnDmzC,EAAW5iB,WAAWyB,yBAClBmhB,EAAWuf,KAAKpC,WAIhC2I,EAAI/kB,YAAYnN,IAAUhK,kBAAmB,WACzC,IAAM7e,EAAMlpB,OAAOm5D,YAAYjwC,MACzBvnB,EAAM,sBAGZizB,EAAOzZ,IAAP,UAAA/R,OAAqBzH,GAAOunB,GAC5Bi1B,EAAWuf,KAAKxF,gBAAgBv2D,GAAOunB,EACvC+M,IAAW+K,cACPiK,YAAkCtpC,EAAK,CAAEN,MAAO6nB,KAEpDi1B,EAAW9nB,aAAa2C,KAAK+nB,yBAGjCkjB,EAAI/kB,YAAYnN,IAAUvf,0BACtB,SAAC9lB,EAAMq6B,GACH,IAAMo/B,EAAchoB,EAAW6oB,mBAAmBt6D,GAE9Cy5D,EACAhoB,EAAW9nB,aAAa2C,KACpB+nB,4BACAolB,EAAap/B,GAEjBnS,EAAOlZ,KACH,sEAAAtS,OACsBsD,GACtBq6B,KAIhBk9B,EAAI/kB,YAAYnN,IAAU9I,oBACtB,SAACrP,EAAK4H,GACG5H,EAAI8lB,OACLzpB,IAAWmJ,QACP1c,KAAK0K,UAAU,CACXpiB,GAAI,cACJ3J,MAAOmgC,OAI3ByiC,EAAI/kB,YAAYnN,IAAU7I,qBACtB,SAACtP,EAAK4H,GACG5H,EAAI8lB,OACLzpB,IAAWmJ,QACP1c,KAAK0K,UAAU,CACXpiB,GAAI,eACJ3J,MAAOmgC,OAK3ByiC,EAAI/kB,YAAYnN,IAAUlK,qBACtB,SAAC98B,EAAG6uB,GACAukB,EAAW5iB,WAAWyD,uBAAuBj0B,EAAG6uB,KAGxDqqC,EAAI/kB,YAAYnN,IAAUjK,oBACtB,SAAC/8B,EAAG6uB,GACAukB,EAAW5iB,WAAWwD,sBAAsBh0B,EAAG6uB,KAGvDqqC,EAAI/kB,YAAYnN,IAAUpJ,6BACtB,SAAC59B,EAAG6uB,GACAukB,EAAW5iB,WAAW0D,uBAAuBl0B,EAAG6uB,KAGxDqqC,EAAI/kB,YAAYnN,IAAUnJ,8BACtB,SAAC79B,EAAG6uB,GACAukB,EAAW5iB,WAAW2D,wBAAwBn0B,EAAG6uB,KAGzDqqC,EAAI/kB,YAAYnN,IAAU1J,yBACtB,SAACsQ,EAAOjc,GAKAic,EAAM26B,gBAAkB36B,EAAME,YAAcC,IAAUC,SACtDoF,EAAW5iB,WAAWkB,wBAAuB,EAAMC,MAQnE+2D,EAA4BzxF,UAAUi2F,oBAAsB,WAAW,IAAAzgD,EAAA1rC,KAC7DqyC,EAAaryC,KAAKqyC,WAExBA,EAAWjoB,KAAKsiC,KAAKjgC,eACjB0lC,IAAWp5D,4BACXiH,KAAKslG,cAAcnzC,IAAWp5D,qCAC3BiH,KAAKslG,cAAcnzC,IAAWp5D,6BAErC/D,OAAOq5B,KAAKruB,KAAKslG,eAAerkG,QAAQ,SAAAk0B,GACpCkd,EAAWjoB,KAAKqC,eACZ0I,EACAuW,EAAK45D,cAAcnwE,MAE3Bn1B,KAAKslG,cAAgB,IAOzB3d,EAA4BzxF,UAAUwzF,mBAAqB,WACvD,IAAMr3C,EAAaryC,KAAKqyC,WAElBi0D,EAA0B,SAAA1lG,GAC5B,IAAMy5D,EACAhoB,EAAW6oB,mBACb10D,UAAQmI,mBAAmB/N,IAE3By5D,GACAhoB,EAAW9nB,aAAa2C,KACpB+nB,8BACAolB,IAIZhoB,EAAWjoB,KAAKsiC,KAAKtZ,YACjB+e,IAAWp5D,4BACXutG,GACJtmG,KAAKslG,cAAcnzC,IAAWp5D,6BACxButG,EAENtmG,KAAKumG,2BACDp0C,IAAWx7D,cACX07C,EAAWihD,eAAex9F,KAAKu8C,IACnCryC,KAAKumG,2BACDp0C,IAAWz7D,cACX27C,EAAWmgD,eAAe18F,KAAKu8C,IACnCryC,KAAKumG,2BACDp0C,IAAW73D,eACX+3C,EAAWqgD,gBAAgB58F,KAAKu8C,IACpCryC,KAAKumG,2BACDp0C,IAAWv7D,WACXy7C,EAAW8hD,YAAYr+F,KAAKu8C,IAEhCryC,KAAKumG,2BAA2Bp0C,IAAWj4D,uBACvC,SAACssG,EAAYC,GACLp0D,EAAW/gC,QAAQ9V,OAAOkrG,mBAI9Br0D,EAAW+1C,gBAAkBoe,EAC7Bn0D,EAAWg2C,gBAAkBoe,EAI7Bp0D,EAAW2D,iBAAiB/0C,QAAQ,SAAA4rC,GAChC,OAAQA,EAAMqJ,WACd,KAAKpJ,IACDuF,EAAW+1C,iBAAmBv7C,EAAM2J,OACpC,MACJ,KAAK1J,IACDuF,EAAWg2C,iBAAmBx7C,EAAM2J,UAK5CnE,EAAW9nB,aAAa2C,KAAK+nB,qBAOzC0yC,EAA4BzxF,UAAUqwG,2BAA6B,SAC3DpxE,EAAW9I,GACfrsB,KAAKslG,cAAcnwE,GAAa9I,EAChCrsB,KAAKqyC,WAAWjoB,KAAKgpB,YAAYje,EAAW9I,IAMhDs7D,EAA4BzxF,UAAU00F,yBAA2B,WAC7D,IAAMv4C,EAAaryC,KAAKqyC,WAEnBA,EAAW5iB,aAKhB4iB,EAAW5iB,WAAWrD,sBAAsB,SAAC0B,EAAK8C,EAAMthB,EAAO4iB,GAC3DmgB,EAAW8lB,IAAIhhB,cAAcrpB,EAAK8C,EAAMthB,EAAO4iB,KAMnDmgB,EAAW5iB,WAAW/C,0BAA0B,WAC5C2lB,EAAW9nB,aAAa2C,KACpB+nB,gCAER5C,EAAW5iB,WAAW3C,yBAAyB,SAACgB,EAAK+F,GACjDwe,EAAW2D,eAAelJ,KAAiB7rC,QAAQ,SAAA4rC,GAC/C,IAAMjc,EAAO9C,EAAI0oE,aAAa3pD,GAEzBjc,GAASiD,EAAM19B,eAAey6B,IAInCic,EAAM85D,yBAAyB74E,EAAK+F,EAAMjD,uECvoBtD,SAAS60E,EAAsB78D,EAAKg+D,GAChC,IAAKh+D,IAAQg+D,GAAmC,mBAApBh+D,EAAIwK,aACJ,mBAAdwzD,EAAK15E,KACf,MAAM,IAAI/uB,MAAM,qDAEpB6B,KAAK4oC,IAAMA,EACX5oC,KAAK4mG,KAAOA,EAWhBnB,EAAsBvvG,UAAUwvG,QAAU,WAAkB,QAAA/kE,EAAA9iC,UAAAZ,OAANW,EAAM,IAAAwC,MAAAugC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANhjC,EAAMgjC,GAAA/iC,UAAA+iC,GACxD,IAAMimE,EAAWjpG,EAAK,GAItBA,EAAK,GAAKoC,KAAK4mG,KAGf5mG,KAAK4oC,IAAIwK,YACLyzD,EACA5mG,SAAS/J,UAAUJ,KAAKiI,MAAMiC,KAAK4mG,KAAK15E,KAAMtvB,KAGtD7J,EAAOD,QAAU2xG,ilBC3BjB,IAGM38E,EAASH,oBAAUQ,GA4CnB29E,aAIF,SAAAA,iGAAcx/D,CAAAtnC,KAAA8mG,GACV9mG,KAAKwS,+DAeLxS,KAAKi1E,UAAW,EAMhBj1E,KAAK+mG,kBAAoB,IAAIt7E,IAO7BzrB,KAAKgnG,MAAQ,GAMbhnG,KAAKinG,oBAAsB,GAO3BjnG,KAAKknG,eAAiB,GAEtBlnG,KAAKy1C,uBAAuB,CACxB0xD,eAAkB19E,IAASC,kBAC3B09E,WAAcv/D,UAAUiV,UACxBuqD,aAAgB18E,IAAQq/B,8CAQ5BlhC,EAAOlZ,KAAK,mCACZ5P,KAAKsnG,qBAAqB,IAC1BtnG,KAAKi1E,UAAW,+CAQC55E,GAAU,IAAAqsC,EAAA1nC,KAC3B,IAAIA,KAAKi1E,SAAT,CAIAj1E,KAAK+mG,kBAAoB,IAAIt7E,IAAIpwB,GAEjC2E,KAAKunG,qBAGL,IAAMP,EAAQhnG,KAAKgnG,MAEnBhnG,KAAKgnG,MAAQ,KACTA,GACAA,EAAM/lG,QAAQ,SAAA6zB,GAAK,OAAI4S,EAAK8/D,WAAW1yE,mDAS1B,IAAA4W,EAAA1rC,KACjBA,KAAK+mG,kBAAkB9lG,QAAQ,SAAA+N,GAC3B,IACIA,EAAQy4F,kBAAkB/7D,EAAKu7D,qBACjC,MAAOx3F,GACLqZ,EAAOlZ,KAAK,0EAAAtS,OACiBmS,sDAelBulB,GACnBh1B,KAAKinG,sVAALjoE,CAAA,GACOh/B,KAAKinG,oBACLjyE,GAGPh1B,KAAKunG,+DAQS1yG,GACdmL,KAAKknG,eAAiBryG,EACtBmL,KAAKy1C,uBAAuB,CAAEiyD,gBAAmB7yG,sCAgB3CsgC,GAA4B,IAAjBH,EAAiBn3B,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GAC9B,IAAImC,KAAKi1E,SAAT,CAIA,IAAIngD,EAAQ,KAEa,iBAAdK,EACPL,EAAQ,CACJzjB,KAAMgsB,IACNqB,OAAQvJ,EACRwJ,cAAexJ,EACfkK,OAAQlK,EACRjtB,WAAY8sB,GAEY,WAArBC,EAAOE,KACdL,EAAQK,GAGPn1B,KAAK2nG,sBAAsB7yE,GAOhC90B,KAAKwnG,WAAW1yE,GANZhM,EAAOrZ,MAAP,mCAAAnS,OACuCsZ,KAAK0K,UAAUwT,oDAoBxCA,GAClB,IAAKA,EACD,OAAO,EAGNA,EAAMzjB,OACPyjB,EAAMzjB,KAAOgsB,KAGjB,IAAMhsB,EAAOyjB,EAAMzjB,KAEnB,OAAIA,IAASgsB,KAAoBhsB,IAASisB,KACnCjsB,IAASmsB,KAAWnsB,IAASksB,KAChCzU,EAAOrZ,MAAP,uBAAAnS,OAAoC+T,KAE7B,GAGPA,IAASisB,IACFsI,QAAQ9Q,EAAMjgC,OAKzBigC,EAAM4J,OAAS5J,EAAM4J,QAAU5J,EAAMjgC,MAAQigC,EAAM6J,cACnD7J,EAAM6J,cAAgB7J,EAAM6J,eAAiB7J,EAAMjgC,MAAQigC,EAAM4J,OACjE5J,EAAMuK,OAASvK,EAAMuK,QAAUvK,EAAMjgC,MAAQigC,EAAM4J,QAC5C5J,EAAM6J,cAER7J,EAAM4J,QAAW5J,EAAM6J,eAAkB7J,EAAMuK,UAQhDhuB,IAASksB,MACTzI,EAAM8yE,WAAa9yE,EAAM8yE,YAAc,sBACvC9yE,EAAM+yE,cAAgB/yE,EAAM+yE,eAAiB,aACjB,eAAxB/yE,EAAM+yE,eAAmC/yE,EAAMzC,cAC/CyC,EAAMzC,YAAcryB,KAAKknG,gBAIxBpyE,EAAM8yE,YAAe9yE,EAAMgzE,UACxBhzE,EAAM+yE,eAAkB/yE,EAAMzC,gBAClCvJ,EAAOrZ,MACH,gFAGG,IArBXqZ,EAAOrZ,MACH,6DAEG,6CAgCEqlB,GACb,QAAI90B,KAAKgnG,QACLhnG,KAAKgnG,MAAMlpG,KAAKg3B,GAIZ90B,KAAKgnG,MAAM/pG,OAhTJ,KAiTP+C,KAAKgnG,MAAMzpG,OAAO,EAAG,IAGlB,sCAYJu3B,GACH90B,KAAK+nG,iBAAiBjzE,IAGtB90B,KAAK+mG,kBAAkB9lG,QAAQ,SAAA+N,GAC3B,IACIA,EAAQwlB,UAAUM,GACpB,MAAO71B,GACL6pB,EAAOlZ,KAAP,kCAAAtS,OAA8C2B,4CAOnD8mB,EAAA,MAAI+gF,+7BCtVnB,IAAMh+E,EAASH,oBAAUQ,GAWJnB,cAIjB,SAAAA,IAAc,IAAA0f,EAAA,mGAAAJ,CAAAtnC,KAAAgoB,GACV0f,EAAAH,EAAAvnC,KAAAwnC,EAAAxf,GAAAvzB,KAAAuL,OACA8oB,EAAOnZ,KAAP,sBAAArS,OAC0BoqC,EAAKsiB,UAD/B,WAAA1sD,OACkDoqC,EAAKouB,eAH7CpuB,wPAJ+B8V,oEAkBzC,QACIx9C,KAAK64B,aACF74B,KAAK2iC,UACL3iC,KAAK4qB,iBACL5qB,KAAKgoG,4DAUZ,OAAQhoG,KAAK2iC,WAAa3iC,KAAK64B,sDAgB/B,OAAO74B,KAAK0kC,YACL1kC,KAAKszD,cACLtzD,KAAKkzD,UACLlzD,KAAKwzD,uDAUZ,OAAOxzD,KAAKioG,aACJjoG,KAAKkoG,kBAAkB,gDAU/B,OAAOloG,KAAKioG,aACJjoG,KAAKkoG,kBAAkB,8CAS/B,OAAOloG,KAAK2oC,mBACL3oC,KAAK64B,aACL74B,KAAK4qB,iBACL5qB,KAAKgoG,kFAUZ,OAAOhoG,KAAK2oC,mBAAqB3oC,KAAK4qB,iBAC/B5qB,KAAK0iC,wEAWZ,OAAQ1iC,KAAK64B,cAAgB74B,KAAK2iC,WAC1B3iC,KAAKgoG,oEASb,OAAQhoG,KAAK2iC,6DAQb,OAAOkF,UAAUC,mBACuC,IAA1CD,UAAUC,aAAaqgE,qBACqB,IAA5CtgE,UAAUC,aAAauC,0EAWrC,OAAQrqC,KAAK4qB,gEAUb,OAAO5qB,KAAK2oC,mBACL3oC,KAAK2iC,UACL3iC,KAAK64B,aACL74B,KAAK4qB,iBACL5qB,KAAKgoG,mFAQZ,OAAOhoG,KAAK2oC,mBAAqB3oC,KAAK4qB,iBAC/B5qB,KAAK0iC,kEAiBZ,OAAQ1iC,KAAK64B,cAAgB74B,KAAK2iC,qDASlC,OAAO3iC,KAAK64B,aAAe74B,KAAK0iC,wDAShC,OAAQ1iC,KAAK64B,cAAgB74B,KAAKooG,8DAQlC,OAAOpoG,KAAK2oC,mBAAqB3oC,KAAK64B,aAC/B74B,KAAK0iC,mBAAqB1iC,KAAK4qB,wDAgBtC,OAAQ5qB,KAAKgoG,sBACLhoG,KAAK0iC,mBAAqB1iC,KAAKqoG,gDASvC,OAAQroG,KAAKooG,4DASb,QAAIpoG,KAAK64B,eAIL74B,KAAK0iC,mBAIE1tC,OAAOq5B,KAAKi6E,kBAAkBpyG,WAC7BqI,QAAQ,qBAAuB,2CAiB3C,OAAIyB,KAAK0kC,YACG1kC,KAAKkoG,kBAHe,OAM5BloG,KAAK64B,cAAe74B,KAAKgoG,yBAIzBhoG,KAAK2oC,mBACE3oC,KAAKuoG,4BAXgB,yCAwBhC,OAAOvoG,KAAKioC,kBAAoBjoC,KAAK2iC,2DAQrC,YAA4C,IAA9BkF,UAAUguB,sBACkB,IAA3BhuB,UAAUC,mBAET,IADED,UAAUC,aAAa+tB,+DAWzC,OAAO71D,KAAK2oC,mBAAqB3oC,KAAKuoG,4BAA8B,sDASpE,GAAIvoG,KAAK2oC,kBAAmB,CAExB,GAAI3oC,KAAKkzD,SAEL,OAAOryD,OAAO2gB,SAASmvD,EAAQnC,SAASZ,SAAU,IAQtD,IAAM9C,EAAKjjC,UAAUiV,UAErB,GAAIguB,EAAGpuD,MAAM,UAIT,OAFM7b,OAAO2gB,SAASspD,EAAGpuD,MAAM,oBAAoB,GAAI,IAM/D,OAAQ,kJClWhB,SAAAi0D,QAAAupB,QAAA,IAAAr/F;;;;;;;;;;;;;;;;;;;CASA,WACA,aAEA,IAAAyO,MAAA,wBACAk/F,OAAA,iBAAAt0G,OACAN,KAAA40G,OAAAt0G,OAAA,GACAN,KAAA60G,mBACAD,QAAA,GAEA,IAAAE,YAAAF,QAAA,iBAAA9lF,KACAimF,SAAA/0G,KAAAg1G,mBAAA,iBAAAj4B,iBAAAnC,UAAAmC,QAAAnC,SAAA9hE,KACAi8F,QACA/0G,KAAAsmG,OACGwO,aACH90G,KAAA8uB,MAEA,IAAAmmF,WAAAj1G,KAAAk1G,qBAAA,iBAAA/0G,eAAAD,QACAi1G,IAA4C30G,oBAAA,KAC5C40G,cAAAp1G,KAAAq1G,wBAAA,oBAAAhF,YACAiF,UAAA,mBAAApsG,MAAA,IACAqsG,MAAA,gCACAC,MAAA,YACAC,aAAA,yDACAC,mBAAA,mEAAAxsG,MAAA,IAEAysG,OAAA,GAAAC,QACA,GAAAR,aAAA,CACA,IAAAzH,OAAA,IAAA0C,YAAA,IACAuF,QAAA,IAAAz2B,WAAAwuB,QACAgI,OAAA,IAAAE,YAAAlI,SAGA3tG,KAAAg1G,mBAAAxoG,MAAAG,UACAH,MAAAG,QAAA,SAAAxE,GACA,yBAAA/G,OAAAkB,UAAAuK,SAAAhM,KAAAsH,MAIAitG,eAAAp1G,KAAA81G,gCAAAzF,YAAA0F,SACA1F,YAAA0F,OAAA,SAAA5tG,GACA,uBAAAA,KAAAwlG,QAAAxlG,EAAAwlG,OAAA5pD,cAAAssD,cA6DA,IAAA2F,mBAAA,SAAAC,GACA,gBAAA36F,GACA,WAAA46F,KAAA,GAAAC,OAAA76F,GAAA26F,OAwBAG,aAAA,WACA,IAAAC,EAAAL,mBAAA,OACAjB,UACAsB,EAAAC,SAAAD,IAEAA,EAAAr0G,OAAA,WACA,WAAAk0G,KAEAG,EAAAF,OAAA,SAAA76F,GACA,OAAA+6F,EAAAr0G,SAAAm0G,OAAA76F,IAEA,QAAA5a,EAAA,EAAmBA,EAAA+0G,aAAApsG,SAAyB3I,EAAA,CAC5C,IAAA+c,EAAAg4F,aAAA/0G,GACA21G,EAAA54F,GAAAu4F,mBAAAv4F,GAEA,OAAA44F,GAGAC,SAAA,SAAAD,QACA,IAAAvwD,OAAAywD,KAAA,qBACA7M,OAAA6M,KAAA,4BACAC,WAAA,SAAAl7F,GACA,oBAAAA,EACA,OAAAwqC,OAAA2wD,WAAA,OAAAN,OAAA76F,EAAA,QAAAo7F,OAAA,OAEA,GAAAp7F,QACA,MAAA5F,MAKA,OAJS4F,EAAAyoC,cAAAssD,cACT/0F,EAAA,IAAA6jE,WAAA7jE,IAGA9O,MAAAG,QAAA2O,IAAA+0F,YAAA0F,OAAAz6F,IACAA,EAAAyoC,cAAA2lD,OACA5jD,OAAA2wD,WAAA,OAAAN,OAAA,IAAAzM,OAAApuF,IAAAo7F,OAAA,OAEAL,OAAA/6F,IAGA,OAAAk7F,YASA,SAAAN,IAAAS,GACA,GAAAA,EACAhB,OAAA,GAAAA,OAAA,IAAAA,OAAA,GAAAA,OAAA,GAAAA,OAAA,GACAA,OAAA,GAAAA,OAAA,GAAAA,OAAA,GAAAA,OAAA,GACAA,OAAA,GAAAA,OAAA,GAAAA,OAAA,IAAAA,OAAA,IACAA,OAAA,IAAAA,OAAA,IAAAA,OAAA,IAAAA,OAAA,MACAvpG,KAAAupG,cACAvpG,KAAAwpG,qBAEA,GAAAR,aAAA,CACA,IAAAzH,EAAA,IAAA0C,YAAA,IACAjkG,KAAAwpG,QAAA,IAAAz2B,WAAAwuB,GACAvhG,KAAAupG,OAAA,IAAAE,YAAAlI,QAEAvhG,KAAAupG,OAAA,oCAGAvpG,KAAAwqG,GAAAxqG,KAAAyqG,GAAAzqG,KAAA0qG,GAAA1qG,KAAA2qG,GAAA3qG,KAAA6lB,MAAA7lB,KAAA4qG,MAAA5qG,KAAA6qG,OAAA,EACA7qG,KAAA8qG,UAAA9qG,KAAA+qG,QAAA,EACA/qG,KAAA+zF,OAAA,EAYA+V,IAAA5zG,UAAA6zG,OAAA,SAAA76F,GACA,IAAAlP,KAAA8qG,UAAA,CAIA,IAAAE,EAAA35F,SAAAnC,EACA,cAAAmC,EAAA,CACA,cAAAA,EAWA,MAAA/H,MAVA,UAAA4F,EACA,MAAA5F,MACS,GAAA0/F,cAAA95F,EAAAyoC,cAAAssD,YACT/0F,EAAA,IAAA6jE,WAAA7jE,QACS,KAAA9O,MAAAG,QAAA2O,IACT85F,cAAA/E,YAAA0F,OAAAz6F,IACA,MAAA5F,MAMA0hG,GAAA,EAKA,IAHA,IAAAvlF,EAAAnxB,EAAAgK,EAAA,EAAArB,EAAAiS,EAAAjS,OAAAssG,EAAAvpG,KAAAupG,OACAC,EAAAxpG,KAAAwpG,QAEAlrG,EAAArB,GAAA,CAUA,GATA+C,KAAA+qG,SACA/qG,KAAA+qG,QAAA,EACAxB,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,OAGAyB,EACA,GAAAhC,aACA,IAAA10G,EAAA0L,KAAA6lB,MAA8BvnB,EAAArB,GAAA3I,EAAA,KAA0BgK,EACxDkrG,EAAAl1G,KAAA4a,EAAA5Q,QAGA,IAAAhK,EAAA0L,KAAA6lB,MAA8BvnB,EAAArB,GAAA3I,EAAA,KAA0BgK,EACxDirG,EAAAj1G,GAAA,IAAA4a,EAAA5Q,IAAA8qG,MAAA,EAAA90G,UAIA,GAAA00G,aACA,IAAA10G,EAAA0L,KAAA6lB,MAA8BvnB,EAAArB,GAAA3I,EAAA,KAA0BgK,GACxDmnB,EAAAvW,EAAA/M,WAAA7D,IACA,IACAkrG,EAAAl1G,KAAAmxB,EACaA,EAAA,MACb+jF,EAAAl1G,KAAA,IAAAmxB,GAAA,EACA+jF,EAAAl1G,KAAA,OAAAmxB,GACaA,EAAA,OAAAA,GAAA,OACb+jF,EAAAl1G,KAAA,IAAAmxB,GAAA,GACA+jF,EAAAl1G,KAAA,IAAAmxB,GAAA,KACA+jF,EAAAl1G,KAAA,OAAAmxB,IAEAA,EAAA,aAAAA,IAAA,QAAAvW,EAAA/M,aAAA7D,IACAkrG,EAAAl1G,KAAA,IAAAmxB,GAAA,GACA+jF,EAAAl1G,KAAA,IAAAmxB,GAAA,MACA+jF,EAAAl1G,KAAA,IAAAmxB,GAAA,KACA+jF,EAAAl1G,KAAA,OAAAmxB,QAIA,IAAAnxB,EAAA0L,KAAA6lB,MAA8BvnB,EAAArB,GAAA3I,EAAA,KAA0BgK,GACxDmnB,EAAAvW,EAAA/M,WAAA7D,IACA,IACAirG,EAAAj1G,GAAA,IAAAmxB,GAAA2jF,MAAA,EAAA90G,KACamxB,EAAA,MACb8jF,EAAAj1G,GAAA,SAAAmxB,GAAA,IAAA2jF,MAAA,EAAA90G,KACAi1G,EAAAj1G,GAAA,YAAAmxB,IAAA2jF,MAAA,EAAA90G,MACamxB,EAAA,OAAAA,GAAA,OACb8jF,EAAAj1G,GAAA,SAAAmxB,GAAA,KAAA2jF,MAAA,EAAA90G,KACAi1G,EAAAj1G,GAAA,SAAAmxB,GAAA,OAAA2jF,MAAA,EAAA90G,KACAi1G,EAAAj1G,GAAA,YAAAmxB,IAAA2jF,MAAA,EAAA90G,OAEAmxB,EAAA,aAAAA,IAAA,QAAAvW,EAAA/M,aAAA7D,IACAirG,EAAAj1G,GAAA,SAAAmxB,GAAA,KAAA2jF,MAAA,EAAA90G,KACAi1G,EAAAj1G,GAAA,SAAAmxB,GAAA,QAAA2jF,MAAA,EAAA90G,KACAi1G,EAAAj1G,GAAA,SAAAmxB,GAAA,OAAA2jF,MAAA,EAAA90G,KACAi1G,EAAAj1G,GAAA,YAAAmxB,IAAA2jF,MAAA,EAAA90G,MAKA0L,KAAAirG,cAAA32G,EACA0L,KAAA4qG,OAAAt2G,EAAA0L,KAAA6lB,MACAvxB,GAAA,IACA0L,KAAA6lB,MAAAvxB,EAAA,GACA0L,KAAA4D,OACA5D,KAAA+qG,QAAA,GAEA/qG,KAAA6lB,MAAAvxB,EAOA,OAJA0L,KAAA4qG,MAAA,aACA5qG,KAAA6qG,QAAA7qG,KAAA4qG,MAAA,cACA5qG,KAAA4qG,MAAA5qG,KAAA4qG,MAAA,YAEA5qG,OAGA8pG,IAAA5zG,UAAAg1G,SAAA,WACA,IAAAlrG,KAAA8qG,UAAA,CAGA9qG,KAAA8qG,WAAA,EACA,IAAAvB,EAAAvpG,KAAAupG,OAAAj1G,EAAA0L,KAAAirG,cACA1B,EAAAj1G,GAAA,IAAA60G,MAAA,EAAA70G,GACAA,GAAA,KACA0L,KAAA+qG,QACA/qG,KAAA4D,OAEA2lG,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,OAEAA,EAAA,IAAAvpG,KAAA4qG,OAAA,EACArB,EAAA,IAAAvpG,KAAA6qG,QAAA,EAAA7qG,KAAA4qG,QAAA,GACA5qG,KAAA4D,SAGAkmG,IAAA5zG,UAAA0N,KAAA,WACA,IAAAZ,EAAAC,EAAAtO,EAAAC,EAAAu2G,EAAAC,EAAA7B,EAAAvpG,KAAAupG,OAEAvpG,KAAA+zF,MAQA9wF,IADAA,IALAD,IADAA,EAAAumG,EAAA,eACA,EAAAvmG,IAAA,mBAIArO,IADAA,IAAA,WADAC,IADAA,IAAA,sBAAAoO,GAAAumG,EAAA,eACA,GAAA30G,IAAA,IAAAoO,GAAA,KACA,UAAAA,IAAAumG,EAAA,gBACA,GAAA50G,IAAA,IAAAC,GAAA,IACAA,EAAAoO,IAAAumG,EAAA,gBACA,GAAAtmG,IAAA,IAAAtO,GAAA,GAEAqO,EAAAhD,KAAAwqG,GACAvnG,EAAAjD,KAAAyqG,GACA91G,EAAAqL,KAAA0qG,GASAznG,IADAA,KALAD,IADAA,KADApO,EAAAoL,KAAA2qG,IACA1nG,GAAAtO,EAAAC,IAAA20G,EAAA,eACA,EAAAvmG,IAAA,IAAAC,GAAA,IAIAtO,IADAA,IAAAsO,GADArO,IADAA,IAAAD,EAAAqO,GAAAC,EAAAtO,IAAA40G,EAAA,eACA,GAAA30G,IAAA,IAAAoO,GAAA,IACAA,EAAAC,IAAAsmG,EAAA,eACA,GAAA50G,IAAA,IAAAC,GAAA,IACAA,EAAAoO,IAAAumG,EAAA,gBACA,GAAAtmG,IAAA,IAAAtO,GAAA,GAUAsO,IADAA,KALAD,IADAA,IAAApO,EAAAqO,GAAAtO,EAAAC,IAAA20G,EAAA,eACA,EAAAvmG,IAAA,IAAAC,GAAA,IAIAtO,IADAA,IAAAsO,GADArO,IADAA,IAAAD,EAAAqO,GAAAC,EAAAtO,IAAA40G,EAAA,gBACA,GAAA30G,IAAA,IAAAoO,GAAA,IACAA,EAAAC,IAAAsmG,EAAA,gBACA,GAAA50G,IAAA,IAAAC,GAAA,IACAA,EAAAoO,IAAAumG,EAAA,cACA,GAAAtmG,IAAA,IAAAtO,GAAA,EAQAsO,IADAA,KALAD,IADAA,IAAApO,EAAAqO,GAAAtO,EAAAC,IAAA20G,EAAA,gBACA,EAAAvmG,IAAA,IAAAC,GAAA,IAIAtO,IADAA,IAAAsO,GADArO,IADAA,IAAAD,EAAAqO,GAAAC,EAAAtO,IAAA40G,EAAA,gBACA,GAAA30G,IAAA,IAAAoO,GAAA,IACAA,EAAAC,IAAAsmG,EAAA,YACA,GAAA50G,IAAA,IAAAC,GAAA,IACAA,EAAAoO,IAAAumG,EAAA,iBACA,GAAAtmG,IAAA,IAAAtO,GAAA,EAQAsO,IADAA,KALAD,IADAA,IAAApO,EAAAqO,GAAAtO,EAAAC,IAAA20G,EAAA,iBACA,EAAAvmG,IAAA,IAAAC,GAAA,IAIAtO,IADAA,IAAAsO,GADArO,IADAA,IAAAD,EAAAqO,GAAAC,EAAAtO,IAAA40G,EAAA,eACA,GAAA30G,IAAA,IAAAoO,GAAA,IACAA,EAAAC,IAAAsmG,EAAA,iBACA,GAAA50G,IAAA,IAAAC,GAAA,IACAA,EAAAoO,IAAAumG,EAAA,iBACA,GAAAtmG,IAAA,IAAAtO,GAAA,EAQAsO,IADAA,KAHArO,IADAA,IAAAqO,EAAAtO,IADAqO,IADAA,IAAArO,EAAAC,GAAAqO,EAAAtO,IAAA40G,EAAA,eACA,EAAAvmG,IAAA,IAAAC,GAAA,GACAA,IAAAsmG,EAAA,gBACA,EAAA30G,IAAA,IAAAoO,GAAA,GAGAA,IADArO,IADAA,IAAAqO,EAAAC,GAAArO,EAAAoO,IAAAumG,EAAA,gBACA,GAAA50G,IAAA,IAAAC,GAAA,GACAA,IAAA20G,EAAA,eACA,GAAAtmG,IAAA,IAAAtO,GAAA,EAQAsO,IADAA,KAHArO,IADAA,IAAAqO,EAAAtO,IADAqO,IADAA,IAAArO,EAAAC,GAAAqO,EAAAtO,IAAA40G,EAAA,eACA,EAAAvmG,IAAA,IAAAC,GAAA,GACAA,IAAAsmG,EAAA,eACA,EAAA30G,IAAA,IAAAoO,GAAA,GAGAA,IADArO,IADAA,IAAAqO,EAAAC,GAAArO,EAAAoO,IAAAumG,EAAA,gBACA,GAAA50G,IAAA,IAAAC,GAAA,GACAA,IAAA20G,EAAA,eACA,GAAAtmG,IAAA,IAAAtO,GAAA,EAQAsO,IADAA,KAHArO,IADAA,IAAAqO,EAAAtO,IADAqO,IADAA,IAAArO,EAAAC,GAAAqO,EAAAtO,IAAA40G,EAAA,eACA,EAAAvmG,IAAA,IAAAC,GAAA,GACAA,IAAAsmG,EAAA,iBACA,EAAA30G,IAAA,IAAAoO,GAAA,GAGAA,IADArO,IADAA,IAAAqO,EAAAC,GAAArO,EAAAoO,IAAAumG,EAAA,eACA,GAAA50G,IAAA,IAAAC,GAAA,GACAA,IAAA20G,EAAA,gBACA,GAAAtmG,IAAA,IAAAtO,GAAA,EAQAsO,IADAA,KAHArO,IADAA,IAAAqO,EAAAtO,IADAqO,IADAA,IAAArO,EAAAC,GAAAqO,EAAAtO,IAAA40G,EAAA,iBACA,EAAAvmG,IAAA,IAAAC,GAAA,GACAA,IAAAsmG,EAAA,cACA,EAAA30G,IAAA,IAAAoO,GAAA,GAGAA,IADArO,IADAA,IAAAqO,EAAAC,GAAArO,EAAAoO,IAAAumG,EAAA,gBACA,GAAA50G,IAAA,IAAAC,GAAA,GACAA,IAAA20G,EAAA,iBACA,GAAAtmG,IAAA,IAAAtO,GAAA,EAUAsO,IADAA,KAHAmoG,GADAx2G,IADAA,KAHAu2G,EAAAloG,EAAAtO,IAEAqO,IADAA,IAAAmoG,EAAAv2G,GAAA20G,EAAA,YACA,EAAAvmG,IAAA,IAAAC,GAAA,IACAsmG,EAAA,gBACA,GAAA30G,IAAA,IAAAoO,GAAA,GACAA,IAEArO,IADAA,IAAAy2G,EAAAnoG,GAAAsmG,EAAA,iBACA,GAAA50G,IAAA,IAAAC,GAAA,IACA20G,EAAA,eACA,GAAAtmG,IAAA,GAAAtO,GAAA,EAUAsO,IADAA,KAHAmoG,GADAx2G,IADAA,KAHAu2G,EAAAloG,EAAAtO,IAEAqO,IADAA,IAAAmoG,EAAAv2G,GAAA20G,EAAA,gBACA,EAAAvmG,IAAA,IAAAC,GAAA,IACAsmG,EAAA,gBACA,GAAA30G,IAAA,IAAAoO,GAAA,GACAA,IAEArO,IADAA,IAAAy2G,EAAAnoG,GAAAsmG,EAAA,eACA,GAAA50G,IAAA,IAAAC,GAAA,IACA20G,EAAA,iBACA,GAAAtmG,IAAA,GAAAtO,GAAA,EAUAsO,IADAA,KAHAmoG,GADAx2G,IADAA,KAHAu2G,EAAAloG,EAAAtO,IAEAqO,IADAA,IAAAmoG,EAAAv2G,GAAA20G,EAAA,gBACA,EAAAvmG,IAAA,IAAAC,GAAA,IACAsmG,EAAA,eACA,GAAA30G,IAAA,IAAAoO,GAAA,GACAA,IAEArO,IADAA,IAAAy2G,EAAAnoG,GAAAsmG,EAAA,eACA,GAAA50G,IAAA,IAAAC,GAAA,IACA20G,EAAA,cACA,GAAAtmG,IAAA,GAAAtO,GAAA,EAUAsO,IADAA,KAHAmoG,GADAx2G,IADAA,KAHAu2G,EAAAloG,EAAAtO,IAEAqO,IADAA,IAAAmoG,EAAAv2G,GAAA20G,EAAA,eACA,EAAAvmG,IAAA,IAAAC,GAAA,IACAsmG,EAAA,gBACA,GAAA30G,IAAA,IAAAoO,GAAA,GACAA,IAEArO,IADAA,IAAAy2G,EAAAnoG,GAAAsmG,EAAA,gBACA,GAAA50G,IAAA,IAAAC,GAAA,IACA20G,EAAA,eACA,GAAAtmG,IAAA,GAAAtO,GAAA,EAQAsO,IADAA,KAHArO,IADAA,IAAAqO,IADAD,IADAA,IAAArO,GAAAsO,GAAArO,IAAA20G,EAAA,eACA,EAAAvmG,IAAA,IAAAC,GAAA,IACAtO,IAAA40G,EAAA,gBACA,GAAA30G,IAAA,IAAAoO,GAAA,KAEArO,IADAA,IAAAqO,GAAApO,GAAAqO,IAAAsmG,EAAA,iBACA,GAAA50G,IAAA,IAAAC,GAAA,IACAoO,IAAAumG,EAAA,cACA,GAAAtmG,IAAA,IAAAtO,GAAA,EAQAsO,IADAA,KAHArO,IADAA,IAAAqO,IADAD,IADAA,IAAArO,GAAAsO,GAAArO,IAAA20G,EAAA,iBACA,EAAAvmG,IAAA,IAAAC,GAAA,IACAtO,IAAA40G,EAAA,gBACA,GAAA30G,IAAA,IAAAoO,GAAA,KAEArO,IADAA,IAAAqO,GAAApO,GAAAqO,IAAAsmG,EAAA,cACA,GAAA50G,IAAA,IAAAC,GAAA,IACAoO,IAAAumG,EAAA,gBACA,GAAAtmG,IAAA,IAAAtO,GAAA,EAQAsO,IADAA,KAHArO,IADAA,IAAAqO,IADAD,IADAA,IAAArO,GAAAsO,GAAArO,IAAA20G,EAAA,gBACA,EAAAvmG,IAAA,IAAAC,GAAA,IACAtO,IAAA40G,EAAA,eACA,GAAA30G,IAAA,IAAAoO,GAAA,KAEArO,IADAA,IAAAqO,GAAApO,GAAAqO,IAAAsmG,EAAA,gBACA,GAAA50G,IAAA,IAAAC,GAAA,IACAoO,IAAAumG,EAAA,iBACA,GAAAtmG,IAAA,IAAAtO,GAAA,EAQAsO,IADAA,KAHArO,IADAA,IAAAqO,IADAD,IADAA,IAAArO,GAAAsO,GAAArO,IAAA20G,EAAA,eACA,EAAAvmG,IAAA,IAAAC,GAAA,IACAtO,IAAA40G,EAAA,iBACA,GAAA30G,IAAA,IAAAoO,GAAA,KAEArO,IADAA,IAAAqO,GAAApO,GAAAqO,IAAAsmG,EAAA,eACA,GAAA50G,IAAA,IAAAC,GAAA,IACAoO,IAAAumG,EAAA,eACA,GAAAtmG,IAAA,IAAAtO,GAAA,EAEAqL,KAAA+zF,OACA/zF,KAAAwqG,GAAAxnG,EAAA,cACAhD,KAAAyqG,GAAAxnG,EAAA,aACAjD,KAAA0qG,GAAA/1G,EAAA,cACAqL,KAAA2qG,GAAA/1G,EAAA,aACAoL,KAAA+zF,OAAA,IAEA/zF,KAAAwqG,GAAAxqG,KAAAwqG,GAAAxnG,GAAA,EACAhD,KAAAyqG,GAAAzqG,KAAAyqG,GAAAxnG,GAAA,EACAjD,KAAA0qG,GAAA1qG,KAAA0qG,GAAA/1G,GAAA,EACAqL,KAAA2qG,GAAA3qG,KAAA2qG,GAAA/1G,GAAA,IAcAk1G,IAAA5zG,UAAAm1G,IAAA,WACArrG,KAAAkrG,WAEA,IAAAV,EAAAxqG,KAAAwqG,GAAAC,EAAAzqG,KAAAyqG,GAAAC,EAAA1qG,KAAA0qG,GAAAC,EAAA3qG,KAAA2qG,GAEA,OAAAzB,UAAAsB,GAAA,MAAAtB,UAAA,GAAAsB,GACAtB,UAAAsB,GAAA,OAAAtB,UAAAsB,GAAA,MACAtB,UAAAsB,GAAA,OAAAtB,UAAAsB,GAAA,OACAtB,UAAAsB,GAAA,OAAAtB,UAAAsB,GAAA,OACAtB,UAAAuB,GAAA,MAAAvB,UAAA,GAAAuB,GACAvB,UAAAuB,GAAA,OAAAvB,UAAAuB,GAAA,MACAvB,UAAAuB,GAAA,OAAAvB,UAAAuB,GAAA,OACAvB,UAAAuB,GAAA,OAAAvB,UAAAuB,GAAA,OACAvB,UAAAwB,GAAA,MAAAxB,UAAA,GAAAwB,GACAxB,UAAAwB,GAAA,OAAAxB,UAAAwB,GAAA,MACAxB,UAAAwB,GAAA,OAAAxB,UAAAwB,GAAA,OACAxB,UAAAwB,GAAA,OAAAxB,UAAAwB,GAAA,OACAxB,UAAAyB,GAAA,MAAAzB,UAAA,GAAAyB,GACAzB,UAAAyB,GAAA,OAAAzB,UAAAyB,GAAA,MACAzB,UAAAyB,GAAA,OAAAzB,UAAAyB,GAAA,OACAzB,UAAAyB,GAAA,OAAAzB,UAAAyB,GAAA,QAaAb,IAAA5zG,UAAAuK,SAAAqpG,IAAA5zG,UAAAm1G,IAYAvB,IAAA5zG,UAAAo0G,OAAA,WACAtqG,KAAAkrG,WAEA,IAAAV,EAAAxqG,KAAAwqG,GAAAC,EAAAzqG,KAAAyqG,GAAAC,EAAA1qG,KAAA0qG,GAAAC,EAAA3qG,KAAA2qG,GACA,OACA,IAAAH,KAAA,MAAAA,GAAA,OAAAA,GAAA,OACA,IAAAC,KAAA,MAAAA,GAAA,OAAAA,GAAA,OACA,IAAAC,KAAA,MAAAA,GAAA,OAAAA,GAAA,OACA,IAAAC,KAAA,MAAAA,GAAA,OAAAA,GAAA,SAcAb,IAAA5zG,UAAAkjC,MAAA0wE,IAAA5zG,UAAAo0G,OAYAR,IAAA5zG,UAAAo1G,YAAA,WACAtrG,KAAAkrG,WAEA,IAAA3J,EAAA,IAAA0C,YAAA,IACAsF,EAAA,IAAAE,YAAAlI,GAKA,OAJAgI,EAAA,GAAAvpG,KAAAwqG,GACAjB,EAAA,GAAAvpG,KAAAyqG,GACAlB,EAAA,GAAAvpG,KAAA0qG,GACAnB,EAAA,GAAAvpG,KAAA2qG,GACApJ,GAcAuI,IAAA5zG,UAAAqrG,OAAAuI,IAAA5zG,UAAAo1G,YAYAxB,IAAA5zG,UAAAq1G,OAAA,WAEA,IADA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,GAAAf,EAAA5qG,KAAAo5B,QACA9kC,EAAA,EAAmBA,EAAA,IACnBk3G,EAAAZ,EAAAt2G,KACAm3G,EAAAb,EAAAt2G,KACAo3G,EAAAd,EAAAt2G,KACAq3G,GAAArC,mBAAAkC,IAAA,GACAlC,mBAAA,IAAAkC,GAAA,EAAAC,IAAA,IACAnC,mBAAA,IAAAmC,GAAA,EAAAC,IAAA,IACApC,mBAAA,GAAAoC,GAMA,OAJAF,EAAAZ,EAAAt2G,GACAq3G,GAAArC,mBAAAkC,IAAA,GACAlC,mBAAAkC,GAAA,MACA,MAIA,IAAA13G,QAAAk2G,eAEAnB,UACA90G,OAAAD,iBAmBAF,KAAAg4G,IAAA93G,QACAi1G,MACMluG,8BAAA,WACN,OAAA/G,SACOW,KAAAX,QAAAM,oBAAAN,QAAAC,aAAA+G,IAAAD,gCAAA9G,OAAAD,QAAA+G,iCA9pBP,iFCTA,IAAMi/B,EAAa9+B,EAAQ,IASrB4oF,EAAQ,CACV,UAAW,QAAS,UAAW,QAAS,QAAS,WAAY,OAC7D,SAAU,QAAS,WAAY,MAAO,OAAQ,WAAY,UAC1D,UAAW,WAAY,QAAS,UAAW,MAAO,OAAQ,YAC1D,UAAW,OAAQ,OAAQ,QAAS,UAAW,QAAS,WAAY,QACpE,SAAU,UAAW,QAAS,SAAU,SAAU,SAAU,QAC5D,SAAU,SAAU,WAAY,SAAU,SAAU,SAAU,UAC9D,WAAY,SAAU,SAAU,WAAY,QAAS,QAAS,QAC9D,UAAW,WAAY,QAAS,QAAS,OAAQ,QAAS,QAAS,SACnE,QAAS,SAAU,QAAS,KAAM,SAAU,OAAQ,QAAS,SAC7D,SAAU,SAAU,OAAQ,SAAU,UAAW,WAAY,UAC7D,QAAS,SAAU,OAAQ,QAAS,OAAQ,QAAS,YACrD,aAAc,OAAQ,QAAS,QAAS,aAAc,aACtD,UAAW,SAAU,OAAQ,QAAS,YAAa,YAAa,YAChE,aAAc,aAAc,cAAe,YAAa,UACxD,WAAY,SAAU,SAAU,SAAU,aAAc,MAAO,UAC/D,UAAW,SAAU,SAAU,UAAW,UAAW,MAAO,OAAQ,QACpE,SAAU,QAAS,SAAU,SAAU,SAAU,QAAS,SAAU,QACpE,QAAS,QAAS,QAAS,SAAU,QAAS,UAAW,OAAQ,WACjE,OAAQ,SAAU,OAAQ,QAAS,SAAU,SAAU,UAAW,SAClE,QAAS,QAAS,SAAU,QAAS,SAAU,SAAU,UACzD,SAAU,SAAU,QAAS,QAAS,QAAS,QAAS,QAAS,UACjE,SAAU,SAAU,QAAS,UAAW,UAAW,OAAQ,QAAS,OACpE,QAAS,QAAS,OAAQ,SAAU,MAAO,OAAQ,MAAO,SAC1D,WAAY,QAAS,QAAS,YAAa,YAAa,WAAY,QACpE,WAAY,YAAa,SAAU,SAAU,OAAQ,QAAS,SAC9D,WAAY,WAAY,WAAY,WAAY,SAAU,QAAS,QACnE,SAAU,QAAS,SAAU,QAAS,QAAS,SAAU,SAAU,OACnE,UAAW,WAAY,YAAa,WAAY,UAAW,YAC3D,OAAQ,UAAW,UAAW,QAAS,QAAS,SAAU,UAC1D,aAAc,SAAU,YAAa,YAAa,UAAW,aAC7D,WAAY,UAAW,SAAU,SAAU,OAAQ,QAAS,MAC5D,UAAW,UAAW,OAAQ,YAAa,UAAW,QAAS,SAC/D,QAAS,MAAO,SAAU,UAAW,OAAQ,QAAS,UAAW,QACjE,SAAU,QAAS,OAAQ,SAAU,UAAW,SAAU,UAAW,OACrE,OAAQ,SAAU,UAAW,UAAW,OAAQ,MAAO,SAAU,SACjE,QAAS,QAAS,UAAW,UAAW,MAAO,OAAQ,SAAU,WACjE,SAAU,QAAS,UAAW,SAAU,SAAU,OAAQ,UAC1D,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,YAC1D,SAAU,SAAU,UAAW,YAAa,WAAY,UACxD,UAAW,UAAW,SAAU,SAAU,SAAU,SAAU,SAC9D,MAAO,QAAS,OAAQ,OAAQ,QAAS,QAAS,OAAQ,QAAS,OACnE,SAAU,SAAU,UAAW,SAAU,QAAS,UAAW,QAC7D,OAAQ,aAAc,SAAU,SAAU,WAAY,OAAQ,UAC9D,OAAQ,QAAS,QAAS,MAAO,WAAY,WAAY,UACzD,SAAU,QAAS,SAAU,WAAY,aAAc,YACvD,UAAW,WAAY,WAAY,WAAY,UAAW,SAC1D,WAAY,UAAW,QAAS,OAAQ,QAAS,SAAU,UAC3D,WAAY,QAAS,SAAU,OAAQ,UAAW,SAAU,QAC5D,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,SAAU,OACrE,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,SACzD,UAAW,QAAS,KAAM,SAAU,QAAS,SAAU,SAAU,QACjE,OAAQ,OAAQ,SAAU,WAAY,UAAW,SAAU,QAC3D,UAAW,QAAS,SAAU,SAAU,UAAW,SAAU,SAC7D,UAAW,UAAW,UAAW,QAAS,UAAW,UAAW,SAChE,SAAU,UAAW,UAAW,SAAU,UAAW,UAAW,UAChE,SAAU,UAAW,UAAW,QAAS,OAAQ,QAAS,OAAQ,QAClE,SAAU,UAAW,QAAS,UAAW,YAAa,SAAU,UAChE,WAAY,UAAW,QAAS,UAAW,WAAY,QAAS,YAChE,QAAS,QAAS,SAAU,WAAY,SAAU,QAAS,QAC3D,SAAU,QAAS,SAAU,QAAS,OAAQ,MAAO,QAAS,SAC9D,QAAS,WAAY,SAAU,UAAW,SAAU,OAAQ,QAC5D,SAAU,UAAW,OAAQ,QAAS,UAAW,OAAQ,UACzD,SAAU,SAAU,UAAW,SAAU,UAAW,UAAW,SAC/D,SAAU,SAAU,UAAW,UAAW,aAAc,UACxD,UAAW,UAAW,OAAQ,QAAS,UAAW,SAAU,WAC5D,SAAU,QAAS,SAAU,QAAS,SAAU,WAAY,SAC5D,UAAW,WAAY,UAAW,SAAU,UAAW,QAAS,YAChE,SAAU,WAAY,WAAY,UAAW,WAAY,SACzD,UAAW,SAAU,SAAU,OAAQ,WAAY,QAAS,UAC5D,UAAW,SAAU,YAAa,YAAa,UAAW,SAC1D,WAAY,WAAY,YAAa,YAAa,WAAY,UAC9D,QAAS,QAAS,SAAU,UAAW,QAAS,SAAU,UAC1D,UAAW,YAAa,YAAa,QAAS,SAAU,QAAS,OACjE,QAAS,WAAY,QAAS,SAAU,WAAY,SAAU,WAC9D,UAAW,WAAY,UAAW,UAAW,UAAW,YACxD,QAAS,UAAW,WAAY,QAAS,OAAQ,UAAW,UAC5D,UAAW,UAAW,UAAW,OAAQ,WAAY,WAAY,QACjE,QAAS,SAAU,UAAW,aAAc,YAAa,aACzD,YAAa,YAAa,WAAY,aAAc,cACpD,UAAW,QAAS,QAAS,SAAU,QAAS,SAAU,QAC1D,WAAY,QAAS,SAAU,QAAS,aAAc,QAAS,WAC/D,QAAS,QAAS,SAAU,UAAW,UAAW,WAAY,OAC9D,UAAW,UAAW,aAAc,aAAc,UAAW,OAC7D,SAAU,QAAS,SAAU,QAAS,YAAa,WAAY,UAC/D,QAAS,UAAW,WAAY,SAAU,QAAS,QAAS,OAAQ,OACpE,QAAS,OAAQ,UAAW,QAAS,UAAW,SAAU,OAAQ,SAClE,SAAU,WAAY,aAAc,SAAU,SAAU,SAAU,QAClE,SAAU,YAAa,aAAc,WAAY,SAAU,OAC3D,UAAW,SAAU,WAAY,UAAW,SAAU,SAAU,SAChE,SAAU,YAAa,UAAW,UAAW,SAAU,UAAW,OAClE,OAAQ,WAAY,MAAO,QAAS,WAAY,SAAU,UAC1D,WAAY,WAAY,YAAa,aAAc,OAAQ,UAC3D,UAAW,SAAU,OAAQ,SAAU,SAAU,UAAW,QAC5D,QAAS,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,OACnE,SAAU,SAAU,SAAU,UAAW,SAAU,SAAU,SAC7D,SAAU,QAAS,MAAO,OAAQ,SAAU,OAAQ,WAAa,UACjE,SAAU,UAAW,WAAY,WAAY,SAAU,SAAU,QACjE,QAAS,SAAU,SAAU,UAAW,UAAW,QAAS,QAC5D,SAAU,UAAW,SAAU,QAAS,SAAU,SAAU,UAC5D,QAAS,SAAU,UAAW,SAAU,UAAW,SAAU,UAC7D,SAAU,SAAU,SAAU,QAAS,UAAW,QAAS,OAAQ,QACnE,QAAS,SAAU,QAAS,UAAW,OAAQ,SAAU,MAAO,SAChE,QAAS,QAAS,SAAU,OAAQ,WAAY,SAAU,UAC1D,SAAU,SAAU,UAAW,MAAO,QAAS,OAAQ,QAAS,QAChE,SAAU,UAAW,UAAW,UAAW,QAAS,UAAW,OAC/D,QAAS,SAAU,UAAW,SAAU,UAAW,WAAY,QAC/D,UAAW,WAAY,UAAW,WAAY,YAAa,SAAU,OACrE,QAAS,SAAU,OAAQ,UAAW,UAAW,SAAU,SAC3D,QAAS,SAAU,QAAS,UAAW,UAAW,UAAW,UAC7D,UAAW,SAAU,UAAW,SAAU,WAAY,WAAY,UAClE,UAAW,QAAS,UAAW,QAAS,QAAS,QAAS,UAC1D,QAAS,UAAW,SAAU,SAAU,UAAW,QAAS,SAC5D,QAAS,SAAU,SAAU,UAAW,OAAQ,OAAQ,OAAQ,QAChE,OAAQ,QAAS,UAAW,UAAW,WAAY,WAAY,WAC/D,UAAW,UAAW,YAAa,MAAO,SAAU,SAAU,UAC9D,QAAS,UAAW,SAAU,QAAS,OAAQ,SAAU,SAAU,QACnE,WAAY,UAAW,SAAU,SAAU,SAAU,OAAQ,UAC7D,QAAS,QAAS,QAAS,OAAQ,QAAS,SAAU,QAAS,SAC/D,UAAW,SAAU,QAAS,SAAU,QAAS,OAAQ,UACzD,UAAW,UAAW,aAAc,SAAU,SAAU,OAAQ,QAChE,KAAM,MAAO,MAAO,QAAS,OAAQ,QAAS,UAAW,SAAU,SACnE,SAAU,OAAQ,UAAW,SAAU,UAAW,QAAS,SAC3D,QAAS,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,OAClE,SAAU,SAAU,SAAU,OAAQ,QAAS,SAAU,SACzD,WAAY,WAAY,WAAY,UAAW,SAAU,QAAS,SAClE,UAAW,WAAY,WAAY,MAAO,QAAS,SAAU,QAC7D,UAAW,SAAU,SAAU,UAAW,QAAS,YAAa,QAChE,SAAU,SAAU,SAAU,QAAS,YAAa,OAAQ,QAC5D,QAAS,SAAU,UAAW,QAAS,YAAa,QAAS,SAC7D,OAAQ,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,UACjE,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,SACnE,QAAS,QAAS,QAAS,QAAS,QAAS,SAAU,OAAQ,UAC/D,SAAU,SAAU,QAAS,UAAW,UAAW,QAAS,OAAQ,OACpE,QAAS,SAAU,WAAY,SAAU,SAAU,QAAS,OAC5D,UAAW,WAAY,aAAc,QAAS,SAAU,QAAS,SACjE,OAAQ,QAAS,MAAO,OAAQ,QAAS,QAAS,OAAQ,SAC1D,UAAW,UAAW,MAAO,WAAY,OAAQ,QAAS,QAAS,QACnE,SAAU,OAAQ,QAAS,OAAQ,SAAU,OAAQ,SAAU,YAC/D,YAAa,UAAW,QAAS,QAAS,QAAS,OAAQ,YAC3D,YAAa,OAAQ,UAAW,YAAa,QAAS,SAAU,UAChE,UAAW,UAAW,SAAU,WAAY,OAAQ,QAAS,QAC7D,UAAW,QAAS,QAAS,SAAU,SAAU,UAAW,OAAQ,QACpE,UAAW,OAAQ,SAAU,UAAW,MAAO,SAAU,OACzD,aAAc,QAAS,MAAO,UAAW,SAAU,WAAY,UAC/D,WAAY,QAAS,OAAQ,QAAS,QAAS,UAAW,WAC1D,OAAQ,SAAU,UAAW,MAAO,SAAU,QAAS,SAAU,WACjE,SAAU,SAAU,MAAO,OAAQ,WAAY,UAAW,WAC1D,WAAY,SAAU,SAAU,QAAS,SAAU,SAAU,OAC7D,WAAY,QAAS,QAAS,YAAa,WAAY,OAAQ,QAC/D,SAAU,SAAU,QAAS,WAAY,MAAO,WAAY,YAC5D,UAAW,UAAW,UAAW,UAAW,OAAQ,QAAS,OAC7D,SAAU,UAAW,SAAU,UAAW,YAAa,YACvD,UAAW,YAAa,YAAa,SAAU,QAAS,UAAW,QACnE,OAAQ,QAAS,UAAW,SAAU,WAAY,YAAa,WAC/D,aAAc,WAAY,QAAS,SAAU,UAAW,SAAU,QAClE,SAAU,YAAa,QAAS,SAAU,OAAQ,UAAW,YAC7D,YAAa,UAAW,OAAQ,OAAQ,UAAW,SAAU,WAC7D,UAAW,SAAU,UAAW,SAAU,UAAW,UAAW,WAChE,QAAS,QAAS,SAAU,QAAS,MAAO,QAAS,UAAW,OAChE,UAAW,UAAW,YAAa,UAAW,WAAY,MAAO,WACjE,SAAU,YAAa,YAAa,aAAc,WAAY,WAC9D,UAAW,SAAU,YAAa,SAAU,UAAW,QAAS,UAChE,WAAY,SAAU,QAAS,SAAU,WAAY,MAAO,SAC5D,SAAU,UAAW,WAAY,QAAS,QAAS,UAAW,OAC9D,OAAQ,UAAW,WAAY,WAAY,WAAY,WACvD,WAAY,UAAW,SAAU,OAAQ,SAAU,SAAU,UAC7D,SAAU,UAAW,QAAS,SAAU,UAAW,SAAU,QAC7D,SAAU,WAAY,QAAS,SAAU,QAAS,YAAa,SAC/D,UAAW,QAAS,OAAQ,QAAS,WAAY,WAAY,UAC7D,QAAS,WAAY,UAAW,UAAW,SAAU,YAAa,SAClE,QAAS,YAAa,WAAY,SAAU,SAAU,MAAO,SAC7D,OAAQ,UAAW,MAAO,OAAQ,YAAa,SAAU,SAAU,SACnE,SAAU,MAAO,UAAW,QAAS,QAAS,QAAS,SAAU,OACjE,QAAS,SAAU,OAAQ,QAAS,SAAU,SAAU,UAAW,SACnE,WAAY,QAAS,SAAU,UAAW,SAAU,SAAU,SAC9D,QAAS,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,QACnE,UAAW,SAAU,QAAS,SAAU,QAAS,QAAS,SAC1D,SAAU,QAAS,SAAU,SAAU,UAAW,YAAa,QAC/D,YAAa,QAAS,UAAW,SAAU,UAAW,UAAW,WACjE,WAAY,UAAW,QAAS,SAAU,SAAU,SAAU,UAC9D,UAAW,QAAS,YAAa,UAAW,UAAW,QAAS,SAChE,WAAY,QAAS,SAAU,SAAU,SAAU,SAAU,QAC7D,OAAQ,SAAU,UAAW,WAAY,QAAS,UAAW,SAC7D,SAAU,OAAQ,SAAU,SAAU,OAAQ,QAAS,WAAY,SACnE,QAAS,MAAO,UAAW,OAAQ,MAAO,QAAS,SAAU,UAC7D,WAAY,MAAO,MAAO,QAAS,SAAU,MAAO,QAAS,SAC7D,WAAY,UAAW,OAAQ,OAAQ,SAAU,QAAS,QAAS,SACnE,UAAW,WAAY,WAAY,OAAQ,UAAW,OAAQ,SAC9D,SAAU,SAAU,SAAU,SAAU,OAAQ,SAAU,QAAS,QACnE,MAAO,OAAQ,QAAS,MAAO,WAAY,SAAU,SAAU,OAC/D,QAAS,WAAY,UAAW,OAAQ,YAAa,SAAU,UAC/D,UAAW,QAAS,SAAU,YAAa,UAAW,WAAY,OAClE,OAAQ,QAAS,QAAS,QAAS,SAAU,QAAS,SAAU,SAChE,QAAS,QAAS,UAAW,OAAQ,QAAS,SAAU,QAAS,QACjE,QAAS,SAAU,QAAS,QAAS,WAAY,QAAS,UAC1D,QAAS,QAAS,QAAS,QAAS,UAAW,SAAU,MAAO,OAChE,QAAS,OAAQ,UAAW,UAAW,QAAS,SAAU,SAAU,QACpE,QAAS,SAAU,SAAU,OAAQ,SAAU,WAAY,YAC3D,QAAS,QAAS,QAAS,QAAS,SAAU,UAAW,SACzD,UAAW,SAAU,SAAU,QAAS,SAAU,QAAS,SAC3D,UAAW,SAAU,QAAS,UAAW,MAAO,QAAS,SAAU,QACnE,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,SAC3D,QAAS,QAAS,SAAU,SAAU,SAAU,SAAU,UAAW,OACrE,WAAY,SAAU,SAAU,MAAO,WAAY,WAAY,OAC/D,WAAY,UAAW,UAAW,SAAU,OAAQ,UAAW,SAC/D,WAAY,WAAY,WAAY,SAAU,QAAS,SAAU,UACjE,SAAU,QAAS,UAAW,SAAU,UAAW,WAAY,SAC/D,QAAS,SAAU,SAAU,UAAW,SAAU,UAAW,QAC7D,OAAQ,QAAS,UAAW,SAAU,UAAW,QAAS,UAC1D,QAAS,OAAQ,SAAU,QAAS,QAAS,SAAU,UAAW,SAClE,QAAS,KAAM,OAAQ,QAAS,SAAU,SAAU,UAAW,SAC/D,QAAS,UAAW,UAAW,QAAS,OAAQ,MAAO,OAAQ,SAC/D,SAAU,OAAQ,QAAS,SAAU,UAAW,WAAY,OAC5D,YAAa,YAAa,UAAW,SAAU,WAAY,UAC3D,QAAS,MAAO,QAAS,UAAW,WAAY,WAAY,SAC5D,UAAW,QAAS,SAAU,QAAS,SAAU,QAAS,OAAQ,SAClE,WAAY,SAAU,YAAa,OAAQ,SAAU,UAAW,SAChE,UAAW,WAAY,QAAS,QAAS,QAAS,SAAU,UAC5D,SAAU,MAAO,QAAS,QAAS,UAAW,QAAS,OAAQ,OAC/D,QAAS,SAAU,OAAQ,QAAS,QAAS,SAAU,UACvD,WAAY,QAAS,SAAU,SAAU,QAAS,SAAU,OAC5D,SAAU,SAAU,SAAU,UAAW,UAAW,UAAW,SAC/D,SAAU,SAAU,UAAW,QAAS,QAAS,OAAQ,QAAS,OAClE,QAAS,QAAS,QAAS,SAAU,OAAQ,SAAU,SAAU,SACjE,UAAW,UAAW,OAAQ,QAAS,UAAW,QAAS,OAAQ,SACnE,UAAW,UAAW,SAAU,SAAU,SAAU,OAAQ,OAC5D,SAAU,UAAW,QAAS,OAAQ,UAAW,WAAY,SAC7D,SAAU,OAAQ,SAAU,SAAU,QAAS,SAAU,WACzD,SAAU,WAAY,QAAS,YAAa,WAAY,UACxD,UAAW,WAAY,YAAa,YAAa,WAAY,WAC7D,UAAW,UAAW,WAAY,SAAU,UAAW,UAAW,UAClE,SAAU,QAAS,MAAO,OAAQ,SAAU,SAAU,QAAS,SAC/D,SAAU,WAAY,SAAU,QAAS,SAAU,SAAU,SAC7D,QAAS,QAAS,SAAU,SAAU,SAAU,QAAS,SAAU,QACnE,QAAS,SAAU,SAAU,QAAS,SAAU,QAAS,QAAS,SAClE,SAAU,SAAU,MAAO,UAAW,SAAU,WAAY,QAC5D,UAAW,UAAW,UAAW,UAAW,QAAS,SAAU,QAC/D,WAAY,SAAU,OAAQ,UAAW,UAAW,QAAS,QAC7D,QAAS,QAAS,WAAY,SAAU,SAAU,OAAQ,QAAS,SACnE,QAAS,SAAU,OAAQ,QAAS,SAAU,QAAS,MAAO,WAC9D,OAAQ,MAAO,OAAQ,OAAQ,UAAW,UAAW,QAAS,OAC9D,OAAQ,OAAQ,QAAS,OAAQ,SAAU,QAAS,OAAQ,QAAS,OACrE,SAAU,WAAY,UAAW,WAAY,YAAa,aAC1D,aAAc,SAAU,UAAW,UAAW,WAAY,OAAQ,SAClE,OAAQ,OAAQ,QAAS,UAAW,QAAS,QAAS,OAAQ,QAC9D,OAAQ,WAAY,YAAa,QAAS,SAAU,QAAS,UAC7D,SAAU,QAAS,SAAU,OAAQ,QAAS,UAAW,QAAS,QAClE,QAAS,QAAS,SAAU,SAAU,WAAY,WAAY,WAC9D,YAAa,SAAU,UAAW,QAAS,SAAU,SAAU,SAC/D,UAAW,UAAW,SAAU,UAAW,QAAS,UAAW,WAC/D,SAAU,QAAS,QAAS,SAAU,MAAO,QAAS,SAAU,SAChE,SAAU,OAAQ,MAAO,OAAQ,QAAS,UAAW,OAAQ,QAC7D,SAAU,QAAS,QAAS,SAAU,QAAS,SAAU,QAAS,SAClE,SAAU,MAAO,QAAS,OAAQ,UAAW,WAAY,QAAS,SAClE,SAAU,SAAU,UAAW,UAAW,WAAY,QAAS,OAC/D,SAAU,SAAU,QAAS,SAAU,SAAU,OAAQ,QAAS,UAClE,OAAQ,MAAO,QAAS,OAAQ,QAAS,QAAS,MAAO,OAAQ,QACjE,SAAU,QAAS,OAAQ,SAAU,UAAW,UAAW,QAC3D,UAAW,WAAY,SAAU,QAAS,OAAQ,SAAU,OAC5D,UAAW,QAAS,UAAW,UAAW,SAAU,SAAU,UAC9D,SAAU,OAAQ,WAAY,UAAW,QAAS,OAAQ,SAC1D,SAAU,YAAa,QAAS,QAAS,OAAQ,OAAQ,SAAU,OACnE,MAAO,SAAU,QAAS,SAAU,QAAS,QAAS,OAAQ,UAC9D,QAAS,SAAU,SAAU,UAAW,UAAW,OAAQ,SAC3D,QAAS,SAAU,MAAO,QAAS,SAAU,UAAW,WACxD,SAAU,MAAO,QAAS,QAAS,QAAS,UAAW,QAAS,WAChE,SAAU,UAAW,QAAS,UAAW,SAAU,OAAQ,QAC3D,SAAU,MAAO,SAAU,QAAS,OAAQ,QAAS,QAAS,OAC9D,OAAQ,OAAQ,OAAQ,OAAQ,UAAW,SAAU,MAAO,OAAQ,QACpE,OAAQ,OAAQ,QAAS,UAAW,QAAS,UAAW,QAAS,MACjE,QAAS,OAAQ,QAAS,OAAQ,YAAa,OAAQ,WACvD,UAAW,WAAY,WAAY,UAAW,WAAY,QAAS,QACnE,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,MAClE,SAAU,QAAS,UAAW,SAAU,WAAY,YAAa,SACjE,WAAY,SAAU,OAAQ,QAAS,QAAS,QAAS,UACzD,UAAW,WAAY,UAAW,UAAW,SAAU,UAAW,SAClE,UAAW,UAAW,QAAS,SAAU,SAAU,UAAW,OAC9D,OAAQ,SAAU,YAAa,YAAa,WAAY,WACxD,YAAa,UAAW,SAAU,QAAS,SAAU,SAAU,WAC/D,YAAa,YAAa,aAAc,aAAc,YAAa,QACnE,SAAU,SAAU,UAAW,aAAc,QAAS,SAAU,SAChE,SAAU,UAAW,UAAW,WAAY,WAAY,UACxD,UAAW,QAAS,UAAW,WAAY,WAAY,UAAW,UAClE,WAAY,SAAU,QAAS,SAAU,SAAU,UAAW,UAC9D,aAAc,WAAY,UAAW,OAAQ,SAAU,SAAU,SACjE,UAAW,SAAU,SAAU,SAAU,UAAW,UAAW,WAC/D,WAAY,QAAS,SAAU,UAAW,UAAW,QAAS,SAC9D,OAAQ,SAAU,WAAY,SAAU,QAAS,QAAS,SAC1D,UAAW,WAAY,UAAW,UAAW,OAAQ,SAAU,SAC/D,OAAQ,QAAS,SAAU,UAAW,UAAW,WAAY,UAC7D,WAAY,QAAS,MAAO,QAAS,SAAU,aAAc,aAC7D,cAAe,SAAU,UAAW,SAAU,UAAW,MAAO,OAChE,UAAW,WAAY,OAAQ,SAAU,UAAW,QAAS,QAC7D,UAAW,UAAW,WAAY,SAAU,UAAW,OAAQ,SAC/D,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,UAC1D,SAAU,SAAU,SAAU,UAAW,SAAU,UAAW,WAC9D,WAAY,OAAQ,QAAS,SAAU,UAAW,SAAU,SAC5D,OAAQ,MAAO,UAAW,QAAS,UAAW,WAAY,UAC1D,UAAW,SAAU,UAAW,WAAY,SAAU,UAAW,OACjE,QAAS,QAAS,QAAS,UAAW,SAAU,SAAU,OAAQ,SAClE,OAAQ,UAAW,SAAU,UAAW,WAAY,SAAU,SAC9D,WAAY,QAAS,UAAW,WAAY,SAAU,UAAW,UACjE,UAAW,WAAY,WAAY,SAAU,SAAU,QAAS,OAChE,SAAU,UAAW,SAAU,YAAa,aAAc,UAC1D,QAAS,QAAS,SAAU,SAAU,SAAU,WAAY,SAC5D,OAAQ,QAAS,QAAS,SAAU,SAAU,UAAW,WACzD,SAAU,OAAQ,SAAU,SAAU,UAAW,MAAO,OAAQ,SAChE,QAAS,OAAQ,SAAU,OAAQ,QAAS,QAAS,UAAW,SAChE,SAAU,SAAU,QAAS,QAAS,OAAQ,SAAU,QAAS,SACjE,WAAY,UAAW,OAAQ,QAAS,MAAO,UAAW,UAC1D,UAAW,SAAU,YAAa,YAAa,YAAa,SAC5D,SAAU,OAAQ,MAAO,QAAS,OAAQ,OAAQ,QAAS,QAAS,QACpE,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,OAAQ,SACjE,SAAU,MAAO,WAAY,YAAa,UAAW,OAAQ,WAC7D,WAAY,OAAQ,SAAU,UAAW,SAAU,YAAa,QAChE,SAAU,QAAS,QAAS,OAAQ,UAAW,OAAQ,OAAQ,OAC/D,QAAS,MAAO,OAAQ,SAAU,QAAS,SAAU,QAAS,OAC9D,QAAS,OAAQ,OAAQ,UAAW,WAAY,SAAU,QAAS,SACnE,SAAU,UAAW,OAAQ,UAAW,MAAO,OAAQ,SAAU,OACjE,SAAU,OAAQ,UAAW,MAAO,QAAS,SAAU,OAAQ,SAC/D,OAAQ,MAAO,OAAQ,MAAO,OAAQ,QAAS,OAAQ,OAAQ,SAC/D,QAAS,MAAO,QAAS,OAAQ,MAAO,OAAQ,OAAQ,UAAW,MACnE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,SAAU,UAC3D,OAAQ,QAAS,QAAS,QAAS,UAAW,UAAW,UAAW,QACpE,UAAW,SAAU,UAAW,OAAQ,OAAQ,SAAU,OAAQ,UAClE,QAAS,OAAQ,MAAO,OAAQ,SAAU,QAAS,QAAS,QAC5D,SAAU,QAAS,QAAS,QAAS,SAAU,UAAW,WAAY,MACtE,WAAY,WAAY,UAAW,QAAS,SAAU,OAAQ,QAC9D,UAAW,SAAU,SAAU,QAAS,UAAW,WAAY,QAC/D,SAAU,WAAY,WAAY,QAAS,QAAS,OAAQ,QAC5D,QAAS,SAAU,SAAU,SAAU,UAAW,SAAU,SAC5D,SAAU,OAAQ,SAAU,QAAS,QAAS,SAAU,WACxD,UAAW,UAAW,QAAS,SAAU,WAAY,YACrD,aAAc,WAAY,QAAS,UAAW,UAAW,SAAU,QACnE,UAAW,UAAW,UAAW,SAAU,WAAY,MAAO,SAC9D,SAAU,UAAW,SAAU,UAAW,QAAS,QAAS,UAC5D,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,QAAS,QACpE,SAAU,QAAS,UAAW,YAAa,SAAU,SAAU,UAC/D,UAAW,OAAQ,QAAS,MAAO,UAAW,WAAY,SAC1D,SAAU,OAAQ,SAAU,UAAW,SAAU,UAAW,QAAS,OACrE,QAAS,QAAS,SAAU,WAAY,OAAQ,SAAU,QAC1D,WAAY,YAAa,OAAQ,QAAS,SAAU,OAAQ,QAC5D,QAAS,SAAU,OAAQ,MAAO,MAAO,QAAS,WAAY,QAC9D,UAAW,OAAQ,QAAS,UAAW,WAAY,QAAS,UAC5D,UAAW,SAAU,WAAY,OAAQ,SAAU,SAAU,QAC7D,OAAQ,YAAa,QAAS,OAAQ,QAAS,OAAQ,SAAU,SACjE,UAAW,UAAW,QAAS,QAAS,QAAS,QAAS,MAAO,WACjE,SAAU,UAAW,UAAW,UAAW,OAAQ,UAAW,QAC9D,SAAU,UAAW,SAAU,OAAQ,UAAW,QAAS,MAAO,UAClE,QAAS,YAAa,OAAQ,OAAQ,UAAW,UAAW,WAC5D,YAAa,UAAW,WAAY,UAAW,UAAW,SAAU,OACpE,UAAW,UAAW,YAAa,WAAY,UAAW,UAC1D,QAAS,SAAU,SAAU,OAAQ,SAAU,QAAS,SAAU,UAClE,SAAU,UAAW,MAAO,QAAS,QAAS,UAAW,QAAS,QAClE,OAAQ,QAAS,UAAW,OAAQ,SAAU,OAAQ,SAAU,UAChE,QAAS,OAAQ,QAAS,SAAU,OAAQ,QAAS,QAAS,QAC9D,QAAS,UAAW,QAAS,SAAU,UAAW,UAAW,QAC7D,QAAS,OAAQ,QAAS,SAAU,QAAS,QAAS,WACtD,YAAa,MAAO,UAAW,WAAY,SAAU,QAAS,SAC9D,QAAS,SAAU,SAAU,WAAY,QAAS,UAAW,QAC7D,WAAY,UAAW,UAAW,SAAU,QAAS,QAAS,SAC9D,QAAS,OAAQ,UAAW,UAAW,WAAY,SAAU,WAC7D,WAAY,OAAQ,UAAW,SAAU,SAAU,OAAQ,YAC3D,UAAW,SAAU,SAAU,SAAU,SAAU,WAAY,OAC/D,OAAQ,SAAU,UAAW,QAAS,QAAS,SAAU,WACzD,SAAU,SAAU,UAAW,SAAU,UAAW,SAAU,SAC9D,QAAS,SAAU,QAAS,QAAS,SAAU,UAAW,SAC1D,SAAU,OAAQ,SAAU,UAAW,SAAU,WAAY,UAC7D,WAAY,UAAW,SAAU,UAAW,QAAS,MAAO,SAC5D,SAAU,SAAU,UAAW,SAAU,SAAU,QAAS,MAAO,SACnE,SAAU,UAAW,SAAU,OAAQ,QAAS,SAAU,QAC1D,UAAW,QAAS,QAAS,QAAS,QAAS,SAAU,SACzD,UAAW,SAAU,QAAS,OAAQ,WAAY,UAAW,UAC7D,SAAU,WAAY,SAAU,UAAW,YAAa,YACxD,WAAY,UAAW,UAAW,WAAY,QAAS,SAAU,UACjE,QAAS,SAAU,SAAU,QAAS,QAAS,SAAU,UAAW,QACpE,UAAW,OAAQ,QAAS,SAAU,SAAU,QAAS,SAAU,SACnE,YAAa,SAAU,UAAW,MAAO,QAAS,QAAS,SAC3D,QAAS,QAAS,SAAU,QAAS,OAAQ,QAAS,OAAQ,QAC9D,UAAW,UAAW,UAAW,OAAQ,SAAU,SAAU,MAAO,QACpE,UAAW,SAAU,WAAY,UAAW,WAAY,UAAW,QACnE,OAAQ,SAAU,QAAS,OAAQ,WAAY,SAAU,OAAQ,SACjE,OAAQ,WAAY,WAAY,UAAW,UAAW,WAAY,SAClE,SAAU,QAAS,UAAW,MAAO,QAAS,SAAU,QAAS,SACjE,UAAW,UAAW,WAAY,QAAS,UAAW,OAAQ,OAC9D,QAAS,QAAS,OAAQ,MAAO,MAAO,QAAS,SAAU,SAC3D,QAAS,OAAQ,OAAQ,QAAS,WAAY,SAAU,MAAO,QAC/D,SAAU,QAAS,SAAU,SAAU,MAAO,WAAY,WAC1D,QAAS,UAAW,SAAU,UAAW,QAAS,SAAU,UAC5D,SAAU,OAAQ,UAAW,SAAU,WAAY,UAAW,UAC9D,OAAQ,SAAU,SAAU,UAAW,SAAU,QAAS,QAAS,OACnE,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,UAC3D,QAAS,SAAU,SAAU,SAAU,MAAO,SAAU,QAAS,QACjE,QAAS,SAAU,OAAQ,WAAY,YAAa,YAAa,UACjE,SAAU,MAAO,QAAS,UAAW,SAAU,OAAQ,QAAS,QAChE,QAAS,QAAS,OAAQ,QAAS,SAAU,SAAU,QAAS,SAChE,OAAQ,QAAS,SAAU,UAAW,SAAU,SAAU,SAC1D,WAAY,QAAS,UAAW,UAAW,SAAU,QAAS,SAC9D,WAAY,OAAQ,QAAS,QAAS,QAAS,UAAW,WAC1D,WAAY,SAAU,QAAS,SAAU,WAAY,SAAU,SAC/D,WAAY,WAAY,OAAQ,OAAQ,OAAQ,SAAU,UAC1D,WAAY,SAAU,WAAY,WAAY,OAAQ,QAAS,QAC/D,SAAU,UAAW,SAAU,SAAU,QAAS,OAAQ,SAC1D,SAAU,OAAQ,SAAU,QAAS,UAAW,SAAU,aAC1D,UAAW,QAAS,SAAU,UAAW,SAAU,UAAW,SAC9D,UAAW,UAAW,QAAS,UAAW,UAAW,WAAY,UACjE,UAAW,aAAc,OAAQ,QAAS,UAAW,UAAW,SAChE,SAAU,SAAU,QAAS,QAAS,SAAU,SAAU,SAC1D,WAAY,WAAY,YAAa,SAAU,UAAW,UAC1D,QAAS,QAAS,SAAU,SAAU,UAAW,SAAU,UAC3D,SAAU,UAAW,SAAU,UAAW,WAAY,UAAW,UACjE,SAAU,SAAU,YAAa,UAAW,UAAW,OAAQ,UAC/D,UAAW,SAAU,SAAU,OAAQ,QAAS,YAAa,QAC7D,QAAS,QAAS,OAAQ,QAAS,OAAQ,OAAQ,MAAO,OAAQ,OAClE,QAAS,OAAQ,OAAQ,QAc7B7vF,EAAOD,QAAU,CACbgtD,iBARJ,WACI,IAAMjsD,EAAOilC,EAAW29B,cAAcmsB,GAChCxuE,EAAS0kB,EAAW69B,kBAAkB,GAE5C,SAAAr6D,OAAUzI,EAAV,KAAAyI,OAAkB8X,ogBC7atB,IAAMyrB,EAAuB7lC,EAAQ,IAC/B8tB,EAAS9tB,EAAQ,GAAqB2tB,UAAUQ,GAMhD0iF,EAAuB,GAkF7B,SAASC,EAAoBC,EAAaC,GACtC,OAAKA,GAAgBA,GAAgB,IACzBD,GAAeA,GAAe,EAC/B,EAGJjrG,KAAKmrG,MAAOF,EAAcC,EAAgB,KAOrD,SAASE,IACLlsG,KAAKmsG,KAAO,GACZnsG,KAAKosG,QAAU,CACXpmB,SAAU,EACVqmB,OAAQ,GAEZrsG,KAAKyjC,WAAa,GAClBzjC,KAAKssG,UAAY,EAiDrB,SAASC,IAMLvsG,KAAKglC,UAAY,GAMjBhlC,KAAKosG,QAAU,GAMfpsG,KAAKwsG,WAAa,KAMlBxsG,KAAKyoB,UAAY,GAkBN,SAASgkF,EAChB9gF,EACAJ,EACAmhF,EACAniF,GAgBJvqB,KAAK2sG,aAAehiF,IAAQq/B,UAC5B,IAAM37B,EAAOw9E,EAAqB7rG,KAAK2sG,cAEvC,IAAKt+E,EAED,0BAAA/wB,OAA2B0C,KAAK2sG,aAAhC,sBAOJ3sG,KAAK4sG,qBACCjiF,IAAQq9E,sBAAwBr9E,IAAQkO,YAU9C74B,KAAK6sG,cACC7sG,KAAK4sG,qBACD5sG,KAAK8sG,6BAA6Bz+E,GAClCruB,KAAK+sG,0BAA0B1+E,GAEzCruB,KAAK2rB,eAAiBA,EACtB3rB,KAAKgtG,0BAA4B,KACjChtG,KAAKitG,yBAA2B,KAChCjtG,KAAKktG,mBAAqB,KAC1BltG,KAAKmtG,oBAAsB,KAC3BntG,KAAKotG,sBAAwB,KAC7BptG,KAAKuqB,aAAeA,EACpBvqB,KAAKqtG,gBAAkB,IAAId,EAG3BvsG,KAAKstG,yBAA2B/hF,EAEhCvrB,KAAKutG,gBAAkB,KACvBvtG,KAAKwtG,mBAAqBd,EAM1B1sG,KAAKytG,WAAa,IAAInjF,IAlQ1BuhF,EAAqB6B,IAAS7xD,SAAW,CACrCjrB,KAAQ,OACR+8E,gBAAmB,kBACnBC,YAAe,cACfC,YAAe,cACfC,cAAiB,gBACjBn0B,UAAa,YACbo0B,cAAiB,gBACjBx2E,GAAM,YACNlB,KAAQ,aACRzjB,SAAY,aAEhBi5F,EAAqB6B,IAAS/xD,QAAU,CACpCqyD,iBAAoB,gCACpBC,cAAiB,6BACjBC,cAAiB,oBACjBC,cAAiB,oBACjBC,aAAgB,mBAChBC,iBAAoB,uBACpBz9E,KAAQ,OACR+8E,gBAAmB,kBACnBE,YAAe,cACfD,YAAe,cACfE,cAAiB,gBACjBn0B,UAAa,YACb20B,wBAA2B,0BAC3BC,uBAA0B,yBAC1BC,oBAAuB,sBACvBC,mBAAsB,qBACtBC,sBAAyB,wBACzBC,kBAAqB,oBACrBC,gBAAmB,kBACnBC,iBAAoB,mBACpBC,qBAAwB,UACxBC,oBAAuB,0BACvBC,mBAAsB,yBACtBz3E,GAAM,KACNlB,KAAQ,OACRzjB,SAAY,YAEhBi5F,EAAqB6B,IAAS3xD,MAAQ,CAClCkyD,cAAiB,6BACjBC,cAAiB,gBACjBC,cAAiB,WACjBC,aAAgB,eAChBC,iBAAoB,mBACpBz9E,KAAQ,OACR+8E,gBAAmB,kBACnBE,YAAe,cACfD,YAAe,cACfE,cAAiB,gBACjBn0B,UAAa,YACb20B,wBAA2B,cAC3BC,uBAA0B,aAC1BC,oBAAuB,cACvBC,mBAAsB,aACtBC,sBAAyB,kBACzBC,kBAAqB,kBACrBC,gBAAmB,aACnBC,iBAAoB,aACpBC,qBAAwB,iBAE5BjD,EAAqB6B,IAAS9xD,OACxBiwD,EAAqB6B,IAAS/xD,QACpCkwD,EAAqB6B,IAASzxD,MACxB4vD,EAAqB6B,IAAS/xD,QACpCkwD,EAAqB6B,IAASxxD,UACxB2vD,EAAqB6B,IAAS/xD,QACpCkwD,EAAqB6B,IAAS1xD,QACxB6vD,EAAqB6B,IAAS/xD,QACpCkwD,EAAqB6B,IAASvxD,cACxB0vD,EAAqB6B,IAAS/xD,QAoCpCuwD,EAAUh2G,UAAU+4G,QAAU,SAAS9C,GACnCnsG,KAAKmsG,KAAOA,GAAQ,IAOxBD,EAAUh2G,UAAUg5G,cAAgB,SAASzrE,GACzCzjC,KAAKyjC,WAAaA,GAAc,IAQpCyoE,EAAUh2G,UAAUi5G,WAAa,SAAS/C,GACtCpsG,KAAKosG,QAAQpmB,UAAYomB,EAAQpmB,SACjChmF,KAAKosG,QAAQC,QAAUD,EAAQC,QAOnCH,EAAUh2G,UAAUk5G,aAAe,WAC/BpvG,KAAKosG,QAAQpmB,SAAW,EACxBhmF,KAAKosG,QAAQC,OAAS,GAO1BH,EAAUh2G,UAAUm5G,aAAe,SAAS/C,GACxCtsG,KAAKssG,UAAYA,GAAa,GA2HlCG,EAAev2G,UAAUy4B,KAAO,WACxB3uB,KAAKotG,wBACLzlE,cAAc3nC,KAAKotG,uBACnBptG,KAAKotG,sBAAwB,MAG7BptG,KAAKutG,kBACL5lE,cAAc3nC,KAAKutG,iBACnBvtG,KAAKutG,gBAAkB,OAQ/Bd,EAAev2G,UAAUk4C,cAAgB,SAAS3+B,GAC9CoxB,EAAqBC,iBAAiBrxB,GACtCqZ,EAAOrZ,MAAM,kBAAmBA,GAChCzP,KAAK2uB,QAMT89E,EAAev2G,UAAU2vB,MAAQ,SAASypF,GAAsB,IAAA5nE,EAAA1nC,KACtD0iB,EAAO1iB,KAETsvG,IACAtvG,KAAKotG,sBAAwB9iE,YACzB,WAEI5nB,EAAKiJ,eAAekuE,SAChB,SAAAxxC,GACI,IAAI6zB,EAAU,KAMVA,EAJC7zB,GAAWA,EAAOv4C,QACS,mBAAlBu4C,EAAOv4C,OAGPu4C,EAAOv4C,SAFPu4C,EAId3lC,EAAKuqF,yBAA2B/wB,EAC5Bx0C,EAAKklE,qBACLlqF,EAAK6sF,6BAEL7sF,EAAK8sF,0BAGT9sF,EAAKsqF,0BACCtqF,EAAKuqF,0BAEf,SAAAx9F,GAAK,OAAIiT,EAAK0rB,cAAc3+B,MAGpCiT,EAAK4qF,2BAIT3iF,IAAQ8kF,0BACRzvG,KAAKutG,gBAAkBjjE,YACnB,WAEI5nB,EAAKiJ,eAAekuE,SAChB,SAAAxxC,GACI,IAAI6zB,EAAU,KAQVA,EANC7zB,GAAWA,EAAOv4C,QACS,mBAAlBu4C,EAAOv4C,OAKPu4C,EAAOv4C,SAHPu4C,EAMd3lC,EAAKwqF,mBAAqBhxB,EAC1B,IACQx0C,EAAKklE,qBACLlqF,EAAKgtF,wBAELhtF,EAAKitF,qBAEX,MAAO1wG,GACL4hC,EAAqBC,iBAAiB7hC,GACtC6pB,EAAOrZ,MAAP,mBAAAnS,OAAgC2B,GAAKA,GAGzCyjB,EAAKyqF,oBAAsBzqF,EAAKwqF,oBAEpC,SAAAz9F,GAAK,OAAIiT,EAAK0rB,cAAc3+B,MAGpCiT,EAAK8qF,sBAajBf,EAAev2G,UAAU62G,0BAA4B,SAAS1+E,GAI1D,IAcIuhF,EAEJ,OAAQ5vG,KAAK2sG,cACb,KAAKe,IAAS/xD,OACd,KAAK+xD,IAAS9xD,MACd,KAAK8xD,IAASzxD,KACd,KAAKyxD,IAASxxD,SAQV0zD,EAAgB,SAACn0E,EAAM5lC,GAAP,OAAe4lC,EAAKo0E,KAAKh6G,IACzC,MACJ,KAAK63G,IAASvxD,aAIVyzD,EAAgB,SAASn0E,EAAM5lC,GAC3B,IAAIN,EAaJ,OAXAkmC,EAAKjO,OAAOgmB,KAAK,SAAAs8D,GACb,QAAIA,EAAK35G,eAAeN,KACpBN,EAAQu6G,EAAKj6G,IAEN,KAORN,GAEX,MACJ,KAAKm4G,IAAS3xD,KACV6zD,EAAgB,SAACn0E,EAAM5lC,GAAP,OAAe4lC,EAAK5lC,IACpC,MACJ,QACI+5G,EAAgB,SAACn0E,EAAM5lC,GAAP,OAAe4lC,EAAK5lC,IAMxC,OAAO,SAAC4lC,EAAM5mC,GAAP,OAAgB+6G,EAAcn0E,EA7DjB,SAAS5mC,GACzB,IAAMgB,EAAMw4B,EAAKx5B,GAEjB,GAAIgB,EACA,OAAOA,EAIX,sBAAAyH,OAAuBzI,EAAvB,sBAqDuCk7G,CAAYl7G,MAW3D43G,EAAev2G,UAAU85G,mBAAqB,SAAS3nD,EAAQxzD,GAC3D,IAAIU,EAAQyK,KAAK6sG,cAAcxkD,EAAQxzD,GAMvC,MAJqB,iBAAVU,IACPA,EAAQsL,OAAOtL,IAGf6M,MAAM7M,GACC,EAGJuL,KAAK4gC,IAAI,EAAGnsC,IAQvBk3G,EAAev2G,UAAUy5G,mBAAqB,WAAW,IAAAjkE,EAAA1rC,KACrD,GAAKA,KAAKmtG,oBAAV,CAIA,IAAM8C,EAAejwG,KAAK6sG,cACpBqD,EAAgB,GAEtB,IAAK,IAAMv3D,KAAO34C,KAAKktG,mBACnB,GAAKltG,KAAKktG,mBAAmB/2G,eAAewiD,GAA5C,CAGA,IAAMv7B,EAAMpd,KAAKktG,mBAAmBv0D,GAGpC,GAAKv7B,EAAL,CAIA,IACI,IAAM4wF,EAAmBiC,EAAa7yF,EAAK,oBACrC6wF,EAAgBgC,EAAa7yF,EAAK,kBAEpC4wF,GAAoBC,KACpBjuG,KAAKqtG,gBAAgBroE,UAAY,CAC7BghD,SAAYllF,KAAKmrG,MAAM+B,EAAmB,KAC1C3B,OAAUvrG,KAAKmrG,MAAMgC,EAAgB,OAG/C,MAAOhvG,IAET,GAAiB,sBAAbme,EAAI/L,KAA8B,2BAClC,IAAIokE,OAAM,EAAEl+C,OAAE,EAAEy3E,OAAkB,EAAEmB,OAAO,EACvCpB,OAAmB,EAAEtvE,OAAG,EAAEpuB,OAAI,EAElC,IAEI,KADAokE,EAASw6B,EAAa7yF,EAAK,qBAEvB,iBAGJma,EAAK04E,EAAa7yF,EAAK,iBACvB/L,EAAO4+F,EAAa7yF,EAAK,iBACzB+yF,EAAUF,EAAa7yF,EAAK,gBAC5B4xF,EAAqBiB,EAAa7yF,EAAK,sBACvC2xF,EAAsBkB,EAAa7yF,EAAK,uBACxCqiB,EAAMiM,EAAKskE,mBAAmB5yF,EAAK,wBACrC,MAAOne,IACT,IAAKs4B,IAAOlmB,IAAS8+F,GAAsB,SAAX16B,EAC5B,iBAIJ,IAAM26B,EAA2B1kE,EAAK2hE,gBAAgB5kF,UAiBtD,OAfK2nF,EAAyB58D,KACtB,SAAAh+C,GAAC,OACGA,EAAE+hC,KAAOA,GACF/hC,EAAE6b,OAASA,GACX7b,EAAE26G,UAAYA,KAC7BC,EAAyBtyG,KAAK,CAC1By5B,KACAlmB,OACA8+F,UACA1iD,IAAK/hB,EAAK/f,eAAeioB,MACzBo7D,qBACAD,sBACAtvE,QAGR,WAvCkC,GAuClC,SAGJ,GAAiB,kBAAbriB,EAAI/L,KAA0B,CAE9B,GAAkB,cAAd+L,EAAIsnC,QAA0BtnC,EAAIizF,SAClC,SAGJ,IAAMC,EAAQtwG,KAAKktG,mBAAmB9vF,EAAImzF,kBACpCC,EAASxwG,KAAKktG,mBAAmB9vF,EAAIqzF,mBAE3CzwG,KAAKqtG,gBAAgB5kF,UAAU3qB,KAAK,CAChCy5B,GAAE,GAAAj6B,OAAKkzG,EAAOE,UAAZ,KAAApzG,OAAyBkzG,EAAOG,YAClCt/F,KAAMi/F,EAAM7nF,UACZ0nF,QAAO,GAAA7yG,OAAKgzG,EAAMI,UAAX,KAAApzG,OAAwBgzG,EAAMK,YACrCljD,IAAKztD,KAAK2rB,eAAeioB,MACzBo7D,mBAAoBsB,EAAMM,cAC1B7B,oBAAqByB,EAAOI,gBAcpC,GATmB,yBAAfxzF,EAAIyzF,QACJ7wG,KAAKqtG,gBAAgB5kF,UAAU3qB,KAAK,CAChCy5B,GAAIna,EAAI8wF,cACR78F,KAAM+L,EAAIxK,SACVu9F,QAAS/yF,EAAIgxF,aACb3gD,IAAKztD,KAAK2rB,eAAeioB,SAIhB,SAAbx2B,EAAI/L,MAAgC,gBAAb+L,EAAI/L,MACX,eAAb+L,EAAI/L,MAAsC,UAAb+L,EAAI/L,SAMpCsZ,IAAQgY,UACS,eAAbvlB,EAAI/L,MAAsC,gBAAb+L,EAAI/L,MADzC,CAKA,IAAMy/F,EAAS9wG,KAAKmtG,oBAAoBx0D,GACpC/nB,EAAO5wB,KAAKgwG,mBAAmB5yF,EAAK,QAOxC,GAJiB,UAAbA,EAAI/L,MAAoBjR,MAAMG,QAAQ6c,EAAI2zF,WAC1CngF,EAAO/vB,OAAOuc,EAAI2zF,QAAQ,KAGzBD,GAAWlgF,IAcXjG,IAAQgY,WACgB,IAAjBvlB,EAAI4zF,WAA0C,IAArB5zF,EAAI6zF,cADzC,CAKA,IAAIC,EAAYlxG,KAAKytG,WAAWt4G,IAAIy7B,GAE/BsgF,IACDA,EAAY,IAAIhF,EAChBlsG,KAAKytG,WAAW1hF,IAAI6E,EAAMsgF,IAG9B,IAAIC,GAAmB,EACnBt7G,EAAM,kBACNu7G,EAAanB,EAAa7yF,EAAKvnB,GAE/B,MAAOu7G,GACkC,KAAfA,IAC1BD,GAAmB,EAGf,OADJC,EAAanB,EAAa7yF,EAD1BvnB,EAAM,iBAGFizB,EAAOlZ,KAAK,oDAGfwhG,GAAcA,EAAa,KAC5BA,EAAa,GAGjB,IAAMC,EAAgBrxG,KAAKgwG,mBAAmBc,EAAQj7G,GAChDy7G,EAAcxwG,KAAK4gC,IAAI,EAAG0vE,EAAaC,GAEvCE,EACAvxG,KAAKgwG,mBAAmB5yF,EAAK,eAC7Bo0F,EACAxxG,KAAKgwG,mBAAmBc,EAAQ,eAChCW,EAAkB3wG,KAAK4gC,IAAI,EAAG6vE,EAAiBC,GAErDN,EAAUjC,QAAQ,CACdyC,aAAcJ,EAAcG,EAC5B7D,YAAa6D,EACbN,qBAGJ,IAAMQ,EACA3xG,KAAKgwG,mBAAmB5yF,EAAK,iBAC7Bw0F,EACA5xG,KAAKgwG,mBAAmBc,EAAQ,iBAChChD,EACAhtG,KAAK4gC,IAAI,EAAGiwE,EAAmBC,GAEjCj4B,EAAY,EAGZk4B,EAAsB5B,EAAa7yF,EAAK,aAET,iBAAxBy0F,GAC2B,iBAAxBA,IACVA,EAAsBhxG,OAAOgxG,GACxBzvG,MAAMyvG,KACP3B,EAAct/E,GAAQihF,EAClBA,EAAsB,IACtBl4B,EAAYk4B,EACN5B,EAAaa,EAAQ,gBAIvCn3B,EAAY74E,KAAK4gC,IAAI,EAAGi4C,GAExB,IAAMm4B,EAAS10F,EAAI20F,UAAYjB,EAAOiB,UAClCC,EAAsB,EAAGC,EAAkB,EAE3CH,EAAS,IAETE,EAAsBlxG,KAAKmrG,MAAuB,EAAhB6B,EAAqBgE,GACvDG,EAAkBnxG,KAAKmrG,MAAmB,EAAZtyB,EAAiBm4B,IAGnDZ,EAAU/B,WAAW,CACjBnpB,SAAYgsB,EACZ3F,OAAU4F,IAGd,IAAMxuE,EAAa,CACfjC,OAAQ,KACRmC,MAAO,MAGX,IACI,IAAInC,OAAM,EAAEmC,OAAK,GAEZnC,EAASyuE,EAAa7yF,EAAK,8BACxBumB,EAAQssE,EAAa7yF,EAAK,4BAC9BqmB,EAAWjC,OAASA,EACpBiC,EAAWE,MAAQA,IACXnC,EAASyuE,EAAa7yF,EAAK,0BAC/BumB,EAAQssE,EAAa7yF,EAAK,yBAC9BqmB,EAAWjC,OAASA,EACpBiC,EAAWE,MAAQA,GAEzB,MAAO1kC,IAGT,IAAI6lC,OAAS,EAEb,IACIA,EAAYmrE,EAAa7yF,EAAK,0BACvB6yF,EAAa7yF,EAAK,sBAAwB,EACnD,MAAOne,GAGL,IACI6lC,EAAY9kC,KAAKgwG,mBAAmB5yF,EAAK,iBAC3C,MAAOtD,KAEbo3F,EAAU7B,aAAavuG,KAAKmrG,MAAMnnE,GAAa,IAE3CrB,EAAWjC,QAAUiC,EAAWE,MAChCutE,EAAUhC,cAAczrE,GAExBytE,EAAUhC,cAAc,SAIhClvG,KAAKuqB,aAAa2C,KACdX,IAAkCvsB,KAAK2rB,eAAgBukF,GAE3DlwG,KAAKkyG,0BAMTzF,EAAev2G,UAAUg8G,sBAAwB,WAE7C,IAAMlG,EAAe,CACjBhmB,SAAU,EACVqmB,OAAQ,GAENN,EAAc,CAChB/lB,SAAU,EACVqmB,OAAQ,GAER8F,EAAkB,EAClBC,EAAgB,EACdC,EAAc,GACdC,EAAa,GACfC,EAAuB,EACvBC,EAAqB,EACrBC,EAAuB,EACvBC,EAAqB,EAjB+BvlF,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAmBxD,QAAAwyB,EAAAC,EAAkCvtB,KAAKytG,WAAvCp4G,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAmD,KAAA0sB,EAAAC,EAAAxsB,EAAA/3B,MAAA,GAAtCq7B,EAAsCipB,EAAA,GAAhCq3D,EAAgCr3D,EAAA,GAEzCsyD,EAAO+E,EAAU/E,KACjB96F,EAAO86F,EAAKgF,iBAAmB,WAAa,SAElDnF,EAAa36F,IAAS86F,EAAKuF,aAC3B3F,EAAY16F,IAAS86F,EAAKyB,YAG1BuE,GAAmBjB,EAAU9E,QAAQpmB,SACrCosB,GAAiBlB,EAAU9E,QAAQC,OAGnC,IAAMx/D,EAAQ7sC,KAAK2rB,eAAesrB,eAAermB,GAEjD,GAAIic,EAAO,CACHA,EAAMqK,gBACNq7D,GAAwBrB,EAAU9E,QAAQpmB,SAC1CwsB,GAAsBtB,EAAU9E,QAAQC,SAExCoG,GAAwBvB,EAAU9E,QAAQpmB,SAC1C0sB,GAAsBxB,EAAU9E,QAAQC,QAG5C,IAAM9sE,EAAgBsN,EAAM8tB,mBAE5B,GAAIp7B,EAAe,CACf,IAAMkE,EAAaytE,EAAUztE,WAE7B,GAAIA,EAAWE,OACJF,EAAWjC,SACW,IAAtBiC,EAAWE,QACY,IAAvBF,EAAWjC,OAAe,CACjC,IAAMmxE,EAAkBN,EAAY9yE,IAAkB,GAEtDozE,EAAgB/hF,GAAQ6S,EACxB4uE,EAAY9yE,GAAiBozE,EAEjC,GAA4B,IAAxBzB,EAAU5E,UAAiB,CAC3B,IAAMsG,EAAiBN,EAAW/yE,IAAkB,GAEpDqzE,EAAehiF,GAAQsgF,EAAU5E,UACjCgG,EAAW/yE,GAAiBqzE,QAGhC9pF,EAAOrZ,MAAP,iCAAAnS,OAA8CuvC,IAItDqkE,EAAU9B,gBApE0C,MAAAt1F,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,GAuExDrtB,KAAKqtG,gBAAgBjB,QAAU,CAC3BC,OAAU+F,EACVpsB,SAAYmsB,GAGhBnyG,KAAKqtG,gBAAgBjB,QAAQ5pE,MAAQ,CACjC6pE,OAAUmG,EACVxsB,SAAYusB,GAGhBvyG,KAAKqtG,gBAAgBjB,QAAQ9qE,MAAQ,CACjC+qE,OAAUqG,EACV1sB,SAAYysB,GAGhBzyG,KAAKqtG,gBAAgBb,WAAa,CAC9B31B,MACIi1B,EACIC,EAAY/lB,SAAW+lB,EAAYM,OACnCL,EAAahmB,SAAWgmB,EAAaK,QAC7CrmB,SACI8lB,EAAoBC,EAAY/lB,SAAUgmB,EAAahmB,UAC3DqmB,OACIP,EAAoBC,EAAYM,OAAQL,EAAaK,SAG7DrsG,KAAKuqB,aAAa2C,KACdX,IACAvsB,KAAK2rB,eACL,CACIqZ,UAAahlC,KAAKqtG,gBAAgBroE,UAClConE,QAAWpsG,KAAKqtG,gBAAgBjB,QAChCI,WAAcxsG,KAAKqtG,gBAAgBb,WACnC/oE,WAAc4uE,EACd/F,UAAagG,EACb7pF,UAAazoB,KAAKqtG,gBAAgB5kF,YAE1CzoB,KAAKqtG,gBAAgB5kF,UAAY,IAMrCgkF,EAAev2G,UAAUs5G,wBAA0B,WAC/C,GAAKxvG,KAAKgtG,0BAAV,CAIA,IAAMiD,EAAejwG,KAAK6sG,cAE1B,IAAK,IAAMl0D,KAAO34C,KAAKitG,yBACnB,GAAKjtG,KAAKitG,yBAAyB92G,eAAewiD,GAAlD,CAIA,IAAMv7B,EAAMpd,KAAKitG,yBAAyBt0D,GAE1C,GAAiB,SAAbv7B,EAAI/L,MAAgC,UAAb+L,EAAI/L,KAA/B,CAIA,IAAMy/F,EAAS9wG,KAAKgtG,0BAA0Br0D,GAC1C/nB,EAAO5wB,KAAKgwG,mBAAmB5yF,EAAK,QAMxC,IAJKwT,GAAQxwB,MAAMG,QAAQ6c,EAAI2zF,WAC3BngF,EAAO/vB,OAAOuc,EAAI2zF,QAAQ,KAGzBD,EAKL,GAAKlgF,EAAL,CAQA,IAAIomB,OAAU,EAEd,IACIA,EACMi5D,EAAa7yF,EAAK,oBACb6yF,EAAa7yF,EAAK,oBAC/B,MAAOne,GAIL,OAHA6pB,EAAOlZ,KAAK,0DACZ+3B,cAAc3nC,KAAKotG,uBAKvB,GAAIp2D,EAAY,CACZ,IAAI9kB,OAAO,EAIPA,EADa,SAAb9U,EAAI/L,MACO4+F,EAAa7yF,EAAK,oBAIlBA,EAAI6zF,aAUftmF,IAAQgY,SACRqU,EAAaA,EAAa,EAAIl2C,KAAK4iB,IAAI,GAAIszB,EAAa,IAAM,EAK9DA,GAA0B,MAG9Bh3C,KAAKuqB,aAAa2C,KACdX,IACAvsB,KAAK2rB,eACLiF,EACAomB,EACA9kB,SArDC5f,KAAK8K,MAAQA,EAAI20F,UAAa,KAC/BjpF,EAAOlZ,KAAK,kBANhBkZ,EAAOlZ,KAAP,GAAAtS,OAAeszB,EAAf,yBAkFZ67E,EAAev2G,UAAU42G,6BAA+B,SAASz+E,GAkB7D,OAAO,SAACoN,EAAM5mC,GAAP,OAAgB4mC,EAdH,SAAS5mC,GACzB,IAAMgB,EAAMw4B,EAAKx5B,GAEjB,GAAIgB,EACA,OAAOA,EAIX,sBAAAyH,OAAuBzI,EAAvB,sBAMwBk7G,CAAYl7G,MAU5C43G,EAAev2G,UAAU28G,oBAAsB,SAAS14D,GACpD,IAAI5kD,EAAQ4kD,EAMZ,MAJqB,iBAAV5kD,IACPA,EAAQsL,OAAOtL,IAGf6M,MAAM7M,GACC,EAGJuL,KAAK4gC,IAAI,EAAGnsC,IAavBk3G,EAAev2G,UAAU48G,kBAAoB,SAAS11F,EAAK0zF,EAAQiC,GAC/D,IAAMC,EAAWhzG,KAAK6yG,oBAAoBz1F,EAAI21F,IACxCE,EAAcjzG,KAAK6yG,oBAAoB/B,EAAOiC,IAC9CG,EAAiBpyG,KAAK4gC,IAAI,EAAGsxE,EAAWC,GAExCnB,EAAS10F,EAAI20F,UAAYjB,EAAOiB,UAClCoB,EAAc,EAOlB,OALIrB,EAAS,IAETqB,EAAcryG,KAAKmrG,MAAwB,EAAjBiH,EAAsBpB,IAG7CqB,GAMX1G,EAAev2G,UAAUw5G,sBAAwB,WAAW,IAAAtiE,EAAAptC,KACxD,GAAKA,KAAKmtG,oBAAV,CAIA,IAAM8C,EAAejwG,KAAK6sG,cACpBqD,EAAgB,GAEtBlwG,KAAKktG,mBAAmBjsG,QAAQ,SAAAmc,GAI5B,GAAiB,mBAAbA,EAAI/L,MACD+L,EAAIg2F,WACU,cAAdh2F,EAAIsnC,MAAuB,CAE9B,IAAM2uD,EAA2Bj2F,EAAIi2F,yBAC/BC,EAA2Bl2F,EAAIk2F,0BAEjCD,GAA4BC,KAC5BlmE,EAAKigE,gBAAgBroE,UAAY,CAC7BghD,SAAYllF,KAAKmrG,MAAMoH,EAA2B,KAClDhH,OAAUvrG,KAAKmrG,MAAMqH,EAA2B,OAIxD,IAAMC,EACAnmE,EAAK8/D,mBAAmB/3G,IAAIioB,EAAIqzF,mBAChC+C,EACApmE,EAAK8/D,mBAAmB/3G,IAAIioB,EAAImzF,kBAKtC,GAAIgD,GAAuBC,EAAoB,CAG3C,IAAMC,EAAkBxD,EAAasD,EAAqB,MACpDG,EAAazD,EAAasD,EAAqB,QAC/Ch8E,EAAE,GAAAj6B,OAAMm2G,EAAN,KAAAn2G,OAAyBo2G,GAE3BC,EAAiB1D,EAAauD,EAAoB,MAClDI,EAAY3D,EAAauD,EAAoB,QAE7CK,EAAO,GAAAv2G,OAAMq2G,EAAN,KAAAr2G,OAAwBs2G,GAC/BviG,EAAO4+F,EAAasD,EAAqB,YAGzCnD,EAA2BhjE,EAAKigE,gBAAgB5kF,UAEjD2nF,EAAyB58D,KACtB,SAAAh+C,GAAC,OACGA,EAAE+hC,KAAOA,GACN/hC,EAAE6b,OAASA,GACX7b,EAAE26G,UAAY0D,KACzBzD,EAAyBtyG,KAAK,CAC1By5B,KACAlmB,OACAwiG,UACApmD,IAAKrgB,EAAKzhB,eAAeioB,MACzBo7D,mBAAoBwE,EAAmB5C,cACvC7B,oBAAqBwE,EAAoB3C,cACzCkD,YAAaN,EAAmBM,YAChCr0E,IAAgC,IAA3BriB,EAAI0xF,6BASlB,GAAiB,gBAAb1xF,EAAI/L,MAAuC,iBAAb+L,EAAI/L,KAAyB,CAClE,IAAMy/F,EAAS1jE,EAAK+/D,oBAAoBh4G,IAAIioB,EAAIle,IAC1C0xB,EAAOwc,EAAKylE,oBAAoBz1F,EAAIwT,MAE1C,IAAKkgF,IAAWlgF,EACZ,OAGJ,IAAIsgF,EAAY9jE,EAAKqgE,WAAWt4G,IAAIy7B,GAE/BsgF,IACDA,EAAY,IAAIhF,EAChB9+D,EAAKqgE,WAAW1hF,IAAI6E,EAAMsgF,IAG9B,IAAIC,GAAmB,EACnBt7G,EAAM,kBAEO,iBAAbunB,EAAI/L,OACJ8/F,GAAmB,EACnBt7G,EAAM,eAGV,IAAIu7G,EAAah0F,EAAIvnB,KAEhBu7G,GAAcA,EAAa,KAC5BA,EAAa,GAGjB,IAAMC,EAAgBjkE,EAAKylE,oBAAoB/B,EAAOj7G,IAChDy7G,EAAcxwG,KAAK4gC,IAAI,EAAG0vE,EAAaC,GAEvCE,EACAnkE,EAAKylE,oBAAoBz1F,EAAIwwF,aAC7B4D,EACApkE,EAAKylE,oBAAoB/B,EAAOlD,aAChC6D,EACA3wG,KAAK4gC,IAAI,EAAG6vE,EAAiBC,GAEnCN,EAAUjC,QAAQ,CACdyC,aAAcJ,EAAcG,EAC5B7D,YAAa6D,EACbN,qBAGa,gBAAb/zF,EAAI/L,KAEJ6/F,EAAU/B,WAAW,CACjBnpB,SAAY54C,EAAK0lE,kBACD11F,EAAK0zF,EAAQ,iBAC7BzE,OAAU,KAQd6D,EAAct/E,GAAQwc,EAAKylE,oBAAoBz1F,EAAIu8D,WACnDu3B,EAAU/B,WAAW,CACjBnpB,SAAY,EACZqmB,OAAUj/D,EAAK0lE,kBACH11F,EAAK0zF,EAAQ,gBAUjC,IAAM/C,EAAgB3wF,EAAI2wF,cAEtBA,GACAmD,EAAU7B,aAAavuG,KAAKmrG,MAAM8B,GAAiB,SAQpD,GAAiB,UAAb3wF,EAAI/L,KAAkB,CAE7B,IAAMoyB,EAAa,CACfjC,OAAQpkB,EAAI22F,YACZpwE,MAAOvmB,EAAI42F,YAIXlvE,EAAY1nB,EAAI62F,gBAEpB,IAAKnvE,EAAW,CAEZ,IAAMgsE,EAAS1jE,EAAK+/D,oBAAoBh4G,IAAIioB,EAAIle,IAEhD,GAAI4xG,EAAQ,CACR,IAAMgB,EAAS10F,EAAI20F,UAAYjB,EAAOiB,UAEtC,GAAID,EAAS,GAAK10F,EAAI82F,WAIlBpvE,GAFM1nB,EAAI82F,WAAapD,EAAOoD,YAEWpC,EAAU,IAI3D,IAAKhtE,EACD,OAIR,IAAMqvE,EAAkB/2F,EAAI+2F,gBACtBvjF,EAAOwc,EAAKzhB,eAAeyoF,iBAAiBD,GAC9CjD,EAAY9jE,EAAKqgE,WAAWt4G,IAAIy7B,GAE/BsgF,IACDA,EAAY,IAAIhF,EAChB9+D,EAAKqgE,WAAW1hF,IAAI6E,EAAMsgF,IAE9BA,EAAU7B,aAAavuG,KAAKmrG,MAAMnnE,GAAa,IAE3CrB,EAAWjC,QAAUiC,EAAWE,MAChCutE,EAAUhC,cAAczrE,GAExBytE,EAAUhC,cAAc,SAKpClvG,KAAKuqB,aAAa2C,KACdX,IAAkCvsB,KAAK2rB,eAAgBukF,GAE3DlwG,KAAKkyG,0BAMTzF,EAAev2G,UAAUq5G,2BAA6B,WAAW,IAAAxhE,EAAA/tC,KACxDA,KAAKgtG,2BAIVhtG,KAAKitG,yBAAyBhsG,QAAQ,SAAAmc,GAClC,GAAiB,UAAbA,EAAI/L,KAAR,CAKA,IAAM2lC,EAAa55B,EAAI45B,WAEvB,GAAKA,EAAL,CAIA,IAAMm9D,EAAkB/2F,EAAI+2F,gBACtBvjF,EAAOmd,EAAKpiB,eAAeyoF,iBAAiBD,GAElD,GAAIvjF,EAAM,CACN,IAAMsB,EACAtB,IAASmd,EAAKpiB,eAAe6qE,aAC/BzoD,EAAKpiB,eAAeqqB,eAAelJ,MAEvCiB,EAAKxjB,aAAa2C,KACdX,IACAwhB,EAAKpiB,eACLiF,EACAomB,EACA9kB,yUC3vCKw/D,aAgBjB,SAAAA,EAAYnjF,EAAK8jC,EAAY2jC,EAAaq+B,EAAQ7iB,EAAS73E,gGAAQ2tB,CAAAtnC,KAAA0xF,GAC/D1xF,KAAKs0G,KAAO/lG,EACZvO,KAAKu0G,IAAM/tG,UAAQmI,mBAAmBJ,GACtCvO,KAAKw0G,YAAcniE,EACnBryC,KAAKsyF,aAAetc,EACpBh2E,KAAK8xF,eAAgB,EACrB9xF,KAAKuyF,QAAU,GACfvyF,KAAK2xF,MAAQ,OACb3xF,KAAKu6E,QAAU5gE,EACf3Z,KAAKy0G,QAAUJ,EACfr0G,KAAK00G,SAAWljB,EAChBxxF,KAAK20G,kBAAoB78C,IAA4B5Q,OACrDlnD,KAAK40G,YAAc,kEAUnB,OAAO50G,KAAKw0G,gDAMJ3/G,GACR,OAAOmL,KAAK40G,YAAY//G,yDAYxB,OACImL,KAAKovC,YAAYoE,KACb,SAAAqhE,GAAU,OACNA,EAAW3+D,YAAcpJ,KAClB+nE,EAAWC,oEASbn7F,GACjB3Z,KAAK20G,kBAAoBh7F,gDAWzB,OAAO3Z,KAAK20G,sDASJ9/G,EAAMU,GACd,IAAMw/G,EAAW/0G,KAAK40G,YAAY//G,GAE9BU,IAAUw/G,IACV/0G,KAAK40G,YAAY//G,GAAQU,EACzByK,KAAKw0G,YAAYjqF,aAAa2C,KAC1B+nB,+BACAj1C,KACAnL,EACAkgH,EACAx/G,wCASR,OAAOyK,KAAKuyF,QAAQ32F,qDAQHmkC,GACjB,OAAO//B,KAAKovC,YAAYjW,OAAO,SAAA0T,GAAK,OAAIA,EAAMqJ,YAAcnW,oCAO5D,OAAO//B,KAAKu0G,qCAOZ,OAAOv0G,KAAKs0G,8CAOZ,OAAOt0G,KAAKsyF,kDAOZ,OAAOtyF,KAAK00G,6CAOZ,OAAO10G,KAAKu6E,8CAOZ,MAAsB,cAAfv6E,KAAK2xF,yCASZ,OAAO3xF,KAAKy0G,+CAOZ,OAAOz0G,KAAKg1G,kBAAkBloE,+CAchB/M,GACd,OAAO//B,KAAKovC,YAAY6lE,OACpB,SAACvkF,EAAOmc,GAAR,OACInc,IAAUmc,EAAMqJ,YAAcnW,GAAa8M,EAAMqvB,aACrD,0CAOJ,OAAOl8D,KAAKg1G,kBAAkBloE,uCAO9B,OAAO9sC,KAAK2xF,6CAOZ,OAAO3xF,KAAK8xF,oDAQY,IAAhBl6E,EAAgB/Z,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAN,IAClB,OAAOmC,KAAKw0G,YAAYpqF,KAAKsiC,KAAKmlC,YAAY7xF,KAAKs0G,KAAM18F,wCASzD,OAAO5X,KAAK4xF,4ECrPpBx9F,EAAAQ,EAAAmxB,EAAA,sBAAAylE,IAAA,IAAA0pB,EAAA9gH,EAAA,IAAA+gH,EAAA/gH,EAAA,IA2De,SAASo3F,EAAThjD,GAWZ,IAEK4sE,EAFL1tE,EAAA1nC,KATCd,EASDspC,EATCtpC,GACAkvD,EAQD5lB,EARC4lB,SAIAinD,EAID7sE,EAJC6sE,kBAGAC,EACD9sE,EADC8sE,aAEIC,GAAW,EAEXnrF,EAAO,IAAI6hC,IAAKjsD,KAAKsd,WAAWhM,SAE9Bq/D,EAAU,IAAIvlC,QAAQ,SAACC,EAASC,GAIlC8pE,EAAgB9pE,EAGhBlhB,EAAKgpB,YACDhV,0BACA,WACIhU,OAAOtvB,IAEfsvB,EAAKgpB,YACDp8C,yBACA,WACQu+G,IAKJF,GAAqBA,IAIfjrF,EAAK2lC,WAAWroB,EAAKp2B,QAAQzc,KAAM6yC,EAAKp2B,QAAQ9V,QAEjDqxF,UAAU7xE,eACV+sB,KAAK,WACF3d,GAAQA,EAAKjR,aAETo8F,IAOJ7tE,EAAKlqC,KAAK83G,GAEVjqE,OAEHG,MAAM,SAAA9C,GAAwB,IAArBj5B,EAAqBi5B,EAArBj5B,MAAOP,EAAcw5B,EAAdx5B,QACbkb,EAAKjR,aAELmyB,EAAO,CACHkqE,oBAAqB/lG,EACrBP,iBAIpBkb,EAAKgpB,YACDn8C,oBACA,SAACw+G,EAAiBvmG,EAASk+C,GACvB9hB,EAAO,CACHmqE,kBACAroD,cACAl+C,YAEJkb,OAAOtvB,IAGfy6G,GAAYnrF,EAAK3U,QAAQvW,EAAIkvD,KAgBjC,OANAuiB,EAAQub,OAAS,WACbqpB,GAAW,EACXH,EAAc,IACdhrF,GAAQA,EAAKjR,cAGVw3D,8qCC/IX,IAAM7nD,EAASH,oBAAUQ,GAKnBusF,cAKF,SAAAA,EAAYtrF,GAAM,IAAAsd,EAAA,mGAAAJ,CAAAtnC,KAAA01G,IACdhuE,EAAAH,EAAAvnC,KAAAwnC,EAAAkuE,GAAAjhH,KAAAuL,QACKoqB,KAAOA,EACZsd,EAAKiuE,MAAQ,GAHCjuE,wPALYmkB,2CAezBvuC,GACD46D,EAAA1wC,EAAAkuE,EAAAx/G,WAAA,OAAA8J,MAAAvL,KAAAuL,KAAWsd,GAGXtd,KAAKsd,WAAWxF,WAAW9X,KAAK41G,WAAW9/G,KAAKkK,MAAO,KACnD,WAAY,KAAM,KAAM,KAAM,MAClCA,KAAKsd,WAAWxF,WAAW9X,KAAK61G,sBAAsB//G,KAAKkK,MACvD,KAAM,WAAY,cAAe,MACrCA,KAAKsd,WAAWxF,WAAW9X,KAAK81G,gBAAgBhgH,KAAKkK,MAAO,KACxD,WAAY,QAAS,MACzBA,KAAKsd,WAAWxF,WAAW9X,KAAK+1G,UAAUjgH,KAAKkK,MAAO,KAClD,UAAW,KAAM,MACrBA,KAAKsd,WAAWxF,WAAW9X,KAAKg2G,OAAOlgH,KAAKkK,MACxC,iCAAkC,KAAM,MAAO,KAAM,yCASlDuO,EAAK6/C,EAAU98C,GACtB,IAAM6f,EAAU3qB,UAAQkI,kBAAkBH,GAE1C,GAAIvO,KAAK21G,MAAMxkF,GAAU,CACrB,IAAM4T,EAAS,+BAGf,MADAjc,EAAOrZ,MAAMs1B,GACP,IAAI5mC,MAAM4mC,GAOpB,OALA/kC,KAAK21G,MAAMxkF,GAAW,IAAI8kF,IAASj2G,KAAKsd,WAAY/O,EAChD6/C,EAAUpuD,KAAKoqB,KAAM9Y,GACzBtR,KAAKuqB,aAAa2C,KACdilC,IAAW76D,gBAAiB0I,KAAK21G,MAAMxkF,IAEpCnxB,KAAK21G,MAAMxkF,mCAOd5iB,GACJvO,KAAKuqB,aAAa2C,KACdilC,IAAW56D,kBAAmByI,KAAK21G,MAAMpnG,WACtCvO,KAAK21G,MAAMpnG,sCAOX8K,GACP,IAAMzY,EAAOyY,EAAKpL,aAAa,QAG/B,GAAIoL,EAAKpL,aAAa,QAClB,OAAO,EAGX,IAAM2jD,EAAO5xD,KAAK21G,MAAMnvG,UAAQkI,kBAAkB9N,IAElD,OAAKgxD,GAKD1W,EAAE7hC,GAAMogB,KAAK,sEACYx8B,QACzB20D,EAAKskD,yBAGTtkD,EAAKgkD,WAAWv8F,IAET,QAZP,gDAmBkBA,GAClB,IAAMzY,EAAOyY,EAAKpL,aAAa,QACzB2jD,EAAO5xD,KAAK21G,MAAMnvG,UAAQkI,kBAAkB9N,IAElD,GAAKgxD,EAML,OAFAA,EAAKikD,sBAAsBx8F,EAAMzY,IAE1B,0CAOKyY,GACZ,IAAMzY,EAAOyY,EAAKpL,aAAa,QACzB2jD,EAAO5xD,KAAK21G,MAAMnvG,UAAQkI,kBAAkB9N,IAElD,GAAKgxD,EAML,OAFAA,EAAKkkD,gBAAgBz8F,EAAMzY,IAEpB,oCAOD2O,GAEN,IAAM3O,EAAO2O,EAAItB,aAAa,QACxB2jD,EAAO5xD,KAAK21G,MAAMnvG,UAAQkI,kBAAkB9N,IAElD,GAAKgxD,EAML,OAFAA,EAAKmkD,UAAUxmG,EAAK3O,IAEb,iCAOJ0b,GACH,IAAM1b,EAAO0b,EAAGrO,aAAa,QACvB2jD,EAAO5xD,KAAK21G,MAAMnvG,UAAQkI,kBAAkB9N,IAIlD,GAAKgxD,EAML,OAFAA,EAAKokD,OAAO15F,IAEL,uCAQAyJ,EAAA,WAASkmC,GACpBzlD,UAAQ2J,oBAAoB,OAAQ,IAAIulG,EAAoBzpD,6/BC1KhE,IAAMnjC,EAASH,oBAAUQ,GAEZi2B,EAAS,CAClB+2D,YADkB,SACN1pG,EAAY2pF,GACpB,QAAAltC,EAAA,EAAAktD,EAAoBh2G,MAAMQ,KAAK6L,EAAW2uE,UAA1ClyB,EAAAktD,EAAAn5G,OAAAisD,IAAqD,CAOjD,IAPC,IAAMl5C,EAAKomG,EAAAltD,GACNx8C,EAAO,CACTxE,WAAY,GACZkzE,SAAU,GACVxvE,QAASoE,EAAMpE,SAGnB29C,EAAA,EAAA8sD,EAAmBj2G,MAAMQ,KAAKoP,EAAM9H,YAApCqhD,EAAA8sD,EAAAp5G,OAAAssD,IAAiD,CAA5C,IAAM38C,EAAIypG,EAAA9sD,GACX78C,EAAKxE,WAAW0E,EAAK/X,MAAQ+X,EAAKrX,MAEtC,IAAMwX,EAAOvG,UAAQgH,QAAQwC,GAEzBjD,IAIAL,EAAKnX,MAAQiR,UAAQwG,YAAYD,IAErCqpF,EAAMt4F,KAAK4O,GACX1M,KAAKm2G,YAAYnmG,EAAOtD,EAAK0uE,YAGrCk7B,YAxBkB,SAwBNlgB,EAAOmgB,GACf,IAAK,IAAIjiH,EAAI,EAAGA,EAAI8hG,EAAMn5F,OAAQ3I,IAAK,CACnC,IAAMoY,EAAO0pF,EAAM9hG,GAEfoY,IACA6pG,EAAO5hH,EAAE+X,EAAKd,QAASc,EAAKxE,YACxBwE,EAAKnX,OACLghH,EAAO/gH,EAAEkX,EAAKnX,OAEdmX,EAAK0uE,UACLp7E,KAAKs2G,YAAY5pG,EAAK0uE,SAAUm7B,GAEpCA,EAAOhmG,SAcvB,SAASimG,EAA2Bn9F,EAAM1L,GAGtC,IAFA,IAAM4+B,EAAM,GAEHj4C,EAAI,EAAGA,EAAI+kB,EAAKpc,OAAQ3I,IACzB+kB,EAAK/kB,GAAGsX,UAAY+B,GACpB4+B,EAAIzuC,KAAKub,EAAK/kB,IAItB,OAAOi4C,MAUU0pE,cAejB,SAAAA,EAAY34F,EAAY/O,EAAK6/C,EAAUnC,EAAM36C,GAAS,IAAAo2B,EAAA,mGAAAJ,CAAAtnC,KAAAi2G,IAClDvuE,EAAAH,EAAAvnC,KAAAwnC,EAAAyuE,GAAAxhH,KAAAuL,QACKoqB,KAAO6hC,EACZvkB,EAAKpqB,WAAaA,EAClBoqB,EAAK8nB,QAAUhpD,UAAQkI,kBAAkBH,GACzCm5B,EAAKwnD,UAAY3gF,EACjBm5B,EAAK0mB,SAAWA,EAChBtlC,EAAOnZ,KAAP,iBAAArS,OAA6BoqC,EAAKwnD,YAClCxnD,EAAK+uE,QAAU,GACf/uE,EAAKyuD,QAAU,GACfzuD,EAAKgvE,aAAe,GACpBhvE,EAAKgkD,QAAS,EACdhkD,EAAKk4C,KAAO,KACZl4C,EAAKgzC,YAAc,KACnBhzC,EAAKivE,mBAAoB,EACzBjvE,EAAKp2B,QAAUA,GAAW,GAC1Bo2B,EAAKmlD,UACC,IAAI+pB,IAAUlvE,EAAK8nB,QAAS9nB,EAAKtd,KAAMsd,EAAKnd,aAAc,CACxDjN,WAAYoqB,EAAKtd,KAAK9Y,QACtB+gC,WAAY3K,EAAKp2B,UAEzBo2B,EAAKmvE,gBAAgBvlG,GACrBo2B,EAAKovE,cAAgB,GACrBpvE,EAAKqvE,YAAc,KACnBrvE,EAAKsvE,SAAW,KAChBtvE,EAAK0kB,gBAAkB,GACvB1kB,EAAKuvE,4BAA8B,KAEnCvvE,EAAKwvE,QAAS,EACdxvE,EAAKinD,oBAAsBwoB,MA7BuBzvE,wPAfpBD,wDAoDJ,IAAdn2B,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GACtBmC,KAAKm2F,QAAQ/5E,GAAKpc,KAAKkvF,UACvBlvF,KAAKm2F,QAAQihB,IAAM,iCACnBp3G,KAAKm2F,QAAQC,MAAQ,GAEjB9kF,EAAQo5E,eACR1qF,KAAKm2F,QAAQC,MAAMt4F,KAAK,CACpB8N,QAAW,WACXrW,MAASk0B,IAASC,oBAO1B1pB,KAAKq3G,wBAAuB,GAExB/lG,EAAQ+/C,gBAAkB//C,EAAQ+/C,eAAeg6B,YACjDrrF,KAAKm2F,QAAQC,MAAMt4F,KAAK,CACpB8N,QAAW,SACX1D,WAAc,CACVhJ,GAAIoS,EAAQ+/C,eAAeg6B,WAC3Bh7E,MAAO,8DAYlB+9C,GAAU,IAAA1iB,EAAA1rC,KAGX,OAFAA,KAAKouD,SAAWA,EAET,IAAIhjB,QAAQ,SAAAC,GACfK,EAAKp6B,QAAQgmG,cACNxuF,EAAOnZ,KAAK,8BAGb+7B,EAAKp6B,QAAQgmG,aACTlsE,QAAQC,UACRK,EAAKmhD,UAAU0qB,2BAEjBxvE,KAAK,WACT2D,EAAKh0B,cAAa,GAClB2zB,6CASCmsE,GACT,IAAMp7F,EAAKpc,KAAKm2F,QAAQ/5E,GAExB,GAAKA,IAAQpc,KAAK0rF,QAAW8rB,GAA7B,CAKA,IAAMn+F,EAAOxS,gBAAM,CAAEuV,OAOjBo7F,IACAn+F,EAAK1kB,EAAE,IAAK,CAAE0b,MAAOrQ,KAAKm2F,QAAQihB,MAE9Bp3G,KAAKouD,UACL/0C,EAAK1kB,EAAE,YAAYa,EAAEwK,KAAKouD,UAAU79C,KAExC8I,EAAK9I,MAGT6uC,EAAOk3D,YAAYt2G,KAAKm2F,QAAQC,MAAO/8E,GACvCrZ,KAAKsd,WAAWjG,KAAKgC,GACjBm+F,GAKAx3G,KAAKsd,WAAW9F,2CASpBsR,EAAOzZ,IAAI,WAAYrP,KAAKkvF,WAC5B,IAAM71E,EAAOxS,gBAAM,CAAEuV,GAAIpc,KAAKkvF,UAC1B79E,KAAM,gBAEVrR,KAAKm2F,QAAQl5F,OAAS,EActB+C,KAAKsd,WAAW9F,QAChBxX,KAAKsd,WAAWjG,KAAKgC,GACrBrZ,KAAKsd,WAAW9F,gDAMJ,IAAA41B,EAAAptC,KAGNy3G,EACA7wG,cAAI,CACFyK,KAAM,MACN+K,GAAIpc,KAAKwvD,UAER76D,EAAE,QAAS,CAAE0b,MAAO7J,UAAQO,GAAGO,aAExCtH,KAAKsd,WAAWnF,OAAOs/F,EAAS,SAAA3nG,GAC5B,IAAMonG,EAGM,IAFNh8D,EAAEprC,GAAQ2pB,KAAK,+CACZx8B,OAGLi6G,IAAW9pE,EAAK8pE,SAChB9pE,EAAK7iB,aAAa2C,KAAKilC,IAAWx5D,iBAAkBu+G,GACpD9pE,EAAK8pE,OAASA,IAEnB,SAAAznG,GACCoxB,IAAqBC,iBAAiBrxB,GACtCqZ,EAAOrZ,MAAM,4BAA6BA,sDAU9C,IAAMioG,EAAU9wG,cAAI,CAAEyK,KAAM,MACxB+K,GAAIpc,KAAKwvD,UACR76D,EAAE,QAAS,CAAE0b,MAAO,yCACpB1b,EAAE,IAAK,CAAE0b,MAAO,gBACbgB,KAAM,WAERqR,EAAO1iB,KAEbA,KAAKsd,WAAWnF,OAAOu/F,EAAS,SAAAC,GAC5B,IAAKz8D,EAAEy8D,GAAMl+E,KACL,qEACwCx8B,OAAQ,CACpD,IAAM8nC,EAAS,oCAKf,OAHAlE,IAAqBC,iBAAiB,IAAI3iC,MAAM4mC,SAChDjc,EAAOrZ,MAAMs1B,GAKjB,IAAM6yE,EAAahxG,cAAI,CAAEwV,GAAIsG,EAAK8sC,QAC9Bn+C,KAAM,QACL1c,EAAE,QAAS,CAAE0b,MAAO,yCAEzBunG,EAAWjjH,EAAE,IAAK,CAAE0b,MAAO,gBACvBgB,KAAM,WAEVumG,EAAWjjH,EAAE,QAAS,CAAEkjH,IAAO,cAC1BljH,EAAE,SACFa,EAAE,6CAA6C+a,KAAKA,KAEzDqnG,EAAWjjH,EAAE,QAAS,CAAEkjH,IAAO,yBAC1BljH,EAAE,SAASa,EAAE,UAAU+a,KAAKA,KAEjCmS,EAAKpF,WAAWnF,OAAOy/F,IAExB,SAAAnoG,GACCoxB,IAAqBC,iBAAiBrxB,GACtCqZ,EAAOrZ,MAAM,0CAA2CA,wCAQrD4J,GACP,IAAMzY,EAAOyY,EAAKpL,aAAa,QACzB6pG,EAAS,GACTC,EAAW1+F,EAAKkB,qBAAqB,UAAU,GAEjDw9F,IACAD,EAAOn+F,OAASo+F,EAAS93F,aAAe,IAE5C,IAAI+3F,GAAkB,EAChBC,EACA5+F,EAAKwB,uBACH,sCAAuC,KAAK,GAC9Cq9F,EACAD,GAAYA,EAAS19F,qBAAqB,QAAQ,GAExDu9F,EAAOK,YACDD,GAAeA,EAAYjqG,aAAa,eAC9C6pG,EAAOl4B,KAAOs4B,GAAeA,EAAYjqG,aAAa,QAGtD,IAAMM,EAAM2pG,GAAeA,EAAYjqG,aAAa,OAEpD6pG,EAAOvpG,IAAMA,EACbupG,EAAOvkB,QACDhlF,GAA+D,IAAxDA,EAAIhQ,QAAJ,GAAAjB,OAAe0C,KAAK6sF,UAAUurB,kBAA9B,MACbN,EAAOO,eACD9pG,GAAOA,EAAIhQ,QAAQ,KAAO,GACrByB,KAAKsR,QAAQgnG,eACR/pG,EAAI/P,UAAU+P,EAAIhQ,QAAQ,KAAO,EAAGgQ,EAAIhQ,QAAQ,MAEhEyB,KAAKuqB,aAAa2C,KAAKilC,IAAWh5D,kBAAmB,CACjDo/G,iBAAkBT,EAAOO,eACzBj8C,SAAU/iD,IAGd,IAAMm/F,EAAMn/F,EAAK2G,cAAc,KAE3Bw4F,GACAA,EAAIr0C,SAGR,IAAMiyB,EAAQ,GAEdh3C,EAAO+2D,YAAY98F,EAAM+8E,GACzBp2F,KAAK82G,cAAcl2G,GAAQw1F,EA4B3B,IAxBA,IAAMqiB,EAA6B,SAAA/rG,GAC/B,IAAMuhD,EAAW,GACXyqD,EAAWhsG,EAAK0uE,SAAS3hD,KAAK,SAAA9kC,GAAC,MAAkB,SAAdA,EAAEiX,UAE3C,GAAI8sG,EAAU,CACVzqD,EAASv8C,KAAO,GAChB,IAFU,IAAA6mC,EAAA,WAEL,IAAMvvC,EAAG2vG,EAAAC,GACJ5oG,EACA0oG,EAASt9B,SAAS3hD,KAAK,SAAA9kC,GAAC,OAAIA,EAAEiX,UAAY5C,IAE5CgH,IACAi+C,EAASv8C,KAAK1I,GAAOgH,EAAMza,QALnCqjH,EAAA,EAAAD,EAAkB,CAAE,KAAM,OAAQ,UAAlCC,EAAAD,EAAA17G,OAAA27G,IAA8CrgE,IASlD,IAAM4J,EAAYz1C,EAAK0uE,SAAS3hD,KAAK,SAAA9kC,GAAC,MAAkB,UAAdA,EAAEiX,UAM5C,OAJIu2C,IACA8L,EAASv0B,MAAQyoB,EAAU5sD,OAGxB04D,GAGF35D,EAAI,EAAGA,EAAI8hG,EAAMn5F,OAAQ3I,IAAK,CACnC,IAAMoY,EAAO0pF,EAAM9hG,GAEnB,OAAQoY,EAAKd,SACb,IAAK,MAAO,IACA1D,EAAewE,EAAfxE,WAER,IAAKA,EACD,MAJI,IAMAmJ,EAASnJ,EAATmJ,KAERymG,EAAOrmB,QAAUpgF,EACjB,MAEJ,IAAK,OACDymG,EAAOloD,KAAOljD,EAAKnX,MACnB,MACJ,IAAK,SACDuiH,EAAO54G,GAAKwN,EAAKnX,MACjB,MACJ,IAAK,WACDuiH,EAAOtmB,QAAU9kF,EAAKnX,MACtB,MACJ,IAAK,WACDuiH,EAAO7pD,SAAWwqD,EAA2B/rG,IAKrD,GAAI9L,IAASZ,KAAKkvF,UAAW,CACzB,IAAM2pB,EACuB,UAAvBf,EAAOK,YAA0BL,EAAOl4B,KAAO,OAQrD,GANI5/E,KAAK4/E,OAASi5B,IACd74G,KAAK4/E,KAAOi5B,EACZ74G,KAAKuqB,aAAa2C,KACdilC,IAAWl6D,mBACX+H,KAAK4/E,QAER5/E,KAAK0rF,OAAQ,CACd1rF,KAAK0rF,QAAS,EACd,IAAMtuE,EAAMpd,KAAKosD,gBAAgB,cAC3Bl4D,OAAOm5D,YAAYjwC,MAEzB0L,EAAOzZ,IAAI,uBAAwB+N,GAG/Bpd,KAAKouD,WACLpuD,KAAKk3G,QAAS,GAGlBl3G,KAAKuqB,aAAa2C,KAAKilC,IAAW75D,kBAEnC,QAA2BwC,IAAvBkF,KAAKy2G,QAAQ71G,GAEpBZ,KAAKy2G,QAAQ71G,GAAQk3G,EACrBhvF,EAAOzZ,IAAI,UAAWzO,EAAMk3G,GAC5BE,OAAoCl9G,IAAlBg9G,EAAOn+F,OACrBm+F,EAAOvkB,QACPvzF,KAAK84G,WAAWl4G,EAAM2N,IAKtBvO,KAAKuqB,aAAa2C,KACdilC,IAAW55D,kBACXqI,EACAk3G,EAAOloD,KACPkoD,EAAOl4B,KACPk4B,EAAOO,eACPP,EAAOtmB,QACPsmB,EAAOn+F,OACPm+F,EAAO7pD,SACP6pD,EAAOrmB,SAIXumB,GAAkB,OAEnB,CAGH,IAAMe,EAAe/4G,KAAKy2G,QAAQ71G,GAE9Bm4G,EAAan5B,OAASk4B,EAAOl4B,OAC7Bm5B,EAAan5B,KAAOk4B,EAAOl4B,KAC3B5/E,KAAKuqB,aAAa2C,KACdilC,IAAWz5D,iBAAkBkI,EAAMk3G,EAAOl4B,OAI9Cm5B,EAAatnB,UAAYqmB,EAAOrmB,UAChCsnB,EAAatnB,QAAUqmB,EAAOrmB,QAC9BzxF,KAAKuqB,aAAa2C,KACdilC,IAAW/5D,4BACXwI,EACAk3G,EAAOrmB,UAGXqmB,EAAOvkB,UAWPwlB,EAAaxlB,SAAU,EACvBvzF,KAAK84G,WAAWl4G,EAAM2N,IAItBupG,EAAO9hC,cACP+iC,EAAa/iC,YAAc8hC,EAAO9hC,aAIlC+iC,EAAap/F,SAAWm+F,EAAOn+F,SAC/Bq+F,GAAkB,EAClBe,EAAap/F,OAASm+F,EAAOn+F,QAMrC,IAAK,IAAIrlB,EAAI,EAAGA,EAAI8hG,EAAMn5F,OAAQ3I,IAAK,CACnC,IAAMoY,EAAO0pF,EAAM9hG,GAEnB,OAAQoY,EAAKd,SACb,IAAK,OACD,IAAKksG,EAAOvkB,QAAS,CACjB,IAAMvd,EACAh2E,KAAKoqB,KAAK9Y,QAAQ0nG,YACdxyG,UAAQmI,mBAAmB/N,GAC3Bk3G,EAAOloD,KAEjB5vD,KAAKuqB,aAAa2C,KACdilC,IAAW96D,qBACXuJ,EACAo1E,GAER,MACJ,IAAK,qBACG8hC,EAAOvkB,UAAYvzF,KAAK22G,oBACxB32G,KAAK22G,mBAAoB,EACzB32G,KAAKuqB,aAAa2C,KAAKilC,IAAW17D,cAEtC,MACJ,IAAK,wBACD,GAAIqhH,EAAOvkB,QAAS,CAGhB,IAFA,IAAMv+D,EAAa,GAEVr4B,EAAI,EAAGA,EAAI+P,EAAK0uE,SAASn+E,OAAQN,IAAK,KACnCuL,EAAewE,EAAK0uE,SAASz+E,GAA7BuL,WAEJA,GAAcA,EAAWrS,MACzBm/B,EAAW9sB,EAAWrS,KAAOqS,EAAW3S,OAIhDyK,KAAKuqB,aAAa2C,KACdilC,IAAWr7D,8BAA+Bk+B,GAElD,MACJ,IAAK,uBAAwB,IACjB9sB,EAAewE,EAAfxE,WAER,IAAKA,EACD,MAJqB,IAOjByR,EAAWzR,EAAXyR,OAEJA,GAAUA,IAAW3Z,KAAK2uF,sBAC1B3uF,KAAK2uF,oBAAsBh1E,EAC3B3Z,KAAKuqB,aAAa2C,KACdilC,IAAW93D,6BACXsf,IAKR,MAEJ,IAAK,eACD,IAAMs/F,EAAMvsG,EAAKxE,WAEjB,IAAK+wG,EACD,MAEJj5G,KAAK+2G,YAAckC,EAAIC,OAAS,KAChCl5G,KAAKg3G,SAAWiC,EAAIE,KAAO,KAC3Bn5G,KAAKuqB,aAAa2C,KAAKilC,IAAWj5D,sBAClC,MAEJ,QACI8G,KAAKo5G,YAAY1sG,EAAM9L,IAK3Bo3G,GACAh4G,KAAKuqB,aAAa2C,KACdilC,IAAW/4D,gBACXwH,EACAk3G,EAAOn+F,2CASR/Y,EAAMg2F,GACb52F,KAAK06E,YAAc95E,EAEnBkoB,EAAOnZ,KAAP,iBAAArS,OAA6BsD,EAA7B,gBAAAtD,OAAgDs5F,2DAOrBvqE,GAC3BrsB,KAAKi3G,4BAA8B5qF,sCAQ3B3f,EAAM9L,GAGd,IACI,IAAIy4G,EAAcr5G,KAAK02G,aAAahqG,EAAKd,SAErCc,EAAKd,QAAQ+uB,WAAW,wBACxB0+E,EAAc,CAAEr5G,KAAKi3G,8BAGrBoC,GACAA,EAAYp4G,QAAQ,SAAA+N,GAChBA,EAAQtC,EAAMlG,UAAQmI,mBAAmB/N,GAAOA,KAG1D,MAAO3B,GACL4hC,IAAqBC,iBAAiB7hC,GACtC6pB,EAAOrZ,MAAP,oBAAAnS,OAAiCoP,EAAKd,QAAtC,UAAuD3M,wCAUnDiQ,EAASy+E,EAAa2rB,GAC9B,IAAM/pG,EAAMwP,eAAK,CAAE3C,GAAIpc,KAAKwvD,QACxBn+C,KAAM,cAKU,SAAhBs8E,EACAp+E,EAAI5a,EAAEg5F,EAAaz+E,GAASqB,KAE5BhB,EAAI5a,EAAEg5F,EAAa,CAAEt9E,MAAO,4BAA8BnB,GACrDqB,KAEL+oG,GACA/pG,EAAI5a,EAAE,OAAQ,CAAE0b,MAAO,oCAClB7a,EAAE8jH,GACF/oG,KACAA,KAETvQ,KAAKsd,WAAWjG,KAAK9H,GACrBvP,KAAKuqB,aAAa2C,KAAKilC,IAAWr4D,qBAAsBoV,8CAWzChQ,EAAIgQ,EAASy+E,EAAa2rB,GACzC,IAAM/pG,EAAMwP,eAAK,CAAE3C,GAAE,GAAA9e,OAAK0C,KAAKwvD,QAAV,KAAAlyD,OAAqB4B,GACtCmS,KAAM,SAKU,SAAhBs8E,EACAp+E,EAAI5a,EAAEg5F,EAAaz+E,GAASqB,KAE5BhB,EAAI5a,EAAEg5F,EAAa,CAAEt9E,MAAO,4BAA8BnB,GACrDqB,KAEL+oG,GACA/pG,EAAI5a,EAAE,OAAQ,CAAE0b,MAAO,oCAClB7a,EAAE8jH,GACF/oG,KACAA,KAGTvQ,KAAKsd,WAAWjG,KAAK9H,GACrBvP,KAAKuqB,aAAa2C,KACdilC,IAAWp4D,6BAA8BmV,sCAQtCk/E,GACP,IAAM7+E,EAAMwP,eAAK,CAAE3C,GAAIpc,KAAKwvD,QACxBn+C,KAAM,cAEV9B,EAAI5a,EAAE,UAAWy5F,GACjBpuF,KAAKsd,WAAWjG,KAAK9H,6CASPhB,EAAKgrG,UACZv5G,KAAK82G,cAAcvoG,GAEtBgrG,IAIJv5G,KAAKuqB,aAAa2C,KAAKilC,IAAW35D,gBAAiB+V,GAEnDvO,KAAK6sF,UAAU2sB,gBAAgBjrG,kDAQb8K,EAAMzY,GAAM,IAAAmtC,EAAA/tC,KAE9B,GAAIk7C,EAAE7hC,GAAMogB,KAAK,8CAA8Cx8B,OAC3D,OAAO,EAIX,GAAIi+C,EAAE7hC,GAAMogB,KAAK,2DACCx8B,OAAQ,CACtB,IAAImc,EACEqgG,EACAv+D,EAAE7hC,GAAMogB,KACN,kEAUR,OAPIggF,EAAax8G,SACbmc,EAASqgG,EAAa1sG,QAG1B/M,KAAKuqB,aAAa2C,KAAKilC,IAAW95D,cAAe+gB,GACjDpZ,KAAKsd,WAAWwyC,KAAK4pD,QAAQ15G,KAAKwvD,UAE3B,EAIX,IAAMmqD,EACAz+D,EAAE7hC,GACCogB,KACG,sEAEHx8B,OACH28G,EACA1+D,EAAE7hC,GACCogB,KACG,sEAEHx8B,OACH48G,EAAc7kH,OAAOq5B,KAAKruB,KAAKy2G,SAEhCkD,EAGME,EAAY58G,OAAS,IAI5B48G,EAAY54G,QAAQ,SAAAsN,GAChB,IAAMupG,EAAS/pE,EAAK0oE,QAAQloG,UAErBw/B,EAAK0oE,QAAQloG,GACpBw/B,EAAK+rE,kBAAkBvrG,EAAKupG,EAAOvkB,WAEvCvzF,KAAKsd,WAAWwyC,KAAK4pD,QAAQ15G,KAAKwvD,SAI7BoqD,GACD55G,KAAKuqB,aAAa2C,KAAKilC,IAAW15D,mBAjB/BuH,KAAKy2G,QAAQ71G,GACpBZ,KAAK85G,kBAAkBl5G,GAAM,IAoB7Bg5G,GAAU55G,KAAKkvF,YAActuF,GAC7BZ,KAAKuqB,aAAa2C,KAAKilC,IAAWn6D,0CAShCuX,EAAK3O,GACX,IAAMgvD,EACA1U,EAAE3rC,GAAKkqB,KAAK,kDACT1sB,QACFvG,UAAQmI,mBAAmB/N,GAE5BslG,EAAMhrD,EAAE3rC,GAAKkqB,KAAK,SAAS1sB,OAC3BsE,EAAO9B,EAAItB,aAAa,QAE9B,GAAa,UAAToD,EAIA,OAHArR,KAAKuqB,aAAa2C,KAAKilC,IAAWt7D,oBAC9BqkD,EAAE3rC,GAAKkqB,KAAK,SAAS1sB,OAAQm5F,IAE1B,EAGX,IAAM9X,EAAUlzC,EAAE3rC,GAAKkqB,KAAK,YAE5B,GAAI20D,EAAQnxF,OAAQ,CAChB,IAAM88G,EAAc3rB,EAAQrhF,QAExBgtG,GAA+B,KAAhBA,KACf/5G,KAAKuqB,aAAa2C,KAAKilC,IAAWh4D,gBAAiB4/G,GACnDjxF,EAAOzZ,IAAP,yBAAA/R,OAAoCy8G,KAK5C,IAAIC,EAAQ9+D,EAAE3rC,GAAKkqB,KAAK,UAAU7sB,KAAK,SAEvC,IAAKotG,IAEDA,EAAQ9+D,EAAE3rC,GAAKkqB,KAAK,6BAA6B7sB,KAAK,UAE3C,CAEP,IAAMqtG,EACAD,EAAMt9F,MAAM,2CAElBs9F,EAAK,GAAA18G,OAAM28G,EAAU,GAAhB,KAAA38G,OAAsB28G,EAAU,GAAhC,KAAA38G,OAAsC28G,EAAU,GAAhD,KAITr5G,IAASZ,KAAKwvD,SACPtU,EAAE3rC,GACAkqB,KACG,sEAEHx8B,QACT+C,KAAKk6G,gBAET,IAAMnoD,EAAc7W,EAAE3rC,GAAKkqB,KAAK,iBAAiB1sB,OAC3CilD,EAAahyD,KAAKoqB,KAAK6nC,sBAAsBF,GAK/CC,QAAwBl3D,IAAVk/G,EACdh6G,KAAKuqB,aAAa2C,KAAKilC,IAAWz3D,sBAC9BkG,EAAMoxD,GAKVk0C,IACa,SAAT70F,EACArR,KAAKuqB,aAAa2C,KAAKilC,IAAWh6D,yBAC1ByI,EAAMgvD,EAAMs2C,EAAKlmG,KAAKkvF,UAAW8qB,GACzB,cAAT3oG,GACPrR,KAAKuqB,aAAa2C,KAAKilC,IAAWj6D,iBAC1B0I,EAAMgvD,EAAMs2C,EAAKlmG,KAAKkvF,UAAW8qB,4CAUrC3gG,EAAMzY,GAClB,GAAIs6C,EAAE7hC,GACGogB,KACG,mFAGHx8B,OACL6rB,EAAOzZ,IAAI,uBAAwBzO,GACnCZ,KAAKuqB,aAAa2C,KAAKilC,IAAWn5D,wBAC/B,GAAIkiD,EAAE7hC,GACJogB,KACG,kFAGHx8B,OAAQ,CACIuJ,UAAQgI,iBAAiB6K,EAAKpL,aAAa,SAE3CjO,KAAKoqB,KAAK9Y,QAAQ69C,MAAMC,gBAKrCpvD,KAAKuqB,aAAa2C,KAAKilC,IAAWv4D,kBAGlCkvB,EAAOlZ,KAAK,eAAgByJ,GAC5BrZ,KAAKuqB,aAAa2C,KACdilC,IAAWx4D,sCAEZuhD,EAAE7hC,GAAMogB,KAAK,8BAA8Bx8B,QAClD6rB,EAAOlZ,KAAK,oDACRyJ,GACJrZ,KAAKuqB,aAAa2C,KAAKilC,IAAWt4D,wBAElCivB,EAAOlZ,KAAK,eAAgByJ,GAC5BrZ,KAAKuqB,aAAa2C,KAAKilC,IAAWz4D,kDAQrC6U,GACD,IAAM4rG,EAASvzG,cAAI,CAAEwV,GAAIpc,KAAKwvD,QAC1Bn+C,KAAM,QACL1c,EAAE,QAAS,CAAE0b,MAAO,yCACpB1b,EAAE,OAAQ,CAAEi7D,KAAMppD,UAAQmI,mBAAmBJ,GAC1CqxE,KAAM,SACTjrF,EAAE,UAAUa,EAAE,yBAAyB+a,KAAKA,KAAKA,KAEtDvQ,KAAKsd,WAAWnF,OACZgiG,EACA,SAAArqG,GAAM,OAAIgZ,EAAOzZ,IAAI,8BAA+Bd,EAAKuB,IACzD,SAAAL,GAAK,OAAIqZ,EAAOzZ,IAAI,2BAA4BI,sCAY/C5Z,EAAK8mB,EAAWy9F,EAASC,GAAgB,IAAAxrE,EAAA7uC,KAE9CA,KAAKsd,WAAWnF,OACZvR,cAAI,CACAwV,GAAIpc,KAAKwvD,QACTn+C,KAAM,QAEL1c,EAAE,QAAS,CAAE0b,MAAO,yCACzB,SAAAk8B,GACI,GAAI2O,EAAE3O,GACG9S,KACG,0EAEHx8B,OAAQ,CACb,IAAMq9G,EACA1zG,cAAI,CACFwV,GAAIyyB,EAAK2gB,QACTn+C,KAAM,QAEL1c,EAAE,QAAS,CACR0b,MAAO,yCAGnBiqG,EAAW3lH,EAAE,IAAK,CACd0b,MAAO,gBACPgB,KAAM,WAEVipG,EACK3lH,EAAE,QAAS,CAAEkjH,IAAO,cACpBljH,EAAE,SACFa,EAAE,6CACF+a,KACAA,KACL+pG,EACK3lH,EAAE,QAAS,CAAEkjH,IAAO,8BACpBljH,EAAE,SACFa,EAAEK,GACF0a,KACAA,KAIL+pG,EACK3lH,EAAE,QAAS,CAAEkjH,IAAO,yBACpBljH,EAAE,SACFa,EAAE,UACF+a,KACAA,KAGLs+B,EAAKvxB,WAAWnF,OAAOmiG,EAAY39F,EAAWy9F,QAE9CC,KAGRD,yCAUMvkH,EAAK23B,GACfA,EAAO5hB,QAAU/V,EACjBmK,KAAKkuF,mBAAmBr4F,GACxBmK,KAAKm2F,QAAQC,MAAMt4F,KAAK0vB,8CAOT33B,GACf,IAAMugG,EAAQp2F,KAAKm2F,QAAQC,MAAMj9D,OAAO,SAAAzsB,GAAI,OAAI7W,IAAQ6W,EAAKd,UAE7D5L,KAAKm2F,QAAQC,MAAQA,8CAQLvhG,EAAMma,GACtB,GAAuB,mBAAZA,EACP,MAAM,IAAI7Q,MAAM,+BAEpB,IAAIk7G,EAAcr5G,KAAK02G,aAAa7hH,GAE/BwkH,IACDr5G,KAAK02G,aAAa7hH,GAAQwkH,EAAc,KAEN,IAAlCA,EAAY96G,QAAQyQ,GACpBqqG,EAAYv7G,KAAKkR,GAEjB8Z,EAAOlZ,KAAP,sDAAAtS,OAC0DzI,mDAS3CA,EAAMma,GACzB,IAAMqqG,EAAcr5G,KAAK02G,aAAa7hH,GAChC0lH,EAAalB,EAAcA,EAAY96G,QAAQyQ,IAAY,GAG7C,IAAhBurG,EACAlB,EAAY97G,OAAOg9G,EAAY,GAE/BzxF,EAAOlZ,KAAP,gBAAAtS,OAA4BzI,EAA5B,wDAYA+hG,GACJ,IAAMkhB,EAAS93G,KAAKy2G,QAAQ7f,GAE5B,OAAIkhB,EACOA,EAAOvkB,QAGX,2CAOP,MAAqB,cAAdvzF,KAAK4/E,2CAOF8Z,GACV,OAAI15F,KAAKy2G,QAAQ/c,GACN15F,KAAKy2G,QAAQ/c,GAAS9Z,KAG1B,0CAQEppC,EAAMn3C,GACfW,KAAKw6G,sBAAsBhkE,GACvBn3C,GACAA,EAASm3C,wCASJA,EAAMn3C,GACf,OAAOW,KAAKy6G,sBAAsBjkE,EAAMn3C,kDAOrBm3C,GACnBx2C,KAAKkuF,mBAAmB,cACxBluF,KAAK+tF,cACD,aACA,CACI7lF,WAAY,CAAEmI,MAAS,kCACvB9a,MAAOihD,EAAK/1C,2DASF+1C,EAAMn3C,GACxBW,KAAK06G,uBAAuBlkE,GACxBx2C,KAAKsd,YACLtd,KAAK0X,eAELrY,GACAA,mDAQem3C,GACnBx2C,KAAKkuF,mBAAmB,cACxBluF,KAAK+tF,cACD,aACA,CACI7lF,WAAY,CAAEmI,MAAS,kCACvB9a,MAAOihD,EAAK/1C,2DAQF+1C,GAClBx2C,KAAKq3G,uBAAuB7gE,GACvBx2C,KAAKsd,YAGVtd,KAAK0X,4DAcYuiD,EAAYl6B,GAE7B,IAAM1mB,EAAOrZ,KAAK82G,cAAL,GAAAx5G,OAAsB0C,KAAKwvD,QAA3B,KAAAlyD,OAAsC28D,IAEnD,IAAK5gD,EAED,OAAO,KAEX,IAAM9V,EAAO,CACTmtB,OAAO,EACPqc,eAAWjyC,GAEX6/G,EAAY,KAEhB,GAAI56E,IAAc+M,IACd6tE,EAAYnE,EAA2Bn9F,EAAM,kBAC1C,IAAI0mB,IAAc+M,IAUrB,OAFAhkB,EAAOrZ,MAAP,2BAAAnS,OAAwCyiC,IAEjC,KATP46E,EAAYnE,EAA2Bn9F,EAAM,cAC7C,IAAMuhG,EAAgBpE,EAA2Bn9F,EAAM,aAEnDuhG,EAAc39G,OAAS,IACvBsG,EAAKwpC,UAAY6tE,EAAc,GAAGrlH,OAU1C,OAFAgO,EAAKmtB,MAAQiqF,EAAU19G,OAAS,GAA4B,SAAvB09G,EAAU,GAAGplH,MAE3CgO,kDAOP,QAAIvD,KAAK6sF,WACE7sF,KAAK6sF,UAAUguB,mDAUzBjgE,GACD,OAAO56C,KAAKsd,WAAW4vC,KAAKgD,KAAKtV,EAAQ,aACrCp0C,UAAQkI,kBAAkB1O,KAAKkvF,WAAYlvF,KAAKouD,SAChDpuD,KAAK06E,8CAOT,OAAO16E,KAAKsd,WAAW4vC,KAAKgoC,kDAO5B,OAAOl1F,KAAK+2G,kDAOZ,OAAO/2G,KAAKg3G,iDAQAzoG,EAAKioC,GACjB1tB,EAAOnZ,KAAK,WAAY6mC,GACxB,IAAMskE,EAAYl0G,cACd,CAAEwV,GAAIpc,KAAK06E,YACPrpE,KAAM,QACT1c,EAAE,OAAQ,CACP0b,MAAO,iCACP9B,QAEH/Y,EAAEghD,EAAK/1C,YACP8P,KAELvQ,KAAKsd,WAAWnF,OACZ2iG,EACA,SAAAhrG,GAAM,OAAIgZ,EAAOzZ,IAAI,WAAYS,IACjC,SAAAL,GAAK,OAAIqZ,EAAOzZ,IAAI,iBAAkBI,oCAOvC6M,GAGH,GAFaA,EAAGrO,aAAa,UAEhBjO,KAAK06E,YAAlB,CAKA,IAAMlkC,EAAO0E,EAAE5+B,GAAImd,KAAK,QAEpB+c,EAAKv5C,QAA0B,SAAhBu5C,EAAKzpC,OACpB/M,KAAKuqB,aAAa2C,KAAKilC,IAAW57D,sBAKlCuyB,EAAOlZ,KAAK,2FAZZkZ,EAAOlZ,KAAK,oEAuBZ,IAAAwyD,EAAApiE,KACJ,OAAO,IAAIorC,QAAQ,SAACC,EAASC,GACzB,IAAM1zB,EAAUhY,WAAW,kBAAMm7G,GAAU,IAAO,KAC5CxwF,EAAe63C,EAAK73C,aAM1B,SAASwwF,IAA4B,IAAlBC,EAAkBn9G,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,IAAAA,UAAA,GACjC0sB,EAAakC,eAAe0lC,IAAW15D,SAAUsiH,GACjDtjG,aAAaG,GACTojG,EAEA1vE,EAAO,IAAIntC,MAAM,qEAGjBktC,IAGR9gB,EAAa+B,GAAG6lC,IAAW15D,SAAUsiH,GACrC34C,EAAKs3C,wHCn2CjB,SAAAvwF,GAAA/0B,EAAAQ,EAAAmxB,EAAA,sBAAA6wF,IAAA,IAAAvS,EAAAjwG,EAAA,GAAA6mH,EAAA7mH,EAAA,GAAA8mH,EAAA9mH,EAAA,IAEM00B,EAAS9tB,EAAQ,GAAqB2tB,UAAUQ,GAIhDgpC,EAAan3D,EAAQ,GACrBirG,EACAjrG,EAAQ,IACR6lC,EAAuB7lC,EAAQ,IASrC,SAASmgH,EAAsBC,GAC3B,IAAI52D,EAAQ,EAEZ,OAAO,SAAShyC,GAEZ,IAAIA,EAAJ,CAOA,IAAMoF,EAAU9W,KAAK4iB,IAAI,EAAG8gC,EAAQ,GAIpC,OAFAA,GAAS,EAEF5sC,EAAUwjG,EAVb52D,EAAQ,GAuBL,SAASoyD,EAAU5mF,EAAU5F,EAAMm6B,EAASjzC,GA0BvD,SAAS+a,EAASyI,GACd,GAAIA,EAAMvxB,MAAQuxB,EAAMvxB,KAAK09C,UAAW,CACpC,GAAInsB,EAAMumF,SAAWnnH,OAAO2vB,SAASw3F,OAKjC,YAJAvyF,EAAOlZ,KAAP,6CAAAtS,OAEQw3B,EAAMumF,SAIlB5xF,IAASw3B,UAAYnsB,EAAMvxB,KAAK09C,WAlCxCjhD,KAAKgwB,SAAWA,EAChBhwB,KAAKs7G,YAAclxF,EACnBpqB,KAAKu7G,eAAiBJ,EAAsB,KAC5Cn7G,KAAKw7G,oBAAsBL,EAAsB,KAGjDn7G,KAAKy7G,qBAAsB,EAC3Bz7G,KAAKsR,QAAUA,EAKftR,KAAK07G,kBACC17G,KAAKsR,QAAQgM,WAAW6xC,YAC4Br0D,IAA/CkF,KAAKsR,QAAQgM,WAAW6xC,MAAMwsD,aAEzC37G,KAAKuqB,aAAeg6B,EAEpBvkD,KAAKsd,WAAatd,KAAKs7G,YAAYh+F,WAuB/BppB,OAAOm2C,iBACPn2C,OAAOm2C,iBAAiB,UAAWhe,GAAU,GAE7Cn4B,OAAO0nH,YAAY,YAAavvF,GAMxCuqF,EAAU1gH,UAAU02F,sBAAwB,WACxC,OAAO5sF,KAAKy7G,qBAGhB7E,EAAU1gH,UAAU2kH,oBAAsB,WACtC,OAAO76G,KAAK07G,mBAGhB9E,EAAU1gH,UAAUsjH,gBAAkB,SAASjrG,GAC3Cua,EAAOnZ,KAAP,8BAAArS,OAA0CiR,IAGzB,UAFA/H,UAAQmI,mBAAmBJ,KAGxCua,EAAOnZ,KACH,gDACJ3P,KAAKuqB,aAAa2C,KAAKilC,EAAWz6D,cAI1Ck/G,EAAU1gH,UAAU2lH,gBAAkB,SAASC,GACtC97G,KAAK+7G,eACN/7G,KAAK+7G,aAAeD,EACpBhzF,EAAOnZ,KAAP,sBAAArS,OAAkC0C,KAAK+7G,iBAI/CnF,EAAU1gH,UAAUkiH,gBAAkB,WAClC,OAAOp4G,KAAK+7G,cAGhBnF,EAAU1gH,UAAU8lH,kBAAoB,WAEpC,IAAIC,EAAiBj8G,KAAKsR,QAAQgM,WAAW6xC,MAAM+sD,MAQnD,OAJKD,IACDA,EAAc,SAAA3+G,OAAY0C,KAAKsR,QAAQgM,WAAW6xC,MAAMppD,SAGrDk2G,GAGXrF,EAAU1gH,UAAUimH,mBAAqB,WAErC,IA4GIC,EA5GE/wG,EAAOzE,cAAI,CAAEwV,GAAIpc,KAAKg8G,oBACxB3qG,KAAM,QAGF4vC,EAAcx3B,IAAdw3B,UACFo7D,EAAa5yF,IAASs3B,UACtBvlD,EAASwE,KAAKsR,QAAQ+gC,WAwG5B,OAtGAvpB,EAAOnZ,KAAP,eAAArS,OAA2B2jD,EAA3B,kBAAA3jD,OAAqD++G,IAErDhxG,EAAK1W,EAAE,aAAc,CACjB0b,MAAO,kCACPuhD,KAAM5xD,KAAKgwB,SACXssF,cAAeD,IAGfp7D,GACA51C,EAAK3E,MAAM,CAAE61G,aAAct7D,SAEgBnmD,IAA3CkF,KAAKsR,QAAQgM,WAAWk/F,gBACxBnxG,EAAK1W,EACD,WAAY,CACRE,KAAM,iBACNU,MAAOyK,KAAKsR,QAAQgM,WAAWk/F,iBAChCjsG,UAI2BzV,IAAlCkF,KAAKsR,QAAQgM,WAAW6xC,YAC0Br0D,IAA/CkF,KAAKsR,QAAQgM,WAAW6xC,MAAMwsD,cACjCtwG,EAAK1W,EACD,WAAY,CACRE,KAAM,eACNU,MAAOyK,KAAKsR,QAAQgM,WAAW6xC,MAAMwsD,eACtCprG,UAEiBzV,IAAxBU,EAAOwvF,cACP3/E,EAAK1W,EACD,WAAY,CACRE,KAAM,eACNU,MAAOiG,EAAOwvF,eACfz6E,KAEXlF,EAAK1W,EACD,WAAY,CACRE,KAAM,aACNU,MAAOqwC,QAAQpqC,EAAOuxD,cACvBx8C,UAEkBzV,IAArBU,EAAOihH,WACPpxG,EAAK1W,EACG,WAAY,CACRE,KAAM,YACNU,MAAOqwC,QAAQpqC,EAAOihH,aACvBlsG,UAEWzV,IAAtBU,EAAOkhH,YACPrxG,EAAK1W,EACG,WAAY,CACRE,KAAM,aACNU,MAAOqwC,QAAQpqC,EAAOkhH,cACvBnsG,UAEgBzV,IAA3BU,EAAOmhH,iBACPtxG,EAAK1W,EACG,WAAY,CACRE,KAAM,kBACNU,MAAOiG,EAAOmhH,kBACfpsG,KAGflF,EAAK1W,EACD,WAAY,CACRE,KAAM,gBACNU,OAAiD,IAA1CyK,KAAKsR,QAAQgM,WAAW2vC,gBAChC18C,UACyBzV,IAA5BU,EAAOohH,kBACPvxG,EAAK1W,EACD,WAAY,CACRE,KAAM,mBACNU,MAAOiG,EAAOohH,mBACfrsG,KAEP/U,EAAOqhH,cACPxxG,EAAK1W,EACD,WAAY,CACRE,KAAM,eACNU,MAAOiG,EAAOqhH,eACftsG,KAEP/U,EAAOshH,YACPzxG,EAAK1W,EACD,WAAY,CACRE,KAAM,aACNU,MAAOiG,EAAOshH,aACfvsG,KAEP/U,EAAOgkE,SAAWhkE,EAAOgkE,QAAQu9C,MACa,iBAApCvhH,EAAOgkE,QAAQu9C,KAAKC,aAC1Bl8G,KAAKwU,SAAW9Z,EAAOgkE,QAAQu9C,KAAKC,aACpC3xG,EAAK1W,EACD,WAAY,CACRE,KAAM,OACNU,OAAO,IACRgb,KAMPvQ,KAAKsR,QAAQ+gC,WAAW2hD,mBAChC,IAAK,cACL,KAAK,EACL,UAAKl5F,EACDshH,GAAW,EACX,MACJ,IAAK,YACDA,GAAW,EA4Cf,OAxCIA,IAAazxF,IAAQspE,yBACrBmoB,GAAW,GAGf/wG,EAAK1W,EACD,WAAY,CACRE,KAAM,WACNU,MAAO6mH,IACR7rG,UAEyCzV,IAA5CkF,KAAKsR,QAAQ+gC,WAAW+1C,iBACxB/8E,EAAK1W,EACD,WAAY,CACRE,KAAM,kBACNU,MAAOyK,KAAKsR,QAAQ+gC,WAAW+1C,kBAChC73E,UAEqCzV,IAA5CkF,KAAKsR,QAAQ+gC,WAAWg2C,iBACxBh9E,EAAK1W,EACD,WAAY,CACRE,KAAM,kBACNU,MAAOyK,KAAKsR,QAAQ+gC,WAAWg2C,kBAChC93E,UAE4BzV,IAAnCkF,KAAKsR,QAAQ+gC,WAAW4qE,QACxB5xG,EAAK1W,EACD,WAAY,CACRE,KAAM,SACNU,MAAOyK,KAAKsR,QAAQ+gC,WAAW4qE,SAChC1sG,UAEiDzV,IAAxDkF,KAAKsR,QAAQ+gC,WAAW6qE,6BACxB7xG,EAAK1W,EACD,WAAY,CACRE,KAAM,8BACNU,MAAOyK,KAAKsR,QAAQ+gC,WAAW6qE,8BAChC3sG,KAEXlF,EAAKkF,KAEElF,GAIXurG,EAAU1gH,UAAUinH,eAAiB,SAASC,GAE1C,IAAMn8D,EAAY/F,EAAEkiE,GAAU3jF,KAAK,cAAc7sB,KAAK,cAElDq0C,IACAn4B,EAAOnZ,KAAP,wBAAArS,OAAoC2jD,IACpCx3B,IAASw3B,UAAYA,IAI7B21D,EAAU1gH,UAAUmnH,mBAAqB,SAASD,GAE9Cp9G,KAAK67G,gBAAgB3gE,EAAEkiE,GAAU3jF,KAAK,cAAc7sB,KAAK,aAEzD,IAAM0wG,EACApiE,EAAEkiE,GAAU3jF,KACV,6DAC+Cx8B,OAAS,EAEhE6rB,EAAOnZ,KAAP,2BAAArS,OAAuCggH,IAEvCt9G,KAAKy7G,oBAAsBvgE,EAAEkiE,GAAU3jF,KACnC,2DACiDx8B,OAAS,EAE9D6rB,EAAOnZ,KAAP,oCAAArS,OACwC0C,KAAKy7G,sBAExCz7G,KAAKy7G,qBAENz7G,KAAKm9G,eAAeC,GAIxB,IAAM1wB,EAAexxC,EAAEkiE,GAAU3jF,KAAK,eAAe7sB,KAAK,YAE1D5M,KAAKuqB,aAAa2C,KAAK+4E,EAAqBnvB,iBACxCwmC,EAAuB5wB,GAIvBxxC,EAAEkiE,GAAU3jF,KACZ,gEACkDx8B,SAClD+C,KAAK07G,mBAAoB,GAG7B5yF,EAAOnZ,KAAP,yBAAArS,OAAqC0C,KAAK07G,qBAa9C9E,EAAU1gH,UAAUqhH,wBAA0B,WAAW,IAAA7vE,EAAA1nC,KACrD,OAAO,IAAIorC,QAAQ,SAAAC,GAEf3D,EAAKm0E,gBAAgBn0E,EAAKp2B,QAAQgM,WAAWy+F,cAG7Cr0E,EAAKpqB,WAAWnF,OACZuvB,EAAKy0E,qBACL,SAAArsG,GAAM,OAAI43B,EAAK61E,gCAAgCztG,EAAQu7B,IACvD,SAAA57B,GAAK,OAAIi4B,EAAK81E,8BAA8B/tG,EAAO47B,KAMvD3D,EAAKpqB,WAAW9F,WAaxBo/F,EAAU1gH,UAAUsnH,8BAAgC,SAAS/tG,EAAOpQ,GAAU,IAAAqsC,EAAA1rC,KAGpEy9G,EACAviE,EAAEzrC,GAAOgqB,KAAK,0BAA0Bx8B,QACnCi+C,EAAEzrC,GAAOgqB,KAAK,yBAAyBx8B,OAMlD,GAJIwgH,IACA30F,EAAOnZ,KAAK,+BACZ8Z,IAASw3B,eAAYnmD,GAErBogD,EAAEzrC,GAAOgqB,KAAK,4BAA4Bx8B,OAC1C+C,KAAKuqB,aAAa2C,KAAKilC,EAAWx6D,uBADtC,CAOA,IAAM+lH,EAAiBxiE,EAAEzrC,GAAOgqB,KAAK,4BAErC,GAAIikF,EAAezgH,OAAQ,CAEvB,IAEIi2F,EAFEyqB,EAAYD,EAAe9wG,KAAK,cAChCgxG,EAAgB1iE,EAAEzrC,GAAOgqB,KAAK,eAWpC,OARImkF,IACA1qB,EAAW0qB,EAAc7wG,aAE7B/M,KAAKuqB,aAAa2C,KACdilC,EAAW14D,kBACXkkH,EACAzqB,GAMR,GAAIh4C,EAAEzrC,GAAOgqB,KAAK,yBAAyBx8B,OAWvC,OAVA6rB,EAAOlZ,KAAK,uCAAwCH,GACnCjJ,UAAQgI,iBAAiBiB,EAAMxB,aAAa,SAE5CjO,KAAKsR,QAAQgM,WAAW6xC,MAAMC,kBAG3CpvD,KAAKy7G,qBAAsB,QAE/Bz7G,KAAKuqB,aAAa2C,KAAKilC,EAAW37D,yBAItC,IAAMqnH,EAAS79G,KAAKw7G,sBACdz2E,EAAM,4BAAAznC,OAA+BugH,GAE3Ch9E,EAAqBC,iBAAiB,IAAI3iC,MAAM4mC,IAChDjc,EAAOrZ,MAAMs1B,EAAQt1B,GAGrB,IAAMwsG,EAAiBj8G,KAAKg8G,oBACtB8B,EAAWD,EAAS,IAKrBJ,GACDz9G,KAAKuqB,aAAa2C,KACdilC,EAAW16D,mBACXwkH,EACA6B,GAIR99G,KAAKu7G,gBAAe,GACpBrnH,OAAO0L,WACH,kBAAM8rC,EAAK6rE,0BAA0BxvE,KAAK1oC,IAC1Cw+G,KAYRjH,EAAU1gH,UAAUqnH,gCAAkC,SAC9CztG,EACAzQ,GAAU,IAAA+tC,EAAAptC,KAQd,GANAA,KAAKq9G,mBAAmBvtG,GAGxB9P,KAAKw7G,qBAAoB,GAG0B,SAA/CtgE,EAAEprC,GAAQ2pB,KAAK,cAAc7sB,KAAK,SAElC5M,KAAKu7G,gBAAe,GAGpBl8G,QACG,CACH,IAAMw+G,EAAS79G,KAAKu7G,iBAEpBzyF,EAAOnZ,KAAP,4BAAArS,OAAwCugH,IACxC3pH,OAAO0L,WACH,kBAAMwtC,EAAKmqE,0BAA0BxvE,KAAK1oC,IAC1Cw+G,KAIZjH,EAAU1gH,UAAU8kB,aAAe,WAAW,IAAA+yB,EAAA/tC,KAC1C,OAAO,IAAIorC,QAAQ,SAACC,EAASC,GACzByC,EAAKzwB,WAAWnF,OACZ41B,EAAKouE,qBACL,SAAArsG,GACIi+B,EAAKovE,eAAertG,GACpBu7B,KAEJ,SAAA6vC,GAAO,OAAI5vC,EAAO,CACd77B,MAAOyrC,EAAEggC,GAASzhD,KAAK,mBAClBz9B,KAAK,WACVkT,QAASgsC,EAAEggC,GAASzhD,KAAK,iBACpB1sB,cAMrB6pG,EAAU1gH,UAAU+2F,YAAc,SAAS8wB,EAAaC,GACpDh+G,KAAKi+G,cAAyB,EAAOF,EAAaC,IAUtDpH,EAAU1gH,UAAU+nH,aAAe,SAASC,EAAOC,EAAOl0C,GACtD,IAAM3tD,EAAK1V,cAAI,CAAEwV,GAAIpc,KAAKg8G,oBACtB3qG,KAAM,QACJ3K,EAAQ,CACV2J,MAAO,kCACPuhD,KAAM5xD,KAAKgwB,SACXssF,cAAe7yF,IAASs3B,WAExB98C,EAAM,WAeV,SAAS6kD,EAAY/jB,EAAQjrB,GACzB+mB,EAAqBC,iBAAiB,IAAI3iC,MAAM4mC,IAChDjc,EAAOrZ,MAAMs1B,EAAQjrB,GACrBmwD,EAAUnwD,GAhBVokG,IACAx3G,EAAMw3G,OAAQ,EACdj6G,EAAG,SAAA3G,OAAY2G,IAEnBqY,EAAG3nB,EAAE,YAAa+R,GAclB1G,KAAKsd,WAAWnF,OACZmE,EACA,SAAAxM,GAEI,IAAIggC,EAAMoL,EAAEprC,GAAQ2pB,KAAK,aAAa7sB,KAAK,QAE3CkjC,EAAMsuE,mBAAmBtuE,KAErBhnB,EAAOnZ,KAAP,OAAArS,OAAmB2G,EAAnB,MAAA3G,OAA2BwyC,IAC3BquE,EAAMruE,IAENgZ,EAAW,iBAAAxrD,OAAkB2G,EAAlB,mBAAwC6L,IAG3Dg5C,EAAYhzD,UAAKgF,EAAjB,OAAAwC,OAAmC2G,EAAnC,aAIR2yG,EAAU1gH,UAAU82F,iBAAmB,SAAS+wB,EAAaC,GACzDh+G,KAAKi+G,cAAyB,EAAMF,EAAaC,IAGrDpH,EAAU1gH,UAAUmoH,OAAS,SAASh/G,GAClC,IAAMid,EAAK1V,cAAI,CAAEwV,GAAIpc,KAAKg8G,oBACtB3qG,KAAM,QACF4vC,EAAcx3B,IAAdw3B,UAEHA,GAKL3kC,EAAG3nB,EAAE,SAAU,CACX0b,MAAO,kCACPksG,aAAct7D,IAElBjhD,KAAKsd,WAAWnF,OACZmE,EACA,SAAAxM,GAEI,IAAIwuG,EAAYpjE,EAAEprC,GAAQ2pB,KAAK,UAAU7sB,KAAK,cAE1C0xG,IACAA,EAAYF,mBAAmBE,IAEnCx1F,EAAOnZ,KAAP,oBAAArS,OAAgCghH,GAAaxuG,GAC7C2Z,IAASw3B,eAAYnmD,EACrBuE,EAASi/G,IAEb,SAAA7uG,GAGIoxB,EAAqBC,iBAAiB,IAAI3iC,MAF3B,iBAGf2qB,EAAOrZ,MAHQ,eAGMA,MAzBzBpQ,yyCChkBR,IAAMypB,EAASH,oBAAUQ,GASnBo1F,cAQF,SAAAA,EAAYn0F,EAAMG,EAAc8qB,GAAW,IAAA3N,EAAA,mGAAAJ,CAAAtnC,KAAAu+G,IACvC72E,EAAAH,EAAAvnC,KAAAwnC,EAAA+2E,GAAA9pH,KAAAuL,QACKoqB,KAAOA,EACZsd,EAAKnd,aAAeA,EACpBmd,EAAK6oB,SAAW,GAChB7oB,EAAK82E,aAAenpE,EAAUqb,IAC9BhpB,EAAK+2E,aAAeppE,EAAUoY,IAC9B/lB,EAAK41B,iBAAmB,CACpBohD,qBAAqB,EACrBC,qBAAqB,GATcj3E,wPARVk3E,2CAyB5BthG,GACD46D,EAAA1wC,EAAA+2E,EAAAroH,WAAA,OAAA8J,MAAAvL,KAAAuL,KAAWsd,GACXtd,KAAKsd,WAAWxF,WAAW9X,KAAK6+G,SAAS/oH,KAAKkK,MAC1C,oBAAqB,KAAM,MAAO,KAAM,uCAOvCsc,GACL,IAAMjG,EAAM6kC,EAAE5+B,GAAImd,KAAK,UAAU7sB,KAAK,OAChC8xB,EAASwc,EAAE5+B,GAAImd,KAAK,UAAU7sB,KAAK,UACnCkyG,EAAUxiG,EAAGrO,aAAa,QAG1B8wG,EAAMn4G,cAAI,CAAEyK,KAAM,SACpB+K,GAAI0iG,EACJ5/G,GAAIod,EAAGrO,aAAa,QAGxB6a,EAAOzZ,IAAP,aAAA/R,OAAwBohC,EAAxB,UAAAphC,OAAuCwhH,GAAWxiG,GAClD,IAAI0iG,EAAOh/G,KAAKuwD,SAASl6C,GAEzB,GAAe,qBAAXqoB,EAA+B,CAC/B,IAAKsgF,EAaD,OAZAD,EAAIr4G,MAAM,CAAE2K,KAAM,UAClB0tG,EAAIpqH,EAAE,QAAS,CAAE0c,KAAM,WAClB1c,EAAE,iBAAkB,CACjB0b,MAAO,wCAEVE,KACA5b,EAAE,kBAAmB,CAClB0b,MAAO,6BAEfyY,EAAOlZ,KAAK,qBAAsB0M,GAClCtc,KAAKsd,WAAWjG,KAAK0nG,IAEd,EAIX,GAAID,IAAYE,EAAK3hD,UAcjB,OAbAv0C,EAAOlZ,KACH,8BAA+ByG,EAAK2oG,EAAK3hD,UAAW/gD,GACxDyiG,EAAIr4G,MAAM,CAAE2K,KAAM,UAClB0tG,EAAIpqH,EAAE,QAAS,CAAE0c,KAAM,WAClB1c,EAAE,iBAAkB,CACjB0b,MAAO,wCAEVE,KACA5b,EAAE,kBAAmB,CAClB0b,MAAO,6BAEfrQ,KAAKsd,WAAWjG,KAAK0nG,IAEd,OAER,QAAajkH,IAATkkH,EAYP,OATAD,EAAIr4G,MAAM,CAAE2K,KAAM,UAClB0tG,EAAIpqH,EAAE,QAAS,CAAE0c,KAAM,WAClB1c,EAAE,sBAAuB,CACtB0b,MAAO,wCAEVE,KACLuY,EAAOlZ,KAAK,uBAAwByG,EAAKiG,GACzCtc,KAAKsd,WAAWjG,KAAK0nG,IAEd,EAEX,IAAM3hG,EAAMlpB,OAAOm5D,YAAYjwC,MAKzBw2B,EAAgD,UAAxCptC,UAAQmI,mBAAmBmwG,GAIzC,OAAQpgF,GACR,IAAK,mBACD5V,EAAOzZ,IAAI,sCAAuC+N,GAClD,IAAM6hG,EAAa/jE,EAAE5+B,GAAImd,KAAK,qBAE9B,GAAIwlF,GAAcA,EAAWhiH,OAAS,EAAG,CACrC,IAAMupG,EAAayY,EAAWryG,KAAK,SAC7B65F,EAAawY,EAAWryG,KAAK,SAEnC5M,KAAKuqB,aAAa2C,KACdilC,IAAWj4D,uBACI,SAAfssG,EACe,SAAfC,GAGR39E,EAAOnZ,KAAP,wBAAArS,OAC4BwhH,EAD5B,QAAAxhH,OAEWs2C,EAAQ,GAAK,QAFxB,SAGAorE,EACM,IAAI7hD,IACFjiB,EAAE5+B,GAAImd,KAAK,UAAU7sB,KAAK,OAC1BsuC,EAAE5+B,GAAI1P,KAAK,MACXkyG,EACA9+G,KAAKsd,WACLtd,KAAKs9D,iBACL1pB,EAAQ5zC,KAAKy+G,aAAez+G,KAAKw+G,aACjC5qE,GACgB,GAExB5zC,KAAKuwD,SAASyuD,EAAK3oG,KAAO2oG,EAE1Bh/G,KAAKuqB,aAAa2C,KAAKilC,IAAWx7D,cAC9BqoH,EAAM9jE,EAAE5+B,GAAImd,KAAK,WAAYrc,GACjC,MAEJ,IAAK,iBACDpd,KAAKuqB,aAAa2C,KACdilC,IAAWz7D,cAAesoH,EAAM9jE,EAAE5+B,GAAImd,KAAK,YAC/C,MAEJ,IAAK,iBACDulF,EAAKE,eAAehkE,EAAE5+B,GAAImd,KAAK,YAC/B,MAEJ,IAAK,iBACDz5B,KAAKuqB,aAAa2C,KACdilC,IAAW73D,eAAgB0kH,EAAM9jE,EAAE5+B,GAAImd,KAAK,YAChD,MAEJ,IAAK,oBACD3Q,EAAOzZ,IAAI,iBAAkB2vG,EAAK3oG,KAClC,IAAI+uD,EAAkB,KAClBC,EAAa,KAEbnqB,EAAE5+B,GAAImd,KAAK,kBAAkBx8B,SAC7BmoE,EACMlqB,EAAE5+B,GAAImd,KAAK,yBAAyB,GAAG7tB,QAC7Cy5D,EAAanqB,EAAE5+B,GAAImd,KAAK,uBAAuB1sB,QAEnD/M,KAAKmlE,UAAU65C,EAAK3oG,IAAK+uD,EAAiBC,GAC1CrlE,KAAKuqB,aAAa2C,KAAKilC,IAAWv7D,WAC9BooH,EAAM55C,EAAiBC,GAC3B,MAEJ,IAAK,oBACDv8C,EAAOnZ,KAAK,iCAAkCyN,GAC9C+M,IAAW+K,cAAc2K,YACrB/B,IACA,CACI2vB,IAAK7Z,EACLr+C,MAAO6nB,KAGf4hG,EAAKG,iBAAiBjkE,EAAE5+B,GAAImd,KAAK,WAAY,WACzC,IAAM2lF,EAAclrH,OAAOm5D,YAAYjwC,MAEvC0L,EAAOnZ,KAAK,oCAAqCyvG,GACjDj1F,IAAW+K,cAAc2K,YACrB9B,IACA,CACI0vB,IAAK7Z,EACLr+C,MAAO6pH,MAEhB,SAAA3vG,GACCoxB,IAAqBC,iBAAiBrxB,GACtCqZ,EAAOrZ,MAAM,2BAA4BA,GACzCuvG,EAAKK,wBAET,MACJ,IAAK,YACL,IAAK,aACDL,EAAKM,gBAAgBpkE,EAAE5+B,GAAImd,KAAK,oBAChC,MACJ,IAAK,eACL,IAAK,gBACDulF,EAAKO,mBAAmBrkE,EAAE5+B,GAAImd,KAAK,oBACnC,MACJ,QACI3Q,EAAOlZ,KAAK,gCAAiC8uB,GAC7CqgF,EAAIr4G,MAAM,CAAE2K,KAAM,UAClB0tG,EAAIpqH,EAAE,QAAS,CAAE0c,KAAM,WAClB1c,EAAE,cACC,CAAE0b,MAAO,wCACZE,KAKT,OAFAvQ,KAAKsd,WAAWjG,KAAK0nG,IAEd,8CAUSS,EAAI70D,GACpB,IAAMq0D,EACA,IAAI7hD,IACFrjC,IAAW+1B,gBAAgB,IAC3B2vD,EACA70D,EACA3qD,KAAKsd,WACLtd,KAAKs9D,iBACLt9D,KAAKy+G,cACK,GACM,GAIxB,OAFAz+G,KAAKuwD,SAASyuD,EAAK3oG,KAAO2oG,EAEnBA,oCASD3oG,EAAK+uD,EAAiBC,GACxBrlE,KAAKuwD,SAASp6D,eAAekgB,KACI,UAA7BrW,KAAKuwD,SAASl6C,GAAKquC,OACnB1kD,KAAKuwD,SAASl6C,GAAKopG,aAAar6C,EAAiBC,UAE9CrlE,KAAKuwD,SAASl6C,wDAOD,IAAAq1B,EAAA1rC,KAaxBA,KAAKsd,WAAWnF,OACZvR,cAAI,CAAEyK,KAAM,MACR+K,GAAIpc,KAAKsd,WAAWvX,SACnBpR,EAAE,WAAY,CAAE0b,MAAO,wBAC5B,SAAAk8B,GACI,IAAMmzE,EAAa,GAEnBxkE,EAAE3O,GAAK9S,KAAK,qBAAqBwhB,KAAK,SAACtC,EAAKhtC,GAGxC,IAAMg0G,EAAO,GACPtuG,GAFN1F,EAAKuvC,EAAEvvC,IAESiB,KAAK,QAErB,OAAQyE,GACR,IAAK,OACDsuG,EAAK7vE,IAAL,QAAAxyC,OAAmBqO,EAAGiB,KAAK,SACvBjB,EAAGiB,KAAK,UACR+yG,EAAK7vE,KAAL,IAAAxyC,OAAgBqO,EAAGiB,KAAK,UAE5B8yG,EAAW5hH,KAAK6hH,GAChB,MACJ,IAAK,OACL,IAAK,QACDA,EAAK7vE,IAAL,GAAAxyC,OAAc+T,EAAd,KACA,IAAMuvC,EAAWj1C,EAAGiB,KAAK,YAKzB,GAAIg0C,EAAU,CACV,IAAMlkC,EACAmrB,UAAUiV,UAAUpgC,MAClB,4BAEJA,GAAS8E,SAAS9E,EAAM,GAAI,IAAM,GAClCijG,EAAK7vE,KAAL,GAAAxyC,OAAesjD,EAAf,KAGA++D,EAAK/+D,SAAWA,EAGxB++D,EAAK7vE,KAAOnkC,EAAGiB,KAAK,QACPjB,EAAGiB,KAAK,UAGjB+yG,EAAK7vE,KAAL,IAAAxyC,OAAgBqO,EAAGiB,KAAK,UAE5B,IAAM6b,EAAY9c,EAAGiB,KAAK,aAEtB6b,GAA2B,QAAdA,IACbk3F,EAAK7vE,KAAL,cAAAxyC,OAA0BmrB,IAG9Bk3F,EAAKC,WAAaj0G,EAAGiB,KAAK,aACf+yG,EAAKC,WAChBF,EAAW5hH,KAAK6hH,MAMxB,IAAMruG,EAAUo6B,EAAKthB,KAAK9Y,QAEtBA,EAAQk8C,cAGR9hB,EAAK8yE,aAAa7tD,WACZ+uD,EAAWvmF,OAAO,SAAA9iC,GAAC,OAAIA,EAAEy5C,IAAInV,WAAW,YAG9CrpB,EAAQm8C,KAAOn8C,EAAQm8C,IAAID,cAC3B9hB,EAAK+yE,aAAa9tD,WAAa+uD,IAGpC,SAAA5lG,GACCgP,EAAOlZ,KAAK,kCAAmCkK,GAC/CgP,EAAOlZ,KAAK,mFASf,IAAAw9B,EAAAptC,KACCuD,EAAO,GAgBb,OAdAvO,OAAOq5B,KAAKruB,KAAKuwD,UAAUtvD,QAAQ,SAAAoV,GAC/B,IACMmyC,EADUpb,EAAKmjB,SAASl6C,GACXsV,eAEf68B,GAAMA,EAAGq3D,YAETt8G,EAAI,UAAAjG,OAAW+Y,IAAS,CACpBwpG,UAAWr3D,EAAGq3D,UACdhsF,MAAO20B,EAAG30B,MACVic,IAAK57C,OAAO2vB,SAASqiE,SAK1B3iF,uCAYA,SAASytD,EAAW/E,EAAM1hC,EAAc8qB,GACnD7uC,UAAQ2J,oBACJ,SACA,IAAIouG,EAAuBtyD,EAAM1hC,EAAc8qB,qEChavD,SAAAs7B,EAAAmvC,GAAA,IAAAjlH;;;;;;;;;;;;;;;CASA,WAEA,IAGAjH,EAAAmsH,EAHAzyG,EAAA,GAeA,SAAA0yG,EAAAC,GACA,IAAAC,GAAA,EACA,kBACA,GAAAA,EAAA,UAAA/hH,MAAA,gCACA+hH,GAAA,EACAD,EAAAliH,MAAAnK,EAAAiK,YAdA,OADAjK,EAAAoM,QAEA+/G,EAAAnsH,EAAA0Z,OAGAA,EAAA6yG,WAAA,WAEA,OADAvsH,EAAA0Z,MAAAyyG,EACAzyG,GAcA,IAAA8yG,EAAAprH,OAAAkB,UAAAuK,SAEA4/G,EAAAjgH,MAAAG,SAAA,SAAAxE,GACA,yBAAAqkH,EAAA3rH,KAAAsH,IAGAukH,EAAA,SAAAr7D,EAAAx3B,GACA,GAAAw3B,EAAAhkD,QACA,OAAAgkD,EAAAhkD,QAAAwsB,GAEA,QAAAn5B,EAAA,EAAuBA,EAAA2wD,EAAAhoD,OAAgB3I,GAAA,EACvCm5B,EAAAw3B,EAAA3wD,KAAA2wD,IAIAs7D,EAAA,SAAAt7D,EAAAx3B,GACA,GAAAw3B,EAAAloD,IACA,OAAAkoD,EAAAloD,IAAA0wB,GAEA,IAAAyuD,EAAA,GAIA,OAHAokC,EAAAr7D,EAAA,SAAAxiD,EAAAnO,EAAA0O,GACAk5E,EAAAp+E,KAAA2vB,EAAAhrB,EAAAnO,EAAA0O,MAEAk5E,GAaAskC,EAAA,SAAAzkH,GACA,GAAA/G,OAAAq5B,KACA,OAAAr5B,OAAAq5B,KAAAtyB,GAEA,IAAAsyB,EAAA,GACA,QAAAjtB,KAAArF,EACAA,EAAA5F,eAAAiL,IACAitB,EAAAvwB,KAAAsD,GAGA,OAAAitB,QAMA,IAAAsiD,KAAA,UAgBArjE,EAAAmkE,SAAAd,EAAAc,SAEAnkE,EAAAwyG,kBADA,IAAAA,EACA,SAAAG,GAEAH,EAAAG,IAIA3yG,EAAAmkE,UAvBA,mBAAAquC,GACAxyG,EAAAmkE,SAAA,SAAAwuC,GAEAH,EAAAG,IAEA3yG,EAAAwyG,aAAAxyG,EAAAmkE,WAGAnkE,EAAAmkE,SAAA,SAAAwuC,GACArgH,WAAAqgH,EAAA,IAEA3yG,EAAAwyG,aAAAxyG,EAAAmkE,UAgBAnkE,EAAA2tC,KAAA,SAAAgK,EAAAx3B,EAAApuB,GAEA,GADAA,KAAA,cACA4lD,EAAAhoD,OACA,OAAAoC,IAEA,IAAAohH,EAAA,EAIA,SAAA9yF,EAAA7T,GACAA,GACAza,EAAAya,GACAza,EAAA,eAGAohH,GAAA,IACAx7D,EAAAhoD,QACAoC,IAXAihH,EAAAr7D,EAAA,SAAAxiD,GACAgrB,EAAAhrB,EAAAu9G,EAAAryF,OAeArgB,EAAArM,QAAAqM,EAAA2tC,KAEA3tC,EAAAozG,WAAA,SAAAz7D,EAAAx3B,EAAApuB,GAEA,GADAA,KAAA,cACA4lD,EAAAhoD,OACA,OAAAoC,IAEA,IAAAohH,EAAA,EACAE,EAAA,WACAlzF,EAAAw3B,EAAAw7D,GAAA,SAAA3mG,GACAA,GACAza,EAAAya,GACAza,EAAA,eAGAohH,GAAA,IACAx7D,EAAAhoD,OACAoC,IAGAshH,OAKAA,KAEArzG,EAAAszG,cAAAtzG,EAAAozG,WAEApzG,EAAAuzG,UAAA,SAAA57D,EAAA67D,EAAArzF,EAAApuB,GACA0hH,EAAAD,GACA/iH,MAAA,MAAAknD,EAAAx3B,EAAApuB,KAEAiO,EAAA0zG,aAAA1zG,EAAAuzG,UAEA,IAAAE,EAAA,SAAAD,GAEA,gBAAA77D,EAAAx3B,EAAApuB,GAEA,GADAA,KAAA,cACA4lD,EAAAhoD,QAAA6jH,GAAA,EACA,OAAAzhH,IAEA,IAAAohH,EAAA,EACAQ,EAAA,EACAC,EAAA,GAEA,SAAAC,IACA,GAAAV,GAAAx7D,EAAAhoD,OACA,OAAAoC,IAGA,KAAA6hH,EAAAJ,GAAAG,EAAAh8D,EAAAhoD,QAEAikH,GAAA,EACAzzF,EAAAw3B,GAFAg8D,GAAA,GAEA,YAAAnnG,GACAA,GACAza,EAAAya,GACAza,EAAA,eAIA6hH,GAAA,GADAT,GAAA,IAEAx7D,EAAAhoD,OACAoC,IAGA8hH,OApBA,KA8BAC,EAAA,SAAAnB,GACA,kBACA,IAAAriH,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,WACA,OAAAoiH,EAAAliH,MAAA,MAAAuP,EAAA2tC,MAAA39C,OAAAM,MASAyjH,EAAA,SAAApB,GACA,kBACA,IAAAriH,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,WACA,OAAAoiH,EAAAliH,MAAA,MAAAuP,EAAAozG,YAAApjH,OAAAM,MAKA0jH,EAAA,SAAAC,EAAAt8D,EAAAx3B,EAAApuB,GAIA,GAHA4lD,EAAAs7D,EAAAt7D,EAAA,SAAAxiD,EAAAnO,GACA,OAAoBgK,MAAAhK,EAAAiB,MAAAkN,KAEpBpD,EAMS,CACT,IAAA68E,EAAA,GACAqlC,EAAAt8D,EAAA,SAAAxiD,EAAApD,GACAouB,EAAAhrB,EAAAlN,MAAA,SAAAukB,EAAAqgC,GACA+hC,EAAAz5E,EAAAnE,OAAA67C,EACA96C,EAAAya,MAEa,SAAAA,GACbza,EAAAya,EAAAoiE,UAbAqlC,EAAAt8D,EAAA,SAAAxiD,EAAApD,GACAouB,EAAAhrB,EAAAlN,MAAA,SAAAukB,GACAza,EAAAya,QAeAxM,EAAAvQ,IAAAqkH,EAAAE,GACAh0G,EAAAk0G,UAAAH,EAAAC,GACAh0G,EAAAm0G,SAAA,SAAAx8D,EAAA67D,EAAArzF,EAAApuB,GACA,OAAAqiH,EAAAZ,EAAAY,CAAAz8D,EAAAx3B,EAAApuB,IAGA,IAAAqiH,EAAA,SAAAZ,GACA,OA3CA,SAAAA,EAAAb,GACA,kBACA,IAAAriH,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,WACA,OAAAoiH,EAAAliH,MAAA,MAAAgjH,EAAAD,IAAAxjH,OAAAM,KAwCA+jH,CAAAb,EAAAQ,IAKAh0G,EAAA2nG,OAAA,SAAAhwD,EAAA28D,EAAAn0F,EAAApuB,GACAiO,EAAAozG,WAAAz7D,EAAA,SAAAxiD,EAAApD,GACAouB,EAAAm0F,EAAAn/G,EAAA,SAAAqX,EAAAqgC,GACAynE,EAAAznE,EACA96C,EAAAya,MAES,SAAAA,GACTza,EAAAya,EAAA8nG,MAIAt0G,EAAAu0G,OAAAv0G,EAAA2nG,OAEA3nG,EAAAw0G,MAAAx0G,EAAA2nG,OAEA3nG,EAAAy0G,YAAA,SAAA98D,EAAA28D,EAAAn0F,EAAApuB,GACA,IAAA2iH,EAAAzB,EAAAt7D,EAAA,SAAAxiD,GACA,OAAAA,IACSosE,UACTvhE,EAAA2nG,OAAA+M,EAAAJ,EAAAn0F,EAAApuB,IAGAiO,EAAA20G,MAAA30G,EAAAy0G,YAEA,IAAAG,EAAA,SAAAX,EAAAt8D,EAAAx3B,EAAApuB,GACA,IAAA68E,EAAA,GAIAqlC,EAHAt8D,EAAAs7D,EAAAt7D,EAAA,SAAAxiD,EAAAnO,GACA,OAAoBgK,MAAAhK,EAAAiB,MAAAkN,KAEpB,SAAAA,EAAApD,GACAouB,EAAAhrB,EAAAlN,MAAA,SAAA4kD,GACAA,GACA+hC,EAAAp+E,KAAA2E,GAEApD,OAES,SAAAya,GACTza,EAAAkhH,EAAArkC,EAAAjyC,KAAA,SAAAjnC,EAAAC,GACA,OAAAD,EAAA1E,MAAA2E,EAAA3E,QACa,SAAAmE,GACb,OAAAA,EAAAlN,YAIA+X,EAAA6rB,OAAAioF,EAAAc,GACA50G,EAAA60G,aAAAd,EAAAa,GAEA50G,EAAA80G,OAAA90G,EAAA6rB,OACA7rB,EAAA+0G,aAAA/0G,EAAA60G,aAEA,IAAAG,EAAA,SAAAf,EAAAt8D,EAAAx3B,EAAApuB,GACA,IAAA68E,EAAA,GAIAqlC,EAHAt8D,EAAAs7D,EAAAt7D,EAAA,SAAAxiD,EAAAnO,GACA,OAAoBgK,MAAAhK,EAAAiB,MAAAkN,KAEpB,SAAAA,EAAApD,GACAouB,EAAAhrB,EAAAlN,MAAA,SAAA4kD,GACAA,GACA+hC,EAAAp+E,KAAA2E,GAEApD,OAES,SAAAya,GACTza,EAAAkhH,EAAArkC,EAAAjyC,KAAA,SAAAjnC,EAAAC,GACA,OAAAD,EAAA1E,MAAA2E,EAAA3E,QACa,SAAAmE,GACb,OAAAA,EAAAlN,YAIA+X,EAAAg+B,OAAA81E,EAAAkB,GACAh1G,EAAAi1G,aAAAlB,EAAAiB,GAEA,IAAAplE,EAAA,SAAAqkE,EAAAt8D,EAAAx3B,EAAA+0F,GACAjB,EAAAt8D,EAAA,SAAAxiD,EAAApD,GACAouB,EAAAhrB,EAAA,SAAAqN,GACAA,GACA0yG,EAAA//G,GACA+/G,EAAA,cAGAnjH,OAGS,SAAAya,GACT0oG,OAGAl1G,EAAAu9D,OAAAu2C,EAAAlkE,GACA5vC,EAAAm1G,aAAApB,EAAAnkE,GAEA5vC,EAAAkmC,KAAA,SAAAyR,EAAAx3B,EAAA+0F,GACAl1G,EAAA2tC,KAAAgK,EAAA,SAAAxiD,EAAApD,GACAouB,EAAAhrB,EAAA,SAAA03C,GACAA,IACAqoE,GAAA,GACAA,EAAA,cAEAnjH,OAES,SAAAya,GACT0oG,GAAA,MAIAl1G,EAAAo1G,IAAAp1G,EAAAkmC,KAEAlmC,EAAA6uE,MAAA,SAAAl3B,EAAAx3B,EAAA+0F,GACAl1G,EAAA2tC,KAAAgK,EAAA,SAAAxiD,EAAApD,GACAouB,EAAAhrB,EAAA,SAAA03C,GACAA,IACAqoE,GAAA,GACAA,EAAA,cAEAnjH,OAES,SAAAya,GACT0oG,GAAA,MAIAl1G,EAAAopC,IAAAppC,EAAA6uE,MAEA7uE,EAAAq1G,OAAA,SAAA19D,EAAAx3B,EAAApuB,GACAiO,EAAAvQ,IAAAkoD,EAAA,SAAAxiD,EAAApD,GACAouB,EAAAhrB,EAAA,SAAAqX,EAAA8oG,GACA9oG,EACAza,EAAAya,GAGAza,EAAA,MAAoC9J,MAAAkN,EAAAmgH,gBAG3B,SAAA9oG,EAAAoiE,GACT,GAAApiE,EACA,OAAAza,EAAAya,GAOAza,EAAA,KAAAkhH,EAAArkC,EAAAjyC,KAJA,SAAA44E,EAAAC,GACA,IAAA9/G,EAAA6/G,EAAAD,SAAA3/G,EAAA6/G,EAAAF,SACA,OAAA5/G,EAAAC,GAAA,EAAAD,EAAAC,EAAA,MAEA,SAAAR,GACA,OAAAA,EAAAlN,YAMA+X,EAAAy1G,KAAA,SAAAC,EAAA3jH,GACAA,KAAA,aACA,IAAAgvB,EAAAmyF,EAAAwC,GACAC,EAAA50F,EAAApxB,OACA,IAAAgmH,EACA,OAAA5jH,IAGA,IAAA68E,EAAA,GAEAt2B,EAAA,GACAxS,EAAA,SAAA6sE,GACAr6D,EAAAvqB,QAAA4kF,IAUAiD,EAAA,WACAD,IACA3C,EAAA16D,EAAAhqD,MAAA,YAAAqkH,GACAA,OAIA7sE,EAAA,WACA,IAAA6vE,EAAA,CACA,IAAAE,EAAA9jH,EAEAA,EAAA,aAEA8jH,EAAA,KAAAjnC,MAIAokC,EAAAjyF,EAAA,SAAAjtB,GACA,IAAAklE,EAAA+5C,EAAA2C,EAAA5hH,IAAA4hH,EAAA5hH,GAAA,CAAA4hH,EAAA5hH,IACAgiH,EAAA,SAAAtpG,GACA,IAAAlc,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,UAAA,GAIA,GAHAD,EAAAX,QAAA,IACAW,IAAA,IAEAkc,EAAA,CACA,IAAAupG,EAAA,GACA/C,EAAAE,EAAAtkC,GAAA,SAAAonC,GACAD,EAAAC,GAAApnC,EAAAonC,KAEAD,EAAAjiH,GAAAxD,EACAyB,EAAAya,EAAAupG,GAEAhkH,EAAA,kBAGA68E,EAAA96E,GAAAxD,EACA0P,EAAAwyG,aAAAoD,IAGAK,EAAAj9C,EAAA1qE,MAAA,EAAAkF,KAAA6iB,IAAA2iD,EAAArpE,OAAA,QACAumH,EAAA,WACA,OAlaA/1F,EAkaA,SAAAzqB,EAAAP,GACA,OAAAO,GAAAk5E,EAAA/lF,eAAAsM,IAnaAm/G,GAoaiB,IApajB38D,EAkaAs+D,GAjaAtO,OACAhwD,EAAAgwD,OAAAxnF,EAAAm0F,IAEAtB,EAAAr7D,EAAA,SAAAxiD,EAAAnO,EAAA0O,GACA4+G,EAAAn0F,EAAAm0F,EAAAn/G,EAAAnO,EAAA0O,KAEA4+G,MA6ZiB1lC,EAAA/lF,eAAAiL,GApajB,IAAA6jD,EAAAx3B,EAAAm0F,GAsaA,GAAA4B,IACAl9C,IAAArpE,OAAA,GAAAmmH,EAAAlnC,OAEA,CACA,IAAA7vD,EAAA,WACAm3F,OA1DA,SAAAvD,GACA,QAAA3rH,EAAA,EAA2BA,EAAAsxD,EAAA3oD,OAAsB3I,GAAA,EACjD,GAAAsxD,EAAAtxD,KAAA2rH,EAEA,YADAr6D,EAAAroD,OAAAjJ,EAAA,GAwDAm4B,CAAAJ,GACAi6C,IAAArpE,OAAA,GAAAmmH,EAAAlnC,KAGA9oC,EAAA/mB,OAKA/e,EAAAm2G,MAAA,SAAAC,EAAAp9C,EAAAjnE,GACA,IACAskH,EAAA,GAEA,mBAAAD,IACArkH,EAAAinE,EACAA,EAAAo9C,EACAA,EANA,GASAA,EAAAliG,SAAAkiG,EAAA,KATA,EAUA,IAAAE,EAAA,SAAAC,EAAAC,GAQA,IAPA,IAAAC,EAAA,SAAAz9C,EAAA09C,GACA,gBAAAC,GACA39C,EAAA,SAAAxsD,EAAAhK,GACAm0G,GAAAnqG,GAAAkqG,EAAA,CAA8DlqG,MAAAhK,YACzCg0G,KAGrBJ,GACAC,EAAA7lH,KAAAimH,EAAAz9C,IAAAo9C,GAAA,KAEAp2G,EAAA42G,OAAAP,EAAA,SAAAh2F,EAAApqB,GACAA,MAAAtG,OAAA,IACA4mH,GAAAxkH,GAAAkE,EAAAuW,IAAAvW,EAAAuM,WAIA,OAAAzQ,EAAAukH,OAGAt2G,EAAA62G,UAAA,SAAAnB,EAAA3jH,GAEA,GADAA,KAAA,cACAghH,EAAA2C,GAAA,CACA,IAAAlpG,EAAA,IAAA3b,MAAA,6DACA,OAAAkB,EAAAya,GAEA,IAAAkpG,EAAA/lH,OACA,OAAAoC,IAEA,IAAA+kH,EAAA,SAAA32F,GACA,gBAAA3T,GACA,GAAAA,EACAza,EAAAtB,MAAA,KAAAF,WACAwB,EAAA,iBAEA,CACA,IAAAzB,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,UAAA,GACA6vB,EAAAD,EAAAC,OACAA,EACA9vB,EAAAE,KAAAsmH,EAAA12F,IAGA9vB,EAAAE,KAAAuB,GAEAiO,EAAAwyG,aAAA,WACAryF,EAAA1vB,MAAA,KAAAH,QAKAwmH,EAAA92G,EAAAmgB,SAAAu1F,GAAAoB,IAGA,IAAAC,EAAA,SAAA9C,EAAAyB,EAAA3jH,GAEA,GADAA,KAAA,aACAghH,EAAA2C,GACAzB,EAAAxkH,IAAAimH,EAAA,SAAA/C,EAAA5gH,GACA4gH,GACAA,EAAA,SAAAnmG,GACA,IAAAlc,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,UAAA,GACAD,EAAAX,QAAA,IACAW,IAAA,IAEAyB,EAAA5K,KAAA,KAAAqlB,EAAAlc,MAGayB,OAEb,CACA,IAAA68E,EAAA,GACAqlC,EAAAtmE,KAAAulE,EAAAwC,GAAA,SAAA5hH,EAAA/B,GACA2jH,EAAA5hH,GAAA,SAAA0Y,GACA,IAAAlc,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,UAAA,GACAD,EAAAX,QAAA,IACAW,IAAA,IAEAs+E,EAAA96E,GAAAxD,EACAyB,EAAAya,MAEa,SAAAA,GACbza,EAAAya,EAAAoiE,OAKA5uE,EAAAg3G,SAAA,SAAAtB,EAAA3jH,GACAglH,EAAA,CAAmBtnH,IAAAuQ,EAAAvQ,IAAAk+C,KAAA3tC,EAAA2tC,MAAmC+nE,EAAA3jH,IAGtDiO,EAAAi3G,cAAA,SAAAvB,EAAAlC,EAAAzhH,GACAglH,EAAA,CAAmBtnH,IAAA2kH,EAAAZ,GAAA7lE,KAAA8lE,EAAAD,IAAiDkC,EAAA3jH,IAGpEiO,EAAA42G,OAAA,SAAAlB,EAAA3jH,GAEA,GADAA,KAAA,aACAghH,EAAA2C,GACA11G,EAAAk0G,UAAAwB,EAAA,SAAA/C,EAAA5gH,GACA4gH,GACAA,EAAA,SAAAnmG,GACA,IAAAlc,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,UAAA,GACAD,EAAAX,QAAA,IACAW,IAAA,IAEAyB,EAAA5K,KAAA,KAAAqlB,EAAAlc,MAGayB,OAEb,CACA,IAAA68E,EAAA,GACA5uE,EAAAozG,WAAAF,EAAAwC,GAAA,SAAA5hH,EAAA/B,GACA2jH,EAAA5hH,GAAA,SAAA0Y,GACA,IAAAlc,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,UAAA,GACAD,EAAAX,QAAA,IACAW,IAAA,IAEAs+E,EAAA96E,GAAAxD,EACAyB,EAAAya,MAEa,SAAAA,GACbza,EAAAya,EAAAoiE,OAKA5uE,EAAAmgB,SAAA,SAAAu1F,GACA,IAAAwB,EAAA,SAAAlmH,GACA,IAAA2hH,EAAA,WAIA,OAHA+C,EAAA/lH,QACA+lH,EAAA1kH,GAAAP,MAAA,KAAAF,WAEAoiH,EAAAvyF,QAKA,OAHAuyF,EAAAvyF,KAAA,WACA,OAAApvB,EAAA0kH,EAAA/lH,OAAA,EAAAunH,EAAAlmH,EAAA,SAEA2hH,GAEA,OAAAuE,EAAA,IAGAl3G,EAAAvP,MAAA,SAAAkiH,GACA,IAAAriH,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,UAAA,GACA,kBACA,OAAAoiH,EAAAliH,MACA,KAAAH,EAAAN,OAAA8C,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,eAKA,IAAAwC,EAAA,SAAAkhH,EAAAt8D,EAAAg7D,EAAA5gH,GACA,IAAAjK,EAAA,GACAmsH,EAAAt8D,EAAA,SAAAxiD,EAAAgiH,GACAxE,EAAAx9G,EAAA,SAAAqX,EAAAjW,GACAzO,IAAAkI,OAAAuG,GAAA,IACA4gH,EAAA3qG,MAES,SAAAA,GACTza,EAAAya,EAAA1kB,MAGAkY,EAAAhQ,OAAA8jH,EAAA/gH,GACAiN,EAAAo3G,aAAArD,EAAAhhH,GAEAiN,EAAAq3G,OAAA,SAAAxnH,EAAAswB,EAAApuB,GACAlC,IACAswB,EAAA,SAAA3T,GACA,GAAAA,EACA,OAAAza,EAAAya,GAEAxM,EAAAq3G,OAAAxnH,EAAAswB,EAAApuB,KAIAA,KAIAiO,EAAAs3G,SAAA,SAAAn3F,EAAAtwB,EAAAkC,GACAouB,EAAA,SAAA3T,GACA,GAAAA,EACA,OAAAza,EAAAya,GAEA,IAAAlc,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,UAAA,GACAV,EAAAY,MAAA,KAAAH,GACA0P,EAAAs3G,SAAAn3F,EAAAtwB,EAAAkC,GAGAA,OAKAiO,EAAAu3G,MAAA,SAAA1nH,EAAAswB,EAAApuB,GACAlC,IASAkC,IARAouB,EAAA,SAAA3T,GACA,GAAAA,EACA,OAAAza,EAAAya,GAEAxM,EAAAu3G,MAAA1nH,EAAAswB,EAAApuB,MAQAiO,EAAAw3G,QAAA,SAAAr3F,EAAAtwB,EAAAkC,GACAouB,EAAA,SAAA3T,GACA,GAAAA,EACA,OAAAza,EAAAya,GAEA,IAAAlc,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,UAAA,GACAV,EAAAY,MAAA,KAAAH,GAIAyB,IAHAiO,EAAAw3G,QAAAr3F,EAAAtwB,EAAAkC,MAQAiO,EAAA6wD,MAAA,SAAA4mD,EAAAC,GAIA,SAAAC,EAAApgH,EAAAtB,EAAAozC,EAAAt3C,GAOA,GANAwF,EAAAo8G,UACAp8G,EAAAo8G,SAAA,GAEAZ,EAAA98G,KACAA,EAAA,CAAAA,IAEA,GAAAA,EAAAtG,OAEA,OAAAqQ,EAAAwyG,aAAA,WACAj7G,EAAAqgH,OACArgH,EAAAqgH,UAIA5E,EAAA/8G,EAAA,SAAA+iE,GACA,IAAA7qC,EAAA,CACAl4B,KAAA+iE,EACAjnE,SAAA,mBAAAA,IAAA,MAGAs3C,EACA9xC,EAAAm+G,MAAA3nF,QAAAI,GAEA52B,EAAAm+G,MAAAllH,KAAA29B,GAGA52B,EAAAsgH,WAAAtgH,EAAAm+G,MAAA/lH,SAAA4H,EAAAmgH,aACAngH,EAAAsgH,YAEA73G,EAAAwyG,aAAAj7G,EAAA8rE,gBAjCA71E,IAAAkqH,IACAA,EAAA,GAoCA,IAAAI,EAAA,EACAvgH,EAAA,CACAm+G,MAAA,GACAgC,cACAG,UAAA,KACAE,MAAA,KACAH,MAAA,KACAjE,SAAA,EACA/sG,QAAA,EACApW,KAAA,SAAAyF,EAAAlE,GACA4lH,EAAApgH,EAAAtB,GAAA,EAAAlE,IAEAimH,KAAA,WACAzgH,EAAAqgH,MAAA,KACArgH,EAAAm+G,MAAA,IAEA3nF,QAAA,SAAA93B,EAAAlE,GACA4lH,EAAApgH,EAAAtB,GAAA,EAAAlE,IAEAsxE,QAAA,WACA,IAAA9rE,EAAAqP,QAAAkxG,EAAAvgH,EAAAmgH,aAAAngH,EAAAm+G,MAAA/lH,OAAA,CACA,IAAAqpE,EAAAzhE,EAAAm+G,MAAA5sF,QACAvxB,EAAAwgH,OAAA,IAAAxgH,EAAAm+G,MAAA/lH,QACA4H,EAAAwgH,QAEAD,GAAA,EACA,IAUAX,EAAAzE,EAVA,WACAoF,GAAA,EACA9+C,EAAAjnE,UACAinE,EAAAjnE,SAAAtB,MAAAuoE,EAAAzoE,WAEAgH,EAAAqgH,OAAArgH,EAAAm+G,MAAA/lH,OAAAmoH,IAAA,GACAvgH,EAAAqgH,QAEArgH,EAAA8rE,YAGAo0C,EAAAz+C,EAAA/iE,KAAAkhH,KAGAxnH,OAAA,WACA,OAAA4H,EAAAm+G,MAAA/lH,QAEAikH,QAAA,WACA,OAAAkE,GAEAG,KAAA,WACA,OAAA1gH,EAAAm+G,MAAA/lH,OAAAmoH,IAAA,GAEAnwG,MAAA,YACA,IAAApQ,EAAAqP,SACArP,EAAAqP,QAAA,EACArP,EAAA8rE,YAEAz7D,OAAA,YACA,IAAArQ,EAAAqP,SACArP,EAAAqP,QAAA,EACArP,EAAA8rE,aAGA,OAAA9rE,GAGAyI,EAAAk4G,cAAA,SAAAT,EAAAC,GAEA,SAAAS,EAAAziH,EAAAC,GACA,OAAAD,EAAAqY,SAAApY,EAAAoY,SAiDA,IAAAxW,EAAAyI,EAAA6wD,MAAA4mD,EAAAC,GAUA,OAPAngH,EAAA/G,KAAA,SAAAyF,EAAA8X,EAAAhc,IAnCA,SAAAwF,EAAAtB,EAAA8X,EAAAhc,GAOA,GANAwF,EAAAo8G,UACAp8G,EAAAo8G,SAAA,GAEAZ,EAAA98G,KACAA,EAAA,CAAAA,IAEA,GAAAA,EAAAtG,OAEA,OAAAqQ,EAAAwyG,aAAA,WACAj7G,EAAAqgH,OACArgH,EAAAqgH,UAIA5E,EAAA/8G,EAAA,SAAA+iE,GACA,IAAA7qC,EAAA,CACAl4B,KAAA+iE,EACAjrD,WACAhc,SAAA,mBAAAA,IAAA,MAGAwF,EAAAm+G,MAAAzlH,OApCA,SAAAmoH,EAAAjqF,EAAAkqF,GAGA,IAFA,IAAAC,GAAA,EACAC,EAAAH,EAAAzoH,OAAA,EACA2oH,EAAAC,GAAA,CACA,IAAAptE,EAAAmtE,GAAAC,EAAAD,EAAA,OACAD,EAAAlqF,EAAAiqF,EAAAjtE,KAAA,EACAmtE,EAAAntE,EAEAotE,EAAAptE,EAAA,EAGA,OAAAmtE,EAyBAE,CAAAjhH,EAAAm+G,MAAAvnF,EAAAgqF,GAAA,IAAAhqF,GAEA52B,EAAAsgH,WAAAtgH,EAAAm+G,MAAA/lH,SAAA4H,EAAAmgH,aACAngH,EAAAsgH,YAEA73G,EAAAwyG,aAAAj7G,EAAA8rE,WASAs0C,CAAApgH,EAAAtB,EAAA8X,EAAAhc,WAIAwF,EAAAw2B,QAEAx2B,GAGAyI,EAAAy4G,MAAA,SAAAhB,EAAA9pF,GACA,IAAA+qF,GAAA,EACAhD,EAAA,GAEA+C,EAAA,CACA/C,QACA/nF,UACAkqF,UAAA,KACAE,MAAA,KACAH,MAAA,KACAe,SAAA,EACAnoH,KAAA,SAAAyF,EAAAlE,GACAghH,EAAA98G,KACAA,EAAA,CAAAA,IAEA+8G,EAAA/8G,EAAA,SAAA+iE,GACA08C,EAAAllH,KAAA,CACAyF,KAAA+iE,EACAjnE,SAAA,mBAAAA,IAAA,OAEA0mH,EAAAE,SAAA,EACAF,EAAAZ,WAAAnC,EAAA/lH,SAAAg+B,GACA8qF,EAAAZ,cAGA73G,EAAAwyG,aAAAiG,EAAAp1C,UAEAA,QAAA,SAAAA,IACA,IAAAq1C,EAAA,CACA,OAAAhD,EAAA/lH,OAGA,OAFA8oH,EAAAb,QAAAa,EAAAE,SAAAF,EAAAb,aACAa,EAAAE,SAAA,GAIA,IAAA7f,EAAA,iBAAAnrE,EACA+nF,EAAAzlH,OAAA,EAAA09B,GACA+nF,EAAAzlH,OAAA,EAAAylH,EAAA/lH,QAEA0sC,EAAA42E,EAAAna,EAAA,SAAA9/B,GACA,OAAAA,EAAA/iE,OAGAwiH,EAAAV,OAAAU,EAAAV,QACAW,GAAA,EACAjB,EAAAp7E,EAAA,WACAq8E,GAAA,EAEA,IAAApoH,EAAAC,UACAyiH,EAAAla,EAAA,SAAA7iG,GACAA,EAAAlE,UACAkE,EAAAlE,SAAAtB,MAAA,KAAAH,KAIA+yE,QAGA1zE,OAAA,WACA,OAAA+lH,EAAA/lH,QAEAikH,QAAA,WACA,OAAA8E,IAGA,OAAAD,GAGA,IAAAG,EAAA,SAAArxH,GACA,gBAAAorH,GACA,IAAAriH,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,UAAA,GACAoiH,EAAAliH,MAAA,KAAAH,EAAAN,OAAA,UAAAwc,GACA,IAAAlc,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,UAAA,GACA,oBAAA2R,UACAsK,EACAtK,QAAAC,OACAD,QAAAC,MAAAqK,GAGAtK,QAAA3a,IACAyrH,EAAA1iH,EAAA,SAAA6E,GACA+M,QAAA3a,GAAA4N,YAOA6K,EAAA+B,IAAA62G,EAAA,OACA54G,EAAA0kE,IAAAk0C,EAAA,OAKA54G,EAAA64G,QAAA,SAAAlG,EAAAmG,GACA,IAAAxE,EAAA,GACAyE,EAAA,GACAD,KAAA,SAAA3jH,GACA,OAAAA,GAEA,IAAA6jH,EAAA,WACA,IAAA1oH,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,WACAwB,EAAAzB,EAAAuc,MACAtkB,EAAAuwH,EAAAroH,MAAA,KAAAH,GACA/H,KAAA+rH,EACAt0G,EAAAmkE,SAAA,WACApyE,EAAAtB,MAAA,KAAA6jH,EAAA/rH,MAGAA,KAAAwwH,EACAA,EAAAxwH,GAAAiI,KAAAuB,IAGAgnH,EAAAxwH,GAAA,CAAAwJ,GACA4gH,EAAAliH,MAAA,KAAAH,EAAAN,OAAA,YACAskH,EAAA/rH,GAAAgI,UACA,IAAAgH,EAAAwhH,EAAAxwH,UACAwwH,EAAAxwH,GACA,QAAAvB,EAAA,EAAAC,EAAAsQ,EAAA5H,OAAiD3I,EAAAC,EAAOD,IACxDuQ,EAAAvQ,GAAAyJ,MAAA,KAAAF,iBAOA,OAFAyoH,EAAA1E,OACA0E,EAAAC,WAAAtG,EACAqG,GAGAh5G,EAAAk5G,UAAA,SAAAvG,GACA,kBACA,OAAAA,EAAAsG,YAAAtG,GAAAliH,MAAA,KAAAF,aAIAyP,EAAAo2G,MAAA,SAAAl/D,EAAA/2B,EAAApuB,GAEA,IADA,IAAAonH,EAAA,GACAnyH,EAAA,EAAuBA,EAAAkwD,EAAWlwD,IAClCmyH,EAAA3oH,KAAAxJ,GAEA,OAAAgZ,EAAAvQ,IAAA0pH,EAAAh5F,EAAApuB,IAGAiO,EAAAo5G,YAAA,SAAAliE,EAAA/2B,EAAApuB,GAEA,IADA,IAAAonH,EAAA,GACAnyH,EAAA,EAAuBA,EAAAkwD,EAAWlwD,IAClCmyH,EAAA3oH,KAAAxJ,GAEA,OAAAgZ,EAAAk0G,UAAAiF,EAAAh5F,EAAApuB,IAGAiO,EAAAq5G,IAAA,WACA,IAAAC,EAAA/oH,UACA,kBACA,IAAAkU,EAAA/R,KACApC,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,WACAwB,EAAAzB,EAAAuc,MACA7M,EAAA2nG,OAAA2R,EAAAhpH,EAAA,SAAAipH,EAAA5G,EAAAwE,GACAxE,EAAAliH,MAAAgU,EAAA80G,EAAAvpH,OAAA,YACA,IAAAwc,EAAAjc,UAAA,GACAipH,EAAA1mH,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,UAAA,GACA4mH,EAAA3qG,EAAAgtG,QAGA,SAAAhtG,EAAAoiE,GACA78E,EAAAtB,MAAAgU,EAAA,CAAA+H,GAAAxc,OAAA4+E,QAKA5uE,EAAAy5G,QAAA,WACA,OAAAz5G,EAAAq5G,IAAA5oH,MAAA,KAAAqC,MAAAlK,UAAA24E,QAAAp6E,KAAAoJ,aAGA,IAAAmpH,EAAA,SAAAzF,EAAAqF,GACA,IAAAK,EAAA,WACA,IAAAl1G,EAAA/R,KACApC,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,WACAwB,EAAAzB,EAAAuc,MACA,OAAAonG,EAAAqF,EAAA,SAAA3G,EAAAwE,GACAxE,EAAAliH,MAAAgU,EAAAnU,EAAAN,OAAA,CAAAmnH,MAEAplH,IAEA,GAAAxB,UAAAZ,OAAA,GACA,IAAAW,EAAAwC,MAAAlK,UAAA0F,MAAAnH,KAAAoJ,UAAA,GACA,OAAAopH,EAAAlpH,MAAAiC,KAAApC,GAGA,OAAAqpH,GAGA35G,EAAA45G,UAAA9F,EAAA4F,GACA15G,EAAA65G,gBAAA9F,EAAA2F,GAEA15G,EAAA85G,QAAA,SAAAnH,EAAA5gH,IACA,SAAAquB,EAAA5T,GACA,GAAAA,EAAA,CACA,GAAAza,EACA,OAAAA,EAAAya,GAEA,MAAAA,EAEAmmG,EAAAvyF,GAEAA,IAIqC35B,EAAAD,QACrCC,EAAAD,QAAAwZ,OAMSxS,KAFQD,EAAA,WACjB,OAAAyS,GACSvP,MAAAjK,EAFM,OAENC,EAAAD,QAAA+G,GAllCT,yDCcA9G,EAAOD,QAAU,CAAE42E,YAhBnB,SAAqBvlD,GACjB,IAAKA,EACD,OAAO,EAGX,IAAoB7wB,EAAVsP,EAAO,EAEjB,IAAKtP,EAAI,EAAGA,EAAI6wB,EAAOloB,OAAQ3I,IAE3BsP,GADOuhB,EAAOhjB,WAAW7N,GACVwM,KAAK4iB,IAAI,GAAIyB,EAAOloB,OAAS,EAAI3I,GAChDsP,EAAO9C,KAAK6iB,IAAW,EAAP/f,GAGpB,OAAOA,wQChBX,IAAMklB,EAASH,oBAAUQ,GAOJo1C,aAiBjB,SAAAA,EACQloD,EACA+mD,EACAC,EACA//C,EACAggD,EACAjoB,EACAkoB,gGAAaj2B,CAAAtnC,KAAAu+D,GACjBv+D,KAAKqW,IAAMA,EACXrW,KAAKo9D,SAAWA,EAChBp9D,KAAKq9D,UAAYA,EACjBr9D,KAAKsd,WAAaA,EAClBtd,KAAKs9D,iBAAmBA,EACxBt9D,KAAKq1C,UAAYA,EAOjBr1C,KAAKu9D,YAAcA,EAMnBv9D,KAAKmhE,SAAU,EAKfnhE,KAAKohE,cAAgB,GAMrBphE,KAAK4xD,KAAO,KAMZ5xD,KAAK0kD,MAAQ,KAMb1kD,KAAKm4D,IAAM,+DA6BJvG,EAAMuG,EAAK7mD,GAClB,GAAmB,OAAftR,KAAK0kD,MAAgB,CACrB,IAAM3f,EAAM,kCAAAznC,OAC4B0C,KAAKqW,IADjC,kCAAA/Y,OAEM0C,KAAK0kD,OAGvB,MADA57B,EAAOrZ,MAAMs1B,GACP,IAAI5mC,MAAM4mC,GAEpB/kC,KAAK4xD,KAAOA,EACZ5xD,KAAKm4D,IAAMA,EACXn4D,KAAK0kD,MAAQia,IACb3+D,KAAKqnH,aAAa/1G,wCASTA,6CAWIgqC,uCASb,OAAOt7C,KAAK0kD,yCAULpJ,0CAOGA,sCAeJ2P,EAAS0X,EAASrxD,wCAWhB8pC,EAAQ6P,EAAS0X,+CAMzB,OAAO3iE,KAAKu9D,YAAcv9D,KAAKo9D,SAAWp9D,KAAKq9D,+CA/G/C,OAAOr9D,KAAKu9D,YAAcv9D,KAAKo9D,SAAWp9D,KAAKq9D,+CAQ/C,OAAOr9D,KAAKu9D,YAAcv9D,KAAKq9D,UAAYr9D,KAAKo9D,++BCtFxD,IAAMt0C,EAASH,oBAAUQ,GAMJ80C,cAIjB,SAAAA,IAAc,IAAAv2B,EAAA,mGAAAJ,CAAAtnC,KAAAi+D,IACVv2B,EAAAH,EAAAvnC,KAAAwnC,EAAAy2B,GAAAxpE,KAAAuL,QAUKsnH,WAAa,IAAIh9F,IAMtBod,EAAK69D,SAAW,KAjBN79D,wPAJ8B6/E,kDA4BhC31D,GAAM,IAAAlmB,EAAA1rC,KACRwnH,EAAcxnH,KAAKulG,SAEzBvlG,KAAKulG,SAAW3zC,EACZ41D,IACAA,EAAY/5B,uBACR,aAAcztF,KAAKynH,mBACvBD,EAAY/5B,uBACR,aAAcztF,KAAK0nH,mBACvBF,EAAY/5B,uBACR,YAAaztF,KAAK2nH,oBAEtB/1D,IAEA5xD,KAAKynH,kBAAoB,SAAC/6G,EAAM9L,GAC5B8qC,EAAKnhB,aAAa2C,KACd06F,IACAhnH,EAAMksC,IAAgC,SAAfpgC,EAAKnX,QAEpCq8D,EAAK27B,oBAAoB,aAAcvtF,KAAKynH,mBAE5CznH,KAAK0nH,kBAAoB,SAACh7G,EAAM9L,GAC5B8qC,EAAKnhB,aAAa2C,KACd06F,IACAhnH,EAAMksC,IAAgC,SAAfpgC,EAAKnX,QAEpCq8D,EAAK27B,oBAAoB,aAAcvtF,KAAK0nH,mBAE5C1nH,KAAK2nH,kBAAoB,SAACj7G,EAAM9L,GAC5B8qC,EAAKnhB,aAAa2C,KACd06F,IACAhnH,EAAM8L,EAAKnX,QAEnBq8D,EAAK27B,oBAAoB,YAAavtF,KAAK2nH,6DAOlC/wE,EAAO7W,GACpB,GAAI//B,KAAKulG,SACL,OAAOvlG,KAAKulG,SAASsiB,qBAAqBjxE,EAAO7W,GAErDjX,EAAOrZ,MAAM,uFAMJmhB,GACT,OAAO5wB,KAAKsnH,WAAWnyH,IAAIy7B,wCASlBA,EAAMqpC,GACf,GAAoB,iBAATrpC,EACP,MAAM,IAAIvvB,UAAJ,QAAA/D,OAAsBszB,EAAtB,uBAEV5wB,KAAKsnH,WAAWv7F,IAAI6E,EAAMqpC,+8BCxFbstD,gaAAuB9/E,mDAO3B7W,GACT,MAAM,IAAIzyB,MAAM,4DAcHy4C,EAAO7W,GACpB,MAAM,IAAI5hC,MAAM,uFCxCxB,SAAAgrB,GAAA,IAAAk3B,EAAAjsD,EAAA,GAAA0zH,EAAA1zH,EAAA,GAAA2zH,EAAA3zH,EAAA,IAAA4zH,EAAA5zH,EAAA2B,EAAAgyH,GASMj/F,EAASH,oBAAUQ,GAkBrB2lC,GAAmB,EAQjBm5D,EAA8B,6BAO9BC,EACA,wDAKSniG,EAAA,aAEXvf,UAAQ6I,IAAM,SAASC,EAAOC,GAe1B,OATAuZ,EAAOwzD,MAAM,UAAWhtE,EAAOC,GACZ,iBAARA,IAC6B,IAA7BA,EAAIhR,QAAQ,cAC0C,IAAtDgR,EAAIhR,QAAQ,uCAEnB+Q,EAAQ9I,UAAQ+D,SAASG,MAIrB4E,GACR,KAAK9I,UAAQ+D,SAASC,OAGO,IAArBskD,GACOm5D,EAA4B9qH,KAAKoS,KACxCuZ,EAAOpZ,MAAM,yBACbo/C,GAAmB,GAEvB,MACJ,KAAKtoD,UAAQ+D,SAASG,KAClBoe,EAAOlZ,KAAP,YAAAtS,OAAwBiS,IACxB,IAAM44G,EAAmBD,EAAuBhrB,KAAK3tF,GAEjD44G,GAAgD,IAA5BA,EAAiBlrH,SACrC6xD,EAAkBttC,SAAS2mG,EAAiB,GAAI,IAChDr/F,EAAOpZ,MAAP,2BAAApS,OAAwCwxD,KAE5C,MACJ,KAAKtoD,UAAQ+D,SAASjB,MACtB,KAAK9C,UAAQ+D,SAASI,MAElB4E,EAAG,YAAAjS,OAAeiS,GAClBsxB,IAAqBC,iBAAiB,IAAI3iC,MAAMoR,IAChDuZ,EAAOrZ,MAAMF,KAarB/I,UAAQuoD,mBAAqB,WACzB,OAAOD,GAGXtoD,UAAQ+mD,gBAAkB,SAAS5zC,GAC/B,OAAQA,GACR,KAAKnT,UAAQ6C,OAAOC,MAChB,MAAO,QACX,KAAK9C,UAAQ6C,OAAOE,WAChB,MAAO,aACX,KAAK/C,UAAQ6C,OAAOG,SAChB,MAAO,WACX,KAAKhD,UAAQ6C,OAAOI,eAChB,MAAO,iBACX,KAAKjD,UAAQ6C,OAAOK,SAChB,MAAO,WACX,KAAKlD,UAAQ6C,OAAOM,UAChB,MAAO,YACX,KAAKnD,UAAQ6C,OAAOO,aAChB,MAAO,eACX,KAAKpD,UAAQ6C,OAAOQ,cAChB,MAAO,gBACX,KAAKrD,UAAQ6C,OAAOS,SAChB,MAAO,WACX,QACI,MAAO,6tCCvHnB,IAAMgf,EAASH,oBAAUQ,GAsBnBi/F,EAA0B,GAO1BC,cAMF,SAAAA,EAAYj+F,GAAM,IAAAsd,EAAA,mGAAAJ,CAAAtnC,KAAAqoH,IACd3gF,EAAAH,EAAAvnC,KAAAwnC,EAAA6gF,GAAA5zH,KAAAuL,QACKsoH,YAAc,EACnB5gF,EAAKtd,KAAOA,EACZsd,EAAK6gF,kBAAoB,IAAInoH,MAAMgoH,GAJrB1gF,wPANak3E,2CAiB1BthG,GACD46D,EAAA1wC,EAAA6gF,EAAAnyH,WAAA,OAAA8J,MAAAvL,KAAAuL,KAAWsd,GACX9W,UAAQ2E,aAAa,OAAQ,8CAa5BoD,EAAK08C,EAASx7C,EAAOmI,GACtB5X,KAAKwoH,6BAEL,IAAMlsG,EAAK1V,cAAI,CACXyK,KAAM,MACN+K,GAAI7N,IAGR+N,EAAG3nB,EAAE,OAAQ,CAAE0b,MAAO7J,UAAQO,GAAG+mD,OACjC9tD,KAAKsd,WAAWnF,OAAOmE,EAAI2uC,EAASx7C,EAAOmI,yCAYjCylD,GAAqC,IAAA3xB,EAAA1rC,KAA1B21D,EAA0B93D,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GA7EjC,IA8Ed,GAAImC,KAAKsyE,WAAY,CACjB,IAAMvtC,EAAS,8BAKf,OAHAlE,IAAqBC,iBAAiB,IAAI3iC,MAAM4mC,SAChDjc,EAAOrZ,MAAMs1B,GAIjB/kC,KAAKsyE,WAAap+E,OAAOo2C,YAAY,WACjCoB,EAAKqiB,KAAKsP,EAAW,WACjB3xB,EAAK48E,YAAc,GACpB,SAAA74G,GACCi8B,EAAK48E,aAAe,EACpB,IAAMvjF,EAAM,QAAAznC,OAAWmS,EAAQ,QAAU,WAErCi8B,EAAK48E,aAnFF,GAoFHznF,IAAqBC,iBAAiB,IAAI3iC,MAAM4mC,IAChDjc,EAAOrZ,MAAMs1B,EAAQt1B,IASrBqZ,EAAOlZ,KAAKm1B,EAAQt1B,IAnGnB,OAsGVkmD,GACH7sC,EAAOnZ,KAAP,iCAAArS,OAA6Cq4D,EAA7C,+CAOI31D,KAAKsyE,aACLp+E,OAAOyzC,cAAc3nC,KAAKsyE,YAC1BtyE,KAAKsyE,WAAa,KAClBtyE,KAAKsoH,YAAc,EACnBx/F,EAAOnZ,KAAK,+EAShB3P,KAAKuoH,kBAAkBzqH,MAAK,IAAIwU,MAAOC,WAGnCvS,KAAKuoH,kBAAkBtrH,OAASmrH,GAChCpoH,KAAKuoH,kBAAkBnyF,qDAa3B,IAAMqyF,EAAgBzoH,KAAKuoH,kBAAkB3sH,QAM7C6sH,EAAc3qH,MAAK,IAAIwU,MAAOC,WAE9B,IAAIm2G,EAAc,EACdC,EAAaF,EAAc,GAkB/B,OAhBAA,EAAcxnH,QAAQ,SAAAhC,GAClB,IAAM2pH,EAAkB3pH,EAAI0pH,EAExBC,EAAkBF,IAClBA,EAAcE,GAGlBD,EAAa1pH,IAMjBypH,GAzKc,IA4KP5nH,KAAK4gC,IAAIgnF,EAAa,wCAQtB3iG,EAAA,WAASqE,GACpB5jB,UAAQ2J,oBAAoB,OAAQ,IAAIk4G,EAAqBj+F,osCC3LjE,IAAMtB,EAASH,oBAAUQ,GAOnB0/F,gaAA6BjK,2CAK1BthG,GACD46D,EAAA1wC,EAAAqhF,EAAA3yH,WAAA,OAAA8J,MAAAvL,KAAAuL,KAAWsd,GAEXtd,KAAKsd,WAAWxF,WACZ9X,KAAK8oH,OAAOhzH,KAAKkK,MAdV,kBAc6B,KAAM,MAAO,KAAM,qCAOxDsc,GACHwM,EAAOnZ,KAAK,UAAW2M,gCAatBF,EAAIxb,EAAMovB,EAAU+4F,EAAUruC,GAAa,IAAAhzC,EAAA1nC,KAC5C,OAAO,IAAIorC,QAAQ,SAACC,EAASC,GACzB,GAAKovC,EAAL,CAKA,IAAMv/E,EAAMyL,cAAI,CACZyK,KAAM,MACN+K,GAAIs+D,IAGRv/E,EAAIxG,EAAE,OAAQ,CACV0b,MAhDG,kBAiDH+L,KACAxb,SAEJzF,EAAIxG,EAAE,SAAU,CACZE,KAAM,cACNU,MAAOy6B,IACRzf,KAECw4G,GAAYA,EAAS9rH,QACrB9B,EAAIxG,EAAE,SAAU,CACZE,KAAM,kBACNU,MAAOwzH,IACRx4G,KAGPm3B,EAAKpqB,WAAWnF,OACZhd,EACA,SAAA2U,GACIgZ,EAAOnZ,KAAK,eAAgBG,GAG5B,IAAMkN,EAAWk+B,EAAEprC,GAAQ2pB,KAAK,OAAO7sB,KAAK,OAE5C86B,EAAKshF,aAAehsG,EAASuB,OAAO,QAAQthB,QAC5C6rB,EAAOnZ,KAAP,2BAAArS,OAAuCoqC,EAAKshF,eAC5C39E,KAEJ,SAAA57B,GACIqZ,EAAOnZ,KAAK,cAAeF,GAC3B67B,EAAO77B,UAxCX67B,EAAO,IAAIntC,MAAM,uDAkDpB,IAAAutC,EAAA1rC,KACL,OAAO,IAAIorC,QAAQ,SAACC,EAASC,GACzB,IAAKI,EAAKs9E,aAIN,OAHA19E,EAAO,IAAIntC,MAAM,6BACjB2qB,EAAOlZ,KAAK,uBAKhB,IAAMzU,EAAMyL,cAAI,CACZyK,KAAM,MACN+K,GAAIsvB,EAAKs9E,eAGb7tH,EAAIxG,EAAE,SAAU,CACZ0b,MAvGG,oBA0GPq7B,EAAKpuB,WAAWnF,OAAOhd,EAAK,SAAA2U,GACxBgZ,EAAOnZ,KAAK,iBAAkBG,GAC9B47B,EAAKs9E,aAAe,KACpB39E,KACD,SAAA57B,GACCqZ,EAAOnZ,KAAK,gBAAiBF,GAC7Bi8B,EAAKs9E,aAAe,KACpB19E,EAAO,IAAIntC,MAAM,2DASlB4nB,EAAA,aACXvf,UAAQ2J,oBAAoB,OAAQ,IAAI04G,mrCC7HtCI,cAIF,SAAAA,IAAc,IAAAvhF,EAAA,mGAAAJ,CAAAtnC,KAAAipH,IACVvhF,EAAAH,EAAAvnC,KAAAwnC,EAAAyhF,GAAAx0H,KAAAuL,QACKqP,IAAM,GAFDq4B,wPAJUk3E,2CAanBthG,GACD46D,EAAA1wC,EAAAyhF,EAAA/yH,WAAA,OAAA8J,MAAAvL,KAAAuL,KAAWsd,GACXtd,KAAKsd,WAAWpG,SAAWlX,KAAKkpH,YAAYpzH,KAAKkK,MACjDA,KAAKsd,WAAWnG,UAAYnX,KAAKmpH,YAAYrzH,KAAKkK,0CAO1C+X,GACR/X,KAAKqP,IAAIvR,KAAK,EAAE,IAAIwU,MAAOC,UAAW,WAAYwF,wCAO1CA,GACR/X,KAAKqP,IAAIvR,KAAK,EAAE,IAAIwU,MAAOC,UAAW,WAAYwF,yCAO3CgO,EAAA,aACXvf,UAAQ2J,oBAAoB,SAAU,IAAI84G,w0BCrC9C,IAAMG,EAAsB,CAAE,WAAY,OAAQ,OAAQ,QACpDC,EAAkC,CAAE,WAAY,OAAQ,QAQ9D,SAASC,EAAkBtmH,EAAGC,GAC1B,IAAIspC,EAAM,EAMV,OAJA88E,EAAgC71E,KAAK,SAAA39C,GAAG,OAC8B,KAAjE02C,EAAQvpC,EAAEnN,GAAOoN,EAAEpN,GAAS,EAAQmN,EAAEnN,GAAOoN,EAAEpN,KAAU,KAGvD02C,MAMUogB,cAOjB,SAAAA,IAAkE,IAAAjlB,MAAtDpqB,EAAsDzf,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAzC,GAAI6O,EAAqC7O,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAA9B,6BAIhC,+FAJ8DypC,CAAAtnC,KAAA2sD,KAC9D3sD,OAAAwnC,EAAAmlB,GAAAl4D,KAAAuL,OAAA0nC,oDACKh7B,KAAOA,EACZg7B,EAAK6hF,MAAQjsG,EAAWisG,OACnB7hF,EAAK6hF,MACN,MAAM,IAAIprH,MACN,uDAIRupC,EAAK8hF,sBAAwBx0H,OAAOY,OAAO,MAC3C8xC,EAAK+hF,aAAez0H,OAAOY,OAAO,MAClC8xC,EAAK1jB,QAAU,GACf0jB,EAAKiuE,MAAQ,IAAIlqF,IAEjB,IAAMqkC,EAAOxyC,EAAWwyC,KAfsC,OAiB9DA,EAAK1c,YAAY+e,IAAW76D,gBACxB,SAAAs6D,GAAI,OAAIlqB,EAAKgiF,aAAa93D,KAC9B9B,EAAK1c,YAAY+e,IAAW56D,kBACxB,SAAAq6D,GAAI,OAAIlqB,EAAKiiF,gBAAgB/3D,KACjC58D,OAAOq5B,KAAKyhC,EAAK6lD,OAAO10G,QAAQ,SAAAsN,GAC5Bm5B,EAAKgiF,aAAa55D,EAAK6lD,MAAMpnG,MAGjC/H,UAAQ2E,aAAa,OAAQ,mCAC7Bu8B,EAAK6hF,MAAMz8D,WAAWtmD,UAAQO,GAAG6iH,MACjCtsG,EAAWxF,WAAW4vB,EAAKmiF,YAAY/zH,KAAjBm9C,EAAAvL,IAA6BlhC,UAAQO,GAAG6iH,MAE9DliF,EAAKoiF,iBAAmBpiF,EAAKqiF,yBAAyBj0H,KAA9Bm9C,EAAAvL,IA7BsCA,wPAPpCD,iDA8CnB8/C,GAAyB,IAAhBC,EAAgB3pF,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,IAAAA,UAAA,GAChCmC,KAAKupH,MAAMz8D,WAAWy6B,GACtBvnF,KAAKgqH,mBACDxiC,GACAxnF,KAAKwnF,+CAWCD,GAAyB,IAAhBC,EAAgB3pF,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,IAAAA,UAAA,GACnCmC,KAAKupH,MAAM9hC,cAAcF,GACzBvnF,KAAKgqH,mBACDxiC,GACAxnF,KAAKwnF,0CAQTxnF,KAAK21G,MAAM10G,QAAQ,SAAA2wD,GAAI,OAAIA,EAAKl6C,qDASxBnJ,GAAqB,IAAAm9B,EAAA1rC,KAAhB4X,EAAgB/Z,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAN,IACjB6T,EACAnD,KAAOvO,KAAKypH,aAAezpH,KAAKypH,aAAal7G,GAAO,KAE1D,KAAKmD,GAAUA,EAAKsS,WAAWhkB,KAAKwpH,uBAAwB,CACxD,IAAM98G,EAAOgF,EAAI,GAAApU,OAAMoU,EAAKhF,KAAX,KAAApP,OAAmBoU,EAAKsS,SAAY,KAErD,OAAOhkB,KAAKiqH,cAAc17G,EAAK7B,EAAMkL,GAChCmwB,KAAK,SAAAS,GAAkB,IAAfx1B,EAAew1B,EAAfx1B,SAML,OALItB,IAEAg6B,EAAK89E,sBAAsB93G,EAAKsS,SAAWhR,GAGxCA,IAInB,OAAOo4B,QAAQC,QAAQrrC,KAAKwpH,sBAAsB93G,EAAKsS,2DASlCzV,GAAqB,IAAhBqJ,EAAgB/Z,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAN,IACpC,OAAOmC,KAAKiqH,cAAc17G,EAAK,KAAMqJ,yCAW3BrJ,EAAK7B,EAAMkL,GAAS,IAAAw1B,EAAAptC,KAC9B,OAAO,IAAIorC,QAAQ,SAACC,EAASC,GAAV,OACf8B,EAAKm8E,MAAM55G,KAAKpB,EAAK7B,EAAM,SAAAsP,GACvB,IAAMhJ,EAAW,IAAIyY,IACfoiC,EAAa,IAAIpiC,IAEvByvB,EAAEl/B,GACGyd,KAAK,kBACLwhB,KACG,SAACM,EAAG5vC,GAAJ,OAAWqH,EAASoY,IAAIzf,EAAGsC,aAAa,UAChDitC,EAAEl/B,GACGyd,KAAK,mBACLwhB,KACG,SAACM,EAAG5vC,GAAJ,OAAWkiD,EAAWziC,IAAI,CACtB/Z,KAAM1F,EAAGsC,aAAa,QACtBpZ,KAAM8W,EAAGsC,aAAa,QACtBi8G,SAAUv+G,EAAGsC,aAAa,gBAEtCo9B,EAAQ,CACJr4B,WACA66C,gBACLviB,EAAQ1zB,0CASNg6C,GACT5xD,KAAK21G,MAAMvqF,IAAIwmC,GACfA,EAAKxe,YAAY+e,IAAW35D,gBAAiBwH,KAAK8pH,kBAClD9pH,KAAKmqH,wBAAwBv4D,2CAQjBA,GACZ5xD,KAAK21G,MAAMlnF,OAAOmjC,GAClBA,EAAKnlC,eAAe0lC,IAAW35D,gBAAiBwH,KAAK8pH,kEAOjCl4D,GACpBA,EAAKm8B,cAAc,IAAK,CACpB7lF,WAAY,CACRmI,MAAO7J,UAAQO,GAAG6iH,KAClBhmH,KAnMH,QAoMG8I,KAAM1M,KAAK0M,KACXoU,IAAK9gB,KAAKgkB,2DAQE,IAAA+pB,EAAA/tC,KAEpBA,KAAK21G,MAAM10G,QAAQ,SAAA2wD,GAAI,OAAI7jB,EAAKo8E,wBAAwBv4D,KACxD5xD,KAAKwnF,oDAOL,IAAM35B,EACF7tD,KAAKupH,MAAMa,YAAYngF,KAAKq/E,GAAmBrU,OAC7C,SAACoV,EAAkBp8D,GAAnB,SAAA3wD,OAEQ8rH,EAAoBnU,OAChB,SAAC58D,EAAKxiD,EAAK8iD,GAAX,OACIN,GACe,IAARM,EAAY,GAAK,KAClBsV,EAASp4D,IACnB,IAPZ,MASA,IACAmd,EACAhT,KAAKupH,MAAMe,UAAUrgF,OAAOgrE,OAC1B,SAAC58D,EAAKkvC,GAAN,SAAAjqF,OAAqB+6C,EAAMkvC,EAA3B,MAAuC,IAE/CvnF,KAAKgkB,QAAUxf,mBAASqpD,EAAa76C,GACrChT,KAAKuqH,4DAOGxyG,GACR,IAAMnX,EAAOmX,EAAO9J,aAAa,QAC3By+C,EAAO30C,EAAOiI,cAAc,KAC5BgE,EAAU0oC,EAAKz+C,aAAa,OAC5BvB,EAAOggD,EAAKz+C,aAAa,QACzBu8G,EAAaxqH,KAAKypH,aAAa7oH,GAUrC,OARAZ,KAAKypH,aAAa7oH,GAAQ,CAAEojB,UACxBtX,QACA89G,GAAcA,EAAWxmG,UAAYA,GACrChkB,KAAKuqB,aAAa2C,KAAKilC,IAAWp5D,4BAC9B6H,IAID,mDAOc2N,GACjBA,KAAOvO,KAAKypH,qBACLzpH,KAAKypH,aAAal7G,0DCnRrC,SAAA4a,GAAA,IAAML,EAAS9tB,EAAQ,GAAqB2tB,UAAUQ,GAOtD,SAAS2rE,EAAiB7+C,EAAY4+C,GAClC,IAAMt+C,EAAaN,EAAWwhC,WAE9B,IAAKlhC,EACD,MAAM,IAAIp4C,MAAM,oDAEpB6B,KAAKyqH,WACC51B,EAAelpE,eAAe++F,iBAAiBn0E,GACrDztB,EAAOpZ,MAAM,0BAGjBolF,EAAiB5+F,UAAUw+F,UAAY,SAASC,EAAOC,EAAU3/E,GAC7DjV,KAAKyqH,WAAWE,WAAWh2B,EAAOC,GAAY,IAAK3/E,GAAS,MAGhElhB,EAAOD,QAAUghG,iSCfjB,IAUqB1J,aAMjB,SAAAA,EAAY/4C,gGAAY/K,CAAAtnC,KAAAorF,GACpBprF,KAAKqyC,WAAaA,EAElBA,EAAWhI,iBACP4K,4BACAj1C,KAAK4qH,YAAY90H,KAAKkK,OAE1BA,KAAK6qH,SAAW7qH,KAAKqyC,WAAW8nB,sEASxBj7D,EAAI83C,IAKPh3C,KAAKqyC,WAAW+oB,eACdpkB,GAtCiB,IAuChB93C,IAAOc,KAAK6qH,UACL7qH,KAAKqyC,WAAW66C,qBAAqBhxB,WAIpDl8D,KAAKqyC,WAAW9nB,aAAa2C,KACzB+nB,2BACA/1C,qUChDZ,IAAM4pB,EAASH,oBAAUQ,GAMJmrB,aAWjB,SAAAA,EAAY3oB,EAAgB0oB,EAAOkQ,GAC/B,+FADwCjd,CAAAtnC,KAAAs0C,IACnC3oB,IAAmB0oB,EACpB,MAAM,IAAIhzC,UACN,kDACD,GAAIsqB,GAAkB0oB,EACzB,MAAM,IAAIhzC,UACN,qDAsBR,GAnBIsqB,EACA7C,EAAOpZ,MAAM,qCAEboZ,EAAOpZ,MAAP,6BAAApS,OAA0C+2C,EAA1C,MAKJr0C,KAAKwyC,SAAW,KAGhBxyC,KAAKu7E,cAAgBh3B,EAIrBvkD,KAAKk6E,MAAQ,KAITvuD,EAAgB,CAChB,IAAMm/F,EACAn/F,EAAeo/F,kBACb,mBAAoB,CAChBn4G,SAAU,uCAItB5S,KAAKgrH,eAAeF,GACpB9qH,KAAKk6E,MAAQ,mBAGV,GAAI7lC,EAAO,CAEd,IAAM42E,EAAK,IAAI3mG,UAAU+vB,GAGzBr0C,KAAKgrH,eAAeC,GACpBjrH,KAAKk6E,MAAQ,oEAgBjB,GAAIl6E,KAAKwyC,SAAU,CACf,IACIxyC,KAAKwyC,SAASjtB,QAChB,MAAO9V,IAETzP,KAAKwyC,SAAW,uCAUpB,OAAOxyC,KAAKwyC,WAA0C,SAA7BxyC,KAAKwyC,SAAStwB,YAChCliB,KAAKwyC,SAAStwB,aAAeoC,UAAU4mG,0CAYtC9uG,EAAI6e,GACZj7B,KAAKuX,MAAM,CACP4zG,aAAc,kBACdC,WAAYnwF,EACZ7e,mDAQY7mB,GAChB,IAAM81H,EAAa,CACfF,aAAc,oBACdv6B,MAAOr7F,GAGXyK,KAAKuX,MAAM8zG,GACXviG,EAAOzZ,IAAP,yBAAA/R,OAAoC/H,sDAUd0kE,GACtBnxC,EAAOzZ,IACH,kEACA4qD,GAEJj6D,KAAKuX,MAAM,CACP4zG,aAAc,6BACdG,eAAgBrxD,GAAc,4DAYTsxD,GACzBziG,EAAOzZ,IACH,oEACAk8G,GAEJvrH,KAAKuX,MAAM,CACP4zG,aAAc,gCACdK,kBAAmBD,+DASQE,GAC/B3iG,EAAOzZ,IAAI,yEAAA/R,OACkBmuH,EADlB,YAEXzrH,KAAKuX,MAAM,CACP4zG,aAAc,0BACdj2E,eAAgBu2E,2CAOTC,GAAS,IAAAhkF,EAAA1nC,KACdukD,EAAUvkD,KAAKu7E,cAErBmwC,EAAQnnG,OAAS,WACbuE,EAAOnZ,KAAP,GAAArS,OAAeoqC,EAAKwyC,MAApB,oBAQA31B,EAAQr3B,KAAK+Y,IAAUhK,oBAG3ByvF,EAAQjnG,QAAU,SAAAhV,GACdqZ,EAAOrZ,MAAM,iBAAkBA,IAGnCi8G,EAAQ7mG,UAAY,SAAA2jB,GAAc,IAE1BzsC,EAFewH,EAAWilC,EAAXjlC,KAInB,IACIxH,EAAM6a,KAAKwK,MAAM7d,GACnB,MAAOkM,GAML,OALAoxB,IAAqBC,iBAAiBrxB,QACtCqZ,EAAOrZ,MACH,4CACAlM,EAAMkM,GAKd,IAAM07G,EAAepvH,EAAIovH,aAEzB,OAAQA,GACR,IAAK,qCAED,IAAMQ,EAA0B5vH,EAAI4vH,wBAEpC7iG,EAAOnZ,KACH,uCACAg8G,GACJpnE,EAAQr3B,KACJ+Y,IAAUzf,yBACVmlG,GACJ,MAEJ,IAAK,wCACD,IAAMC,EAAW7vH,EAAI6vH,SACf1xD,EAA0B,SAAfn+D,EAAI05E,OAErB3sD,EAAOnZ,KAAP,uCAAArS,OAC2CsuH,EAD3C,cAAAtuH,OAEQ48D,IACR3V,EAAQr3B,KAAK+Y,IAAU/J,6BACnB0vF,EAAU1xD,GAEd,MAEJ,IAAK,kBACD3V,EAAQr3B,KACJ+Y,IAAUvf,0BAA2B3qB,EAAI6E,KACzC7E,EAAIqvH,YAER,MAEJ,IAAK,4BAED,IAAMt2E,EAAiB/4C,EAAI+4C,eAE3BhsB,EAAOnZ,KAAK,6BACRmlC,EAAgB/4C,GACpBwoD,EAAQr3B,KAAK+Y,IAAU9J,uBACnB2Y,EAAgB/4C,GAEpB,MAEJ,IAAK,sBACD,IAAM2kE,EAAa3kE,EAAI2kE,WAEvB53C,EAAOnZ,KAAP,mCAAArS,OAA+CojE,IAC/Cnc,EAAQr3B,KAAK+Y,IAAU5J,oBAAqBqkC,GAC5C,MAEJ,QACI53C,EAAOpZ,MAAM,mCAAoC3T,GAMjDwoD,EAAQr3B,KAAR,mBAAA5vB,OAAgC6tH,GAAgBpvH,KAKxD2vH,EAAQ/mG,QAAU,WACdmE,EAAOnZ,KAAK,kBAGZ+3B,EAAK8K,SAAW,MAIpBxyC,KAAKwyC,SAAWk5E,gCAUdL,GACF,IAAMK,EAAU1rH,KAAKwyC,SAErB,IAAKxyC,KAAK6rH,SACN,MAAM,IAAI1tH,MAAM,qBAGpButH,EAAQr0G,KAAKT,KAAK0K,UAAU+pG,iCA1O5B,OAAOrrH,KAAKk6E,62BCvDpB,IAAMpxD,EAASH,oBAAUQ,GACnB2iG,EAAmB,EAInBC,EAAiB,CAHC,IACA,IACA,KAoCT,SAASl2E,EAChBsiB,EACAj5D,EACA8+D,EACA3oB,EACA3iB,EACAkhB,EACAtiC,GAAS,IAAAo2B,EAAA1nC,KAUbA,KAAKgsH,qBAAsB,EAU3BhsH,KAAKykE,qBAAsB,EAO3BzkE,KAAKm4D,IAAMA,EAMXn4D,KAAKd,GAAKA,EAOVc,KAAK4zC,MAAQA,EASb5zC,KAAKm2C,aAAe,IAAI7rB,IAMxBtqB,KAAKuyC,YAAc,IAAIjoB,IAQvBtqB,KAAKisH,cAAgB,GAoBrBjsH,KAAKksH,WAAa,IAAI5hG,IAKtBtqB,KAAKmsH,WAAa,KAKlBnsH,KAAKosH,YAAc,KAMnBpsH,KAAKg+D,eAAiBA,EAGtBh+D,KAAKqsH,sBAAwBrsH,KAAKqsH,sBAAsBv2H,KAAKkK,MAC7DA,KAAKg+D,eAAe1xC,GAChBs7F,IACA5nH,KAAKqsH,uBAETrsH,KAAKssH,kBAAoBtsH,KAAKssH,kBAAkBx2H,KAAKkK,MACrDA,KAAKg+D,eAAe1xC,GAChBs7F,IACA5nH,KAAKssH,mBACTtsH,KAAKsR,QAAUA,EAEftR,KAAK2rB,eACC,IAAI0b,IAASa,sBAAsBmN,EAAW3iB,GACpD1yB,KAAK6/G,UAAY,GACjB7/G,KAAK6zB,MAAQ,GACb7zB,KAAKusH,cAAgB,KAMrBvsH,KAAKk/D,SAAW5tD,EAAQ4tD,SACxB,IAAMstD,EAAUxxH,EAAQ,KAAsBwxH,QAE9CxsH,KAAKysH,QAAU,IAAID,EACnB,IAAME,EAAY1xH,EAAQ,KAE1BgF,KAAK2sH,UAAY,IAAID,EAAU,CAAEE,YAAad,EAC1Ce,wBAAwB,IAC5B7sH,KAAK8sH,eAAiB,IAAIC,IAAe/sH,KAAKS,YAO9CT,KAAKgtH,eAAiB,IAAIC,IAAejtH,MAMzCA,KAAKuqB,aAAe4tC,EAAI5tC,aACxBvqB,KAAKktH,YAAc,IAAIC,IAGvBntH,KAAKs8E,MAAQ,SAAC8wC,EAAMz9G,GAChBmZ,EAAOpZ,MAAM09G,EAAMz9G,GAEnB+3B,EAAKm4E,UAAU/hH,KAAK,CAChBi4F,KAAM,IAAIzjF,KACVjB,KAAM+7G,EACN73H,MAAOoa,GAAQ,MAGvB3P,KAAK2/D,eAAiB,KACtB3/D,KAAK2rB,eAAeg0C,eAAiB,SAAA7qC,GACjC4S,EAAK40C,MACD,iBACA1lE,KAAK0K,UAAUwT,EAAMqC,UAAW,KAAM,MAEd,OAAxBuQ,EAAKi4B,gBACLj4B,EAAKi4B,eAAe7qC,IAG5B90B,KAAK2rB,eAAe0hG,YACd,SAAAv4F,GAAK,OAAI4S,EAAK4lF,mBAAmBx4F,EAAM5I,SAC7ClsB,KAAK2rB,eAAe4hG,eACd,SAAAz4F,GAAK,OAAI4S,EAAK8lF,qBAAqB14F,EAAM5I,SAC/ClsB,KAAK+/D,uBAAyB,KAC9B//D,KAAK2rB,eAAeo0C,uBAAyB,SAAAjrC,GACzC4S,EAAK40C,MAAM,yBAA0B50C,EAAKs4B,gBACN,OAAhCt4B,EAAKq4B,wBACLr4B,EAAKq4B,uBAAuBjrC,IAGpC90B,KAAKkgE,2BAA6B,KAClClgE,KAAK2rB,eAAeu0C,2BAA6B,SAAAprC,GAC7C4S,EAAK40C,MAAM,6BAA8B50C,EAAK04B,oBACN,OAApC14B,EAAKw4B,4BACLx4B,EAAKw4B,2BAA2BprC,IAGxC90B,KAAKwgE,oBAAsB,KAC3BxgE,KAAK2rB,eAAe60C,oBAAsB,SAAA1rC,GACtC4S,EAAK40C,MAAM,uBACsB,OAA7B50C,EAAK84B,qBACL94B,EAAK84B,oBAAoB1rC,IAGjC90B,KAAKytH,cAAgB,KACrBztH,KAAK2rB,eAAe8hG,cAAgB,SAAA34F,GAChC4S,EAAK40C,MAAM,iBACgB,OAAvB50C,EAAK+lF,eACL/lF,EAAK+lF,cAAc34F,IAIvB90B,KAAKk/D,WACLl/D,KAAKusH,cAAgBr4H,OAAOo2C,YAAY,WACpC5C,EAAKmyD,SAAS,SAAAhmE,GACV,GAAIA,EAAM/jB,QACqB,mBAAjB+jB,EAAM/jB,OAGhB,IAFA,IAAMosE,EAAUroD,EAAM/jB,SADiByoC,EAAA,SAG9BjkD,GACL,IAAMi4C,EAAM2vC,EAAQ5nF,GAEpBi4C,EAAIq3C,QAAQ3iF,QAAQ,SAAApM,GAChB6yC,EAAKgmF,aAAanhF,EAAK13C,EAAM03C,EAAIsjE,KAAKh7G,OAJrCP,EAAI,EAAGA,EAAI4nF,EAAQj/E,SAAU3I,EAAGikD,EAAhCjkD,QAQTu/B,EAAM5yB,QAAQ,SAAA7L,GAAC,OAAIsyC,EAAKgmF,aAAat4H,EAAG,GAAIA,MAEjD,eAIJ,MAGP0zB,EAAOnZ,KAAP,cAAArS,OAA0B0C,OAY9B61C,EAAwB3/C,UAAUw3H,aAC5B,SAASrlE,EAAQxzD,EAAM84H,GACrB,IAAMzuH,EAAE,GAAA5B,OAAM+qD,EAAOnpD,GAAb,KAAA5B,OAAmBzI,GACvBwB,EAAI2J,KAAK6zB,MAAM30B,GACbke,EAAM,IAAI9K,KAEXjc,IACD2J,KAAK6zB,MAAM30B,GAAM7I,EAAI,CACjBquF,UAAWtnE,EACXwwG,QAASxwG,EACToQ,OAAQ,GACRk2F,MAAO,KAGfrtH,EAAEm3B,OAAO1vB,KAAK6vH,GACdt3H,EAAEqtH,MAAM5lH,KAAKsf,EAAI7K,WACblc,EAAEm3B,OAAOvwB,OAAS+C,KAAKk/D,WACvB7oE,EAAEm3B,OAAO4I,QACT//B,EAAEqtH,MAAMttF,SAEZ//B,EAAEu3H,QAAUxwG,GAMpB,IAAMywG,EAAU,SAASztC,GACrB,OAAI,MAAOA,EACA,GAGX,SAAA9iF,OAAgB8iF,EAAY/uE,KAA5B,QAAA/T,OAAuC8iF,EAAY5lD,MAYvDqb,EAAwB3/C,UAAU0jF,mBAAqB,WACnD,IAAMl1B,EAAQ1kD,KAAK2rB,eAAey0C,mBAElC,MAAc,cAAV1b,EACO,YAGJA,GAaX7O,EAAwB3/C,UAAU43H,0BAA4B,SACtD/tF,GACJ,IAAIguF,GAAsB,EAO1B,OALIhuF,IAAc+M,IACdihF,EAAsB/tH,KAAKgsH,oBACpBjsF,IAAc+M,MACrBihF,EAAsB/tH,KAAKykE,qBAE3BspD,EACO/tH,KAAKguH,mBAAmBjuF,GAAa,WAAa,WAGtD,YAQX8V,EAAwB3/C,UAAU+3H,cAAgB,WAC9C,OAAQjuH,KAAKsR,QAAQ6tD,kBACdx0C,IAAQujG,uBAONvjG,IAAQkO,aACN74B,KAAKsR,QAAQiuD,yBAS5B1pB,EAAwB3/C,UAAUm2H,sBAAwB,SAClDpyD,EACAltB,GAEJ,GAAKktB,EAAL,CAKA,IAAMk0D,EAAanuH,KAAKq2C,gBAAgB4jB,EAAYntB,KAEhDqhF,EAAWlxH,QAEXkxH,EAAW,GAAGC,cAAcrhF,QAR5BjkB,EAAOrZ,MAAP,yCAAAnS,OAAsD0C,QAmB9D61C,EAAwB3/C,UAAUo2H,kBAAoB,SAC9CryD,EACAl6B,EACAm8B,GAEJ,GAAKjC,EAAL,CAKA,IAAMptB,EAAQ7sC,KAAKq2C,gBAAgB4jB,EAAYl6B,GAE3C8M,EAAM5vC,QAEN4vC,EAAM,GAAGwjB,QAAQ6L,QARjBpzC,EAAOrZ,MAAM,wCAkBrBomC,EAAwB3/C,UAAU8/C,eAAiB,SAASjW,GACxD,IAAIwT,EAASnzC,MAAMQ,KAAKZ,KAAKuyC,YAAY/kB,UAMzC,YAJkB1yB,IAAdilC,IACAwT,EAASA,EAAOpa,OAAO,SAAA0T,GAAK,OAAIA,EAAMqJ,YAAcnW,KAGjDwT,GASXsC,EAAwB3/C,UAAU83H,mBAAqB,SAASjuF,GAC5D,IAAKA,EACD,MAAM,IAAI5hC,MAAM,2BAGpB,OAAO6B,KAAKg2C,eAAejW,GAAW9iC,OAAS,GAUnD44C,EAAwB3/C,UAAUmgD,gBAAkB,SAC5C4jB,EACAl6B,GACJ,IAAMoW,EAAe,GACfk4E,EACAp0D,EAAa,CAAEA,GAAej6D,KAAKm2C,aAAa9nB,OAHvClB,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAKf,QAAAwyB,EAAAC,EAAuB8gG,EAAvBh5H,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAkC,KAAvBy+F,EAAuBt+F,EAAA/3B,MACxB+4H,EAAmBtuH,KAAKm2C,aAAahhD,IAAIy2H,GAE/C,GAAK0C,EAAL,CAH8B,IAAAtgG,GAAA,EAAAC,GAAA,EAAAC,OAAApzB,EAAA,IAU9B,QAAAqzB,EAAAC,EAA6BkgG,EAAiBjgG,OAA9Ch5B,OAAAo4B,cAAAO,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAAsD,KAA3C+mD,EAA2C5mD,EAAA54B,MAElD,IAAKwqC,GAAaA,IAAcg1C,EAAgB,CAC5C,IAAMw5C,EAAaD,EAAiBn5H,IAAI4/E,GAEpCw5C,GACAp4E,EAAar4C,KAAKywH,KAhBA,MAAAz0G,GAAAmU,GAAA,EAAAC,EAAApU,EAAA,YAAAkU,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,MALnB,MAAApU,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,GA2Bf,OAAO8oB,GASXN,EAAwB3/C,UAAU+gD,eAAiB,SAASrmB,GACxD,GAAoB,iBAATA,EACP,MAAM,IAAIzyB,MAAJ,QAAAb,OAAkBszB,EAAlB,qBAFoD,IAAAxB,GAAA,EAAAC,GAAA,EAAAC,OAAAx0B,EAAA,IAI9D,QAAAy0B,EAAAC,EAAyBxvB,KAAKuyC,YAAY/kB,SAA1Cn4B,OAAAo4B,cAAA2B,GAAAG,EAAAC,EAAA9B,QAAAC,MAAAyB,GAAA,EAAoD,KAAzCyiB,EAAyCtiB,EAAAh6B,MAChD,GAAIyK,KAAKw2F,aAAa3kD,KAAgBjhB,EAClC,OAAOihB,GAN+C,MAAA/3B,GAAAuV,GAAA,EAAAC,EAAAxV,EAAA,YAAAsV,GAAA,MAAAI,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAAsB,EAAA,MAAAC,GAAA,IAAAI,GAAA,EAAAC,GAAA,EAAAC,OAAA90B,EAAA,IAS9D,QAAA+0B,EAAAC,EAA0B9vB,KAAKq2C,kBAA/BhhD,OAAAo4B,cAAAiC,GAAAG,EAAAC,EAAApC,QAAAC,MAAA+B,GAAA,EAAkD,KAAvCgrC,EAAuC7qC,EAAAt6B,MAC9C,GAAImlE,EAAY+7B,YAAc7lE,EAC1B,OAAO8pC,GAX+C,MAAA5gD,GAAA6V,GAAA,EAAAC,EAAA9V,EAAA,YAAA4V,GAAA,MAAAI,EAAA/B,QAAA+B,EAAA/B,SAAA,WAAA4B,EAAA,MAAAC,GAe9D,OAAO,MASXimB,EAAwB3/C,UAAUk+G,iBAAmB,SAASl1G,GAE1D,IAAMsvH,EAAgB,SAAA3hF,GAAK,OAAIA,EAAM4qC,WAAWv4E,KAAOA,GACjD2yC,EAAa7xC,KAAKg2C,iBAAiBvc,KAAK+0F,GAE9C,GAAI38E,EACA,OAAO7xC,KAAKw2F,aAAa3kD,GAG7B,IAAM6oB,EAAc16D,KAAKq2C,kBAAkB5c,KAAK+0F,GAEhD,OAAI9zD,EACOA,EAAY+7B,UAGhB,MAOX5gD,EAAwB3/C,UAAUo3H,mBAAqB,SAASphG,GAAQ,IAAAwf,EAAA1rC,KAC9Dk0C,EAAW9B,IAAI7J,YAAYrc,GAEjC,GAAKkmB,IAAI6B,iBAAiBC,GAA1B,EASIvpB,IAAQge,mBAAqBhe,IAAQgY,YACrCzW,EAAOuiG,WAAa,SAAA35F,GAChB4W,EAAKgjF,kBAAkBxiG,EAAQ4I,EAAM+X,QAEzC3gB,EAAOyiG,cAAgB,SAAA75F,GACnB4W,EAAKkjF,oBAAoB1iG,EAAQ4I,EAAM+X,SAK/C,IAAMgiF,EAAoB3iG,EAAO2Z,iBAtBmChV,GAAA,EAAAC,GAAA,EAAAC,OAAAj2B,EAAA,IAwBpE,QAAAk2B,EAAAC,EAAyB49F,EAAzBx5H,OAAAo4B,cAAAoD,GAAAG,EAAAC,EAAAvD,QAAAC,MAAAkD,GAAA,EAA4C,KAAjC0lB,EAAiCvlB,EAAAz7B,MACxCyK,KAAK0uH,kBAAkBxiG,EAAQqqB,IAzBiC,MAAAz8B,GAAAgX,GAAA,EAAAC,EAAAjX,EAAA,YAAA+W,GAAA,MAAAI,EAAAlD,QAAAkD,EAAAlD,SAAA,WAAA+C,EAAA,MAAAC,GA2BpE,IAAM+9F,EAAoB5iG,EAAO6Z,iBA3BmC3U,GAAA,EAAAC,GAAA,EAAAC,OAAAx2B,EAAA,IA6BpE,QAAAy2B,EAAAC,EAAyBs9F,EAAzBz5H,OAAAo4B,cAAA2D,GAAAG,EAAAC,EAAA9D,QAAAC,MAAAyD,GAAA,EAA4C,KAAjC+8F,EAAiC58F,EAAAh8B,MACxCyK,KAAK0uH,kBAAkBxiG,EAAQiiG,IA9BiC,MAAAr0G,GAAAuX,GAAA,EAAAC,EAAAxX,EAAA,YAAAsX,GAAA,MAAAI,EAAAzD,QAAAyD,EAAAzD,SAAA,WAAAsD,EAAA,MAAAC,SAIhExI,EAAOnZ,KACH,GAAArS,OAAG0C,KAAH,mEAAA1C,OACU42C,KAsCtB2B,EAAwB3/C,UAAUw4H,kBAAoB,SAASxiG,EAAQ2gB,GACnE,IAAMqH,EAAW9B,IAAI7J,YAAYrc,GAC3B6T,EAAY8M,EAAMxG,KAKxB,GAHAvd,EAAOnZ,KAAP,GAAArS,OAAe0C,KAAf,wBAA2Ck0C,EAAUnU,GAGhDA,EAAL,CAUA,IACMgvF,EADY,IAAIh3E,IAAI/3C,KAAKgmE,kBAAkBxrC,KAEjCrE,MAAMgD,OAAO,SAAA61F,GAAG,OAAIA,EAAIr0F,WAAJ,KAAAr9B,OAAoByiC,MAExD,GAAKgvF,EAAW9xH,OAAhB,CAWA,IAAI6qE,EAAY1yC,IAAQqD,UAAUs2F,EAAW,GAAI,WAIjD,IAFAjnD,EACMA,EAAU3uC,OAAO,SAAAlqB,GAAI,OAA0C,IAAtCA,EAAK1Q,QAAL,QAAAjB,OAAqB42C,OACrCj3C,OAAf,CAYA,IAAMq9B,EAAUwtC,EAAU,GAAGtpE,UAAU,GAAG1B,MAAM,KAAK,GAC/CmyH,EAAYpuH,OAAOy5B,GACnB40F,EAAkBlvH,KAAKg+D,eAAemxD,aAAaF,GAEzD,GAAI7sH,MAAM6sH,IAAcA,EAAY,EAChCpuF,mBACI,IAAI1iC,MAAJ,iBAAAb,OACqBg9B,EADrB,6BAAAh9B,OAEQ42C,EAFR,iBAAA52C,OAEgCyiC,UAIjC,GAAKmvF,EAAL,CAWPpmG,EAAOzZ,IAAP,GAAA/R,OAAc0C,KAAd,oBAAsCkvH,EAAiBD,GAEvD,IAAMG,EACApvH,KAAKg+D,eAAeqxD,iBAAiBH,EAAiBnvF,GAE5D,GAAKqvF,EAAL,CASA,IAAM1+F,EAAQ0+F,EAAc1+F,MACtBqc,EAAYqiF,EAAcriF,UAEhC/sC,KAAKsvH,mBACDJ,EAAiBhjG,EAAQ2gB,EAAO9M,EAAWgN,EAAWkiF,EAAWv+F,QAZjEmQ,mBACI,IAAI1iC,MAAJ,GAAAb,OACO0C,KADP,uCAAA1C,OAEQ4xH,UAnBZruF,mBACI,IAAI1iC,MAAJ,4BAAAb,OAEQ2xH,EAFR,6BAAA3xH,OAGQ42C,EAHR,iBAAA52C,OAGgCyiC,UA5BpCc,mBACI,IAAI1iC,MAAJ,8BAAAb,OAEQ42C,EAFR,mCAAA52C,OAEkDyiC,UAlBtDc,mBACI,IAAI1iC,MAAJ,2BAAAb,OAEQyiC,EAFR,2CAAAziC,OAGQ42C,UAlBZrT,mBACI,IAAI1iC,MAAJ,oDAAAb,OACwD42C,MAiGpE2B,EAAwB3/C,UAAUo5H,mBAAqB,SAC/CJ,EACAhjG,EACA2gB,EACA9M,EACAgN,EACAnc,EACAF,GACJ,IAAI6+F,EAAkBvvH,KAAKm2C,aAAahhD,IAAI+5H,GAEvCK,IACDA,EAAkB,IAAIjlG,IACtBtqB,KAAKm2C,aAAapqB,IAAImjG,EAAiBK,IAG3C,IAAMC,EAAgBD,EAAgBp6H,IAAI4qC,GAE1C,GAAIyvF,GAAiBA,EAAc/3C,aAAe5qC,EAG9C/jB,EAAOnZ,KACH,GAAArS,OAAG0C,KAAH,yDAAA1C,OACS4xH,EADT,MAAA5xH,OAC6ByiC,QALrC,CAQWyvF,GACP1mG,EAAOrZ,MACH,GAAAnS,OAAG0C,KAAH,oCAAA1C,OACS4xH,EADT,KAAA5xH,OAC4ByiC,IAGpC,IAAM26B,EACA,IAAI+0D,IACEzvH,KAAKm4D,IACLn4D,KAAKm4D,IAAI9lB,WACT68E,EACAhjG,EACA2gB,EACA9M,EACAgN,EACAnc,EACAF,EACA1wB,KAAK4zC,OAEjB27E,EAAgBxjG,IAAIgU,EAAW26B,GAE/B16D,KAAKuqB,aAAa2C,KAAK+Y,IAAUxJ,mBAAoBi+B,KAUzD7kB,EAAwB3/C,UAAUs3H,qBAAuB,SAASthG,GAC9D,GAAKkmB,IAAIs9E,aAAaxjG,GAAtB,CAUA,IAAM4iG,EAAoB5iG,EAAO6Z,iBAXqCnU,GAAA,EAAAC,GAAA,EAAAC,OAAAh3B,EAAA,IAatE,QAAAi3B,EAAAC,EAAyB88F,EAAzBz5H,OAAAo4B,cAAAmE,GAAAG,EAAAC,EAAAtE,QAAAC,MAAAiE,GAAA,EAA4C,KAAjCu8F,EAAiCp8F,EAAAx8B,MACxCyK,KAAK4uH,oBAAoB1iG,EAAQiiG,IAdiC,MAAAr0G,GAAA+X,GAAA,EAAAC,EAAAhY,EAAA,YAAA8X,GAAA,MAAAI,EAAAjE,QAAAiE,EAAAjE,SAAA,WAAA8D,EAAA,MAAAC,GAgBtE,IAAM+8F,EAAoB3iG,EAAO2Z,iBAhBqCjT,GAAA,EAAAC,GAAA,EAAAC,OAAAh4B,EAAA,IAkBtE,QAAAi4B,EAAAC,EAAyB67F,EAAzBx5H,OAAAo4B,cAAAmF,GAAAG,EAAAC,EAAAtF,QAAAC,MAAAiF,GAAA,EAA4C,KAAjC2jB,EAAiCxjB,EAAAx9B,MACxCyK,KAAK4uH,oBAAoB1iG,EAAQqqB,IAnBiC,MAAAz8B,GAAA+Y,GAAA,EAAAC,EAAAhZ,EAAA,YAAA8Y,GAAA,MAAAI,EAAAjF,QAAAiF,EAAAjF,SAAA,WAAA8E,EAAA,MAAAC,QACtE,CACI,IAAM5zB,EAAKkzC,IAAI7J,YAAYrc,GAE3BpD,EAAOnZ,KAAP,6DAAArS,OACiE4B,MAyBzE22C,EAAwB3/C,UAAU04H,oBAAsB,SAChD1iG,EACA2gB,GACJ,IAAMqH,EAAW9B,IAAI7J,YAAYrc,GAC3BypD,EAAU9oC,GAASuF,IAAI3J,WAAWoE,GAExC/jB,EAAOnZ,KAAP,GAAArS,OAAe0C,KAAf,6BAAA1C,OAA+C42C,EAA/C,MAAA52C,OAA4Dq4E,IAEvDzhC,EAOAyhC,EAOA31E,KAAK2vH,uBAAuBz7E,EAAUyhC,IAWvC7sD,EAAOlZ,KAAP,GAAAtS,OACO0C,KADP,uCAAA1C,OACiD42C,EADjD,8BAAA52C,OAEiBq4E,IAnBjB90C,mBACI,IAAI1iC,MAAJ,GAAAb,OAAa0C,KAAb,gDARJ6gC,mBACI,IAAI1iC,MAAJ,GAAAb,OAAa0C,KAAb,kDAqCZ61C,EAAwB3/C,UAAU05H,oBAAsB,SAChD17E,EACAyhC,GAAS,IAAAniD,GAAA,EAAAC,GAAA,EAAAC,OAAA54B,EAAA,IAEb,QAAA64B,EAAAC,EAA+B5zB,KAAKm2C,aAAa3oB,SAAjDn4B,OAAAo4B,cAAA+F,GAAAG,EAAAC,EAAAlG,QAAAC,MAAA6F,GAAA,EAA2D,KAAhD86F,EAAgD36F,EAAAp+B,MAAAu+B,GAAA,EAAAC,GAAA,EAAAC,OAAAl5B,EAAA,IACvD,QAAAm5B,EAAAC,EAAyBo6F,EAAiB9gG,SAA1Cn4B,OAAAo4B,cAAAqG,GAAAG,EAAAC,EAAAxG,QAAAC,MAAAmG,GAAA,EAAoD,KAAzCy6F,EAAyCt6F,EAAA1+B,MAGhD,GAAIg5H,EAAW74C,eAAiBxhC,GACzBq6E,EAAW34C,cAAgBD,EAC9B,OAAO44C,GANwC,MAAAz0G,GAAAia,GAAA,EAAAC,EAAAla,EAAA,YAAAga,GAAA,MAAAI,EAAAnG,QAAAmG,EAAAnG,SAAA,WAAAgG,EAAA,MAAAC,KAF9C,MAAAla,GAAA2Z,GAAA,EAAAC,EAAA5Z,EAAA,YAAA0Z,GAAA,MAAAI,EAAA7F,QAAA6F,EAAA7F,SAAA,WAAA0F,EAAA,MAAAC,KAyBjBmiB,EAAwB3/C,UAAU6gD,mBAAqB,SAASH,GAC5D,IAAMC,EAAgB,GAChB04E,EAAkBvvH,KAAKm2C,aAAahhD,IAAIyhD,GAE9C,GAAI24E,EAAiB,CACjB,IAAMM,EAAoBN,EAAgBp6H,IAAI23C,KACxCgjF,EAAoBP,EAAgBp6H,IAAI23C,KAE9C+iF,GAAqBh5E,EAAc/4C,KAAK+xH,GACxCC,GAAqBj5E,EAAc/4C,KAAKgyH,GAExC9vH,KAAKm2C,aAAa1nB,OAAOmoB,GAO7B,OAJA9tB,EAAOpZ,MAAP,GAAApS,OACO0C,KADP,+BAAA1C,OACyCs5C,EADzC,YAAAt5C,OAEQu5C,EAAc55C,SAEf45C,GAQXhB,EAAwB3/C,UAAU65H,mBAAqB,SAASC,GAC5DA,EAAYhjG,UACZ,IAAMuS,EAAgBywF,EAAYr1D,mBAC5B40D,EAAkBvvH,KAAKm2C,aAAahhD,IAAIoqC,GAEzCgwF,EAGOA,EAAgB9gG,OAAOuhG,EAAY95E,YAC3CptB,EAAOrZ,MAAP,oBAAAnS,OACwB0yH,EADxB,gCAHAlnG,EAAOrZ,MAAP,+CAAAnS,OACmDiiC,IAKvDv/B,KAAKuqB,aAAa2C,KAAK+Y,IAAUtJ,qBAAsBqzF,IAa3Dn6E,EAAwB3/C,UAAUy5H,uBAAyB,SACnDz7E,EACAyhC,GACJ,IAAMq6C,EAAchwH,KAAK4vH,oBAAoB17E,EAAUyhC,GAMvD,OAJIq6C,GACAhwH,KAAK+vH,mBAAmBC,GAGrBA,GA8GX,IAAMC,EAAiB,SAASl4F,GAC5B,GAAoB,WAAhB9C,EAAO8C,IAA8B,OAATA,GACL,iBAAbA,EAAKyC,IAGf,OAFA1R,EAAOlZ,KAAK,mDAELmoB,EAIX,IAAM0qB,EAAYznD,EAAQ,IACpBmmB,EAAUshC,EAAUrhC,MAAM2W,EAAKyC,UAEd,IAAZrZ,QACyB,IAAlBA,EAAQgV,OACf/1B,MAAMG,QAAQ4gB,EAAQgV,QAC7BhV,EAAQgV,MAAMl1B,QAAQ,SAAAg5B,GASlB,IAAMi2F,EAAa,GACbC,EAAe,GAcrB,QAZgC,IAArBl2F,EAAMX,YACVl5B,MAAMG,QAAQ05B,EAAMX,aACvBW,EAAMX,WAAWr4B,QAAQ,SAAAy4B,QACU,IAApBA,EAAMC,WACU,QAApBD,EAAMC,gBACkB,IAAhBD,EAAMT,OACbi3F,EAAWpyH,KAAK+C,OAAO64B,EAAMT,MAAMn8B,MAAM,KAAK,OAM1DsD,MAAMG,QAAQ05B,EAAMhB,OAAQ,CAC5B,IAAI3kC,EAEJ,IAAKA,EAAI,EAAGA,EAAI2lC,EAAMhB,MAAMh8B,OAAQ3I,IACF,WAA1B2gC,EAAOgF,EAAMhB,MAAM3kC,UACa,IAAtB2lC,EAAMhB,MAAM3kC,GAAG4K,IACtBgxH,EAAW3xH,QAAQ07B,EAAMhB,MAAM3kC,GAAG4K,KAAO,IAC5CixH,EAAaryH,KAAKm8B,EAAMhB,MAAM3kC,WACvB2lC,EAAMhB,MAAM3kC,IAI3B,IAAKA,EAAI,EAAGA,EAAI2lC,EAAMhB,MAAMh8B,OAAQ3I,SACF,IAAnB2lC,EAAMhB,MAAM3kC,IACnB67H,EAAaryH,KAAKm8B,EAAMhB,MAAM3kC,IAItC2lC,EAAMhB,MA0BtB,WAAuD,IAAhB6uC,EAAgBjqE,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GAC/C,IAAK8sB,IAAQ+Z,aAAe/Z,IAAQylG,qBAAqB,IACrD,OAAOtoD,EAGX,IAAIuoD,EAAaz0F,EAAQksC,GAsBzB,OApB2BA,EAAU3uC,OAAO,SAAAgB,GAAQ,MACzB,YAAvBA,EAASjxB,WAA8C,MAAnBixB,EAAS5kC,QAC5CwH,IAAI,SAAAo9B,GAAQ,OAAIA,EAASj7B,KAEX+B,QAAQ,SAAAqvH,GAEvB,IAAMC,EAAYF,EAAc52F,KAAK,SAAAxqB,GAAI,OACrCA,EAAK/P,KAAOoxH,GAA6B,UAAnBrhH,EAAK/F,YAE/BqnH,EAAUh7H,MAAV,YAAA+H,OAA8BgzH,IAG9BD,EACMA,EAAcl3F,OAAO,SAAAlqB,GAAI,OAAIA,EAAK/P,KAAOoxH,KAIjCxyH,KAAKyyH,KAGhBF,EArDmBG,CAA8BL,MAKxD,IAAMM,EAAShuE,EAAUnD,MAAMn+B,GAG/B,OAAO,IAAIwlD,sBAAsB,CAC7Bt1D,KAAM0mB,EAAK1mB,KACXmpB,IAAKi2F,KAqFb56E,EAAwB3/C,UAAUsgG,aAAe,SAAS3kD,GACtD,IAAM3Y,EAAWl5B,KAAK0wH,SAAS7+E,EAAWE,OAE1C,OAAO7Y,GAAYA,EAASD,MAAM,IAmBtC4c,EAAwB3/C,UAAUy6H,oCAC5B,SAAS54F,GACP,IAAMyC,EAAMioB,IAAUrhC,MAAM2W,EAAKyC,KAC3B8G,EAAQ9G,EAAIrE,MAAMsD,KAAK,SAAAjD,GAAK,MAAmB,UAAfA,EAAMnlB,OAE5C,GAAIiwB,EAAMsvF,aAAc,CACpB,IAAM33F,EAAQ,GAQd,GANAqI,EAAMrI,MAAMh4B,QAAQ,SAAA2vB,GACO,SAAnBA,EAAK1nB,WACL+vB,EAAMn7B,KAAK8yB,EAAK1xB,MAGxBoiC,EAAMhI,WAAagI,EAAMhI,YAAc,GACnCgI,EAAMhI,WAAWG,KAAK,SAAAC,GAAK,MAAwB,QAApBA,EAAMC,YAErC,OAAO5B,EAEXuJ,EAAMhI,WAAWx7B,KAAK,CAClB67B,UAAW,MACXV,MAAOA,EAAMz7B,KAAK,OAI1B,OAAO,IAAImpE,sBAAsB,CAC7Bt1D,KAAM0mB,EAAK1mB,KACXmpB,IAAKioB,IAAUnD,MAAM9kB,MAKjC,IAAMq2F,EAAU,CACZ7wD,eADY,WAER,OAAOhgE,KAAK2rB,eAAeq0C,gBAE/BI,mBAJY,WAKR,OAAOpgE,KAAK2rB,eAAey0C,oBAE/BW,iBAPY,WAQR,IAAIhpC,EAAO/3B,KAAK2rB,eAAeo1C,iBAE/B,OAAKhpC,GAML/3B,KAAKs8E,MAAM,oCAAqCuxC,EAAQ91F,IAGpDpN,IAAQy9E,oBACRrwE,EAAO/3B,KAAKysH,QAAQqE,QAAQ/4F,GAC5B/3B,KAAKs8E,MAAM,8CACPuxC,EAAQ91F,IAEZA,EAAO/3B,KAAK2wH,oCAAoC54F,GAChD/3B,KAAKs8E,MAAM,yDACPuxC,EAAQ91F,KAGZpN,IAAQ8tD,gCACR1gD,EAAO/3B,KAAKgtH,eAAe+D,mCAAmCh5F,GAC9DjP,EAAOpZ,MACH,uDAAwDqoB,IAWhEA,EAnIgB,SAASgpC,GAC7B,IAAKA,EACD,MAAM,IAAI5iE,MAAM,mCAGpB,IAAM6yH,EAAc,IAAI1uE,IAAiBye,EAAiBvmC,KACpDy2F,EAAaD,EAAYE,YAAY,SACvC94B,GAAU,EAEV64B,GAAuC,aAAzBA,EAAW54F,YACzB44F,EAAW54F,UAAY,WACvB+/D,GAAU,GAGd,IAAM+4B,EAAaH,EAAYE,YAAY,SAO3C,OALIC,GAAuC,aAAzBA,EAAW94F,YACzB84F,EAAW94F,UAAY,WACvB+/D,GAAU,GAGVA,EACO,IAAIzxB,sBAAsB,CAC7Bt1D,KAAM0vD,EAAiB1vD,KACvBmpB,IAAKw2F,EAAYI,aAIlBrwD,EAuGIswD,CAAgBt5F,GAGvBA,EAAO/3B,KAAKgtH,eAAesE,2BAA2Bv5F,KAnClDjP,EAAOpZ,MAAM,iDAEN,KAqCfs2D,kBAlDY,WAmDR,IAAIjuC,EAAO/3B,KAAK2rB,eAAeq6C,kBAW/B,OATAhmE,KAAKs8E,MAAM,qCAAsCuxC,EAAQ91F,IAGrDpN,IAAQy9E,oBACRrwE,EAAO/3B,KAAKysH,QAAQqE,QAAQ/4F,GAC5B/3B,KAAKs8E,MACD,+CAAgDuxC,EAAQ91F,KAGzDA,GAAQ,KAIvB/iC,OAAOq5B,KAAKwiG,GAAS5vH,QAAQ,SAAAjF,GACzBhH,OAAOC,eACH4gD,EAAwB3/C,UACxB8F,EAAM,CACF7G,IAAK07H,EAAQ70H,OAKzB65C,EAAwB3/C,UAAUw6H,SAAW,SAAS3+E,GAClD,OAAO/xC,KAAKksH,WAAW/2H,IAAI48C,IAO/B8D,EAAwB3/C,UAAUu2C,SAAW,SAASI,GAClD,IAAMkF,EAAQlF,EAAMkF,MAIpB,GAFAjpB,EAAOnZ,KAAP,OAAArS,OAAmBuvC,EAAnB,SAAAvvC,OAAgC0C,OAE5BA,KAAKuyC,YAAYzjB,IAAIijB,GACrBjpB,EAAOrZ,MAAP,GAAAnS,OAAgBuvC,EAAhB,mBAAAvvC,OAAuC0C,WAD3C,CAMAA,KAAKuyC,YAAYxmB,IAAIgmB,EAAOlF,GAE5B,IAAM0kF,EAAe1kF,EAAM44C,oBAa3B,GAXI8rC,EACAvxH,KAAKwxH,WAAWD,KAGR5mG,IAAQ8tD,+BACL5rC,EAAMqK,gBACLrK,EAAM26B,iBAAmB36B,EAAMqvB,YAC3CpzC,EAAOrZ,MAAP,GAAAnS,OAAgB0C,KAAhB,2BAAA1C,OAA8CuvC,IAI9CliB,IAAQ8tD,+BACD5rC,EAAM26B,gBAAkB36B,EAAMqvB,UAAW,CAChD,IAAMhjC,EAAWl5B,KAAKyxH,0BAA0B5kF,GAEhD7sC,KAAK8sH,eAAe4E,eAAex4F,EAASD,MAAM,IAClD,IAAMW,EACAV,EAASmiB,OAAO5hB,KAAK,SAAA0oB,GAAS,MAA4B,QAAxBA,EAAUxoB,YAE9CC,GACA55B,KAAK2sH,UAAUgF,aAAa/3F,EAASX,OAEzC,IAAM24F,EACA14F,EAASmiB,OAAOliB,OACd,SAAAgpB,GAAS,MAA4B,QAAxBA,EAAUxoB,YAE/B,GAAIi4F,EAAW,CACX,IAAMC,EAAiB,IAAIvnG,IAE3BsnG,EAAU3wH,QAAQ,SAAAu4B,GACd,IAAMD,EAAcC,EAASP,MAAM,GAC7B64F,EAAUt4F,EAASP,MAAM,GAE/B44F,EAAe9lG,IAAIwN,EAAau4F,KAEpC9xH,KAAKktH,YAAYyE,aAAaE,OAY1Ch8E,EAAwB3/C,UAAU0yE,eAAiB,SAAS/7B,GACxD,IAAK7sC,KAAK+xH,oBAAoB,iBAAkBllF,GAE5C,OAAO,EAGX/jB,EAAOnZ,KAAP,UAAArS,OAAsBuvC,EAAtB,kBAAAvvC,OAA4C0C,OAC5C,IAAMgyH,EAAenlF,EAAM44C,oBAE3B,OAAKusC,GAMLhyH,KAAKwxH,WAAWQ,IAET,IAPHlpG,EAAOrZ,MAAP,iBAAAnS,OACqBuvC,EADrB,kBAAAvvC,OAC2C0C,KAD3C,yBAGO,IAYf61C,EAAwB3/C,UAAUs7H,WAAa,SAAS5hF,GACpD5vC,KAAK2rB,eAAesmG,UAAUriF,GAC9B5vC,KAAKisH,cAAcnuH,KAAK8xC,IAO5BiG,EAAwB3/C,UAAUg8H,cAAgB,SAAStiF,GACnDjlB,IAAQwnG,oBACRnyH,KAAKoyH,0BAA0BxiF,GAE/B5vC,KAAK2rB,eAAe0mG,aAAaziF,GAErC5vC,KAAKisH,cACCjsH,KAAKisH,cAAc9yF,OAAO,SAAAjN,GAAM,OAAIA,IAAW0jB,KAczDiG,EAAwB3/C,UAAU67H,oBAAsB,SAChD/oE,EACAnX,GACJ,IAAMygF,EAAatyH,KAAKuyC,YAAYzjB,IAAI+iB,EAAWE,OAOnD,OALKugF,GACDxpG,EAAOrZ,MAAP,GAAAnS,OACO0rD,EADP,MAAA1rD,OACsBu0C,EADtB,wBAAAv0C,OACuD0C,OAGpDsyH,GASXz8E,EAAwB3/C,UAAUq8H,kBAAoB,SAAS3iF,GAC3D,OAAO5vC,KAAKisH,cAAc1tH,QAAQqxC,IAAgB,GAUtDiG,EAAwB3/C,UAAUujF,YAAc,SAAS5nC,GACrD,IAAMmgF,EAAengF,EAAW4zC,oBAEhCzlF,KAAKs8E,MACD,eACAzqC,EAAWE,MAAOigF,EAAeA,EAAa9yH,QAAKpE,GAElDkF,KAAK+xH,oBAAoB,eAAgBlgF,KAI9C7xC,KAAKuyC,YAAY9jB,OAAOojB,EAAWE,OACnC/xC,KAAKksH,WAAWz9F,OAAOojB,EAAWE,OAE9BigF,IACIrnG,IAAQwnG,oBACRnyH,KAAKoyH,0BAA0BJ,GAE/BhyH,KAAK2rB,eAAe0mG,aAAaL,MAY7Cn8E,EAAwB3/C,UAAUs8H,mBAAqB,SAAStmG,GAC5D,IAAM2gB,EAAQ3gB,EAAOkjB,YAAY,GAEjC,GAAKvC,EAOL,OAAO7sC,KAAK2rB,eAAe8mG,aAAah5F,KAAK,SAAApjC,GAAC,OAAIA,EAAEw2C,QAAUA,IAN1D/jB,EAAOrZ,MAAM,mCAqBrBomC,EAAwB3/C,UAAUwxE,aAAe,SAASN,EAAUC,GAAU,IAAAj6B,EAAAptC,KAC1E,GAAI2qB,IAAQwnG,qBAAuB/qD,GAAYC,EAAU,CAGrD,IAAMqrD,EAAS1yH,KAAKwyH,mBAAmBprD,EAASqe,qBAC1Cv5D,EAASm7C,EAASoe,oBAExB,GAAIitC,GAAUxmG,EAAQ,CAClB,IAAM2gB,EAAQ3gB,EAAOkjB,YAAY,GAEjC,GAAIvC,EACA,OAAO6lF,EAAOhrD,aAAa76B,EAAO3gB,GAAQ6b,KAAK,WAQ3C,IAAMnX,EAAOwc,EAAK8+E,WAAW/2H,IAAIiyE,EAASr1B,OAoB1C,OAlBA3E,EAAKmF,YAAY9jB,OAAO24C,EAASr1B,OACjC3E,EAAK8+E,WAAWz9F,OAAO24C,EAASr1B,OAChC3E,EAAK6+E,cACC7+E,EAAK6+E,cAAc9yF,OAAO,SAAA9iC,GAAC,OAAIA,IAAM61B,IAE3CkhB,EAAKmF,YAAYxmB,IAAIs7C,EAASt1B,MAAOs1B,GAIrCA,EAAS8Q,WAAa/Q,EAAS+Q,WAC/B/qC,EAAK6+E,cAAcnuH,KAAKouB,GAExBkhB,EAAK8+E,WAAWngG,IAAIs7C,EAASt1B,MAAOnhB,GACpCwc,EAAK7iB,aAAa2C,KACd+Y,IAAU1J,yBACV8qC,EACAsrD,EAAmB/hG,KAEhB,KAavB,OAPIw2C,GACApnE,KAAKy5E,YAAYrS,GAEjBC,GACArnE,KAAKysC,SAAS46B,GAGXj8B,QAAQC,SAAQ,IAU3BwK,EAAwB3/C,UAAUyyE,gBAAkB,SAAS92B,GACzD,IAAMmgF,EAAengF,EAAW4zC,oBAMhC,OAJAzlF,KAAKs8E,MACD,mBACAzqC,EAAWE,MAAOigF,EAAeA,EAAa9yH,GAAK,QAElDc,KAAK+xH,oBAAoB,mBAAoBlgF,KAK9CmgF,GACAlpG,EAAOnZ,KAAP,YAAArS,OACgBu0C,EADhB,kBAAAv0C,OAC2C0C,OAC3CA,KAAKkyH,cAAcF,IAEZ,IAGXlpG,EAAOrZ,MAAP,2CAAAnS,OAAwDu0C,KAEjD,KAOXgE,EAAwB3/C,UAAUk8H,0BAA4B,SACtDlmG,GACJ,GAAKA,EAAL,CAKA,IAAMwmG,EAAS1yH,KAAKwyH,mBAAmBtmG,GAEnCwmG,EACA1yH,KAAK2rB,eAAe8tD,YAAYi5C,GAEhC5pG,EAAOzZ,IAAI,yCAInBwmC,EAAwB3/C,UAAU60H,kBAAoB,SAAS5jF,EAAOyrF,GAGlE,OAFA5yH,KAAKs8E,MAAM,oBAAqBn1C,EAAOyrF,GAEhC5yH,KAAK2rB,eAAeo/F,kBAAkB5jF,EAAOyrF,IAWxD/8E,EAAwB3/C,UAAU28H,4BAA8B,SACxDC,GACJ,IAAIC,EAASD,EAASt4F,IAEhBw4F,EAAkBD,EAAOx0H,QAAQ,WACjC00H,EAAgBF,EAAOx0H,QAAQ,mBAAoBy0H,GACrDE,EAAkBH,EAAO7+C,YAAY,gBAEzC,IAAuB,IAAnB++C,IACwB,IAArBC,GACAA,IAAoBD,EACvB,OAAOH,EAGX,IAAMK,EAAcJ,EAAOx0H,QAAQ,OAAQ00H,GACrCG,EAASL,EAAOv0H,UAAUy0H,EAAeE,EAAc,GAG7DD,GADAH,EAASA,EAAO31H,QAAQg2H,EAAQ,KACPl/C,YAAY,gBACrC,IAAMm/C,EAAgBN,EAAOx0H,QAAQ,OAAQ20H,GACvCI,EAAUP,EAAOn3H,MAAM,EAAGy3H,GAC1BE,EAAgBH,EAAO5hE,OACvBgiE,EAAUT,EAAOn3H,MAAMy3H,GAI7B,OAFAN,EAAM,GAAAz1H,OAAMg2H,EAAN,QAAAh2H,OAAoBi2H,GAApBj2H,OAAoCk2H,GAEnC,IAAI7sD,sBAAsB,CAC7Bt1D,KAAMyhH,EAASzhH,KACfmpB,IAAKu4F,KAYbl9E,EAAwB3/C,UAAUu9H,2BAA6B,SACvD1yD,GACJ,IAAMiwD,EAAc,IAAI1uE,IAAiBye,EAAiBvmC,KACtDk5F,GAAoB,EAClBzC,EAAaD,EAAYE,YAAY,SAE3C,GAAID,EAAY,CACZ,IAAM0C,EACA3zH,KAAK8tH,0BAA0BhhF,KAEjCmkF,EAAW54F,YAAcs7F,IACzB1C,EAAW54F,UAAYs7F,EACvB7qG,EAAOnZ,KAAP,qCAAArS,OACyCq2H,IACzCD,GAAoB,QAGxB5qG,EAAOlZ,KAAK,oDAGhB,IAAMuhH,EAAaH,EAAYE,YAAY,SAE3C,GAAIC,EAAY,CACZ,IAAMyC,EACA5zH,KAAK8tH,0BAA0BhhF,KAEjCqkF,EAAW94F,YAAcu7F,IACzBzC,EAAW94F,UAAYu7F,EACvB9qG,EAAOnZ,KAAP,qCAAArS,OACyCs2H,IACzCF,GAAoB,QAGxB5qG,EAAOlZ,KAAK,mDAGhB,OAAI8jH,EACO,IAAI/sD,sBAAsB,CAC7Bt1D,KAAM0vD,EAAiB1vD,KACvBmpB,IAAKw2F,EAAYI,aAIlBrwD,GAGXlrB,EAAwB3/C,UAAUgtE,oBAAsB,SAASkd,GAAa,IAAAryC,EAAA/tC,KACtE8yH,EAAW1yC,EAIf,GAFApgF,KAAKs8E,MAAM,oCAAqCuxC,EAAQiF,IAEpD9yH,KAAKsR,QAAQ8tD,aAAep/D,KAAKsR,QAAQ+tD,WAAY,CACrD,IAAMw0D,EAAYpxE,IAAUrhC,MAAM0xG,EAASt4F,KACrCzB,EAAa86F,EAAU19F,MAAMsD,KAAK,SAAA/kC,GAAC,MAAe,UAAXA,EAAE2c,OAE3CrR,KAAKsR,QAAQ8tD,YACbhqC,IAAQkG,gBAAgBvC,EAAY,QAEpC3D,IAAQwF,iBAAiB7B,EAAY,QAGzC+5F,EAAW,IAAInsD,sBAAsB,CACjCt1D,KAAMyhH,EAASzhH,KACfmpB,IAAKioB,IAAUnD,MAAMu0E,KAGzB7zH,KAAKs8E,MAAM,4CACPuxC,EAAQiF,IAehB,OAZAA,EAAW9yH,KAAKyzH,2BAA2BX,GAE3CA,EAAW9yH,KAAK6yH,4BAA4BC,GAGxCnoG,IAAQy9E,oBACR0qB,EAAW9yH,KAAKysH,QAAQqH,cAAchB,GACtC9yH,KAAKs8E,MACD,oDACAuxC,EAAQiF,KAGT,IAAI1nF,QAAQ,SAACC,EAASC,GACzByC,EAAKpiB,eAAeu3C,oBAAoB4vD,GACnC/qF,KAAK,WACFgG,EAAKuuC,MAAM,gCACX,IAAM6vC,EAAa/2F,IAAQqF,SAASq4F,EAASt4F,KAEzC2xF,IAAep+E,EAAKo+E,aACpBp+E,EAAKo+E,WAAaA,EAClBp+E,EAAKxjB,aAAa2C,KACd+Y,IAAU9I,oBAAqB4Q,EAAMo+E,IAE7C9gF,KACD,SAAAvxB,GACCi0B,EAAKuuC,MAAM,+BAAgCxiE,GAC3Ci0B,EAAKxjB,aAAa2C,KACd+Y,IAAUpJ,6BACV/iB,EAAKi0B,GACTzC,EAAOxxB,QAkBvB+7B,EAAwB3/C,UAAUmzE,uBAAyB,SAASoM,GAChE3sD,EAAOpZ,MAAP,GAAApS,OAAgB0C,KAAhB,4BAAA1C,OAA+Cm4E,IAC/C,IAAM2iB,EAAUp4F,KAAKgsH,sBAAwBv2C,EAI7C,OAFAz1E,KAAKgsH,oBAAsBv2C,EAEpB2iB,GAaXviD,EAAwB3/C,UAAU69H,mCAC5B,SAASh8F,GACP,IAAMyC,EAAMioB,IAAUrhC,MAAM2W,EAAKyC,KAC3B8G,EAAQ9G,EAAIrE,MAAMsD,KAAK,SAAAjD,GAAK,MAAmB,UAAfA,EAAMnlB,OAsB5C,OAnBAiwB,EAAM+Y,KAAO,CACT,CACIn7C,GA/xDQ,IAgyDRm5B,UAAW,QAEf,CACIn5B,GAlyDQ,IAmyDRm5B,UAAW,QAEf,CACIn5B,GAryDQ,IAsyDRm5B,UAAW,SAInBiJ,EAAMsvF,aAAe,CACjBr7H,MAAK,YAAA+H,OAAcyuH,EAAevuH,KAAK,OAGpC,IAAImpE,sBAAsB,CAC7Bt1D,KAAM0mB,EAAK1mB,KACXmpB,IAAKioB,IAAUnD,MAAM9kB,MAIjCqb,EAAwB3/C,UAAU6wE,qBAAuB,SAASqZ,GAAa,IAAAvxC,EAAA7uC,KAU3E,GATAA,KAAKs8E,MAAM,qCAAsCuxC,EAAQztC,IAIzDA,EAAcpgF,KAAK2sH,UAAUqH,uBAAuB5zC,GACpDpgF,KAAKs8E,MACD,kDACAuxC,EAAQztC,IAERpgF,KAAKsR,QAAQ+tD,WAAY,CACzB,IAAMw0D,EAAYpxE,IAAUrhC,MAAMg/D,EAAY5lD,KACxCzB,EAAa86F,EAAU19F,MAAMsD,KAAK,SAAA/kC,GAAC,MAAe,UAAXA,EAAE2c,OAE/C+jB,IAAQwF,iBAAiB7B,EAAY,QAGrCqnD,EAAc,IAAIzZ,sBAAsB,CACpCt1D,KAAM+uE,EAAY/uE,KAClBmpB,IAAKioB,IAAUnD,MAAMu0E,KA4C7B,OAvCIlpG,IAAQy9E,mBAERhoB,EAAc,IAAIzZ,sBAAsB,CACpCt1D,KAAM+uE,EAAY/uE,KAClBmpB,IAAKx6B,KAAKktH,YAAY+G,SAAS7zC,EAAY5lD,OAG/Cx6B,KAAKs8E,MACD,iDACAuxC,EAAQztC,IAGZA,EAAcpgF,KAAKysH,QAAQqH,cAAc1zC,GACzCpgF,KAAKs8E,MACD,+CACAuxC,EAAQztC,IAERpgF,KAAKiuH,kBAEL7tC,EAAcpgF,KAAK+zH,mCAAmC3zC,GACtDpgF,KAAKs8E,MACD,oDACAuxC,EAAQztC,MAKhBA,EAAc6vC,EAAe7vC,GAK7Bz1D,IAAQq9E,uBAAyBr9E,IAAQ+X,oBACzC5Z,EAAOpZ,MAAM,oDAGb0wE,EAAcpgF,KAAKk0H,wBAAwB9zC,IAGxC,IAAIh1C,QAAQ,SAACC,EAASC,GACzBuD,EAAKljB,eAAeo7C,qBAAqBqZ,GACpCr4C,KAAK,WACF8G,EAAKytC,MAAM,iCACX,IAAM8vC,EAAch3F,IAAQqF,SAAS2lD,EAAY5lD,KAE7C4xF,IAAgBv9E,EAAKu9E,cACrBv9E,EAAKu9E,YAAcA,EACnBv9E,EAAKtkB,aAAa2C,KACd+Y,IAAU7I,qBAAsByR,EAAMu9E,IAE9C/gF,KACD,SAAAvxB,GACC+0B,EAAKytC,MAAM,gCAAiCxiE,GAC5C+0B,EAAKtkB,aAAa2C,KACd+Y,IAAUnJ,8BACVhjB,EACA+0B,GACJvD,EAAOxxB,QAiBvB+7B,EAAwB3/C,UAAUg+H,wBAA0B,SACpD9zC,GACJ,IAAMyzC,EAAYpxE,IAAUrhC,MAAMg/D,EAAY5lD,KACxCzB,EAAa86F,EAAU19F,MAAMsD,KAAK,SAAA/kC,GAAC,MAAe,UAAXA,EAAE2c,OAE/C,IAAK0nB,EAGD,OAFAjQ,EAAOpZ,MAAM,gDAEN0wE,EAGX,GAAIrnD,EAAWgC,IAAIyY,KAAK,SAAAzY,GAAG,MAAgC,SAA5BA,EAAIC,MAAMhtB,gBAGrC,OAFA8a,EAAOpZ,MAAM,uDAEN0wE,EAOX,IApBiB,IAkBb+zC,EAFIx4F,EAAwB5C,EAAxB4C,KAAMR,EAAkBpC,EAAlBoC,SAAUJ,EAAQhC,EAARgC,IAClBq5F,EAAgBj5F,EAAS16B,WAAW3D,MAAM,KAGvCxI,EAAI,IAAKA,GAAK,GAAIA,IACvB,IAAK8/H,EAAcpoF,SAAS13C,GAAI,CAC5B6/H,EAAmB7/H,EACnB8/H,EAAct2H,KAAKxJ,GACnBykC,EAAWoC,SAAWi5F,EAAc52H,KAAK,KACzC,MAIR,YAAgC,IAArB22H,GACPrrG,EAAOrZ,MAAM,gDAEN2wE,IAGXrlD,EAAIj9B,KAAK,CACLk9B,MAAO,OACPC,QAASk5F,EACTpwC,KAAM,MAGVpoD,EAAK79B,KAAK,CACNtC,OAAQ,yEAGRy/B,QAASk5F,IAGbrrG,EAAOpZ,MAAP,+BAAApS,OACmC62H,EADnC,uBAGO,IAAIxtD,sBAAsB,CAC7Bt1D,KAAM+uE,EAAY/uE,KAClBmpB,IAAKioB,IAAUnD,MAAMu0E,OAiB7Bh+E,EAAwB3/C,UAAUqzE,uBAAyB,SAASkM,GAChE3sD,EAAOpZ,MAAP,GAAApS,OAAgB0C,KAAhB,4BAAA1C,OAA+Cm4E,IAC/C,IAAM2iB,EAAUp4F,KAAKykE,sBAAwBgR,EAI7C,OAFAz1E,KAAKykE,oBAAsBgR,EAEpB2iB,GAOXviD,EAAwB3/C,UAAUusE,qBAAuB,WACrD,IAAMpgB,EAAUjtB,IAAQyE,eAExB/Q,EAAOnZ,KAAP,GAAArS,OAAe0C,KAAf,kCAAA1C,OAAoD+kD,IACpDriD,KAAK8sH,eAAe4E,eAAervE,IAOvCxM,EAAwB3/C,UAAUuxE,kBAAoB,WAClD3+C,EAAOnZ,KAAK,gCACZ3P,KAAK8sH,eAAeuH,uBAQxBx+E,EAAwB3/C,UAAUqvB,MAAQ,WACtCvlB,KAAKs8E,MAAM,QAGXt8E,KAAKg+D,eAAe9d,IAChB0nE,IAAoC5nH,KAAKssH,mBAC7CtsH,KAAKg+D,eAAe9d,IAChB0nE,IAAyC5nH,KAAKqsH,uBAPD,IAAAiI,GAAA,EAAAC,GAAA,EAAAC,OAAA15H,EAAA,IASjD,QAAA25H,EAAAC,EAAyB10H,KAAKm2C,aAAa3oB,SAA3Cn4B,OAAAo4B,cAAA6mG,GAAAG,EAAAC,EAAAhnG,QAAAC,MAAA2mG,GAAA,EAAqD,KAA1CK,EAA0CF,EAAAl/H,MAAAq/H,GAAA,EAAAC,GAAA,EAAAC,OAAAh6H,EAAA,IACjD,QAAAi6H,EAAAC,EAA0BL,EAAWnnG,SAArCn4B,OAAAo4B,cAAAmnG,GAAAG,EAAAC,EAAAtnG,QAAAC,MAAAinG,GAAA,EAA+C,KAApCl6D,EAAoCq6D,EAAAx/H,MAC3CyK,KAAK+vH,mBAAmBr1D,IAFqB,MAAA5gD,GAAA+6G,GAAA,EAAAC,EAAAh7G,EAAA,YAAA86G,GAAA,MAAAI,EAAAjnG,QAAAinG,EAAAjnG,SAAA,WAAA8mG,EAAA,MAAAC,KATJ,MAAAh7G,GAAAy6G,GAAA,EAAAC,EAAA16G,EAAA,YAAAw6G,GAAA,MAAAI,EAAA3mG,QAAA2mG,EAAA3mG,SAAA,WAAAwmG,EAAA,MAAAC,GAcjDx0H,KAAKm2C,aAAayoD,QAElB5+F,KAAKisH,cAAgB,GAEhBjsH,KAAKm4D,IAAI88D,sBAAsBj1H,OAChC8oB,EAAOrZ,MAAM,4CAEU,OAAvBzP,KAAKusH,gBACLr4H,OAAOyzC,cAAc3nC,KAAKusH,eAC1BvsH,KAAKusH,cAAgB,MAEzBzjG,EAAOnZ,KAAP,WAAArS,OAAuB0C,KAAvB,QACAA,KAAK2rB,eAAepG,SA8OxB,SAASotG,EAAmBnxE,GACxB,OAAIA,GAAWA,EAAQnG,QAAUmG,EAAQnG,OAAOp+C,OACrCukD,EAAQnG,OAAO,GAAGpiB,MAAM,GACxBuoB,GAAWA,EAAQvoB,OAASuoB,EAAQvoB,MAAMh8B,OAC1CukD,EAAQvoB,MAAM,GAGlB,KAvLX4c,EAAwB3/C,UAAU8wE,aAAe,SAASt0C,GACtD,GAAI/H,IAAQkO,aAAe74B,KAAKiuH,gBAAiB,CAC7C,IAGMiH,EAAY,CACdC,UAAW,CACP,CACI7+G,IAjmEI,IAkmEJ8+G,sBAAuB,GAE3B,CACI9+G,IApmEI,IAqmEJ8+G,sBAAuB,GAE3B,CACI9+G,IAvmEI,OA0lEVtW,KAAK2rB,eAAe8mG,aAAah5F,KAAK,SAAAi5F,GAAM,OACzB,OAAjBA,EAAO7lF,OAAwC,UAAtB6lF,EAAO7lF,MAAMxG,OAiBlCgvF,cAAcH,GAG9B,OAAOl1H,KAAKs1H,sBAAqB,EAAoB5iG,IAGzDmjB,EAAwB3/C,UAAU8sE,YAAc,SAAStwC,GACrD,OAAO1yB,KAAKs1H,sBAAqB,EAAkB5iG,IAGvDmjB,EAAwB3/C,UAAUo/H,qBAAuB,SACjDC,EACA7iG,GAAa,IAAA0vC,EAAApiE,KACX63F,EAAU09B,EAAU,QAAU,SAEpCv1H,KAAKs8E,MAAL,SAAAh/E,OAAoBu6F,GAAWjhF,KAAK0K,UAAUoR,EAAa,KAAM,MAEjE,IAAM8iG,EAAgB,SAACC,EAAWC,EAAWC,GACzC,IA2EI,GA1EAvzD,EAAKka,MAAL,SAAAh/E,OACau6F,EADb,2BAC+Cg2B,EAAQ4H,IAGnD9qG,IAAQy9E,oBAERqtB,EAAYrzD,EAAKqqD,QAAQqE,QAAQ2E,GACjCrzD,EAAKka,MAAL,SAAAh/E,OACau6F,EADb,qCAEIg2B,EAAQ4H,IACRrzD,EAAK6rD,kBAELwH,EACMrzD,EAAKuuD,oCAAoC8E,GAC/CrzD,EAAKka,MACD,SAAAh/E,OAASu6F,EAAT,4BACE,sBAAuBg2B,EAAQ4H,MAYxC9qG,IAAQy9E,oBAGJhmC,EAAK4rD,mBAAmBlhF,MACrBs1B,EAAK0qD,eAAe8I,wBACxBxzD,EAAKK,uBAITgzD,EAAY,IAAI9uD,sBAAsB,CAClCt1D,KAAMokH,EAAUpkH,KAChBmpB,IAAK4nC,EAAK0qD,eAAe+I,gCACrBJ,EAAUj7F,OAGlB4nC,EAAKka,MACD,SAAAh/E,OAASu6F,EAAT,6BACO,8CACPg2B,EAAQ4H,KAIZrzD,EAAK6rD,kBAELwH,EAAYrzD,EAAKuqD,UAAUmJ,sBAAsBL,GACjDrzD,EAAKka,MACD,SAAAh/E,OAASu6F,GACH,uCACNg2B,EAAQ4H,MAGXrzD,EAAK9wD,QAAQy7C,YAAcpiC,IAAQqiC,gBAEpCyoE,EAAY,IAAI9uD,sBAAsB,CAClCt1D,KAAMokH,EAAUpkH,KAChBmpB,IAAK4nC,EAAK8qD,YAAY6I,eAAeN,EAAUj7F,OAGnD4nC,EAAKka,MACD,SAAAh/E,OAASu6F,GACF,0CACPg2B,EAAQ4H,MAKXF,EAAS,CACV,IAAMvvD,EACA,IAAIjuB,IAAIqqB,EAAK4D,kBAAkBxrC,KAC/BumC,EAAmB,IAAIhpB,IAAI09E,EAAUj7F,KArKnB2sC,EAuKDnB,EAvKQiB,EAuKWlG,GAtKhDp2C,IAAQge,mBAAqBhe,IAAQC,kBA+BvCu8C,GAASF,GACFE,EAAMhxC,OAAS8wC,EAAO9wC,OACtBgxC,EAAMhxC,MAAMl5B,SAAWgqE,EAAO9wC,MAAMl5B,SAC3CgqE,EAAO9wC,MAAMl1B,QAAQ,SAAC+B,EAAG1O,GACjB8gC,IAAQO,SACJwxC,EAAMhxC,MAAM7hC,GACZ,kBACA6yE,EAAMhmD,WACV8lD,EAAO9wC,MAAM7hC,GACP0O,EAAE5F,QAAQ,kBAAmB,sBAG3C6pE,EAAOjtD,IAAMitD,EAAO9lD,QAAU8lD,EAAO9wC,MAAM34B,KAAK,KA8HxCi4H,EAAY,IAAI9uD,sBAAsB,CAClCt1D,KAAMokH,EAAUpkH,KAChBmpB,IAAKumC,EAAiB/mD,MAI9B,IAAM4/B,EAjzClB,SAAwB7hB,GAKpB,IAAM6hB,EAAU,IAAItvB,IAMd0rG,EAAY,IAAI1rG,IAEtB,GAAoB,WAAhB2K,EAAO8C,IAA8B,OAATA,GACL,iBAAbA,EAAKyC,IAGf,OAFA1R,EAAOlZ,KAAK,mDAELgqC,EAGX,IAAMz4B,EAAUshC,IAAUrhC,MAAM2W,EAAKyC,KAErC,IAAKp6B,MAAMG,QAAQ4gB,EAAQgV,OACvB,OAAOyjB,EAvBe,IAAAq8E,GAAA,EAAAC,GAAA,EAAAC,OAAAr7H,EAAA,IA0B1B,QAAAs7H,EAAAC,EAAoBl1G,EAAQgV,MAA5B9gC,OAAAo4B,cAAAwoG,GAAAG,EAAAC,EAAA3oG,QAAAC,MAAAsoG,GAAA,EAAmC,KAAxBh8F,EAAwBm8F,EAAA7gI,MAC/B,GAAK6K,MAAMG,QAAQ05B,EAAMhB,OAAzB,CAIA,GAAI74B,MAAMG,QAAQ05B,EAAMX,YAAa,KAAAg9F,GAAA,EAAAC,GAAA,EAAAC,OAAA17H,EAAA,IACjC,QAAA27H,EAAAC,EAAoBz8F,EAAMX,WAA1BjkC,OAAAo4B,cAAA6oG,GAAAG,EAAAC,EAAAhpG,QAAAC,MAAA2oG,GAAA,EAAsC,KAA3B58F,EAA2B+8F,EAAAlhI,MAClC,QAA+B,IAApBmkC,EAAMC,gBACa,IAAhBD,EAAMT,MAAuB,CAEvC,IAAM09F,EACAj9F,EAAMT,MAAMn8B,MAAM,KAAKC,IACrB,SAAAu9B,GAAO,OAAI9Y,SAAS8Y,EAAS,MAC/BonB,EAAci1E,EAAW,GAI/Bj9F,EAAMT,MAAQ09F,EAGTX,EAAUlnG,IAAI4yB,IACfs0E,EAAUjqG,IAAI21B,EAAa,IAE/Bs0E,EAAU7gI,IAAIusD,GAAa5jD,KAAK47B,KAlBP,MAAA5f,GAAAy8G,GAAA,EAAAC,EAAA18G,EAAA,YAAAw8G,GAAA,MAAAI,EAAA3oG,QAAA2oG,EAAA3oG,SAAA,WAAAwoG,EAAA,MAAAC,IALN,IAAAI,GAAA,EAAAC,GAAA,EAAAC,OAAAh8H,EAAA,IA2B/B,QAAAi8H,EAAAC,EAAmB/8F,EAAMhB,MAAzB5jC,OAAAo4B,cAAAmpG,GAAAG,EAAAC,EAAAtpG,QAAAC,MAAAipG,GAAA,EAAgC,KAArBhmG,EAAqBmmG,EAAAxhI,MAC5B,GAAuB,SAAnBq7B,EAAK1nB,UAAT,CAIA,IAAMy4C,EAAO/wB,EAAKr7B,MACd2jC,EAAW0gB,EAAQzkD,IAAIwsD,GAEtBzoB,IACDA,EAAW,CACPD,MAAO,GACPoiB,OAAQ,GACRsG,QAEJ/H,EAAQ7tB,IAAI41B,EAAMzoB,IAGtB,IAAMooB,EAAa1wB,EAAK1xB,GAIxB,GAFAg6B,EAASD,MAAMn7B,KAAKwjD,GAEhB00E,EAAUlnG,IAAIwyB,GAAa,CAC3B,IAAMhoB,EAAa08F,EAAU7gI,IAAImsD,GADN21E,GAAA,EAAAC,GAAA,EAAAC,OAAAr8H,EAAA,IAG3B,QAAAs8H,EAAAC,EAAoB/9F,EAApBjkC,OAAAo4B,cAAAwpG,GAAAG,EAAAC,EAAA3pG,QAAAC,MAAAspG,GAAA,EAAgC,KAArBv9F,EAAqB09F,EAAA7hI,MAC5B2jC,EAASmiB,OAAOv9C,KAAK47B,IAJE,MAAA5f,GAAAo9G,GAAA,EAAAC,EAAAr9G,EAAA,YAAAm9G,GAAA,MAAAI,EAAAtpG,QAAAspG,EAAAtpG,SAAA,WAAAmpG,EAAA,MAAAC,OAhDJ,MAAAr9G,GAAA+8G,GAAA,EAAAC,EAAAh9G,EAAA,YAAA88G,GAAA,MAAAI,EAAAjpG,QAAAipG,EAAAjpG,SAAA,WAAA8oG,EAAA,MAAAC,MA1BT,MAAAh9G,GAAAo8G,GAAA,EAAAC,EAAAr8G,EAAA,YAAAm8G,GAAA,MAAAI,EAAAtoG,QAAAsoG,EAAAtoG,SAAA,WAAAmoG,EAAA,MAAAC,GAoF1B,OAAOv8E,EA6tCiB09E,CAAe7B,GAE/B3sG,EAAOpZ,MAAM,wBAAyBkqC,GACtCwoB,EAAKm1D,sBAAsB39E,GAE3B87E,EAAUD,GACZ,MAAOx2H,GACLmjE,EAAKka,MAAL,SAAAh/E,OAAoBu6F,EAApB,WAAsC54F,GACtCmjE,EAAKka,MAAL,SAAAh/E,OAAoBu6F,EAApB,WAAsCg2B,EAAQ4H,IAC9C3sG,EAAOrZ,MAAP,SAAAnS,OAAsBu6F,EAAtB,WAAwC54F,EAAG4uH,EAAQ4H,IAEnDE,EAAS12H,GA3LU,IAASkoE,EAAOF,GA2M3C,OAAO,IAAI77B,QAAQ,SAACC,EAASC,IAGrBiqF,EACYnzD,EAAKz2C,eAAeq3C,YAAYtwC,GAEhC0vC,EAAKz2C,eAAeq7C,aAAat0C,IAI5CqV,KACG,SAAAvN,GAAG,OAAIg7F,EAAch7F,EAAK6Q,EAASC,IACnC,SAAA77B,GAAK,OAxBK,SAACqK,EAAK67G,GACxBvzD,EAAKka,MAAL,SAAAh/E,OAAoBu6F,EAApB,aAAwC/9E,GACxC,IAAM65B,EACA4hF,EACItvF,IAAUjK,oBACViK,IAAUlK,qBAEpBqmC,EAAK73C,aAAa2C,KAAKymB,EAAW75B,EAAKsoD,GAEvCuzD,EAAS77G,GAeQ09G,CAAc/nH,EAAO67B,QA0B9CuK,EAAwB3/C,UAAUqhI,sBAAwB,SAAS39E,GAAS,IAAA69E,GAAA,EAAAC,GAAA,EAAAC,OAAA78H,EAAA,IACxE,QAAA88H,EAAAC,EAAoB73H,KAAKuyC,YAAY/kB,SAArCn4B,OAAAo4B,cAAAgqG,GAAAG,EAAAC,EAAAnqG,QAAAC,MAAA8pG,GAAA,EAA+C,KAApC5qF,EAAoC+qF,EAAAriI,MACrCuiI,EAAYjrF,EAAMsrC,WAExB,GAAIv+B,EAAQ9qB,IAAIgpG,GAAY,CACxB,IAAMz1E,EAAUzI,EAAQzkD,IAAI2iI,GAE5B,IAAKz1E,EAGD,YAFAv5B,EAAOrZ,MAAP,sBAAAnS,OAAmCw6H,EAAnC,QAAAx6H,OAAmD0C,OAIvD,IAAMoiD,EAAUpiD,KAAKksH,WAAW/2H,IAAI03C,EAAMkF,OACpCgmF,EAAapF,EAAmBtwE,GAChC21E,EAAarF,EAAmBvwE,GAGlC21E,IAAeC,GACI,OAAfA,EACAlvG,EAAOnZ,KAAP,8BAAArS,OACkCuvC,EADlC,QAAAvvC,OAC8C0C,MAC1CqiD,GAEJv5B,EAAOrZ,MAAP,wBAAAnS,OAC4BuvC,EAD5B,KAAAvvC,OACqCw6H,EADrC,QAAAx6H,OACqD0C,KADrD,WAEeqiD,GAEnBriD,KAAKksH,WAAWngG,IAAI8gB,EAAMkF,MAAOsQ,GAEjCriD,KAAKuqB,aAAa2C,KACd+Y,IAAU1J,yBAA0BsQ,EAAOkrF,IAE/CjvG,EAAOpZ,MACH,kBAAApS,OAAkBy6H,EAAlB,UAAAz6H,OAAqCuvC,EAArC,KAAAvvC,OAA8Cw6H,GAA9C,0BAAAx6H,OAC6B0C,YAE7B6sC,EAAM26B,gBAAmB36B,EAAMqvB,WAIvCpzC,EAAOlZ,KAAP,uCAAAtS,OAAmDuvC,EAAnD,WAAAvvC,OAAkEw6H,EAAlE,QAAAx6H,OAAkF0C,QAxClB,MAAA8Z,GAAA49G,GAAA,EAAAC,EAAA79G,EAAA,YAAA29G,GAAA,MAAAI,EAAA9pG,QAAA8pG,EAAA9pG,SAAA,WAAA2pG,EAAA,MAAAC,KA6C5E9hF,EAAwB3/C,UAAUgsE,gBAAkB,SAAS/qC,GAQzD,OAPAn3B,KAAKs8E,MAAM,kBAAmB1lE,KAAK0K,UAAU,CACzC6V,UAAWA,EAAUA,UACrBsqC,OAAQtqC,EAAUsqC,OAClBR,cAAe9pC,EAAU8pC,cACzB8c,iBAAkB5mD,EAAU4mD,kBAC7B,KAAM,MAEF/9E,KAAK2rB,eAAeu2C,gBAAgB/qC,IAY/C0e,EAAwB3/C,UAAU2jG,SAAW,SAASx6F,EAAUsY,GAIxDgT,IAAQq9E,sBAAwBr9E,IAAQkO,aACjClO,IAAQC,gBAEf5qB,KAAK2rB,eAAekuE,WACf9xD,KAAK1oC,GACLmsC,MAAM7zB,GAAY,cAMvB3X,KAAK2rB,eAAekuE,SAASx6F,IAWrCw2C,EAAwB3/C,UAAUu7H,0BAA4B,SAAS5kF,GACnE,IAAMkF,EAAQlF,EAAMkF,MAChB7Y,EAAWl5B,KAAK0wH,SAAS3+E,GAK7B,GAHI7Y,GACApQ,EAAOrZ,MAAP,4CAAAnS,OAAyDy0C,IAEzD/xC,KAAKiuH,gBAAiB,CACtB/0F,EAAW,CACPD,MAAO,GACPoiB,OAAQ,IAEZ,IAAK,IAAI/mD,EAAI,EAAGA,EAAIw3H,EAAkBx3H,IAClC4kC,EAASD,MAAMn7B,KAAKs3B,IAAQyE,gBAEhCX,EAASmiB,OAAOv9C,KAAK,CACjBm7B,MAAOC,EAASD,MAAMr9B,QACtB+9B,UAAW,aAGfT,EAAW,CACPD,MAAO,CAAE7D,IAAQyE,gBACjBwhB,OAAQ,IAGhB,IAAKr7C,KAAKsR,QAAQy7C,YAAcpiC,IAAQqiC,cAOpC,IAFA,IAAMirE,EAAe/+F,EAASD,MAAMh8B,OAE3B3I,EAAI,EAAGA,EAAI2jI,IAAgB3jI,EAAG,CACnC,IAAMilC,EAAcL,EAASD,MAAM3kC,GAC7Bw9H,EAAU18F,IAAQyE,eAExBX,EAASD,MAAMn7B,KAAKg0H,GACpB54F,EAASmiB,OAAOv9C,KAAK,CACjBm7B,MAAO,CAAEM,EAAau4F,GACtBn4F,UAAW,QAOvB,OAHAT,EAASyoB,KAAO9U,EAAMsrC,WACtBn4E,KAAKksH,WAAWngG,IAAIgmB,EAAO7Y,GAEpBA,GAiDX2c,EAAwB3/C,UAAUyqE,cAAgB,SAASD,GACnD1gE,KAAKsR,QAAQmuD,wBACb32C,EAAOpZ,MAAM,mDAAApS,OACgBojE,IAjDP,SAASm0B,EAAgBn0B,GACnD,GAAKm0B,EAAe49B,WAApB,CAMA,IAAMyF,EAAcrjC,EAAe49B,aAC9Bh5F,KAAK,SAAAi5F,GAAM,MAA0B,UAAtBA,EAAO7lF,MAAMxG,OAEjC,GAAK6xF,EAKL,GAAKA,EAAYC,cAAjB,CAKA,IAAMt5C,EAAaq5C,EAAYC,gBAE3Bz3D,GACA53C,EAAOpZ,MAAM,+CAGbmvE,EAAWs2C,UAAUl0H,QAAQ,SAAAhC,GACzBA,EAAEw2E,QAAS,MAGf3sD,EAAOpZ,MAAM,kDAGb,CAAE,EAAG,GAAIzO,QAAQ,SAAAm3H,GACTv5C,EAAWs2C,UAAUiD,KACrBv5C,EAAWs2C,UAAUiD,GAAU3iD,QAAS,MAIpDyiD,EAAY7C,cAAcx2C,QAvBtB/1D,EAAOpZ,MAAM,qDALboZ,EAAOlZ,KAAK,0DATZkZ,EAAOpZ,MAAM,qCAgDb2oH,CAAsBr4H,KAAK2rB,eAAgB+0C,KASnD7qB,EAAwB3/C,UAAUuK,SAAW,WACzC,aAAAnD,OAAc0C,KAAKd,GAAnB,SAAA5B,OAA6B0C,KAAK4zC,MAAlC,g9BCr/EJ,IAAM9qB,EAAS9tB,EAAQ,GAAqB2tB,UAAUQ,GAChD8c,EAAYjrC,EAAQ,GAEtBs9H,GAA2B,EAC3BC,GAA2B,EAOV9I,cAmBjB,SAAAA,EACQt3D,EACA9lB,EACA68E,EACAhjG,EACA2gB,EACA9M,EACAgN,EACAnc,EACAF,EACAkjB,GAAO,IAAAlM,EAaX,+FAbWJ,CAAAtnC,KAAAyvH,IACX/nF,EAAAH,EAAAvnC,KAAAwnC,EAAAioF,GAAAh7H,KAAAuL,KACIqyC,EACAnmB,EACA2gB,EACA,aAGA9M,EACAgN,KACCorB,IAAMA,EAGS,iBAATvnC,EACP,MAAM,IAAIvvB,UAAJ,QAAA/D,OAAsBszB,EAAtB,qBAdC,OAgBX8W,EAAK9W,KAAOA,EACZ8W,EAAKwnF,gBAAkBA,EACvBxnF,EAAKhX,MAAQA,EACbgX,EAAKkM,MAAQA,EAKblM,EAAK8wF,aAAe9nG,EAGhBgX,EAAKywB,KAAOzwB,EAAKmF,OACjBnF,EAAK+wF,oBA5BE/wF,wPA7B2BmtC,0DAmEtB,IAAAnpC,EAAA1rC,KAChBA,KAAK6sC,MAAMxC,iBAAiB,OAAQ,kBAAMqB,EAAKgtF,iBAC/C14H,KAAK6sC,MAAMxC,iBAAiB,SAAU,kBAAMqB,EAAKitF,0DAWjD7vG,EAAOpZ,MAAP,kBAAApS,OACsBgV,KAAK8K,MAD3B,OAEIpd,KAAK26D,mBAAoB36D,KAAKk2C,UAAWl2C,KAAKy2F,WAElDz2F,KAAKm4D,IAAI5tC,aAAa2C,KAAK+Y,EAAUvJ,kBAAmB18B,+CAWxD8oB,EAAOpZ,MAAP,oBAAApS,OACwBgV,KAAK8K,MAD7B,OAEIpd,KAAK26D,mBAAoB36D,KAAKk2C,UAAWl2C,KAAKy2F,WAElDz2F,KAAKm4D,IAAI5tC,aAAa2C,KAAK+Y,EAAUrJ,oBAAqB58B,sCAOtDzK,GACAyK,KAAK0wB,QAAUn7B,IAIfA,IACAyK,KAAKw4H,cAAe,GAIpBx4H,KAAKksB,SACLlsB,KAAKksB,OAAOwE,MAAQn7B,GAGxByK,KAAK0wB,MAAQn7B,EACbyK,KAAKktB,KAAK0tC,qBAAqC56D,yCAS/C,OAAOA,KAAK0wB,iDAUZ,OAAO1wB,KAAKkvH,kDAOZ,OAAO,oCAUP,OAAOlvH,KAAK4wB,2CAQFvf,GACNrR,KAAK+sC,YAAc17B,IAGvBrR,KAAK+sC,UAAY17B,EACjBrR,KAAKktB,KAAK0tC,0BAA0CvpD,4CAOpD,IAAMA,EAAOrR,KAAKwnE,eAAiB,QAAU,QAEvCpqD,EAAMlpB,OAAOm5D,YAAYjwC,MAE/B5N,QAAQH,IAAR,iBAAA/R,OAA6B+T,EAA7B,OAAwC+L,GACxCpd,KAAKqyC,WAAWi1C,qBAAhB,GAAAhqF,OAAwC+T,EAAxC,YAAyD+L,EAKzD,IAAMw7G,EAAW1kI,OAAOk4D,gBAAgB,2BAClCysE,EAAS3kI,OAAOk4D,gBAAgB,yBAChC0sE,EACC12H,MAAMy2H,IAAYz2H,MAAMw2H,GAAgC,EAApBC,EAASD,EAI9CG,EAAO37G,GACNpd,KAAKqyC,WAAWi1C,qBAAqB,oBAClCtnF,KAAKqyC,WAAWi1C,qBAAqB,eACzCwxC,EAEN94H,KAAKqyC,WAAWi1C,qBAAhB,GAAAhqF,OAAwC+T,EAAxC,UAAuD0nH,EACvDvpH,QAAQH,IAAR,eAAA/R,OAA2B+T,EAA3B,OAAsC0nH,GAEtC5uG,IAAW+K,cAAcmL,YACrB,CACIL,WAAc3uB,EACdqf,MAAO1wB,KAAKw4H,aACZjjI,MAAOwjI,gDAYA1jD,GACVijD,GAA4Bt4H,KAAKk3C,gBAC9BqhF,GAA4Bv4H,KAAKwnE,iBAIrCxnE,KAAKk3C,iBACLohF,GAA2B,GAE3Bt4H,KAAKwnE,iBACL+wD,GAA2B,GAG/BljD,EAAUhrC,iBAAiB,UAAWrqC,KAAKg5H,cAAcljI,KAAKkK,2CAQ9D,qBAAA1C,OACI0C,KAAKkvH,gBADT,MAAA5xH,OAEI0C,KAAKk2C,UAFT,WAAA54C,OAGI0C,KAAK4zC,MAHT,oWCzPR,IAAM9qB,EAASH,oBAAUQ,GAUJ8jG,aAOjB,SAAAA,EAAYn/F,gGAAKwZ,CAAAtnC,KAAAitH,GACbjtH,KAAK8tB,IAAMA,gFAkBgBkjG,GAE3B,IAAMiI,EAAcj5H,KAAK8tB,IAAIkoB,eAAelJ,KAE5C,IAAKmsF,EAAYh8H,OACb,OAAO,EACuB,IAAvBg8H,EAAYh8H,QACnB6rB,EAAOrZ,MACH,GAAAnS,OAAG0C,KAAK8tB,IAAR,wCACM,8BAA+BmrG,GAG7C,IAAMlgG,EAAai4F,EAAYE,YAAY,SAE3C,IAAKn4F,EAKD,OAJAjQ,EAAOpZ,MACH,GAAApS,OAAG0C,KAAK8tB,IAAR,yCACM,uBAEH,EAGX,IAAIwiD,GAAW,EAtByBnjD,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAwBxC,QAAAwyB,EAAAC,EAAyB0rG,EAAzB5jI,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAsC,KAA3BghG,EAA2B7gG,EAAA/3B,MAC5Bm7B,EAAQy9F,EAAWjyD,UACnBtsB,EAAcu+E,EAAW1oC,oBAKzByzC,EACAtpF,GAAe5vC,KAAK8tB,IAAIykG,kBAAkB3iF,GAC1CupF,EAAgBzoG,IAAUwoG,EAQhC,GANApwG,EAAOpZ,MAAP,GAAApS,OACO0C,KAAK8tB,IADZ,KAAAxwB,OACmB6wH,EADnB,YAAA7wH,OAEQozB,EAFR,4BAAApzB,OAGQ47H,EAHR,4BAAA57H,OAIQ67H,IAEHA,EAAL,CAKA,IAAMC,EACAp5H,KAAK8tB,IAAImgG,gBACLjuH,KAAK8tB,IAAI6+F,UAAU0M,UACnB,CAAEr5H,KAAK8tB,IAAIg/F,eAAewM,mBAEpC,GAAKF,EAAcn8H,OAAnB,CAOAqzE,GAAW,EAMXv3C,EAAWV,UAAY,WAGvB,IAAMqpB,EAAc03E,EAAc,GAM5BG,EAAY,YAAAj8H,OAAeokD,GAjDC1zB,GAAA,EAAAC,GAAA,EAAAC,OAAApzB,EAAA,IAmDlC,QAAAqzB,EAAAC,EAAsBgrG,EAAtB/jI,OAAAo4B,cAAAO,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAAqC,KAA1ByzB,EAA0BtzB,EAAA54B,MAEjCwjC,EAAWygG,WAAW/3E,GAGtB34B,EAAOpZ,MAAP,GAAApS,OACO0C,KAAK8tB,IADZ,2BAAAxwB,OACyCmkD,EADzC,SAAAnkD,OAEQ6wH,IACRp1F,EAAW0gG,iBAAiB,CACxBv6H,GAAIuiD,EACJv4C,UAAW,QACX3T,MAAOgkI,IAEXxgG,EAAW0gG,iBAAiB,CACxBv6H,GAAIuiD,EACJv4C,UAAW,OACX3T,MAAO44H,EAAWh2C,cAnEQ,MAAAr+D,GAAAmU,GAAA,EAAAC,EAAApU,EAAA,YAAAkU,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAsElC,GAAIkrG,EAAcn8H,OAAS,EAAG,CAC1B,IAAMy8B,EAAQ,CACVT,MAAOmgG,EAAc57H,KAAK,KAC1Bm8B,UAAW,OAGVZ,EAAW6oB,UAAUloB,EAAMC,UAAWD,EAAMT,SAE7CnQ,EAAOpZ,MAAP,GAAApS,OACO0C,KAAK8tB,IADZ,6BAAAxwB,OAC2C6wH,GACvCz0F,GACJX,EAAW2gG,aAAahgG,IAQ3B15B,KAAK8tB,IAAIxc,QAAQy7C,YAClB/sD,KAAK8tB,IAAIo/F,YAAYyM,gBAAgB5gG,QA9DrCjQ,EAAOrZ,MAAP,wBAAAnS,OAC4B6wH,EAD5B,QAAA7wH,OAC6C0C,KAAK8tB,QArDlB,MAAAhU,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,GAsHxC,OAAOijD,qDAagBmP,GACvB,IAAMm6C,EAAO55H,KAAK8tB,IAAI5uB,GADekwB,GAAA,EAAAC,GAAA,EAAAC,OAAAx0B,EAAA,IAGrC,QAAAy0B,EAAAC,EAAuBiwD,EAAaxmD,MAApC5jC,OAAAo4B,cAAA2B,GAAAG,EAAAC,EAAA9B,QAAAC,MAAAyB,GAAA,EAA2C,KAAhC+K,EAAgC5K,EAAAh6B,MACvC,OAAQ4kC,EAASjxB,WACjB,IAAK,QACL,IAAK,QACL,IAAK,UACDixB,EAAS5kC,MAAQ4kC,EAAS5kC,OAAT,GAAA+H,OAAqB68B,EAAS5kC,MAA9B,KAAA+H,OAAuCs8H,GACxD,MACJ,IAAK,OACD,GAAIz/F,EAAS5kC,MAAO,CAChB,IAAMskI,EAAoB1/F,EAAS5kC,MAAMuH,MAAM,KAE/C,GAAiC,IAA7B+8H,EAAkB58H,OAAc,CAChC,IAAMi3C,EAAW2lF,EAAkB,GAC7BlkD,EAAUkkD,EAAkB,GAElC1/F,EAAS5kC,MAAT,GAAA+H,OACS42C,EADT,KAAA52C,OACqBs8H,EADrB,KAAAt8H,OAC6Bq4E,EAD7B,KAAAr4E,OACwCs8H,QAExC9wG,EAAOlZ,KACH,yDAAAtS,OACkC68B,EAAS5kC,WAvB1B,MAAAukB,GAAAuV,GAAA,EAAAC,EAAAxV,EAAA,YAAAsV,GAAA,MAAAI,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAAsB,EAAA,MAAAC,+DAwCNyI,GAC/B,IAAKA,EACD,MAAM,IAAI55B,MAAM,mCAGpB,IAAM6yH,EAAc,IAAI1uE,IAAiBvqB,EAAKyC,KAE9C,OAAIx6B,KAAK85H,+BAA+B9I,GAC7B,IAAIrqD,sBAAsB,CAC7Bt1D,KAAM0mB,EAAK1mB,KACXmpB,IAAKw2F,EAAYI,aAIlBr5F,qDAkBgBgiG,GAEvB,IAAKA,IAAgBA,EAAYv/F,MAAQu/F,EAAY1oH,KACjD,OAAO0oH,EAGX,IAAM/I,EAAc,IAAI1uE,IAAiBy3E,EAAYv/F,KAC/Cw/F,EAAahJ,EAAYE,YAAY,SAEvC8I,GACAh6H,KAAKi6H,2BAA2BD,GAGpC,IAAMjhG,EAAai4F,EAAYE,YAAY,SAM3C,OAJIn4F,GACA/4B,KAAKi6H,2BAA2BlhG,GAG7B,IAAI4tC,sBAAsB,CAC7Bt1D,KAAM0oH,EAAY1oH,KAClBmpB,IAAKw2F,EAAYI,0WCpQ7B,IAAMtoG,EAASH,oBAAUQ,GAezB,SAAS+wG,EAA0BjgG,EAAOkgG,EAAiBrI,GACvDhpG,EAAOpZ,MACH,+BAAApS,OAA+Bw0H,GAA/B,iCAAAx0H,OACmC68H,EAAgBj7H,KACvD,IAAMq6B,EAAc4gG,EAAgBj7H,GAC9Bk7H,EAAkBD,EAAgBx4E,KAClC04E,EAAmBF,EAAgBv4C,MAEnC04C,EAAkBrgG,EAAMsgG,WAAWhhG,GAErC+gG,IAAoBxI,GAKpBwI,IACAxxG,EAAOpZ,MACH,GAAApS,OAAGi8B,EAAH,0CAAAj8B,OACKg9H,EADL,oCAKJrgG,EAAMu/F,WAAWc,GAEjBxxG,EAAOpZ,MAAP,+BAAApS,OAA4Cg9H,IAC5CxxG,EAAOpZ,MAAMuqB,EAAMugG,kBAEnBvgG,EAAMwgG,qBAAqBH,IAE/BrgG,EAAMw/F,iBAAiB,CACnBv6H,GAAI4yH,EACJ5oH,UAAW,QACX3T,MAAO8kI,IAEXpgG,EAAMw/F,iBAAiB,CACnBv6H,GAAI4yH,EACJ5oH,UAAW,OACX3T,MAAO6kI,IAEXngG,EAAMy/F,aAAa,CACf//F,UAAW,MACXV,MAAK,GAAA37B,OAAKi8B,EAAL,KAAAj8B,OAAoBw0H,MA9BzBhpG,EAAOpZ,MAAP,GAAApS,OAAgBw0H,EAAhB,iCAAAx0H,OAAuDi8B,QA0C1C4zF,aAIjB,SAAAA,iGAAc7lF,CAAAtnC,KAAAmtH,GAKVntH,KAAK06H,sBAAwB,IAAIpwG,oEASjCtqB,KAAK06H,sBAAsB97B,6CASlB+7B,GACT7xG,EAAOpZ,MAAM,yBAA0BirH,GACvC36H,KAAK06H,sBAAwBC,yCAUlB5H,GACX,IAAM6H,EAAiB,IAAIt4E,IAAiBywE,GACtCh6F,EAAa6hG,EAAe1J,YAAY,SAE9C,OAAKn4F,EAME/4B,KAAK25H,gBAAgB5gG,GACtB6hG,EAAexJ,WAAa2B,GAN9BjqG,EAAOpZ,MAAP,sCAAApS,OAAmDy1H,IAE5CA,2CAcCh6F,GACZ,GAA6B,aAAzBA,EAAWV,UAGX,OAFAvP,EAAOpZ,MAAM,wDAEN,EAEX,GAAIqpB,EAAW8hG,eAAiB,EAG5B,OAFA/xG,EAAOpZ,MAAM,sDAEN,EAEXoZ,EAAOpZ,MAAM,yBAA0B1P,KAAK06H,uBAC5C,IAAMI,EAAoB/hG,EAAWgiG,uBAErCjyG,EAAOpZ,MAAM,8BAA+BorH,EACxC,qCAfoB,IAAA3tG,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAgBxB,QAAAwyB,EAAAC,EAAmButG,EAAnBzlI,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAsC,KAA3ByD,EAA2BtD,EAAA/3B,MAC5BosD,EAAO5oB,EAAWiiG,iBAAiBpqG,EAAM,QACzCgxD,EAAQ7oD,EAAWiiG,iBAAiBpqG,EAAM,SAC5CqqG,EAAuBj7H,KAAK06H,sBAAsBvlI,IAAIy7B,GAE1D,GAAIqqG,EACAnyG,EAAOpZ,MACH,wDAAApS,OACgBszB,EADhB,MAAAtzB,OACyB29H,QAC1B,CACHnyG,EAAOpZ,MAAP,oDAAApS,OACwDszB,IAIxD,IAAMsqG,EAA8BniG,EAAWwhG,WAAW3pG,GAEtDsqG,GACApyG,EAAOpZ,MACH,cAAApS,OAAc49H,EAAd,KACE,mDADF,GAAA59H,OAEKszB,IACTqqG,EAAuBC,IAEvBD,EAAuB7lG,IAAQyE,eAC/B/Q,EAAOpZ,MAAM,sBAAApS,OAAsB29H,EAAtB,iBAAA39H,OACcszB,KAE/B9H,EAAOpZ,MAAM,oBAAApS,OAAoB29H,EAApB,uBAAA39H,OACoBszB,IACjC5wB,KAAK06H,sBAAsB3uG,IAAI6E,EAAMqqG,GAEzCf,EACInhG,EACA,CACI75B,GAAI0xB,EACJgxD,QACAjgC,QAEJs5E,IAvDgB,MAAAnhH,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,GA4DxB,OAAO,mCAQF0lG,GACL,IAAM6H,EAAiB,IAAIt4E,IAAiBywE,GACtCh6F,EAAa6hG,EAAe1J,YAAY,SAE9C,IAAKn4F,EAGD,OAFAjQ,EAAOpZ,MAAP,sCAAApS,OAAmDy1H,IAE5CA,EAEX,GAA6B,aAAzBh6F,EAAWV,UAGX,OAFAvP,EAAOpZ,MAAM,uDAENqjH,EAEX,GAAIh6F,EAAW8hG,eAAiB,EAG5B,OAFA/xG,EAAOpZ,MAAM,qDAENqjH,EAEX,IAAKh6F,EAAWoiG,wBAIZ,OAHAryG,EAAOpZ,MAAM,0DAGNqjH,EAEX,IAAMnB,EAAY74F,EAAWqiG,WAAW,OAIxCriG,EAAWsiG,wBAAwB,OA7BtB,IAAArtG,GAAA,EAAAC,GAAA,EAAAC,OAAApzB,EAAA,IAgCb,QAAAqzB,EAAAC,EAAuBwjG,EAAvBv8H,OAAAo4B,cAAAO,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAAkC,KAAvBwL,EAAuBrL,EAAA54B,MACxBu8H,EAAU3wE,YAAmB3nB,GAEnCT,EAAWygG,WAAW1H,IAnCb,MAAAh4G,GAAAmU,GAAA,EAAAC,EAAApU,EAAA,YAAAkU,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAsCb,OAAO0sG,EAAexJ,+VCvO9B,IAAMtoG,EAASH,oBAAUQ,GASJ4jG,aAOjB,SAAAA,EAAYjnD,gGAAWx+B,CAAAtnC,KAAA+sH,GACnB/sH,KAAKq0H,sBACLr0H,KAAK8lE,UAAYA,uEASjB9lE,KAAKs5H,kBAAoB,KACzBt5H,KAAKs7H,gBAAiB,yCAUX/hG,GACX,GAA2B,iBAAhBA,EACP,MAAM,IAAIp7B,MAAM,kCAEpB6B,KAAKs5H,kBAAoB//F,iDAQzB,OAAOqM,QAAQ5lC,KAAKs5H,2EAcQvG,GAC5B,IAAM6H,EAAiB,IAAIt4E,IAAiBywE,GACtCh6F,EAAa6hG,EAAe1J,YAAY,SAE9C,IAAKn4F,EAKD,OAJAjQ,EAAOpZ,MACH,GAAApS,OAAG0C,KAAK8lE,UAAR,2CAAAxoE,OACSy1H,IAENA,EAGX,GAA6B,aAAzBh6F,EAAWV,UAGPr4B,KAAKs5H,mBAAqBt5H,KAAKs7H,eAC/BviG,EAAW0gG,iBAAiB,CACxBv6H,GAAIc,KAAKs5H,kBACTpwH,UAAW,QACX3T,MAAK,YAAA+H,OAAc0C,KAAKs5H,qBAG5BxwG,EAAOnZ,KACH,GAAArS,OAAG0C,KAAK8lE,UAAR,yCACM,eAEX,CACH,IAAMy1D,EAAiBxiG,EAAWyiG,sBAElC,IAAKD,EAKD,OAJAzyG,EAAOnZ,KACH,GAAArS,OAAG0C,KAAK8lE,UAAR,6BACM,2BAEHitD,EAEX,GAAI/yH,KAAKs5H,kBAAmB,CACxBxwG,EAAOnZ,KACH,GAAArS,OAAG0C,KAAK8lE,UAAR,0CAAAxoE,OACSi+H,EADT,oBAAAj+H,OAES0C,KAAKs5H,oBAClBvgG,EAAW0iG,YAAYF,EAAgBv7H,KAAKs5H,mBALpB,IAAAnsG,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAMxB,QAAAwyB,EAAAC,EAAoBwL,EAAWO,WAA/BjkC,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA2C,KAAhCuM,EAAgCpM,EAAA/3B,MACvC,GAAwB,QAApBmkC,EAAMC,UAAqB,CAC3B,IAAMJ,EAAc2nB,YAAiBxnB,GAC/Bo4F,EAAU3wE,YAAmBznB,GAG/BH,IAAgBgiG,IAChB7hG,EAAMT,MAAN,GAAA37B,OACS0C,KAAKs5H,kBADd,KAAAh8H,OACmCw0H,MAdvB,MAAAh4G,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,SAmBxBrtB,KAAKs5H,kBAAoBiC,EACzBzyG,EAAOnZ,KACH,GAAArS,OAAG0C,KAAK8lE,UAAR,4CAAAxoE,OACS0C,KAAKs5H,oBAGtBt5H,KAAKs7H,gBAAiB,EAG1B,OAAOV,EAAexJ,6UClI9B,IAKqBtmC,aAQjB,SAAAA,EAAYz4C,EAAYhzC,gGAAUioC,CAAAtnC,KAAA8qF,GAO9B9qF,KAAK2a,UAAYtb,EASjBW,KAAK07H,aAAc,EAYnBrpF,EAAW5iB,WAAWrD,sBAClBpsB,KAAK4qH,YAAY90H,KAAKkK,OAE1BqyC,EAAW/lB,GACP2oB,qBACAj1C,KAAK27H,kBAAkB7lI,KAAKkK,OAChCqyC,EAAW/lB,GACP2oB,cACAj1C,KAAK47H,YAAY9lI,KAAKkK,kEAclB8tB,EAAK8C,EAAMomB,EAAY9kB,GAG1BA,GAAYlyB,KAAKu2C,aAAcv2C,KAAK07H,aAIrC17H,KAAKu2C,WAAW2lB,WACbllB,EAvEiB,KAwEpBh3C,KAAK07H,aAAc,EACnB17H,KAAK2a,wDAeMkyB,GACf,OAAOA,EAAMqK,gBAAkBrK,EAAM3a,8CAW7B2a,GACJ7sC,KAAK67H,mBAAmBhvF,KACxB7sC,KAAKu2C,WAAa1J,6CAYRA,GACV7sC,KAAK67H,mBAAmBhvF,IAAUA,EAAMqvB,YACxCl8D,KAAK07H,aAAc,mTCtH/B,IAAMvpE,EAAan3D,EAAQ,GACrBgyC,EAAYhyC,EAAQ,IACpB0oC,EAAc1oC,EAAQ,IAEtB8tB,EAASH,oBAAUQ,GAMnB2yG,EAAqB,QAKrBC,EAAoB,CACtB,CAAEp4F,MAAO,KACLnC,OAAQ,KACRw6F,OAAQ,EACRt6F,IAAK,IACL2hB,OAAQ,IACR5/B,IAAK,KACT,CAAEkgB,MAAO,KACLnC,OAAQ,IACRw6F,OAAQ,EACRt6F,IAAK,KACL2hB,OAAQ,KACR5/B,IAAK,KACT,CAAEkgB,MAAO,IACLnC,OAAQ,IACRw6F,OAAQ,EACRt6F,IAAK,IACL2hB,OAAQ,IACR5/B,IAAK,KACT,CAAEkgB,MAAO,IACLnC,OAAQ,IACRw6F,OAAQ,EACRt6F,IAAK,IACL2hB,OAAQ,IACR5/B,IAAK,KACT,CAAEkgB,MAAO,IACLnC,OAAQ,IACRw6F,OAAQ,EACRt6F,IAAK,IACL2hB,OAAQ,IACR5/B,IAAK,KACT,CAAEkgB,MAAO,IACLnC,OAAQ,IACRw6F,OAAQ,EACRt6F,IAAK,IACL2hB,OAAQ,IACR5/B,IAAK,KAaTo5F,EAAe,IAQfof,EAAkB,KAStB,SAASC,EAAUvP,EAAWlpF,EAAY04F,GAItC,GAAIA,EAAmB,KACnB,OAAO,EAGX,IAAI94E,EAAS,EACT7hB,EAAS1gC,KAAK2iB,IAAIggB,EAAWjC,OAAQiC,EAAWE,OAEpD,GAAIgpF,EAAW,CAEX,IAAIyP,EAAkBL,EAAkBtiG,KAAK,SAAA16B,GAAC,OAAIA,EAAEyiC,QAAUA,IAE9D,GAAI46F,EAAiB,KAAA7jF,EAAA,WAIb,IAAM8jF,EAAe76F,EAIrB,KAFA46F,EACML,EAAkBtiG,KAAK,SAAA16B,GAAC,OAAIA,EAAEyiC,SAAW66F,KAI3C,cAFAh5E,GAAU+4E,EAAgB/4E,QANlC,IAAK7hB,EAAS46F,EAAgB56F,OAAQA,GAAU,IAAKA,GAAU,EAAG,cAAA+W,IAQ1D,YAIT,CAGH,IAAM+jF,EAAS74F,EAAWE,MAAQF,EAAWjC,OAGzC6hB,EADAi5E,GAAU,MACD,IACFA,GAAU,OACR,KACFA,GAAU,OACR,IAEA,KAMjB,OAAOx7H,KAAK2iB,IAAI4/B,EASpB,SAAgB84E,GACZ,GAAIA,EAAmB,IACnB,OAAOt7H,OAAOi1E,iBAMlB,OAAO+mC,EAAe/7G,KAAK4iB,IAAI,KAAMy4G,EAAmB,KAjBhCI,CAAOz7H,KAAK4gC,IAAI,EAAGy6F,EAAmB,WA0B7CzzC,aAOjB,SAAAA,EAAYr2C,EAAY9nB,EAAcjZ,GAAS,IAAAo2B,EAAA1nC,kGAAAsnC,CAAAtnC,KAAA0oF,GAC3C1oF,KAAKuqB,aAAeA,EAKpBvqB,KAAKw0G,YAAcniE,EAKnBryC,KAAKw8H,YAAc,CACf/zC,kBAAmB,IACnBg0C,YAAQ3hI,GAMZkF,KAAK08H,8BAAgC,EAMrC18H,KAAK28H,aAAe,GAMpB38H,KAAK48H,mBAAqB,EAM1B58H,KAAK68H,mBAAqB,EAO1B78H,KAAK88H,uBAAyB,EAG1BxrH,EAAQurG,cAAgBvrG,EAAQurG,aAAe,IAC/CA,EAAevrG,EAAQurG,cAK3BxqE,EAAW/lB,GACPywG,yBACA,WACIr1F,EAAKs1F,8BAA8B,GACnCt1F,EAAKnd,aAAa2C,KACd+vG,sBACAv1F,EAAK80F,aACT90F,EAAKw1F,yBAGb7qF,EAAWuf,KAAKxe,YACZ+e,EAAW13D,6BACX,SAACs4F,EAAer3B,GACPq3B,EAAcn/C,OAAsB,cAAb8nB,IACxBh0B,EAAKk1F,kBAAoB1oI,OAAOm5D,YAAYjwC,SAMxDi1B,EAAW/lB,GACPywG,4BACA,SAAC1iE,EAAap/B,GACNA,EAAQ5pB,OAASyqH,GACjBp0F,EAAKy1F,mBACD9iE,EAAYG,QAASv/B,EAAQzN,UAa7C6kB,EAAW5iB,WAAW7C,2BAClB5sB,KAAKo9H,kBAAkBtnI,KAAKkK,OAGhCqyC,EAAW/lB,GACPywG,qBACA,SAAAlwF,GACQA,EAAM26B,iBACF36B,EAAMqvB,UACNx0B,EAAKm1F,mBAAqB,EAE1Bn1F,EAAK21F,4BAIrBhrF,EAAW/lB,GACPywG,cACA,SAAAlwF,GACQA,EAAM26B,iBAAmB36B,EAAMqvB,WAC/Bx0B,EAAK21F,2BAIjBhrF,EAAW/lB,GACPywG,wBACA,SAAAtpC,GACI/rD,EAAK80F,YAAY/oC,aAAeA,IAGxCphD,EAAW/lB,GACPywG,qBACA,SAAA/nG,GACI0S,EAAK80F,YAAYc,YACXz8H,QAAQm0B,GAAc,IAAI,2FAUpCh1B,KAAK68H,kBAAoB,IACzB78H,KAAK68H,kBAAoB3oI,OAAOm5D,YAAYjwC,2DAaxB2vB,EAAWmvB,EAASqhE,GAI5C,IAGI/wB,EAHE/oE,EAAaC,EAAY65F,GAE3BC,EAAU,IA2Bd,GAtBIx9H,KAAKw8H,YAAYhwB,aACjBA,EAAaxsG,KAAKw8H,YAAYhwB,WAAWH,OAgBrCnwC,IACAswC,GAAc,KAIlBtwC,IAAYz4B,GAAcsJ,IAAcC,EAAUC,SAC/CjtC,KAAK48H,kBAAoB,GACzB58H,KAAK68H,kBAAoB,OAGT/hI,IAAf0xG,GACA1jF,EAAOrZ,MAAM,6DAEb+tH,EAAU,KAEVA,EADOhxB,GAAc,EACX,IACHA,GAAc,EACX,GACHA,GAAc,EACX,GACHA,GAAc,EACX,GACHA,GAAc,GACX,GAEA,MAEX,CAIH,IAAMixB,EAAYz9H,KAAKw0G,YAAYzlB,0BAC7Bk/B,EACAroF,QAAQ63F,GAAaA,EAAUxP,iBAE/ByP,EACAD,GAAaA,EAAUE,kBACtBF,EAAUE,iBAAiBC,kBAAkB,UAK/CF,GAAsBzB,IACvBj8H,KAAK88H,sBAAwB5oI,OAAOm5D,YAAYjwC,MAGhDy/F,EAAeof,GAEnBA,EAAkByB,EAGlB,IAMIr6E,EACE64E,EAAUjO,EAAexqF,EAPNvvC,OAAOm5D,YAAYjwC,MACtCtc,KAAK4gC,IAAI1hC,KAAK68H,kBACZ78H,KAAK48H,kBACL58H,KAAK88H,wBAMbz5E,EAASviD,KAAK2iB,IAAI,GAAM4/B,EAnVT,MAqVX44E,IACA54E,EAASviD,KAAK2iB,IAAI4/B,EAAQ44E,IAG9BuB,EAAU,IAAMx9H,KAAKw8H,YAAYpwB,QAAQC,OAAShpD,EAG9CmpD,GAAcA,GAAc,KAC5BgxB,EAAU18H,KAAK2iB,IAAI+5G,EAAS,KAKpC,GAAIx9H,KAAK08H,6BAA+B,EAAG,CACvC,IACMmB,EAAwB79H,KAAKw8H,YAAY/zC,kBACzCq1C,GACC5pI,OAAOm5D,YAAYjwC,MAAQpd,KAAK08H,8BAC7B,IAEVc,EACM18H,KAAK2iB,IACH+5G,EACAK,EATqB,EAUdC,GAGnB,OAAOh9H,KAAK2iB,IAAI,IAAK+5G,yDAOKjoI,GAC1ByK,KAAKw8H,YAAY/zC,kBAAoBlzF,EACrCyK,KAAK08H,6BAA+BxoI,OAAOm5D,YAAYjwC,qDASvD,IAAM7Z,EAAO,CACT6oG,QAASpsG,KAAKw8H,YAAYpwB,QAC1BI,WAAYxsG,KAAKw8H,YAAYhwB,WAC7B/jB,kBAAmBzoF,KAAKw8H,YAAY/zC,kBACpCg0C,OAAQz8H,KAAKw8H,YAAYC,OACzBhpC,aAAczzF,KAAKw8H,YAAY/oC,cAGnC,IACIzzF,KAAKw0G,YAAYxd,yBAAyB,CACtC3lF,KAAMyqH,EACNtuG,OAAQjqB,IACd,MAAOtE,+CAmBK6uB,EAAKvqB,GAEnB,IAAKuqB,EAAI8lB,MAAO,CACZ,IAAM6oF,EACAl5H,EAAKklB,WACAllB,EAAKklB,UAAUxrB,QAAUsG,EAAKklB,UAAU,GAAGgX,IAEtDz/B,KAAKw8H,YAAYC,OAASA,QAAkB3hI,EAKhD,GAAIgzB,IAAQ9tB,KAAKw0G,YAAYzlB,0BAA7B,CAIA,IAAIl5F,EACEkoI,GACC/9H,KAAKw0G,YAAYpd,0BAClBxI,EACA5uF,KAAKw0G,YAAYrnB,qBACjBpgD,EACA6hD,EAAkBA,EAAgB7hD,eAAYjyC,EAC9CohE,GAAU0yB,GAAkBA,EAAgB1yB,UAC5Cz4B,EAAamrD,EAAkBA,EAAgBnrD,WAAa,KAOlE,IAAK5tC,KALAqmE,GACDl8D,KAAKq9H,yBAIG95H,EACJA,EAAKpN,eAAeN,KACpBmK,KAAKw8H,YAAY3mI,GAAO0N,EAAK1N,IAKjCkoI,GACA/9H,KAAKg9H,8BACDh9H,KAAKg+H,4BACDjxF,EACAmvB,EACAz4B,IAGZzjC,KAAKuqB,aAAa2C,KACd+vG,sBACAj9H,KAAKw8H,aACTx8H,KAAKk9H,mEAQUh+H,EAAIqE,GAEnBvD,KAAK28H,aAAaz9H,GAAM,CACpBktG,QAAS7oG,EAAK6oG,QACdI,WAAYjpG,EAAKipG,WACjB/jB,kBAAmBllF,EAAKklF,kBACxBg0C,OAAQl5H,EAAKk5H,OACbhpC,aAAclwF,EAAKkwF,cAGvBzzF,KAAKuqB,aAAa2C,KACd+vG,uBACA/9H,EACAc,KAAK28H,aAAaz9H,uCAQtB,OAAOc,KAAKw8H,sWC5iBpB,IAAM1zG,EAASH,oBAAUQ,GAWJmuE,aAKjB,SAAAA,EAAYjlD,gGAAY/K,CAAAtnC,KAAAs3F,GACpBt3F,KAAKw0G,YAAcniE,uDAOjBlxB,GAAS,IAAAumB,EAAA1nC,KAIXA,KAAKw0G,YAAYpqF,KAAK2jC,KAAK,MAAOhmB,KAC9B,WACQL,EAAKu2F,YAILv2F,EAAK8sE,YAAY1rB,2BACjBphD,EAAKw2F,kBAAoBhqI,OAAO0L,WAAW,WACvCkpB,EAAOnZ,KACH,yDAEJ+3B,EAAKw2F,uBAAoBpjI,EACzBqmB,EAAQo2E,6BACT,KAEHzuE,EAAOnZ,KACH,sDAGZ,SAAAF,GACIqZ,EAAOrZ,MACH,8CAA+CA,sCAQ3DzP,KAAKi+H,WAAY,EACbj+H,KAAKk+H,mBACLhqI,OAAOujB,aAAazX,KAAKk+H,qiBCtDrC,IAAMp1G,EAASH,oBAAUQ,GAiBnBg1G,aAOF,SAAAA,EAAY9jE,EAAa4vB,GAAS3iD,EAAAtnC,KAAAm+H,GAE9Bn+H,KAAKq6D,YAAcA,EAGnBr6D,KAAKiqF,QAAUA,EAGfjqF,KAAKd,GAAKm7D,EAAYG,QAGtBx6D,KAAKo+H,SAAW,GAIhBp+H,KAAKq+H,cAAgB,EAErBr+H,KAAKs+H,eAAiBt+H,KAAKs+H,eAAexoI,KAAKkK,MAC/CA,KAAKu+H,YAAcv+H,KAAKu+H,YAAYzoI,KAAKkK,MACzCA,KAAKw+H,eAAiBx+H,KAAKw+H,eAAe1oI,KAAKkK,MAC/CA,KAAKy+H,mBAAqBz+H,KAAKy+H,mBAAmB3oI,KAAKkK,MACvDA,KAAKk1B,cAAgBl1B,KAAKk1B,cAAcp/B,KAAKkK,MAIzCiqF,EAAQy0C,mBACR1+H,KAAKu+H,cAGTv+H,KAAK2+H,aAAezqI,OAAOo2C,YACvBtqC,KAAKu+H,YAAat0C,EAAQ20C,gBAC9B5+H,KAAK6+H,kBAAoB3qI,OAAO0L,WAC5BI,KAAKy+H,mBAAoBz+H,KAAKiqF,QAAQ60C,wEAQtC9+H,KAAK2+H,cACLzqI,OAAOyzC,cAAc3nC,KAAK2+H,cAE1B3+H,KAAK6+H,mBACL3qI,OAAOyzC,cAAc3nC,KAAK6+H,yDAS9B,IAAME,EAAY/+H,KAAKq+H,gBACjBW,EAAiB,CACnB3tH,KAzEa,mBA0EbnS,GAAI6/H,GAGR/+H,KAAKiqF,QAAQ7yC,YAAY4nF,EAAgBh/H,KAAKd,IAC9Cc,KAAKo+H,SAASW,GAAa,CACvB7/H,GAAI6/H,EACJE,SAAU/qI,OAAOm5D,YAAYjwC,8CAQtBpB,GACX,IAAMguD,EAAUhqE,KAAKo+H,SAASpiH,EAAS9c,IAEnC8qE,IACAA,EAAQvqC,IAAMvrC,OAAOm5D,YAAYjwC,MAAQ4sD,EAAQi1D,SACjDj/H,KAAKiqF,QAAQ1/D,aAAa2C,KACtBgyG,kBACAl/H,KAAKq6D,YACL2P,EAAQvqC,MAGhBz/B,KAAKy+H,kEAUL,IAKIz0D,EAAS+0D,EALP3hH,EAAMlpB,OAAOm5D,YAAYjwC,MAI3BqiB,EAAM0/F,IAIV,IAAKJ,KAAa/+H,KAAKo+H,SACfp+H,KAAKo+H,SAASjoI,eAAe4oI,MAC7B/0D,EAAUhqE,KAAKo+H,SAASW,IAEZE,SAAW7hH,EAAMpd,KAAKiqF,QAAQ60C,2BAE/B9+H,KAAKo+H,SAASW,GACd/0D,EAAQvqC,MACfA,EAAM3+B,KAAK2iB,IAAIgc,EAAKuqC,EAAQvqC,OAKpCA,EAAM0/F,KACNn/H,KAAKk1B,cAAcuK,yCAQbA,GACVtV,IAAW+K,cAAcoK,YACrBt/B,KAAKd,GACLc,KAAKq6D,YAAYk+B,YAAY,UAC7B94D,aAmBSyqD,aAMjB,SAAAA,EAAY73C,EAAY/gC,EAAS8lC,GAAa9P,EAAAtnC,KAAAkqF,GAC1ClqF,KAAKqyC,WAAaA,EAClBryC,KAAKuqB,aAAe8nB,EAAW9nB,aAC/BvqB,KAAKo3C,YAAcA,EAGnBp3C,KAAK4+H,eAAiB,IAGtB5+H,KAAK8+H,oBAAsB,IAG3B9+H,KAAKg7D,aAAe,GAGpBh7D,KAAK0+H,mBAAoB,EAErBptH,GAAWA,EAAQ24E,UACyB,iBAAjC34E,EAAQ24E,QAAQ00C,eACvB3+H,KAAK4+H,eAAiBttH,EAAQ24E,QAAQ00C,cAEO,iBAAtCrtH,EAAQ24E,QAAQ40C,oBACvB7+H,KAAK8+H,oBAAsBxtH,EAAQ24E,QAAQ40C,mBAI3C7+H,KAAK8+H,oBAAsB,GAAK9+H,KAAK8+H,oBACnC9+H,KAAK4+H,iBACP5+H,KAAK8+H,oBAAsB9+H,KAAK4+H,iBAGxC91G,EAAOnZ,KAAP,uCAAArS,OAEQ0C,KAAK4+H,eAFb,wBAAAthI,OAGQ0C,KAAK8+H,oBAHb,MAKA9+H,KAAKo/H,kBAAoBp/H,KAAKo/H,kBAAkBtpI,KAAKkK,MACrDqyC,EAAW/lB,GACP2oB,cACAj1C,KAAKo/H,mBAETp/H,KAAKq/H,gBAAkBr/H,KAAKq/H,gBAAgBvpI,KAAKkK,MACjDqyC,EAAW/lB,GACP2oB,YACAj1C,KAAKq/H,iBAETr/H,KAAKs/H,gBAAkBt/H,KAAKs/H,gBAAgBxpI,KAAKkK,MACjDqyC,EAAW/lB,GACP2oB,4BACAj1C,KAAKs/H,iBAETt/H,KAAKu/H,kBAAoBv/H,KAAKu/H,kBAAkBzpI,KAAKkK,MACrDqyC,EAAW/lB,GACP2oB,sBACAj1C,KAAKu/H,yEAiBT,IAAK,IAAMrgI,KATXc,KAAK0+H,mBAAoB,EASR1+H,KAAKg7D,aAClB,GAAIh7D,KAAKg7D,aAAa7kE,eAAe+I,GAAK,CACtC,IAAMsgI,EAAqBx/H,KAAKg7D,aAAa97D,GAE7ChL,OAAO0L,WAAW4/H,EAAmBjB,YAAa,8CAW9ClkE,EAAap/B,GA9PR,qBAiQbA,EAAQ5pB,KACRrR,KAAKy/H,cAAcplE,EAAYG,QAASv/B,GA5P1B,sBA6PPA,EAAQ5pB,MACfrR,KAAKw+H,eAAenkE,EAAYG,QAASv/B,6CAW/B/7B,EAAIm7D,GACdr6D,KAAK4+H,gBAAkB,IAIvB5+H,KAAKg7D,aAAa97D,KAClB4pB,EAAOnZ,KAAP,0CAAArS,OAC8C4B,EAD9C,gBAEAc,KAAKg7D,aAAa97D,GAAIo/H,wBACft+H,KAAKg7D,aAAa97D,IAG7Bc,KAAKg7D,aAAa97D,GAAM,IAAIi/H,EAAmB9jE,EAAar6D,+CAQhDd,GACRc,KAAK4+H,gBAAkB,GAIvB5+H,KAAKg7D,aAAa97D,KAClBc,KAAKg7D,aAAa97D,GAAIo/H,wBACft+H,KAAKg7D,aAAa97D,0CAWnBqgC,EAAeyqC,GAEzB,GAAIA,GAAWA,EAAQ9qE,GAAI,CACvB,IAAM8c,EAAW,CACb3K,KAnTU,oBAoTVnS,GAAI8qE,EAAQ9qE,IAGhBc,KAAKo3C,YAAYp7B,EAAUujB,QAE3BzW,EAAOnZ,KAAP,6CAAArS,OACiDiiC,EADjD,6CAWOA,EAAevjB,GAC1B,IAAMwjH,EAAqBx/H,KAAKg7D,aAAaz7B,GAEzCigG,GACAA,EAAmBhB,eAAexiH,kCAuBtC,IAAK,IAAM9c,KAfX4pB,EAAOnZ,KAAK,oBAEZ3P,KAAKqyC,WAAW6N,IACZjL,cACAj1C,KAAKo/H,mBACTp/H,KAAKqyC,WAAW6N,IACZjL,YACAj1C,KAAKq/H,iBACTr/H,KAAKqyC,WAAW6N,IACZjL,4BACAj1C,KAAKs/H,iBACTt/H,KAAKqyC,WAAW6N,IACZjL,sBACAj1C,KAAKu/H,mBAEQv/H,KAAKg7D,aACdh7D,KAAKg7D,aAAa7kE,eAAe+I,IACjCc,KAAKg7D,aAAa97D,GAAIo/H,iBAI9Bt+H,KAAKg7D,aAAe,yTCpX5B,IAAMlyC,EAASH,oBAAUQ,GAOJ+hE,aAKjB,SAAAA,EAAY74C,GAAY,IAAA3K,EAAA1nC,kGAAAsnC,CAAAtnC,KAAAkrF,GACpBlrF,KAAKw0G,YAAcniE,EASnBryC,KAAK0/H,SAAU,EAEf1/H,KAAKw0G,YAAYnqE,iBACb4K,cAAmC,kBAAMvN,EAAKi4F,mBAClD3/H,KAAKw0G,YAAYnqE,iBACb4K,YAAiC,kBAAMvN,EAAKi4F,mBAChD3/H,KAAKw0G,YAAYnqE,iBACb4K,aAAkC,kBAAMvN,EAAKi4F,mFAQjD,IAAMC,EAAY5/H,KAAK0/H,QACjBplE,GACCt6D,KAAKw0G,YAAYp5C,eACbp7D,KAAKw0G,YAAYxjB,uBAAyB,EAEjD4uC,IAActlE,IACdt6D,KAAK0/H,QAAUplE,EACfxxC,EAAOpZ,MAAP,iBAAApS,OAA8BsiI,EAA9B,QAAAtiI,OAA8Cg9D,IAC9Ct6D,KAAKw0G,YAAYjqF,aAAa2C,KAC1B+nB,gBAAqC2qF,EAAWtlE,kdC5ChE,IAAMxxC,EAASH,oBAAUQ,GAMnBsgE,aAQF,SAAAA,EAAY8b,gGAAUj+D,CAAAtnC,KAAAypF,GAIlBzpF,KAAK6/H,UAAY,GAEjB7/H,KAAK8/H,UAAYv6B,EAEjBvlG,KAAK41G,WAAa51G,KAAK41G,WAAW9/G,KAAKkK,MAEvCA,KAAK8/H,UAAUv1G,aAAa6oB,YACxB+e,IAAWh5D,kBAAmB6G,KAAK41G,sEAShCr5C,GACP,OAAOv8D,KAAK6/H,UAAUtjE,yCAeiB,IAA9Bg8C,EAA8B/vE,EAA9B+vE,iBAAkBn8C,EAAY5zB,EAAZ4zB,SACvBwe,IAAkB3d,YAAYb,GAC9Bp8D,KAAK+/H,qBAAqB3jE,GACnBm8C,GACPv4G,KAAKggI,qBAAqB5jE,0CAoBnB9qD,GAAS,IAAAo2B,EAAA1nC,KACdmhB,EAAU,IAAI84D,sUAAJj7C,CAAA,GACT1tB,EADS,CAEZgM,WAAYtd,KAAK8/H,UAAUxiH,cAG/B,OAAO6D,EAAQ0E,MAAM,CACjB20D,QAASlpE,EAAQkpE,QACjBC,YAAanpE,EAAQmpE,YACrBC,YAAa16E,KAAK8/H,UAAUplD,YAC5BxmC,SAAU5iC,EAAQ4iC,WAEjBnM,KAAK,WAUF,OALKL,EAAKu4F,WAAW9+G,EAAQ++G,WACzBx4F,EAAKy4F,YAAYh/G,GACjBumB,EAAK04F,mBAAmBj/G,IAGrBA,IAEVqqB,MAAM,SAAA/7B,GAGH,OAFAi4B,EAAK04F,mBAAmBj/G,GAEjBiqB,QAAQE,OAAO77B,2CAYpB8sD,GACV,IAAMp7C,EAAUnhB,KAAKigI,WAAW1jE,GAEhC,OAAIp7C,EACOA,EAAQwN,KAAK,CAAE+rD,YAAa16E,KAAK8/H,UAAUplD,cAG/CtvC,QAAQE,OAAO,IAAIntC,MAAM,+DASxBgjB,GACRnhB,KAAK6/H,UAAU1+G,EAAQ++G,SAAW/+G,yCAYvBo7C,EAAW5iD,EAAQlkB,GAC9B,IAAM0rB,EAAU,IAAI84D,IAAa,CAC7B38D,WAAYtd,KAAK8/H,UAAUxiH,WAC3Bo9D,YAAa16E,KAAK8/H,UAAUplD,YAC5BjlF,OACA8mE,YACA5iD,WAKJ,OAFA3Z,KAAKmgI,YAAYh/G,GAEVA,6CAQQA,GACfnhB,KAAK8/H,UAAUv1G,aAAa2C,KACxBilC,IAAW54D,uBAAwB4nB,gDAUtBi7C,GACjB,IAAMC,EAAcue,IAAkBze,wBAAwBC,GAE9D,GAAKC,EAAL,CAH2B,IAOnBE,EAA4CF,EAA5CE,UAAW5iD,EAAiC0iD,EAAjC1iD,OAAQlK,EAAyB4sD,EAAzB5sD,MAAO6sD,EAAkBD,EAAlBC,cAI9Bn7C,EAAUnhB,KAAKigI,WAAW1jE,GAKzBp7C,GAAsB,QAAXxH,EAaZwH,GACGA,EAAQ6kF,cAAgBrsF,GACxBwH,EAAQ4kF,aAAet2F,EAC1BqZ,EAAOlZ,KAAK,uCACRgH,KAAK0K,UAAU+6C,KAKlBl7C,IACDA,EAAUnhB,KAAKqgI,eAAe9jE,EAAW5iD,EAAQ2iD,IAGrDn7C,EAAQi5D,UAAUzgE,GAEdlK,GACA0R,EAAQg6D,SAAS1rE,GAGrBzP,KAAKogI,mBAAmBj/G,IA/BpB2H,EAAOlZ,KACH,qCACA,yFAuCSwsD,GAAU,IAAAkkE,EAErB1lD,IAAkBpe,sBAAsBJ,GADtCM,EADmB4jE,EACnB5jE,kBAAmBjnE,EADA6qI,EACA7qI,KAAM8mE,EADN+jE,EACM/jE,UAGjC,GAAKA,EAAL,CAOA,IAAIp7C,EAAUnhB,KAAKigI,WAAW1jE,GAEzBp7C,IACDA,EAAUnhB,KAAKqgI,eAAe9jE,EAAW,GAAI9mE,IAGjD0rB,EAAQo/G,qBAAqB7jE,GAE7B18D,KAAKogI,mBAAmBj/G,QAdpB2H,EAAOlZ,KACH,gGAiBD65E,g0BC9Pf,IAAM3gE,EAASH,oBAAUQ,GAMnBq3G,EAAe,CACjB9hB,oBAAqB,EACrBC,oBAAqB,GAcnB8hB,aAWF,SAAAA,EAAYjhG,EAAQm+C,EAAS+iD,EAAoBx3C,GAAO5hD,EAAAtnC,KAAAygI,GAEpDzgI,KAAKw/B,OAASA,EACdx/B,KAAK0gI,mBAAqBA,EAC1B1gI,KAAK2gI,iBAAmB,KAGxB3gI,KAAKy/B,IAAM0/F,IAGXn/H,KAAK4gI,KAAO,GAEZ,IAAMjwE,EAAa,CAAE,CAAE7gB,IAAA,QAAAxyC,OAAeqgF,KAEtC39E,KAAKwoD,GAAK,IAAInhB,IAASa,sBACnB,CACIyoB,WAAcA,IAOtB3wD,KAAKshE,WAAa,GAElBthE,KAAK6gI,SAAU,EAEf7gI,KAAK6lB,MAAQ7lB,KAAK6lB,MAAM/vB,KAAKkK,MAC7BA,KAAK2uB,KAAO3uB,KAAK2uB,KAAK74B,KAAKkK,MAC3BA,KAAK8gI,mBAAqB9gI,KAAK8gI,mBAAmBhrI,KAAKkK,MACvDA,KAAK+gI,mBAAqB/gI,KAAK+gI,mBAAmBjrI,KAAKkK,MAEvD9L,OAAO0L,WAAWI,KAAK6lB,MAAOqjE,6CAQ1B,IAAAxhD,EAAA1nC,KACAA,KAAK6gI,SAIT7gI,KAAKwoD,GAAGwa,YAAYw9D,GAAcz4F,KAAK,SAAAo/B,GACnCz/B,EAAK8gB,GAAG0a,oBACJiE,EACA,WACIr+C,EAAOnZ,KAAP,mCAAArS,OACuCoqC,EAAKlI,SAC5CkI,EAAKo5F,sBAET,SAAArxH,GACIqZ,EAAOlZ,KAAP,kCAAAtS,OACsCoqC,EAAKlI,OAD3C,MAAAliC,OAEQmS,qDAUH,IAAAi8B,EAAA1rC,KACjBA,KAAK2gI,iBAAmBzsI,OAAOo2C,YAC3B,WAGIoB,EAAK8c,GAAGqxC,SAAS,SAAAhmE,GAGb,IAFA,IAAMqoD,EAAUroD,EAAM/jB,SAEbxb,EAAI,EAAGA,EAAI4nF,EAAQj/E,SAAU3I,EAAG,CACrC,IAAMi4C,EAAM2vC,EAAQ5nF,GACd0sI,EACAngI,OAAO0rC,EAAIsjE,KAAK,0BAKtB,GAAImxB,EAAW,EAAG,CACd,IAAMC,EAAY,GAAA3jI,OACTivC,EAAIsjE,KAAK,aADA,KAAAvyG,OAEVivC,EAAIsjE,KAAK,cAFC,KAAAvyG,OAGVivC,EAAIsjE,KAAK,aAEjBnkE,EAAKq1F,mBACDE,EACAD,EACAngI,OACI0rC,EAAIsjE,KAAK,mCACbhvG,OACI0rC,EAAIsjE,KAAK,gCAMzB,IAAIpwE,EAAM0/F,IAEV,IAAK,IAAMtpI,KAAO61C,EAAK41B,WACf51B,EAAK41B,WAAWnrE,eAAeN,IAC5B61C,EAAK41B,WAAWzrE,GAAK4pC,IAAM,IAC9BA,EAAM3+B,KAAK2iB,IAAIgc,EAAKiM,EAAK41B,WAAWzrE,GAAK4pC,MAOjDiM,EAAKk1F,KAAK9iI,KAAK2hC,GACXiM,EAAKk1F,KAAK3jI,OAAS,IACnByuC,EAAKk1F,KAAOl1F,EAAKk1F,KAAKrjI,OAAO,EAAG,IAEpCmuC,EAAKjM,IAAM3+B,KAAK2iB,IAAL1lB,MAAA+C,KAAI86B,EAAQ8P,EAAKk1F,UAGpC5gI,KAAK0gI,+DAiBM7qI,EAAKmrI,EAAUE,EAAmBC,GAE5CnhI,KAAKshE,WAAWzrE,KACjBmK,KAAKshE,WAAWzrE,GAAO,CACnBmrI,SAAU,EACVE,kBAAmB,EACnBC,aAAc,EACd1hG,IAAKngB,MAIb,IAAM8hH,EAAeJ,EAAWhhI,KAAKshE,WAAWzrE,GAAKmrI,SAC/CK,EACAH,EAAoBlhI,KAAKshE,WAAWzrE,GAAKqrI,kBAMzCI,EACCH,EAAeD,GACflhI,KAAKshE,WAAWzrE,GAAKsrI,aAClBnhI,KAAKshE,WAAWzrE,GAAKqrI,mBAC3BzhG,EAAMngB,IAEN+hH,EAAwB,GAA+B,IAA1BC,IAC7B7hG,EAAM2hG,EAAeC,GAGzBrhI,KAAKshE,WAAWzrE,GAAKmrI,SAAWA,EAChChhI,KAAKshE,WAAWzrE,GAAKqrI,kBAAoBA,EACzClhI,KAAKshE,WAAWzrE,GAAKsrI,aAAeA,EACpCnhI,KAAKshE,WAAWzrE,GAAK4pC,IAAMA,iCASvBz/B,KAAK2gI,kBACLzsI,OAAOyzC,cAAc3nC,KAAK2gI,kBAG9B3gI,KAAKwoD,GAAGjjC,QAERvlB,KAAK6gI,SAAU,WASF72C,aAKjB,SAAAA,EAAYxuF,GAAQ,IAAA4xC,EAAAptC,KAChB,GADgBsnC,EAAAtnC,KAAAgqF,GACXxuF,GAAWA,EAAOk9E,SACf/tD,IAAQ42G,sCADhB,CAMAvhI,KAAKwhI,WAAa,GAElBxhI,KAAKyhI,gBAAkBzhI,KAAKyhI,gBAAgB3rI,KAAKkK,MACjDA,KAAKk1B,cAAgBl1B,KAAKk1B,cAAcp/B,KAAKkK,MAC7CA,KAAK2uB,KAAO3uB,KAAK2uB,KAAK74B,KAAKkK,MAE3BA,KAAK6+H,kBAAoB,KACzB7+H,KAAK6gI,SAAU,EAEf,IAAMa,EAAelmI,EAAOkmI,cAAgB,IAG5C54G,EAAOnZ,KAAP,iDAAArS,OACqDokI,IAGrDxtI,OAAO0L,WACH,kBAAMwtC,EAAKq0F,gBAAgBjmI,IAC3BkmI,sDAMQlmI,GAAQ,IAAAuyC,EAAA/tC,KACpB,GAAKxE,EAAOq1D,aAMZ,IAAI7wD,KAAK6gI,QAAT,CAIA,IAAMH,EACAllI,EAAOmlI,kBAjQW,IAkQlB7B,EACAtjI,EAAOqjI,mBAAqB6B,EAE5Bn9B,EAASm9B,EADD1rI,OAAOq5B,KAAK7yB,EAAOq1D,aAAa5zD,OAK1C3I,EAAI,EAER,IAAK,IAAMkrC,KAAUhkC,EAAOq1D,YACxB,GAAIr1D,EAAOq1D,YAAY16D,eAAeqpC,GAAS,CAC3C,IAAMm+C,EAAUniF,EAAOq1D,YAAYrxB,GAEnCx/B,KAAKwhI,WAAWhiG,GACV,IAAIihG,EACFjhG,EACAm+C,EACA+iD,EACAn9B,EAASjvG,GACjBA,IAIRJ,OAAO0L,WACH,WACSmuC,EAAK8yF,UACN9yF,EAAK8wF,kBACC3qI,OAAOo2C,YACTyD,EAAK7Y,cAAe4pG,KAGhC,WA1CAh2G,EAAOlZ,KAAK,uEAkDhB,IAAMgxH,EAAO,GAEb,IAAK,IAAMphG,KAAUx/B,KAAKwhI,WACtB,GAAIxhI,KAAKwhI,WAAWrrI,eAAeqpC,GAAS,CACxC,IAAMC,EAAMz/B,KAAKwhI,WAAWhiG,GAAQC,IAE/Br9B,MAAMq9B,IAAQA,IAAQ0/F,MACvByB,EAAKphG,EAAOpiC,QAAQ,IAAK,MAAQqiC,GAKzCmhG,GACAz2G,IAAW+K,cAAckL,YAAuBwgG,mCAWpD,IAAK,IAAMphG,KAFX1W,EAAOnZ,KAAK,wBACZ3P,KAAK6gI,SAAU,EACM7gI,KAAKwhI,WAClBxhI,KAAKwhI,WAAWrrI,eAAeqpC,IAC/Bx/B,KAAKwhI,WAAWhiG,GAAQ7Q,OAGhC3uB,KAAKwhI,WAAa,GAEdxhI,KAAK6+H,mBACL3qI,OAAOyzC,cAAc3nC,KAAK6+H,khBCpVtC,IAAM/1G,EAASH,oBAAUQ,GAMnBw4G,aAMF,SAAAA,EAAY9sI,GAAMyyC,EAAAtnC,KAAA2hI,GACd3hI,KAAKnL,KAAOA,EACZmL,KAAKwkD,MAAQ,EACbxkD,KAAK4hI,IAAM,EACX5hI,KAAKqzE,QAAU,6CAQXwC,GACqB,iBAAdA,EACP/sD,EAAOrZ,MAAP,GAAAnS,OACO0C,KAAKnL,KADZ,8BAAAyI,OAC6C0C,KAAKwkD,OAC9CqxB,GACIzzE,MAAMyzE,KACd71E,KAAK4hI,KAAO/rD,EACZ71E,KAAKqzE,QAAQv1E,KAAK+3E,GAClB71E,KAAKwkD,OAAS,uCAUlB,OAAOxkD,KAAK4hI,IAAM5hI,KAAKwkD,2CAQd6D,GACTA,EAAM,GAAA/qD,OAAI0C,KAAKnL,KAAT,SAAuBmL,KAAK6hI,YAClCx5E,EAAM,GAAA/qD,OAAI0C,KAAKnL,KAAT,aAA2B+hB,KAAK0K,UAAUthB,KAAKqzE,yCAQrDrzE,KAAKqzE,QAAU,GACfrzE,KAAK4hI,IAAM,EACX5hI,KAAKwkD,MAAQ,WASfs9E,aAQF,SAAAA,EAAYn5C,EAAqB/0C,EAAO79C,GAAG,IAAA2xC,EAAA1nC,KAAAsnC,EAAAtnC,KAAA8hI,GAKvC9hI,KAAK4zC,MAAQA,EAOb5zC,KAAK+hI,GAAKhsI,EAQViK,KAAKgiI,WAAa,EAMlBhiI,KAAKiiI,QAAU,IAAIN,EAAkB,OAYrC3hI,KAAKkiI,iBAAmB,IAAI53G,IAO5BtqB,KAAKmiI,qBAAuBx5C,EAU5B3oF,KAAKoiI,oBAAiBtnI,EAEtBkF,KAAKqiI,mBAAqB,SAACv0G,EAAK+F,GACxB6T,EAAKkM,QAAU9lB,EAAI8lB,OACnBlM,EAAK46F,mBAAmBzuG,IAIhC,IAAMwe,EAAas2C,EAAoB6rB,YAEvCniE,EAAW5iB,WAAW7C,2BAClB5sB,KAAKqiI,oBAEJriI,KAAK4zC,QACN5zC,KAAKuiI,YAAc,SAAArjI,GAAE,OAAIwoC,EAAKw6F,iBAAiBzzG,OAAOvvB,IACtDmzC,EAAW/lB,GAAGywG,YAA4B/8H,KAAKuiI,aAE/CviI,KAAKwiI,sBACC,SAACtjI,EAAIqE,GAAL,OAAcmkC,EAAK+6F,oBAAoBvjI,EAAIqE,IACjD8uC,EAAW/lB,GACP2wG,uBACAj9H,KAAKwiI,6EASEj/H,GACf,GAAKA,GAcL,GARIonB,IAAQ+3G,yBACJn/H,EAAKklB,WAAallB,EAAKklB,UAAUxrB,QACjC+C,KAAKiiI,QAAQU,QAAQp/H,EAAKklB,UAAU,GAAGgX,KAI/Cz/B,KAAKgiI,YAAc,EAEfhiI,KAAKgiI,YAAchiI,KAAK+hI,GAAI,CAC5B,GAAIp3G,IAAQ+3G,wBAAyB,CACjC,IAAMrwF,EAAaryC,KAAKmiI,qBAAqB3tB,YAEvCouB,EAAc,CAChBn1E,IAAKztD,KAAK4zC,MACVivF,gBAAmBxwF,EAAW2+C,uBAelC,GAZIztF,EAAKklB,WAAallB,EAAKklB,UAAUxrB,QACjCjI,OAAOikF,OAAO2pD,EAAa,CACvBE,qBACIv/H,EAAKklB,UAAU,GAAGumF,mBACtB+zB,sBACIx/H,EAAKklB,UAAU,GAAGsmF,oBACtBi0B,eAAkBz/H,EAAKklB,UAAU,GAAGpX,OAI5CrR,KAAKiiI,QAAQgB,aAAaL,GAEtB5iI,KAAK4zC,MAAO,CAEZ,IAAMsvF,EAAgBljI,KACjBmiI,qBAAqBgB,gBAAgBf,eAErChgI,MAAM8gI,KAEPN,EAAW,SACL5iI,KAAKiiI,QAAQJ,YAAcqB,OAElC,CAEH,IAAME,EAAepjI,KAAKqjI,yBACpBC,EAActjI,KAAKiiI,QAAQJ,YAEjC7hI,KAAKoiI,eAAiBkB,EAAcF,EAE/BhhI,MAAMkhI,IAAiBlhI,MAAMghI,KAE9BR,EAAW,gBAAsB5iI,KAAKoiI,gBAI9Cj4G,IAAW+K,cAAciL,YAAoByiG,IAGjD5iI,KAAKujI,uBA5DLz6G,EAAOrZ,MAAM,6DAuEjB,IAAI+0C,EAAQ,EAAGo9E,EAAM,EADAz0G,GAAA,EAAAC,GAAA,EAAAC,OAAAvyB,EAAA,IAKrB,QAAAwyB,EAAAC,EAAwBvtB,KAAKkiI,iBAAiB10G,SAA9Cn4B,OAAAo4B,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAwD,KAA7Cq2G,EAA6Cl2G,EAAA/3B,MAC9CkuI,EAAMD,EAAU3B,YAEjBz/H,MAAMqhI,KACP7B,GAAO6B,EACPj/E,GAAS,EACTg/E,EAAUhxH,UAXG,MAAAsH,GAAAsT,GAAA,EAAAC,EAAAvT,EAAA,YAAAqT,GAAA,MAAAI,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAX,EAAA,MAAAC,GAerB,OAAOu0G,EAAMp9E,8CAUGtlD,EAAIqE,GACpB,IAAMmgI,EAAmC,iBAAhBngI,EAAKk5H,OAC1BkH,EAAS3jI,KAAKkiI,iBAAiB/sI,IAAI+J,IAElCykI,GAAUD,IACXC,EAAS,IAAIhC,EAAJ,GAAArkI,OAAyB4B,EAAzB,cACTc,KAAKkiI,iBAAiBn2G,IAAI7sB,EAAIykI,IAG9BD,EACAC,EAAOhB,QAAQp/H,EAAKk5H,QACbkH,GACP3jI,KAAKkiI,iBAAiBzzG,OAAOvvB,4CASjCc,KAAKiiI,QAAQzvH,QACTxS,KAAKkiI,kBACLliI,KAAKkiI,iBAAiBtjC,QAE1B5+F,KAAKgiI,WAAa,oCAQlB,IAAM3vF,EAAaryC,KAAKmiI,qBAAqB3tB,YAE7CniE,EAAW5iB,WAAW5C,8BAClB7sB,KAAKqiI,oBACJriI,KAAK4zC,QACNvB,EAAW6N,IACP+8E,uBACAj9H,KAAKwiI,uBACTnwF,EAAW6N,IACP68E,YACA/8H,KAAKuiI,uBAaA35C,aAOjB,SAAAA,EAAYv2C,EAAYt8C,GAAG,IAAA21C,EAAA1rC,KAAAsnC,EAAAtnC,KAAA4oF,GAOvB5oF,KAAK+hI,GAAKhsI,EAENA,EAAI,GACJ+yB,EAAOnZ,KAAP,0CAAArS,OAAsDvH,EAAtD,aAcJiK,KAAKgiI,WAAa,EAOlBhiI,KAAKw0G,YAAcniE,EAQnBryC,KAAK4jI,mBACC,IAAIjC,EAAkB,wBAQ5B3hI,KAAK6jI,qBACC,IAAIlC,EAAkB,0BAQ5B3hI,KAAK8jI,mBACC,IAAInC,EAAkB,wBAQ5B3hI,KAAK+jI,qBACC,IAAIpC,EAAkB,0BAQ5B3hI,KAAKgkI,gBACC,IAAIrC,EAAkB,oBAQ5B3hI,KAAKikI,kBACC,IAAItC,EAAkB,sBAQ5B3hI,KAAKkkI,oBACC,IAAIvC,EAAkB,qBAQ5B3hI,KAAKmkI,iBACC,IAAIxC,EAAkB,sBAQ5B3hI,KAAKokI,mBACC,IAAIzC,EAAkB,wBAO5B3hI,KAAKqkI,cAAgB,IAAI1C,EAAkB,oBAQ3C3hI,KAAKskI,oBACC,IAAI3C,EAAkB,2BAO5B3hI,KAAKukI,aAAe,IAAI5C,EAAkB,mBAQ1C3hI,KAAKwkI,mBACC,IAAI7C,EAAkB,0BAQ5B3hI,KAAKykI,uBACC,IAAI9C,EAAkB,iBAQ5B3hI,KAAK0kI,uBACC,IAAI/C,EAAkB,wBAO5B3hI,KAAK2kI,sBACC,IAAIhD,EAAkB,gBAQ5B3hI,KAAK4kI,sBACC,IAAIjD,EAAkB,uBAQ5B3hI,KAAK6kI,OAAS,IAAIlD,EAAkB,sBAEpC3hI,KAAK8kI,qBAAuB,SAAAvhI,GAAI,OAAImoC,EAAK42F,mBAAmB/+H,IAC5D8uC,EAAW/lB,GACP2wG,sBACAj9H,KAAK8kI,sBAET9kI,KAAK+kI,oBAAsB,WACvBj8G,EAAOpZ,MAAM,uCACbg8B,EAAK63F,iBACL73F,EAAKy3F,gBAAgBI,iBACrB73F,EAAKs5F,gBAAgBzB,kBAEzBlxF,EAAW/lB,GACPywG,aACA/8H,KAAK+kI,qBAET/kI,KAAKilI,uBAAyB,SAACrF,EAAWtlE,IAIpB,IAAdA,IACAxxC,EAAOnZ,KAAK,+BACZ+7B,EAAKw5F,sBAGb7yF,EAAW/lB,GACPywG,gBACA/8H,KAAKilI,wBAETjlI,KAAKmjI,gBACC,IAAIrB,EAAmB9hI,MAAM,EAAiBjK,GAEpDiK,KAAKglI,gBACC,IAAIlD,EAAmB9hI,MAAM,EAAgBjK,IAjN/C+yB,EAAOnZ,KAAK,4FA0NDpM,GAEf,GAAKA,EAAL,CAMA,IAAMqwC,EAAQ5zC,KAAKw0G,YAAYp5C,cACzB+pE,EAAWnlI,KAAKw0G,YAAYxjB,sBAElC,GAAKp9C,KAASuxF,EAAW,GAAzB,CAeA,IAAM/4B,EAAU7oG,EAAK6oG,QACfpnE,EAAYzhC,EAAKyhC,UACjBwnE,EAAajpG,EAAKipG,WAClB1nE,EAAYvhC,EAAK+oG,UACjB7oE,EAAalgC,EAAKkgC,WAExB,GAAK2oE,EAIE,GAAKpnE,EAIL,GAAKwnE,EAIL,GAAK1nE,EAIL,GAAKrB,GA2DZ,GArDAzjC,KAAK4jI,mBAAmBjB,QAAQv2B,EAAQ5pE,MAAM6pE,QAC9CrsG,KAAK6jI,qBAAqBlB,QAAQv2B,EAAQ5pE,MAAMwjD,UAEhDhmF,KAAK8jI,mBAAmBnB,QAAQv2B,EAAQ9qE,MAAM+qE,QAC9CrsG,KAAK+jI,qBAAqBpB,QAAQv2B,EAAQ9qE,MAAM0kD,UAE5Cr7D,IAAQy6G,gCACRplI,KAAKgkI,gBAAgBrB,QAAQ39F,EAAUqnE,QACvCrsG,KAAKikI,kBAAkBtB,QAAQ39F,EAAUghD,WAG7ChmF,KAAKmkI,iBAAiBxB,QAAQn2B,EAAWH,QACzCrsG,KAAKokI,mBAAmBzB,QAAQn2B,EAAWxmB,UAC3ChmF,KAAKkkI,oBAAoBvB,QAAQn2B,EAAW31B,OAE5C72E,KAAK6kI,OAAOlC,QAAQp/H,EAAKklF,mBAErB3jD,IACA9kC,KAAKqkI,cAAc1B,QACf3iI,KAAKqlI,sBACDvgG,GAAW,EAAoBkI,WACvChtC,KAAKskI,oBAAoB3B,QACrB3iI,KAAKqlI,sBACDvgG,GAAW,EAAoBkI,YAEvChtC,KAAKukI,aAAa5B,QACd3iI,KAAKqlI,sBACDvgG,GAAW,EAAkBkI,WACrChtC,KAAKwkI,mBAAmB7B,QACpB3iI,KAAKqlI,sBACDvgG,GAAW,EAAkBkI,aAGrCvJ,IACAzjC,KAAKykI,uBAAuB9B,QACxB3iI,KAAKslI,yBACD7hG,GAAY,EAAoBuJ,WAExChtC,KAAK0kI,uBAAuB/B,QACxB3iI,KAAKslI,yBACD7hG,GAAY,EAAoBuJ,YAExChtC,KAAK2kI,sBAAsBhC,QACvB3iI,KAAKslI,yBACD7hG,GAAY,EAAkBuJ,WAEtChtC,KAAK4kI,sBAAsBjC,QACvB3iI,KAAKslI,yBACD7hG,GAAY,EAAkBuJ,aAG1ChtC,KAAKgiI,YAAc,EAEfhiI,KAAKgiI,YAAchiI,KAAK+hI,GAAI,CAE5B,IAAMa,EAAc,CAChBn1E,IAAK7Z,EACLivF,gBAAmBsC,GAGnB5hI,EAAKklB,WAAallB,EAAKklB,UAAUxrB,QACjCjI,OAAOikF,OAAO2pD,EAAa,CACvBE,qBACIv/H,EAAKklB,UAAU,GAAGumF,mBACtB+zB,sBACIx/H,EAAKklB,UAAU,GAAGsmF,oBACtBi0B,eAAkBz/H,EAAKklB,UAAU,GAAGpX,OAI5CrR,KAAK4jI,mBAAmBX,aAAaL,GACrC5iI,KAAK6jI,qBAAqBZ,aAAaL,GAEvC5iI,KAAK8jI,mBAAmBb,aAAaL,GACrC5iI,KAAK+jI,qBAAqBd,aAAaL,GAEnCj4G,IAAQy6G,gCACRplI,KAAKgkI,gBAAgBf,aAAaL,GAClC5iI,KAAKikI,kBAAkBhB,aAAaL,IAExC5iI,KAAKmkI,iBAAiBlB,aAAaL,GACnC5iI,KAAKokI,mBAAmBnB,aAAaL,GACrC5iI,KAAKkkI,oBAAoBjB,aAAaL,GAEtC5iI,KAAKqkI,cAAcpB,aAAaL,GAC3BxgI,MAAMpC,KAAKskI,oBAAoBzC,cAChC7hI,KAAKskI,oBAAoBrB,aAAaL,GAE1C5iI,KAAKukI,aAAatB,aAAaL,GAC1BxgI,MAAMpC,KAAKwkI,mBAAmB3C,cAC/B7hI,KAAKwkI,mBAAmBvB,aAAaL,GAGzC5iI,KAAKykI,uBAAuBxB,aAAaL,GACpCxgI,MAAMpC,KAAK0kI,uBAAuB7C,cACnC7hI,KAAK0kI,uBAAuBzB,aAAaL,GAE7C5iI,KAAK2kI,sBAAsB1B,aAAaL,GACnCxgI,MAAMpC,KAAK4kI,sBAAsB/C,cAClC7hI,KAAK4kI,sBAAsB3B,aAAaL,GAG5C5iI,KAAK6kI,OAAO5B,aAAaL,GAEzBz4G,IAAW+K,cAAciL,YAAoByiG,IAE7C5iI,KAAKujI,uBA/GLz6G,EAAOrZ,MAAM,sBAJbqZ,EAAOrZ,MAAM,uBAJbqZ,EAAOrZ,MAAM,wBAJbqZ,EAAOrZ,MAAM,uBAJbqZ,EAAOrZ,MAAM,sBA9BbqZ,EAAOrZ,MAAM,6DA4KI81H,EAAiBrzG,EAAS6a,GAK/C,IAJA,IAAIy4F,EAAgB,EAChBtsC,EAAY,EACVusC,EAAOzlI,KAAKw0G,YAAYr6C,WAE9BjR,EAAA,EAAAw8E,EAAqB1wI,OAAOq5B,KAAKk3G,GAAjCr8E,EAAAw8E,EAAAzoI,OAAAisD,IAAmD,CAA9C,IAAMy8E,EAAMD,EAAAx8E,GACb,GAAIh3B,EAAUyzG,IAAWF,EAAOE,IAAWF,EAAM,CAC7C,IAAMprE,EACAnoC,EACI,KACAlyB,KAAKw0G,YAAYt5C,mBAAmByqE,GACxCC,EAAmBL,EAAgBI,GAGzC,IAAKzzG,GAAWmoC,IAAgBurE,EAAkB,CAC9C,IAAMC,EAAgB7lI,KAAK8lI,6BACvBF,EAAkBvrE,EAAattB,GAE9B3qC,MAAMyjI,KACPL,GAAiBK,EACjB3sC,GAAa,KAM7B,OAAOssC,EAAgBtsC,uDAcE6sC,EAAQ1rE,EAAattB,GAC9C,IAAI9T,EAAQjkC,OAAOq5B,KAAK03G,GAAQhpI,IAAI,SAAA6zB,GAAI,OAAI/vB,OAAO+vB,KAC/CyY,EAAc,KAIZvb,EAAM9tB,KAAKw0G,YAAYzlB,0BAEzB10B,GACAhxB,EAAcgxB,EAAY2rE,qBAAqBl5F,QAE3C7T,EACMA,EAAME,OACJ,SAAAvI,GAAI,OAAIyY,EAAY5P,KAChB,SAAAoT,GAAK,OACAA,EAAMqvB,WACArvB,EAAM4pD,YAAc7lE,GACpBic,EAAME,YAAcA,QAG/C1D,EAAcrpC,KAAKw0G,YAAYx+D,eAAelJ,KAC9C7T,EACMA,EAAME,OACJ,SAAAvI,GAAI,OAAIyY,EAAY5P,KAChB,SAAAoT,GAAK,OACAA,EAAMqvB,WACApuC,EAAI0oE,aAAa3pD,KAAWjc,GAC5Bic,EAAME,YAAcA,OAG/C,IAAIy4F,EAAgB,EAChBS,EAAgB,EA/BqCj4G,GAAA,EAAAC,GAAA,EAAAC,OAAApzB,EAAA,IAiCzD,QAAAqzB,EAAAC,EAAmB6K,EAAnB5jC,OAAAo4B,cAAAO,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAA0B,KAAf4C,EAAezC,EAAA54B,MAChB2wI,EACArlI,OAAOklI,EAAOn1G,GAAM4Q,QAAU3gC,OAAOklI,EAAOn1G,GAAM+S,QAGnDvhC,MAAM8jI,IAAmBA,EAAiB,IAC3CV,GAAiBU,EACjBD,GAAiB,IAxCgC,MAAAnsH,GAAAmU,GAAA,EAAAC,EAAApU,EAAA,YAAAkU,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GA4CzD,OAAOs3G,EAAgBS,gDAaLnhG,EAAW5S,EAAS6a,GAKtC,IAJA,IAAIo5F,EAAa,EACbjtC,EAAY,EACVusC,EAAOzlI,KAAKw0G,YAAYr6C,WAE9B5Q,EAAA,EAAA68E,EAAqBpxI,OAAOq5B,KAAKyW,GAAjCykB,EAAA68E,EAAAnpI,OAAAssD,IAA6C,CAAxC,IAAMo8E,EAAMS,EAAA78E,GACb,GAAIr3B,EAAUyzG,IAAWF,EAAOE,IAAWF,EAAM,CAC7C,IAAMprE,EACAnoC,EACI,KAAOlyB,KAAKw0G,YAAYt5C,mBAAmByqE,GAC/CU,EAAYvhG,EAAU6gG,GAG5B,IAAKzzG,GAAWmoC,IAAgBgsE,EAAW,CACvC,IAAMC,EACAtmI,KAAKumI,0BACHF,EAAWhsE,EAAattB,GAE3B3qC,MAAMkkI,KACPH,GAAcG,EACdptC,GAAa,KAM7B,OAAOitC,EAAajtC,oDAcE6sC,EAAQ1rE,EAAattB,GAC3C,IAAI9T,EAAQjkC,OAAOq5B,KAAK03G,GAAQhpI,IAAI,SAAA6zB,GAAI,OAAI/vB,OAAO+vB,KAC/CyY,EAAc,KAIZvb,EAAM9tB,KAAKw0G,YAAYzlB,0BAEzB10B,GACAhxB,EAAcgxB,EAAY2rE,qBAAqBl5F,QAE3C7T,EACMA,EAAME,OACJ,SAAAvI,GAAI,OAAIyY,EAAY5P,KAChB,SAAAoT,GAAK,OAAKA,EAAMqvB,WACTrvB,EAAM4pD,YAAc7lE,GACpBic,EAAME,YAAcA,QAG3C1D,EAAcrpC,KAAKw0G,YAAYx+D,eAAelJ,KAC9C7T,EACMA,EAAME,OACJ,SAAAvI,GAAI,OAAIyY,EAAY5P,KAChB,SAAAoT,GAAK,OAAKA,EAAMqvB,WACTpuC,EAAI0oE,aAAa3pD,KAAWjc,GAC5Bic,EAAME,YAAcA,OAG3C,IAAIo5F,EAAa,EACbF,EAAgB,EA7BkC72G,GAAA,EAAAC,GAAA,EAAAC,OAAAx0B,EAAA,IA+BtD,QAAAy0B,EAAAC,EAAmByJ,EAAnB5jC,OAAAo4B,cAAA2B,GAAAG,EAAAC,EAAA9B,QAAAC,MAAAyB,GAAA,EAA0B,KAAfwB,EAAerB,EAAAh6B,MAChBixI,EAAc3lI,OAAOklI,EAAOn1G,KAG7BxuB,MAAMokI,IAAgBA,EAAc,IACrCL,GAAcK,EACdP,GAAiB,IArC6B,MAAAnsH,GAAAuV,GAAA,EAAAC,EAAAxV,EAAA,YAAAsV,GAAA,MAAAI,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAAsB,EAAA,MAAAC,GAyCtD,OAAO62G,EAAaF,8CAWpBjmI,KAAKujI,iBACLvjI,KAAKmjI,gBAAgBI,0DAQrBvjI,KAAK4jI,mBAAmBpxH,QACxBxS,KAAK6jI,qBAAqBrxH,QAE1BxS,KAAK8jI,mBAAmBtxH,QACxBxS,KAAK+jI,qBAAqBvxH,QAE1BxS,KAAKgkI,gBAAgBxxH,QACrBxS,KAAKikI,kBAAkBzxH,QAEvBxS,KAAKmkI,iBAAiB3xH,QACtBxS,KAAKokI,mBAAmB5xH,QACxBxS,KAAKkkI,oBAAoB1xH,QAEzBxS,KAAKqkI,cAAc7xH,QACnBxS,KAAKskI,oBAAoB9xH,QACzBxS,KAAKukI,aAAa/xH,QAClBxS,KAAKwkI,mBAAmBhyH,QAExBxS,KAAKykI,uBAAuBjyH,QAC5BxS,KAAK0kI,uBAAuBlyH,QAC5BxS,KAAK2kI,sBAAsBnyH,QAC3BxS,KAAK4kI,sBAAsBpyH,QAE3BxS,KAAK6kI,OAAOryH,QAEZxS,KAAKgiI,WAAa,oCAOlBhiI,KAAKw0G,YAAYt0D,IACb68E,aACA/8H,KAAK+kI,qBACT/kI,KAAKw0G,YAAYt0D,IACb+8E,sBACAj9H,KAAK8kI,sBACT9kI,KAAKw0G,YAAYt0D,IACb68E,gBACA/8H,KAAKilI,wBACTjlI,KAAKmjI,gBAAgBn2G,UACrBhtB,KAAKglI,gBAAgBh4G,gWC78BRg8D,aAQjB,SAAAA,EAAY32C,gGAAY/K,CAAAtnC,KAAAgpF,GACpBhpF,KAAK6zB,MAAQ,CACTq+B,MAAO,GAIPu0E,kBAAmB,MAGvB,IAAMt0G,EAASkgB,EAAW8nB,WAE1Bn6D,KAAK6zB,MAAMq+B,MAAM//B,GAAU,IAAI4jD,IAAa5jD,EAAQ,MAAM,GAE1DkgB,EAAWhI,iBACP4K,2BACAj1C,KAAK0mI,mBAAmB5wI,KAAKkK,OACjCqyC,EAAWhI,iBACP4K,cACAj1C,KAAK2mI,YAAY7wI,KAAKkK,OAC1BqyC,EAAWhI,iBACP4K,YACAj1C,KAAK4mI,aAAa9wI,KAAKkK,OAC3BqyC,EAAWhI,iBACP4K,uBACAj1C,KAAK6mI,qBAAqB/wI,KAAKkK,OAC/BqyC,EAAWjoB,MACXioB,EAAWjoB,KAAKgpB,YACZ+e,IAAWl4D,uBACX+F,KAAK8mI,aAAahxI,KAAKkK,yEAahBymI,GACf,IAAMM,EACA/mI,KAAK6zB,MAAMq+B,MAAMlyD,KAAK6zB,MAAM4yG,mBAC5BO,EAAqBhnI,KAAK6zB,MAAMq+B,MAAMu0E,GAE5CM,GAAsBA,EAAmB1wD,oBAAmB,GAC5D2wD,GAAsBA,EAAmB3wD,oBAAmB,GAC5Dr2E,KAAK6zB,MAAM4yG,kBAAoBA,sCAWvBt0G,EAAQkoC,GAChB,IAAI4sE,EAAYjnI,KAAK6zB,MAAMq+B,MAAM//B,GAE5B80G,IACDA,EAAYjnI,KAAK6zB,MAAMq+B,MAAM//B,GACvB,IAAI4jD,IAAa5jD,EAAQkoC,EAAY0rB,wDAYtC5zD,GACT,IAAM80G,EAAYjnI,KAAK6zB,MAAMq+B,MAAM//B,GAE/B80G,GACAA,EAAUC,6DAYG/0G,EAAQskD,GACzB,IAAMwwD,EAAYjnI,KAAK6zB,MAAMq+B,MAAM//B,GAE/B80G,GACAA,EAAU9wD,eAAeM,sCAY7B,OAAOz2E,KAAK6zB,MAAMq+B,2CASTi1E,GACT,IAAK,IAAMh1G,KAAUg1G,EAAU,CAC3B,IAAIC,OAAoB,EAEpBpnI,KAAK6zB,MAAMq+B,MAAM//B,IACjBi1G,EAAuBpnI,KAAK6zB,MAAMq+B,MAAM//B,IAEd4zD,kBACtBqhD,EACKjxD,eAAegxD,EAASh1G,GAAQ6jD,cAGzCoxD,EAAuB,IAAIrxD,IACvB5jD,EAAQg1G,EAASh1G,GAAQ6jD,aAC7Bh2E,KAAK6zB,MAAMq+B,MAAM//B,GAAUi1G,EAC3BA,EAAqBF,iBAGzBE,EAAqB9wD,yBACf6wD,EAASh1G,GAAQmkD,gFCxJnC,IAAM2O,EAAgBjqF,EAAQ,IACxBqsI,EAAgBrsI,EAClB,KAEEssI,EAAe,SAerB,SAAS94C,IAELxuF,KAAKunI,cAAgB,IAAItiD,EAGzBjlF,KAAKwnI,qBAAuB,IAAIH,EAGhCrnI,KAAKymH,QAAU,KAIfzmH,KAAK0kF,UAAY,KAGjB1kF,KAAKynI,cAAgB,KAIrBznI,KAAKX,SAAW,KAIhBW,KAAKk8E,QAAU,GAGfl8E,KAAK0kD,MAAQ4iF,EAIbtnI,KAAK0nI,WAAa,EAwNtB,SAASC,EAAmBC,GACxB,IAAK,IAAItzI,EAAI,EAAGA,EAAIszI,EAAoB3qI,OAAQ3I,IACN,IAAlCszI,EAAoBtzI,GAAG2I,QACvB2qI,EAAoBrqI,OAAOjJ,EAAG,GAItC,OAAOszI,EAAoB3qI,OAAS,EAvNxCuxF,EAAYt4F,UAAU2vB,MAAQ,WAC1B,GAAI7lB,KAAK0kD,QAAU4iF,EACf,MAAM,IAAInpI,MAAJ,uDAAAb,OAEEgqI,EAFF,qCAAAhqI,OAGE0C,KAAK0kD,MAHP,YAKV1kD,KAAK0kD,MA3De,YA4DpB1kD,KAAKunI,cAAc1hH,QACnB7lB,KAAK0kF,UAAY,IAAIpyE,MASzBk8E,EAAYt4F,UAAUy4B,KAAO,SAActvB,GAAU,IAAAqoC,EAAA1nC,KACjD,GAvEoB,cAuEhBA,KAAK0kD,MACL,MAAM,IAAIvmD,MAAJ,sDAAAb,OAxEU,YAwEV,qCAAAA,OAGE0C,KAAK0kD,MAHP,YAOVl1C,QAAQH,IAAI,8CACZrP,KAAKunI,cAAc54G,OAGnB,IAAMk5G,EAwBV,SAAsBt5C,EAAatnB,GAO/B,GANAz3D,QAAQH,IACJ,6FAAA/R,OAC2B2pE,EAAO6gE,UAAU7qI,SAI5CgqE,EAAO6gE,UAAU7qI,OAAS,EAAG,CAC7B,IAAIsmG,EAASt8B,EAAOyd,UAAUqjD,qBACxBx5C,EAAY7J,UAAUqjD,qBAIxBxkC,EAAS,IACTA,EAAS,GAGb,IAAInqE,EAAQ,IAEZ6tC,EAAO6gE,UAAU7mI,QAAQ,SAAA+mI,GACrBA,EAAWC,OAAS1kC,EACpBykC,EAAWniB,KAAOtiB,EAClBnqE,GAAK,GAAA97B,OAAO0qI,EAAWE,KAAlB,OAET9uG,GAAS,IACT5pB,QAAQH,IAAI+pB,GAKZ6tC,EAAO6gE,UAAUjzI,KAAOoyE,EAAOpyE,KAInC05F,EAAYrS,QAAQp+E,KAAKmpE,EAAO6gE,WAChCv5C,EAAYk4B,UACZj3G,QAAQH,IAAR,oBAAA/R,OAAgCixF,EAAYk4B,UAG5Cl4B,EAAY45C,cA/DkBryI,KAAK,KAAMkK,MAEzCA,KAAKunI,cAAcnhD,sBAAsBnlF,QAAQ,SAAAmnI,GAC7C1gG,EAAK8/F,qBAAqBnwH,KAAK+wH,EAAiBP,GAChDngG,EAAK++E,YAITzmH,KAAK0kD,MA1FkB,eA6FvB1kD,KAAKX,SAAWA,GA2DpBmvF,EAAYt4F,UAAUiyI,WAAa,WAxJR,iBAyJnBnoI,KAAK0kD,OAAiD,IAAjB1kD,KAAKymH,SAG1CzmH,KAAKqoI,SAQb75C,EAAYt4F,UAAUmyI,MAAQ,WAAW,IAAA38F,EAAA1rC,KACrCwP,QAAQH,IAAR,sDAAA/R,OAEQ0C,KAAKk8E,QAAQj/E,SACrB+C,KAAKynI,cAAgB,GAOrB,IAAMa,EAAStoI,KAAKk8E,QAGdqsD,EAAiB,GAGvBZ,EAAmBW,GAGnBA,EAAOrnI,QAAQ,SAAAm4B,GAAK,OA6FxB,SAA+BA,EAAO8uG,GAClC,GAAqB,IAAjB9uG,EAAMn8B,OACNm8B,EAAMt7B,KAAKoqI,OACR,CACH,GAAI9uG,EAAMA,EAAMn8B,OAAS,GAAGgrI,OAASC,EAAKD,MAGtC,YAFA7uG,EAAMt7B,KAAKoqI,GAKf,IAAK,IAAI5zI,EAAI,EAAGA,EAAI8kC,EAAMn8B,OAAQ3I,IAC9B,GAAI4zI,EAAKD,MAAQ7uG,EAAM9kC,GAAG2zI,MAGtB,YAFA7uG,EAAM77B,OAAOjJ,EAAG,EAAG4zI,GAK3B9uG,EAAMt7B,KAAKoqI,IA9GSM,CAAsBD,EAAgBnvG,KAG9D,IAvBqC,IAAAmf,EAAA,WAyBjC,IAAIkwF,EAAkBH,EAAO,GAE7BA,EAAOrnI,QAAQ,SAAA6mI,GACPA,EAAU,GAAGG,MAAQQ,EAAgB,GAAGR,QACxCQ,EAAkBX,KAK1B,IAAIY,EAAYD,EAAgBryG,QAEhCsV,EAAKi9F,oBAAoBD,EAAWD,EAAgB5zI,MAIpD,IAxCiC,IAAAw0D,EAAA,WAyC7B,IAAIu/E,GAAe,EACbC,EAAgBJ,EAAgB,GAAGR,MASzC,GAPAK,EAAOrnI,QAAQ,SAAA6mI,GACPA,EAAU,GAAGG,MAAQY,IACrBD,GAAe,KAKnBA,EACA,cAGJF,EAAYD,EAAgBryG,QAC5BsV,EAAKi9F,oBAAoBD,EAAW,OAhBjCD,EAAgBxrI,OAAS,GAAG,cAAAosD,IAY3B,QA7BLs+E,EAAmBW,IAAS/vF,IAuCnCv4C,KAAK0kD,MAjOc,WAkOf1kD,KAAKX,UACLW,KAAKX,SAASW,KAAKynI,gBAU3Bj5C,EAAYt4F,UAAUyyI,oBAAsB,SAAST,EAAMrzI,GACnDA,UACAmL,KAAKynI,eAAL,KAAAnqI,OAA2BzI,EAA3B,KACAmL,KAAK0nI,WAAa7yI,EAAKoI,OAAS,GAEhC+C,KAAK0nI,WAAaQ,EAAKA,KAAKjrI,OA/OJ,KAgPxB+C,KAAKynI,eAAiB,SACtBznI,KAAK0nI,WAAa,GAEtB1nI,KAAKynI,eAAL,IAAAnqI,OAA0B4qI,EAAKA,MAC/BloI,KAAK0nI,YAAcQ,EAAKA,KAAKjrI,OAAS,GAwD1CuxF,EAAYt4F,UAAUu2C,SAAW,SAASI,GACtC7sC,KAAKunI,cAAc96F,SAASI,IAOhC2hD,EAAYt4F,UAAUujF,YAAc,SAAS5sC,GACzC7sC,KAAKunI,cAAc9tD,YAAY5sC,IAQnC2hD,EAAYt4F,UAAU4yI,iBAAmB,WACrC,GAjUmB,aAiUf9oI,KAAK0kD,MACL,MAAM,IAAIvmD,MAAJ,8DAAAb,OAlUS,WAkUT,qCAAAA,OAGE0C,KAAK0kD,MAHP,YAMV,OAAO1kD,KAAKynI,eAMhBj5C,EAAYt4F,UAAU6yI,SAAW,WAC7B,OAAO/oI,KAAK0kD,OAOhB8pC,EAAYt4F,UAAUsc,MAAQ,WAC1BxS,KAAK0kD,MAAQ4iF,EACbtnI,KAAKymH,QAAU,KACfzmH,KAAKynI,cAAgB,KACrBznI,KAAK0kF,UAAY,KACjB1kF,KAAKX,SAAW,KAChBW,KAAKk8E,QAAU,GACfl8E,KAAK0nI,WAAa,GAGtB3zI,EAAOD,QAAU06F,iCCvWjB,SAAArlE,GAAA/0B,EAAAQ,EAAAmxB,EAAA,sBAAA+hE,IAAA,IAAAkhD,EAAA50I,EAAA,GAEM00B,EAAS9tB,EAAQ,GAAqB2tB,UAAUQ,GA4BvC,SAAS2+D,EAAmBz1C,GAEvCryC,KAAKwuE,SAAW,GAEhBxuE,KAAKqyC,WAAaA,EAClBryC,KAAKqyC,WAAWg7C,mBACZ,WAAYrtF,KAAKipI,gBAAgBnzI,KAAKkK,OA5B9C8nF,EAAmBohD,gBAAkB,QAMrCphD,EAAmBqhD,sBAAwB,cAM3CrhD,EAAmBshD,sBAAwB,OAmB3CthD,EAAmB5xF,UAAU+yI,gBACvB,SAASv8H,EAAM28H,EAAazyC,GAAQ,IAAAlvD,EAAA1nC,KAClC,GAA8B,6BAA1B0M,EAAKxE,WAAWmI,MAMpB,GAAKrQ,KAAKqyC,WAAWskD,SAASC,GAA9B,CAQA,IAAMvnF,EAAM,GAEZ3C,EAAK0uE,SAASn6E,QAAQ,SAAAw6B,GAElB,IAAM6tG,EAAgB7tG,EAAKvzB,WAAWrT,KAEtC,GAAIy0I,IAAkBxhD,EAAmBohD,iBACtCI,IAAkBxhD,EAAmBshD,uBACrCE,IAAkBxhD,EAAmBqhD,sBAFxC,CAUA,IAAMnlH,EAAUyX,EAAKlmC,MAEjBmyC,EAAK8mC,SAAS86D,KAAmBtlH,IACjC0jB,EAAK8mC,SAAS86D,GAAiBtlH,EAC/B8E,EAAOnZ,KAAP,OAAArS,OAAmBgsI,EAAnB,cAAAhsI,OAA6C0mB,IAE7C3U,EAAIvR,KAAK,CACLoB,GAAI,oBACJo4B,UAAWgyG,EACXtlH,kBAhBJ8E,EAAOlZ,KAAP,sDAAAtS,OAEQgsI,MAoBZj6H,EAAIpS,OAAS,GACbktB,IAAWmJ,QAAQ1c,KAAK0K,UAAUjS,SAvClCyZ,EAAOlZ,KAAP,8CAAAtS,OACkDoP,GAC9CkqF,QARJ9tE,EAAOlZ,KAAK,iDAAkDlD,IAwD1Eo7E,EAAmB5xF,UAAUqzI,oBAAsB,SAASD,GACxD,OAAOtpI,KAAKwuE,SAAS86D,sVClGzB,IAAMxgH,EAASH,oBAAUQ,GASJogE,aAOjB,SAAAA,EAAYgc,gGAAUj+D,CAAAtnC,KAAAupF,GAClBvpF,KAAKulG,SAAWA,EAChBvlG,KAAKuqB,aAAeg7E,EAASh7E,aAC7BzB,EAAOpZ,MAAM,uBACb1P,KAAKuwD,SAAW,GAEhBvwD,KAAKwpI,2BAA6BxpI,KAAKypI,oBAAoB3zI,KAAKkK,MAKhEulG,EAAShY,oBAAoB,uBACzBvtF,KAAK0pI,oBAAoB5zI,KAAKkK,0EASlB0M,GAChB,IAAMxE,EAAawE,EAAKxE,WAExB,GAAKA,EAAL,CAIA4gB,EAAOpZ,MAAM,+BAAgCxH,GAE7C,IAAMwzD,EAAWxzD,EAAWw8C,MAE5B,GAAIgX,IAAa17D,KAAK0kD,MAItB,OAAQgX,GACR,KAAKiuE,WACL,KAAKA,YACL,KAAKA,gBACL,KAAKA,iBACL,KAAKA,eACD,IAAMhsD,EAAUz1E,EAAW0hI,WAE3B,IAAKjsD,EACD,OAIJ,IAAMx8D,EAAUnhB,KAAKuwD,SAASotB,GAE1Bx8D,EACAA,EAAQ0oH,SAASnuE,EAAUxzD,EAAW4hI,gBAEtChhH,EAAOlZ,KAAK,kCAAmC+tE,qDAcnCqc,EAAYhkB,GAChC,GAAIh2E,KAAKuwD,SAASypC,GAId,OAHAlxE,EAAOlZ,KAAK,uDACRoqF,GAEG,IAAI77F,MAAMwrI,wBAGrB,IAAMxoH,EAAU,IAAI4oH,IAChB/vC,EAAYhkB,EAAah2E,KAAKulG,UAMlC,OAJApkF,EAAQ6oH,iBAAiBhqI,KAAKwpI,4BAE9BxpI,KAAKuwD,SAASypC,GAAc74E,EAErBA,8CASS2T,GAChB,IAAM6oD,EAAU7oD,EAAM6oD,QAEtB,GAAI7oD,EAAM4mC,WAAaiuE,aAChB70G,EAAM4mC,WAAaiuE,eAAwB,CAC9C,IAAMxoH,EAAUnhB,KAAKuwD,SAASotB,GAE9B,IAAKx8D,EAID,YAHA2H,EAAOrZ,MAAM,6CACTkuE,GAKRx8D,EAAQ8oH,oBAAoBjqI,KAAKwpI,mCAC1BxpI,KAAKuwD,SAASotB,GAGzB39E,KAAKuqB,aAAa2C,KACdilC,IAAW33D,mCACXs6B,4+BC1HZ,IAAMhM,EAASH,oBAAUQ,GAYJ4gH,cAWjB,SAAAA,EAAY/vC,EAAYhkB,EAAauvB,GAAU,IAAA79D,EAAA,mGAAAJ,CAAAtnC,KAAA+pI,IAC3CriG,EAAAH,EAAAvnC,KAAAwnC,EAAAuiG,GAAAt1I,KAAAuL,QAEKg6F,WAAaA,EAClBtyD,EAAKsuC,YAAcA,EACnBtuC,EAAK69D,SAAWA,EAShB79D,EAAKgd,WAAQ5pD,EAd8B4sC,wPAXCD,6CAgCxCznC,KAAK0kD,QAAUu1C,aACZj6F,KAAK0kD,QAAUu1C,eAMtBj6F,KAAKkqI,aAAa,QALdphH,EAAOlZ,KAAK,mFAcZ5P,KAAK0kD,QAAUu1C,YACZj6F,KAAK0kD,QAAUu1C,aACfj6F,KAAK0kD,QAAUu1C,iBACfj6F,KAAK0kD,QAAUu1C,iBAMtBj6F,KAAKkqI,aAAa,SALdphH,EAAOlZ,KAAK,0EAgBX8rD,EAAUyuE,GACf,GAAIzuE,IAAa17D,KAAK0kD,MAAtB,CAIA,IAAM0lF,EAAWpqI,KAAK0kD,MAEtB1kD,KAAK0kD,MAAQgX,EACb17D,KAAKuqB,aAAa2C,KAlFJ,gBAmFV,CACIywD,QAAS39E,KAAKg6F,WACdmwC,gBACAC,WACA1uE,SAAU17D,KAAK0kD,MACfsxB,YAAah2E,KAAKg2E,wDAWb3pD,GACbrsB,KAAKozC,YApGS,gBAoGkB/mB,+CAQhBA,GAChBrsB,KAAKysB,eA7GS,gBA6GqBJ,wCAS1BqS,GAAQ,IAAAgN,EAAA1rC,KACXkI,EAAa,CACfmI,MAAS,kCACTquB,OAAUA,EACVkrG,WAAY5pI,KAAKg6F,YAGrB9xF,EAAWmiI,YAAcrqI,KAAKg2E,YAE9B,IAAM15D,EAAK1V,cAAI,CACXwV,GAAIpc,KAAKulG,SAAS7qB,YAClBrpE,KAAM,QACL1c,EAAE,QAASuT,GACXqI,KAELuY,EAAOpZ,MAAP,GAAApS,OAAgBohC,EAAhB,yBAA+CpiB,EAAGhM,UAClDtQ,KAAKulG,SAASjoF,WAAWnF,OACrBmE,EACA,aACA,SAAA7M,GACIqZ,EAAOrZ,MAAP,aAAAnS,OACiBohC,EADjB,kCACyDjvB,GACzDi8B,EAAKm+F,SAAS5vC,iJCzJfl0E,EAAA,GACXtW,MAAO,CACH66H,KAAM,OACNhhI,MAAO,QACPihI,oBAAqB,sBACrBC,oBAAqB,uBAEzB/0I,KAAM,CACFg1I,KAAM,OACN/iI,OAAQ,UAEZiS,OAAQ,CACJ26D,IAAK,MACLD,GAAI,KACJptB,QAAS,gnCCFjB,IAAMn+B,EAASH,oBAAUQ,GAOJuhH,aAmBjB,SAAAA,IAA0B,IAAdp5H,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,gGAAIypC,CAAAtnC,KAAA0qI,GAAA,IAElBC,EAEAr5H,EAFAq5H,gBACGC,EAHeC,EAIlBv5H,EAJkB,qBAWtBtR,KAAK8qI,SAAL9rG,EAAA,CACIqW,UAAWs1F,GACJA,EAAgBvgH,KAAK9M,WAAW89B,OAAOqjE,cAC3CmsB,GAQP5qI,KAAK+qI,gBAAkB,KAGvB/qI,KAAKgrI,cAAgBhrI,KAAKgrI,cAAcl1I,KAAKkK,MAC7CA,KAAKirI,eAAiBjrI,KAAKirI,eAAen1I,KAAKkK,MAC/CA,KAAKkrI,gBAAkBlrI,KAAKkrI,gBAAgBp1I,KAAKkK,oEAiBtCkP,GACX,IAAMwqF,EAAUxqF,EAAQtO,KAExB,GAAK84F,EAOL,GAAI15F,KAAK+qI,iBACF/qI,KAAK+qI,gBAAgBI,eAAiBzxC,EACzC15F,KAAKgrI,cACDtxC,EACA92C,IAAQ/D,iBACR,gBALR,CAWA,IAAMviC,EAAKtc,KAAKorI,oBAAoBl8H,EAAQ3L,KAAK+Y,IAC3C+uH,EAAU/uH,GAAMA,EAAGmd,KAAK,UACxBiF,EAAS2sG,GAAWA,EAAQz+H,KAAK,UAEnC8xB,IAAWkkB,IAAQE,WACnB9iD,KAAK+qI,gBAAkB/qI,KAAKsrI,sBAAsB5xC,EAAS,CACvDn8B,aAAa,EACbguE,cAAc,KAMlBvrI,KAAK+qI,iBACL/qI,KAAK+qI,gBAAgBS,eAAeH,GAKpC3sG,IAAWkkB,IAAQ/D,kBAChBngB,IAAWkkB,IAAQI,aACnBtkB,IAAWkkB,IAAQG,WACtB/iD,KAAKyrI,sDAeP/xC,GAA2B,IAAlBnnD,EAAkB10C,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GACzBmC,KAAK+qI,gBAAkB/qI,KAAKsrI,sBAAsB5xC,EAAS,CACvDn8B,aAAa,EACbguE,cAAc,IAGlBvrI,KAAK+qI,gBAAgBllH,MAAM0sB,kCASvBvyC,KAAK+qI,iBACL/qI,KAAK+qI,gBAAgBp8G,OAGzB3uB,KAAK+qI,gBAAkB,iDAWPW,GAChB,IACI,IAAMC,GAAS,IAAIv+H,WAAYC,gBAAgBq+H,EAAK,YAEpD,OAAOxwF,EAAEywF,GACX,MAAO1sI,GAGL,OAFA6pB,EAAOrZ,MAAM,kDAEN,oDAeOiqF,GAAuB,IAAdpoF,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GACrC,IAAK67F,EACD,MAAM,IAAIv7F,MAAM,mDAGpB,IAAM6gE,EAAShgC,EAAA,CACXqW,UAAWr1C,KAAK8qI,SAASz1F,UACzB+kE,QAASp6G,KAAKgrI,cACdY,eAAgB5rI,KAAKkrI,gBACrBW,cAAe7rI,KAAKirI,eACpBvxC,WACGpoF,GAGP,OAAO,IAAIw6H,IAAkB9sE,yCAiBnB06B,EAAS76D,GAAyB,IAAdE,EAAclhC,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GACxCirB,EAAOrZ,MACH,oCAAqCiqF,EAAS76D,EAAWE,GAE7D,IAAMziB,EAAK1V,cAAI,CACXwV,GAAIs9E,EACJroF,KAAM,QAEL1c,EAAE,SAAU,CACT0b,MAAO,oBACPquB,OAAQG,IAEXlqC,EAAE,WACFa,EAAEupC,GACFxuB,KAELvQ,KAAKirI,eAAevxC,EAASp9E,GAEzBtc,KAAK+qI,iBACF/qI,KAAK+qI,gBAAgBI,eAAiBzxC,GACzC15F,KAAKyrI,+DAeGM,GACZ,IAAK/rI,KAAK8qI,SAASc,eAIf,OAHA9iH,EAAOrZ,MAAM,gDACbs8H,EAAiB/+G,UAKrB,IACI+f,EADEi/F,EAAUD,EAAiBvkE,eAG7BwkE,IACAj/F,EAAY/sC,KAAK8qI,SAASmB,sBACpBj/F,IAAUC,QAAUD,IAAUE,QAKxC,IAAM0C,EAAcm8F,EAAiBtmD,oBAC/BymD,EAAmB95F,IAAI+5F,qBACzB,CACI,CACIppG,SAAQ,SAAAzlC,OACK0C,KAAK+qI,gBAAgBI,cAClCprG,UAAWisG,EAAUl/F,IAAkBA,IACvCF,WAAY,QACZ1gB,OAAQ0jB,EACR/C,MAAO+C,EAAY7J,iBAAiB,GACpCgH,eAIZ/sC,KAAK8qI,SAASc,eAAeM,EAAiB,2CAWnCxyC,EAASp9E,GACpB,GAAKtc,KAAK8qI,SAASe,cAInB,IACI,IAAMO,GACA,IAAIC,eAAgBC,kBAAkBhwH,EAAGhM,UAAYgM,GAE3Dtc,KAAK8qI,SAASe,cAAcnyC,EAAS,CAAEp9E,GAAI8vH,IAC7C,MAAOntI,GACL6pB,EAAOrZ,MAAM,kGAWjBzP,KAAK2uB,OAEL3uB,KAAK8qI,SAASyB,oBACPvsI,KAAK8qI,SAASyB,m3BC5T7B,IAAMzjH,EAASH,oBAAUQ,GASJ2iH,aAoBjB,SAAAA,IAA0B,IAAdx6H,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,gGAAIypC,CAAAtnC,KAAA8rI,GACtB9rI,KAAK8qI,SAAL9rG,EAAA,CACIqW,UAAW,GACXkoB,aAAa,EACbivE,cAAc,EACdjB,cAAc,GACXj6H,GASPtR,KAAKuyF,QAAU,GAOfvyF,KAAK+qI,gBAAkB,KAGvB/qI,KAAK0kB,SAAW1kB,KAAK0kB,SAAS5uB,KAAKkK,MACnCA,KAAKkrI,gBAAkBlrI,KAAKkrI,gBAAgBp1I,KAAKkK,MACjDA,KAAKirI,eAAiBjrI,KAAKirI,eAAen1I,KAAKkK,kEAU/C,OAAOA,KAAK8qI,SAASpxC,+CAUV2xC,GACX,OAAQA,EAAQz+H,KAAK,WACrB,KAAKg2C,IAAQC,OACT7iD,KAAKysI,iBAAiBpB,GACtB,MAEJ,KAAKzoF,IAAQE,SACT9iD,KAAK0sI,mBAAmBrB,GACxB,MAEJ,KAAKzoF,IAAQG,UACT/iD,KAAK2sI,oBAAoBtB,GACzB,MAEJ,KAAKzoF,IAAQtoD,eACT0F,KAAK4sI,iBAAiBvB,oCAaN,IAAlB94F,EAAkB10C,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GACZmC,KAAK+qI,kBAIT/qI,KAAKuyF,QAAUvyF,KAAKuyF,QAAQj1F,OAAOi1C,GAEnCvyC,KAAK+qI,gBAAkB/qI,KAAKsrI,wBAE5BtrI,KAAK+qI,gBAAgBhyC,OAAOxmD,mCAUxBvyC,KAAK+qI,iBACL/qI,KAAK+qI,gBAAgB5lE,YAGzBnlE,KAAK2sI,sEAUe,IAAAjlG,EAAA1nC,KAkBd6sI,EAAiB,CACnBzxF,OAAQ,CACJ+pB,UAAW,cAEfhtD,OAAQnY,KAAKirI,gBAWX6B,EAAa9tG,EAAA,CACf2xB,WAAY7E,KACT9rD,KAAK8qI,SAASz1F,WAgCf03F,EAAW,CACbx/C,oBAAqB,aACrBnhC,gBAAiB,GACjB7hC,aAAc,CAAE2C,KApBJ,SAAA4H,GACZ,OAAQA,GACR,KAAKq9B,IAAW/6D,sBAChB,KAAK+6D,IAAWl7D,kBACZywC,EAAKhjB,SAASk+B,IAAQ/D,iBAAkB/pB,MAiB5C+yF,qBAAsB,WAGlB,MAAO,IAEXp6B,uBAAwB,cAS5BztF,KAAKgtI,KAAO,IAAI56F,IAAIpyC,KAAM,IAO1BA,KAAKgtI,KAAK55F,YACNnN,IAAUxJ,mBACVz8B,KAAKkrI,iBAGT,IAAMr2C,EAAiB,IAAI13B,SACvBriE,OACAA,EACAkF,KAAK8qI,SAASpxC,QACdmzC,EACA,CACInuB,oBAAqB1+G,KAAK8qI,SAAS0B,aACnC7tB,oBAAqB3+G,KAAK8qI,SAASS,cAEvCuB,GACA,EACA9sI,KAAK8qI,SAASvtE,aASlB,OAFAs3B,EAAe5qC,WAAW8iF,EAAU/sI,KAAKgtI,KA5GtB,IA8GZn4C,mCAYFh2D,GAAyB,IAAdE,EAAclhC,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GAC1BmC,KAAK8qI,SAAS1wB,QAAQp6G,KAAK8qI,SAASpxC,QAAS76D,EAAWE,2CAY5CgtG,GACZ/rI,KAAKuyF,QAAQz0F,KAAKiuI,GAElB/rI,KAAK8qI,SAASc,eAAeG,0CAWlBzvH,GACXtc,KAAK8qI,SAASe,cAAc7rI,KAAK8qI,SAASpxC,QAASp9E,4CAYtC+uH,GACRrrI,KAAK+qI,gBAMV/qI,KAAK+qI,gBAAgBt4C,UAAU44C,GAL3BviH,EAAOrZ,MAAM,iGAgBF47H,GAAS,IAAA3/F,EAAA1rC,KACpBA,KAAK+qI,gBACLjiH,EAAOrZ,MAAM,sDAKjBzP,KAAK+qI,gBAAkB/qI,KAAKsrI,wBAE5BtrI,KAAK+qI,gBAAgBp3C,YACjB03C,EACA,aACA,kBAAM3/F,EAAKhnB,SACPgnB,EAAKo/F,SAASpxC,QACd92C,IAAQ/D,iBACR,2EAaR7+C,KAAKuyF,QAAQtxF,QAAQ,SAAA4rC,GAAK,OAAIA,EAAM7f,YACpChtB,KAAKuyF,QAAU,GAEXvyF,KAAK+qI,iBACL/qI,KAAK+qI,gBAAgBtrB,eAGrBz/G,KAAKgtI,OACLhtI,KAAKgtI,KAAKvgH,eACNwZ,IAAUxJ,mBACVz8B,KAAKkrI,iBAGTlrI,KAAKgtI,KAAK5gD,oDAYDi/C,GACbrrI,KAAK+qI,gBAAgBn4C,iBAAiBy4C,qHCnY9Ct3I,EAAOD,QAAUkH,EAAQ,KAAiBiyI,2iBCgC1C,IAoFkCl5I,EApF5B+0B,EAASb,IAAOU,UAAUQ,GA+ChC,SAAS+jH,EAAkC57H,GACvC,IAAMpJ,EAAa,CACfilI,gBACI77H,EAAQy6B,QAAQC,SAAS,SAC7BohG,gBACI97H,EAAQy6B,QAAQC,SAAS,SAC7BqhG,yBACI/7H,EAAQy6B,QAAQC,SAAS,YAOjC,OAJI9jC,EAAWklI,kBACXllI,EAAWu7B,WAAanyB,EAAQmyB,YAG7Bv7B,EAiCIolI,WAVmBv5I,EAUM,CAEpCiwB,QAAS,cAETyiE,oBASAikD,2BAEA6C,UAAW,CACPnjD,4BAA6BtyB,IAC7B01E,UAAWC,IACXC,WAAYzzC,EACZtL,oBAAqBwoB,GAEzBjzD,OAAQ,CACJ7R,WAAY4C,EACZ33B,WAAY+wC,EACZxhB,MAAO+tB,EACP9yB,aAAc2zC,EACdgN,kBAAmBw0C,EACnBhzC,QAASi1C,GAEb5+G,OAAQ,CACJ+xB,WAAY+9C,EACZ9yE,WAAYmxC,EACZ5hB,MAAO6G,GAEXi6F,WAAY,CACRp7G,qBAEJq7G,UAAW3lH,IAAOK,OAClBwf,aAAcwzC,IACd9vD,UAAWrB,IAAWqB,UACtB1W,KAxCoC,WAwCjB,IAAdxD,EAAczT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAJ,GACXssB,IAAWrV,KAAKxD,GAIXpd,OAAOk4D,kBACRl4D,OAAOk4D,gBAAkB,KAGU,IAAnC96C,EAAQu8H,yBACR/kH,EAAOlZ,KAAK,kCACZ5P,KAAKwrB,UAAUwB,WAGf1b,EAAQw8H,4BACRjtG,IAAqB/oB,WACjB9X,KAAK+tI,wBAAwBj4I,KAAKkK,OAK1C,IAAMguI,EAAS18H,EAAQ+/C,eAEvB,GAAI28E,GAAUh5I,OAAOq5B,KAAK2/G,GAAQ/wI,OAAS,EAAG,CAC1C,IAAM6oG,EAAY,GAElB,IAAK,IAAMl5F,KAAQohI,EACXA,EAAO73I,eAAeyW,KACtBk5F,EAAUl5F,GAAQohI,EAAOphI,IAIjCk5F,EAAU5mG,GAAK,kBACfirB,IAAWmJ,QAAQ1c,KAAK0K,UAAUwkF,IAGtC,GAAI9lG,KAAKgkB,QAAS,CACd,IAAM8hF,EAAY,CACd5mG,GAAI,oBACJo4B,UAAW,iBACXtT,QAAShkB,KAAKgkB,SAGlBmG,IAAWmJ,QAAQ1c,KAAK0K,UAAUwkF,IAGtC,OAAO1zD,IAAIt9B,KAAKxD,IAQpB6iC,wBA9FoC,WA+FhC,OAAO/B,IAAI+B,2BAWf85F,kBA1GoC,WA2GhC,OAAO77F,IAAI67F,qBAGfhlH,YA9GoC,SA8GxB3Z,GACR2Y,IAAOgB,YAAY3Z,IAWvByZ,gBA1HoC,SA0HpBzZ,EAAOpQ,GACnB+oB,IAAOc,gBAAgBzZ,EAAOpQ,IASlCgvI,sBApIoC,SAoIdC,GAClBlmH,IAAOO,mBAAmB2lH,IAS9BC,yBA9IoC,SA8IXD,GACrBlmH,IAAOS,sBAAsBylH,IA2CjC38F,kBA1LoC,WA2LqC,IAAA9J,EAAA1nC,KAAjEsR,EAAiEzT,UAAAZ,OAAA,QAAAnC,IAAA+C,UAAA,GAAAA,UAAA,GAAvD,GAAIwwI,EAAmDxwI,UAAAZ,OAAA,EAAAY,UAAA,QAAA/C,EAAjBwzI,EAAiBzwI,UAAAZ,OAAA,EAAAY,UAAA,QAAA/C,EACjEyzI,GAAmB,EAkBvB,OAhByC,IAArCF,GACAn6I,OAAO0L,WAAW,WACT2uI,GACDjzD,IAAkBkzD,UACd/yD,6BACA9wD,IAAQq/B,YA3Ra,KAgShC91D,OAAOk4D,kBACRl4D,OAAOk4D,gBAAkB,IAE7Bl4D,OAAOk4D,gBAAgB,2BACjBl4D,OAAOm5D,YAAYjwC,MAElBg1B,IAAIkB,+BAA+BhiC,GACrCy2B,KAAK,SAAAwL,GAWF,GAVAg7F,GAAmB,EAEnBr6I,OAAOk4D,gBAAgB,yBACjBl4D,OAAOm5D,YAAYjwC,MAEzB+M,IAAW+K,cACP0K,YACI,UACAstG,EAAkC57H,MAErC8gC,IAAI9gC,QAAQga,mBACb,IADiC,IAAAitB,EAAA,SACxBjkD,GACL,IAAMu4C,EAAQ0G,EAAOj/C,GACfm6I,EAAU5hG,EAAM44C,oBAElB54C,EAAMqJ,YAAcpJ,MACpB3iB,IAAW8B,gBAAgBwiH,EACvB5hG,EAAMsK,cAAcrhD,KAAK+2C,IAC7BA,EAAMxC,iBACFuwB,sBACA,WACIzwC,IAAWuE,eAAe+/G,OAVjCn6I,EAAI,EAAGA,EAAIi/C,EAAOt2C,OAAQ3I,IAAKikD,EAA/BjkD,GAiBb,IAAMo6I,EACAt8F,IAAI0B,oCAEV,GAAI46F,EACA,IAASp6I,EAAI,EAAGA,EAAIi/C,EAAOt2C,OAAQ3I,IAAK,CACtBi/C,EAAOj/C,GAEfkjF,+BACFk3D,GAIZ,OAAOn7F,IAEV/H,MAAM,SAAA/7B,GAGH,GAFA8+H,GAAmB,EAEf9+H,EAAM5a,OAAS6+C,2BACX/oB,IAAQsd,iBAAkB,CAC9B,IAAM0mG,EAAgBr9H,EAAQmyB,YAAc,MACtCmrG,EA9U1B,SAA4BnrG,GACxB,IAAKC,IAAYD,GACb,OAAO,KAEX,IAAM8iB,EAAQ7iB,IAAYD,GAAY8iB,MAClCha,EAAM,KACNsiG,EAAU,KAed,OAbA75I,OAAOq5B,KAAKqV,KAAaziC,QAAQ,SAAA7L,GAC7B,IAAMG,EAAQmuC,IAAYtuC,KAErBm3C,GAAQA,EAAIga,MAAQhxD,EAAMgxD,OAAShxD,EAAMgxD,MAAQA,KAClDsoF,EAAUz5I,EACVm3C,EAAMh3C,KAIVs5I,IAAYprG,IACZorG,EAAU,MAGPA,EAyT+BC,CAAmBH,GAEzC,GAAsB,OAAlBC,EAeA,OAdAt9H,EAAQmyB,WAAamrG,EAErB9lH,EAAOpZ,MACH,0CACAk/H,GAEJzkH,IAAW+K,cAAc0K,YACrB,UACA,CACImvG,eAAkBJ,EAClBK,eAAkBJ,EAClBx1H,OAAQ,4BAGTsuB,EAAK8J,kBACRlgC,OACAxW,EACAwzI,GAAmBt5I,OAAOikF,OAAO,GAAI3nE,IAK7C,GAAIg9H,GACG7+H,EAAM+iB,IAAIE,aACVjjB,EAAM+iB,IAAIE,YAAY4O,OACtB7xB,EAAM+iB,IAAIE,YAAY4O,MAAMsB,WAC5BnzB,EAAM+iB,IAAIE,YAAY4O,MAAMsB,UAAUI,SAGzC,OAFAsrG,EAAgBxrG,oBAAiBhoC,EAE1B4sC,EAAK8J,kBAAkB88F,GAItC,GAAI7+H,EAAM5a,OACE6+C,iCAAiD,CAIzD,IAAMoyD,EAAY,CACd5mG,GAAI,iCACJgQ,QAASO,EAAMP,SAGnBib,IAAWmJ,QAAQ1c,KAAK0K,UAAUwkF,IAElC37E,IAAW+K,cACP0K,YACI,UACA,CACIxmB,OAAQ,0CAEjB,GAAI3J,EAAM5a,OAAS6+C,YAA4B,CAElD,IAAMoyD,EAAY,CACd5mG,GAAI,2BACJya,OAAQlK,EAAM+iB,IAAIuZ,SAGtB5hB,IAAWmJ,QAAQ1c,KAAK0K,UAAUwkF,IAElC,IAAM59F,EACAglI,EAAkC57H,GAExCpJ,EAAWkR,OAAS,mBACpBlR,EAAW6jC,QAAUt8B,EAAM+iB,IAAIuZ,QAAQvuC,KAAK,KAC5C2sB,IAAW+K,cACP0K,YAAwB,QAAS13B,QAClC,CAEHiiB,IAAWmI,uBAAuB7iB,GAElC,IAAMvH,EACAglI,EAAkC57H,GAExCpJ,EAAWkR,OAAS3J,EAAM5a,KAC1Bs1B,IAAW+K,cACP0K,YAAwB,QAAS13B,IAMzC,OAHAhU,OAAOk4D,gBAAgB,yBACjBl4D,OAAOm5D,YAAYjwC,MAElBguB,QAAQE,OAAO77B,MAYlCi6B,sBAjWoC,WAqWhC,OAHA5gB,EAAOlZ,KAAK,yFAGL5P,KAAK8nC,aAAa4B,yBAY7BsG,wBAjXoC,SAiXZL,GAIpB,OAHA7mB,EAAOlZ,KAAK,2FAGL5P,KAAK8nC,aAAakI,wBAAwBL,IAUrDs/F,8BA/XoC,WAgYhC,OAAOjvI,KAAK8nC,aAAamnG,iCAQ7BC,uBAxYoC,WAyYhC,OAAO/kH,IAAWkB,oBACX8mD,IAAoBM,yBAS/B7qC,iBAnZoC,SAmZnBvoC,GACbypB,EAAOlZ,KAAK,oFAEZ5P,KAAK8nC,aAAaF,iBAAiBvoC,IAWvC0uI,wBAjaoC,SAiaZ7+H,EAASmwB,EAAQ8vG,EAAQC,EAAO3/H,GACpDqZ,EAAOrZ,MAAP,mBAAAnS,OACuB4R,GADvB,WAAA5R,OAEe+hC,GAFf,SAAA/hC,OAGa6xI,GAHb,WAAA7xI,OAIe8xI,GACX,eAAgB3/H,GACpB0a,IAAWyK,kBAAkBnlB,IASjC4/H,KAAM,CACFC,aACAzkH,eACAF,cA5b8B,WAA9BsK,EAAO/gC,OAAOq7I,aACRv6I,OAAOikF,OAAO,GAAI/kF,OAAOq7I,YAAax7I,GACtCA,iDC5Gd,IAAAk0B,EAAa7zB,EAAQ,IAgDrB,SAAA8zB,EAAAsnH,EAAAl+H,GACAtR,KAAAwvI,aACAxvI,KAAAyvI,oBACAn+H,MAAAm+H,mBACAn+H,EAAAm+H,iBACAzvI,KAAA0vI,cACAp+H,KAAAo+H,cACAp+H,EAAAo+H,cAAA,IACA1vI,KAAA2vI,eACAr+H,KAAAq+H,eACAr+H,EAAAq+H,eAAA,IAGA36I,OAAAq5B,KAAApG,EAAAK,QAAArnB,QACA,SAAA2uI,GAEA5vI,KADAioB,EAAAK,OAAAsnH,IACA,SAAAA,GACA5vI,KAAA6vI,KAAA9xI,MAAAiC,KAAAnC,YACS/H,KAAAkK,KAAA4vI,IACJ95I,KAAAkK,OAMLA,KAAA8vI,oBAAA,KAMA9vI,KAAAm+D,MAAA,GAKAn+D,KAAA+vI,SAAA,EAMA/vI,KAAAgwI,YAAA,GAiBA9nH,EAAAhyB,UAAAorB,UAAA,SAAA2uH,GACA,IACA,OAAAr5H,KAAA0K,UAAA2uH,GACK,MAAAxgI,GACL,uCAkBAyY,EAAAhyB,UAAAg6I,iBACA,SAAAN,GAEA,IADA,IAAArgI,EAAA,GACAjb,EAAA,EAAAqM,EAAA9C,UAAAZ,OAA2C3I,EAAAqM,EAASrM,IAAA,CACpD,IAAAkM,EAAA3C,UAAAvJ,IAEA0L,KAAAyvI,kBAAAG,IAAA3nH,EAAAK,OAAAhf,OACA,iBAAA9I,IACAA,EAAAR,KAAAshB,UAAA9gB,IAEA+O,GAAA/O,EACAlM,GAAAqM,EAAA,IACA4O,GAAA,KAGA,OAAAA,EAAAtS,OAAAsS,EAAA,MASA2Y,EAAAhyB,UAAA25I,KAAA,WAGA,IAAAtgI,EAAAvP,KAAAkwI,iBAAAnyI,MAAAiC,KAAAnC,WACA,GAAA0R,EAAA,CAEA,IAAA4gI,EACAnwI,KAAAm+D,MAAAlhE,OAAA+C,KAAAm+D,MAAAn+D,KAAAm+D,MAAAlhE,OAAA,QAAAnC,GAGA,iBAAAq1I,IAAApjI,KAAAojI,IAEA5gI,EACA,iBAAA4gI,EACAA,EAAA3rF,OAAA,EAEAxkD,KAAAm+D,MAAAn+D,KAAAm+D,MAAAlhE,OAAA,IACA8P,KAAAwC,EACAi1C,MAAA,IAIAxkD,KAAAm+D,MAAArgE,KAAAyR,GACAvP,KAAA+vI,UAAAxgI,EAAAtS,QAIA+C,KAAA+vI,UAAA/vI,KAAA2vI,gBACA3vI,KAAAowI,QAAA,OAQAloH,EAAAhyB,UAAA2vB,MAAA,WACA7lB,KAAAqwI,8BAQAnoH,EAAAhyB,UAAAm6I,2BAAA,WACArwI,KAAA8vI,sBACA57I,OAAAujB,aAAAzX,KAAA8vI,qBACA9vI,KAAA8vI,oBAAA,MAGA9vI,KAAA8vI,oBACA57I,OAAA0L,WACAI,KAAAowI,OAAAt6I,KACAkK,MAAA,MACAA,KAAA0vI,gBAOAxnH,EAAAhyB,UAAAshB,MAAA,WACAxX,KAAAowI,QACA,GACA,IAcAloH,EAAAhyB,UAAAk6I,OAAA,SAAAE,EAAAC,GAEAvwI,KAAA+vI,SAAA,IAAA/vI,KAAAwvI,WAAAgB,WAAAF,KAGAtwI,KAAAwvI,WAAAgB,WAEAxwI,KAAAgwI,YAAA/yI,SACA+C,KAAAgwI,YAAA/uI,QACA,SAAAwvI,GACAzwI,KAAAwvI,WAAAkB,UAAAD,IACqB36I,KAAAkK,OAGrBA,KAAAgwI,YAAA,IAGAhwI,KAAAwvI,WAAAkB,UAAA1wI,KAAAm+D,QAEAn+D,KAAAgwI,YAAAlyI,KAAAkC,KAAAm+D,OAGAn+D,KAAAm+D,MAAA,GACAn+D,KAAA+vI,SAAA,GAGAQ,GACAvwI,KAAAqwI,8BAQAnoH,EAAAhyB,UAAAy4B,KAAA,WAEA3uB,KAAAowI,QAAA,OAGAr8I,EAAAD,QAAAo0B,iBC9RAn0B,EAAAD,QAAA,SAAAC,GAoBA,OAnBAA,EAAA48I,kBACA58I,EAAA68I,UAAA,aACA78I,EAAA88I,MAAA,GAEA98I,EAAAqnF,WAAArnF,EAAAqnF,SAAA,IACApmF,OAAAC,eAAAlB,EAAA,UACAmB,YAAA,EACAC,IAAA,WACA,OAAApB,EAAAQ,KAGAS,OAAAC,eAAAlB,EAAA,MACAmB,YAAA,EACAC,IAAA,WACA,OAAApB,EAAAO,KAGAP,EAAA48I,gBAAA,GAEA58I,kBCpBAA,EAAAD,QAAA,WACA,UAAAqK,MAAA,mDCDA,SAAA2yI,GACA/8I,EAAAD,QAAAg9I,mCCDA,IAAAn2I,EAAAC,EAAAC;;;;;;;;GAsBAmF,MAAA9L,OAXI0G,EAAO,QAAWE,KAAAD,EAAA,mBAATF,EAcb,WAEA,IAAAo2I,EAAA,kCAGAC,EAAA98I,OAAA2vB,SAAA3vB,OAAA2vB,SAAAqiE,KAAA,KACA+qD,EAAAD,KAAA5zI,QAAA,WAAAA,QAAA,kBAGA8zI,EAAA/qI,SAAAoU,qBAAA,UAGA42H,EAAA,eAAAD,EAAA,IAAA/qI,SAAAkG,cAAA,WAGA+kI,GAAAl9I,OAAAk4E,OAAA,mBAAAl4E,OAAAk4E,MAAA3rE,WAGA4wI,EAAA,kBAAAlrI,SAIA,oBAAAhI,aAAAmzI,kBAAAnS,MACAhhI,MAAAmzI,gBACAnzI,MAAAmzI,gBAAAnS,KAOA,IAAAoS,GAAA,EACAC,GAAA,EA+OA,SAAAC,IAIA,OAAAP,EAAAj0I,OACA,YAGA,IAAA3I,EAAA2K,EAAA4P,EAAAihC,EAAA+jC,EACA69D,EAAA,GACAC,EAAAF,EAAAE,gBAAA,EAQA,IAAAr9I,EAAA,EAAaA,EAAA48I,EAAAj0I,OAAoB3I,IACjC88I,GAAAD,EACAJ,EAAA5zI,KAAA+zI,EAAA58I,GAAA4tB,aACAwvH,EAAA5zI,KAAAozI,EAAA58I,IAIAo9I,EAAA5zI,KAAAozI,EAAA58I,IAQA,GAJA2K,EAAA,IAAAd,MACAozI,IACA1iI,EAAA5P,EAAA4P,QAEAA,GAAA2iI,EACA,IACA,MAAAvyI,EAEA,MAAA6a,GAEAjL,EAAAiL,EAAAjL,MAiEA,GA7DAA,IACAihC,EAvMA,SAAA8hG,EAAA/iI,EAAA8iI,GACA,IAAAl1H,EAAAo1H,EACA/hG,EAAA,KACAgiG,EAAA,iBAAAH,EA+BA,OA9BAA,EAAAG,EAAAhxI,KAAAmrG,MAAA0lC,GAAA,EACA,iBAAA9iI,OACAijI,EACAr1H,EAAA5N,EAAA6N,MAAA,+GAGAD,EAAA5N,EAAA6N,MAAA,kNAEAD,EAAA,KACAA,EAAA5N,EAAA6N,MAAA,kHAIAD,KAAA,KACAk1H,EAAA,GACAE,EAAAhjI,EAAAjT,MAAAiT,EAAAtQ,QAAAke,EAAA,IAAAA,EAAA,GAAAxf,QACA6yC,EAAA8hG,EAAAC,EAAAF,EAAA,IAGA7hG,EAAArzB,EAAA,KAWAqzB,EAqKA8hG,CAAA/iI,EAAA8iI,KACA99D,EAzQA,SAAA/jC,EAAA4hG,GACA,IAAAp9I,EACAu/E,EAAA,KAIA,GAFA69D,KAAAR,EAEA,iBAAAphG,KACA,IAAAx7C,EAAAo9I,EAAAz0I,OAAoC3I,KACpC,GAAAo9I,EAAAp9I,GAAAs0C,MAAAkH,EAAA,CAGA+jC,EAAA69D,EAAAp9I,GACA,MAIA,OAAAu/E,EAyPAk+D,CAAAjiG,EAAA4hG,KAEAT,GAAAnhG,IAAAmhG,IAiBAp9D,EA5OA,SAAA69D,GACA,IAAAp9I,EAAAqM,EACAkzE,EAAA,KAEA,IAAAv/E,EAAA,EAAAqM,GADA+wI,KAAAR,GACAj0I,OAA2C3I,EAAAqM,EAASrM,IACpD,IAAAo9I,EAAAp9I,GAAA09I,aAAA,QACA,GAAAn+D,EAAA,CACAA,EAAA,KACA,MAEAA,EAAA69D,EAAAp9I,GAGA,OAAAu/E,EA+NAo+D,CAAAP,KAUA79D,GAKA,IAAA69D,EAAAz0I,SACA42E,EAAA69D,EAAA,IAIA79D,GAeAw9D,IACAx9D,EAAA1tE,SAAA+rI,gBAIAr+D,GAeAu9D,GAAAD,EACA,IAAA78I,EAAAo9I,EAAAz0I,OAAsC3I,KACtC,mBAAAo9I,EAAAp9I,GAAA4tB,WAAA,CACA2xD,EAAA69D,EAAAp9I,GACA,MAkCA,OA5BAu/E,IAyBAA,EAAA69D,IAAAz0I,OAAA,UAGA42E,GA3YA,WACA,IACA,IAAA/5D,EAAA,IAAA3b,MAEA,MADAozI,EAAA,iBAAAz3H,EAAAjL,SAAAiL,EAAAjL,MACAiL,EAEA,MAAAq4H,GACAX,EAAA,iBAAAW,EAAAtjI,SAAAsjI,EAAAtjI,QAPA,GA+YA4iI,EAAAE,eAAA,EAOA,IAAAj+D,EAAA+9D,EASA,OARA/9D,EAAA0+D,KAAAX,EACA/9D,EAAA2+D,IA1RA,WAMA,aAqRA3+D,EAAA2nC,OArLA,WAIA,aAuLA3nC,IA9csB/4E,EAAAoD,MAAAjK,EAAA8G,GAAAD,KAAA5G,EAAAD,QAAA+G,kBCPtB9G,EAAOD,QAJW,CACd6gC,UAAW,2BCGd,SAAA29G,GAA+B,aAEhCA,EAAA9rI,QAAA2J,oBAAA,QACA,CACAoN,YAAA,KACA6sG,YAAA,GACAE,UAAA,GACAioB,OAAA,GAOAz9H,KAAA,SAAA03C,GAEAxsD,KAAAud,YAAAivC,EACAxsD,KAAAoqH,YAAA,GACApqH,KAAAsqH,UAAA,GACAtqH,KAAAuyI,OAAA,GAEA/lF,EAAA10C,WAAA9X,KAAAwyI,aAAA18I,KAAAkK,MAAAsyI,EAAA9rI,QAAAO,GAAAO,WAAA,sBAEAklD,EAAA10C,WAAA9X,KAAAyyI,cAAA38I,KAAAkK,MAAAsyI,EAAA9rI,QAAAO,GAAAQ,YAAA,uBAaAmrI,YAAA,SAAAxoB,EAAA74G,EAAAxc,EAAA89I,GAEA,QAAAr+I,EAAA,EAAqBA,EAAA0L,KAAAoqH,YAAAntH,OAA2B3I,IAEhD,GAAA0L,KAAAoqH,YAAA91H,GAAA41H,aACAlqH,KAAAoqH,YAAA91H,GAAA+c,SACArR,KAAAoqH,YAAA91H,GAAAO,SACAmL,KAAAoqH,YAAA91H,GAAAq+I,QAEA,SAIA,OADA3yI,KAAAoqH,YAAAtsH,KAAA,CAA+BosH,WAAA74G,OAAAxc,OAAA89I,UAC/B,GAUA7lF,WAAA,SAAA8lF,GAEA,QAAAt+I,EAAA,EAAqBA,EAAA0L,KAAAsqH,UAAArtH,OAAyB3I,IAE9C,GAAA0L,KAAAsqH,UAAAh2H,IAAAs+I,EACA,SAGA,OADA5yI,KAAAsqH,UAAAxsH,KAAA80I,IACA,GAUAnrD,cAAA,SAAAmrD,GAEA,QAAAt+I,EAAA,EAAqBA,EAAA0L,KAAAsqH,UAAArtH,OAAyB3I,IAE9C,GAAA0L,KAAAsqH,UAAAh2H,KAAAs+I,EAEA,OADA5yI,KAAAsqH,UAAA/sH,OAAAjJ,EAAA,IACA,EAGA,UAaAu+I,QAAA,SAAAtkI,EAAA1Z,EAAA6X,EAAAomI,GAEA,QAAApmI,IAAAomI,IAEA9yI,KAAAuyI,OAAAz0I,KAAA,CAA0ByQ,MAAA1Z,OAAA6X,OAAAomI,cAC1B,KAUAnjI,KAAA,SAAApB,EAAA7B,EAAAu+C,EAAAx7C,EAAAmI,GAEA,IAAAlR,EAAA,CAAqB2J,MAAAiiI,EAAA9rI,QAAAO,GAAAO,YACrBoF,IACAhG,EAAAgG,QAEA,IAAAiD,EAAA2iI,EAAA1rI,IAAA,CAAmChG,KAAAZ,KAAAud,YAAAhP,IACnC6N,GAAA7N,EAAA8C,KAAA,QAA4C1c,EAAA,QAAA+R,GAC5C1G,KAAAud,YAAApF,OAAAxI,EAAAs7C,EAAAx7C,EAAAmI,IAUAm7H,MAAA,SAAAxkI,EAAA7B,EAAAu+C,EAAAx7C,EAAAmI,GAEA,IAAAlR,EAAA,CAAqB2J,MAAAiiI,EAAA9rI,QAAAO,GAAAQ,aACrBmF,IACAhG,EAAAgG,QAEA,IAAAqmI,EAAAT,EAAA1rI,IAAA,CAAoChG,KAAAZ,KAAAud,YAAAhP,IACpC6N,GAAA7N,EAAA8C,KAAA,QAA4C1c,EAAA,QAAA+R,GAC5C1G,KAAAud,YAAApF,OAAA46H,EAAA9nF,EAAAx7C,EAAAmI,IAKAo7H,eAAA,SAAAj7H,EAAAk7H,GAEA,IAAA/zI,EAAA6Y,EAAA9J,aAAA,MACArN,EAAAmX,EAAA9J,aAAA,QACAilI,EAAAZ,EAAA1rI,IAAA,CAAuCyK,KAAA,SAAAnS,OAMvC,OAJA,OAAA0B,GACAsyI,EAAAxsI,MAAA,CAA4B0V,GAAAxb,IAG5BsyI,EAAAv+I,EAAA,QAAAs+I,IAMAT,aAAA,SAAAz6H,GAEA,IAEAzjB,EAFAoY,EAAAqL,EAAAwC,qBAAA,YAAAtM,aAAA,QACAvH,EAAA,CAAqB2J,MAAAiiI,EAAA9rI,QAAAO,GAAAO,YAErBoF,IAEAhG,EAAAgG,QAEA,IAAAwmI,EAAAlzI,KAAAgzI,eAAAj7H,EAAArR,GACA,IAAApS,EAAA,EAAiBA,EAAA0L,KAAAoqH,YAAAntH,OAA2B3I,IAE5CoS,EAAA,CAAqBwjH,SAAAlqH,KAAAoqH,YAAA91H,GAAA41H,SACrB74G,KAAArR,KAAAoqH,YAAA91H,GAAA+c,MACArR,KAAAoqH,YAAA91H,GAAAO,OACA6R,EAAA7R,KAAAmL,KAAAoqH,YAAA91H,GAAAO,MACAmL,KAAAoqH,YAAA91H,GAAAq+I,OACAjsI,EAAA,YAAA1G,KAAAoqH,YAAA91H,GAAAq+I,MACAO,EAAAv+I,EAAA,WAAA+R,GAAA6J,KAEA,IAAAjc,EAAA,EAAiBA,EAAA0L,KAAAsqH,UAAArtH,OAAyB3I,IAE1C4+I,EAAAv+I,EAAA,WAAmCkjH,IAAA73G,KAAAsqH,UAAAh2H,KAAwBic,KAG3D,OADAvQ,KAAAud,YAAAlG,KAAA67H,EAAAnjI,SACA,GAKA0iI,cAAA,SAAA16H,GAEA,IAEAg7H,EAAAz+I,EAFA2+I,EAAA,CAA2B5iI,MAAAiiI,EAAA9rI,QAAAO,GAAAQ,aAC3BmF,EAAAqL,EAAAwC,qBAAA,YAAAtM,aAAA,QAEA,GAAAvB,GAIA,IAFAumI,EAAAvmI,OACAqmI,EAAA,GACAz+I,EAAA,EAAuBA,EAAA0L,KAAAuyI,OAAAt1I,OAAwB3I,IAE/C,GAAA0L,KAAAuyI,OAAAj+I,GAAAoY,QACA,CACAqmI,EAAA/yI,KAAAuyI,OAAAj+I,GAAAw+I,UAAA/6H,GACA,YAMAg7H,EAAA/yI,KAAAuyI,OAEA,IAAAW,EAAAlzI,KAAAgzI,eAAAj7H,EAAAk7H,GACA,IAAA3+I,EAAA,EAAmBA,EAAAy+I,EAAA91I,OAAkB3I,IACrC,CACA,IAAAoS,EAAA,CAAyB6H,IAAAwkI,EAAAz+I,GAAAia,KACzBwkI,EAAAz+I,GAAAO,OACA6R,EAAA7R,KAAAk+I,EAAAz+I,GAAAO,MACAk+I,EAAAz+I,GAAAoY,OACAhG,EAAAgG,KAAAqmI,EAAAz+I,GAAAoY,MACAwmI,EAAAv+I,EAAA,OAAA+R,GAAA6J,KAGA,OADAvQ,KAAAud,YAAAlG,KAAA67H,EAAAnjI,SACA,KAnO6Dlc,CAAWO,EAAQ,sBCDhF,SAAA8lG,GAAA,IAAAi5C,OAAA,IAAAj5C,MACA,oBAAAx3E,YACAxuB,OACA6J,EAAAkC,SAAA/J,UAAA6H,MAiBA,SAAAq1I,EAAAl0I,EAAAm0I,GACArzI,KAAAu0G,IAAAr1G,EACAc,KAAAszI,SAAAD,EAfAv/I,EAAA8L,WAAA,WACA,WAAAwzI,EAAAr1I,EAAAtJ,KAAAmL,WAAAuzI,EAAAt1I,WAAA4Z,eAEA3jB,EAAAw2C,YAAA,WACA,WAAA8oG,EAAAr1I,EAAAtJ,KAAA61C,YAAA6oG,EAAAt1I,WAAA8pC,gBAEA7zC,EAAA2jB,aACA3jB,EAAA6zC,cAAA,SAAA/vB,GACAA,GACAA,EAAA2N,SAQA6tH,EAAAl9I,UAAAq9I,MAAAH,EAAAl9I,UAAAs9I,IAAA,aACAJ,EAAAl9I,UAAAqvB,MAAA,WACAvlB,KAAAszI,SAAA7+I,KAAA0+I,EAAAnzI,KAAAu0G,MAIAzgH,EAAA2/I,OAAA,SAAAh4G,EAAAi4G,GACAj8H,aAAAgkB,EAAAk4G,gBACAl4G,EAAA7nB,aAAA8/H,GAGA5/I,EAAA8/I,SAAA,SAAAn4G,GACAhkB,aAAAgkB,EAAAk4G,gBACAl4G,EAAA7nB,cAAA,GAGA9f,EAAA+/I,aAAA//I,EAAA2hF,OAAA,SAAAh6C,GACAhkB,aAAAgkB,EAAAk4G,gBAEA,IAAAD,EAAAj4G,EAAA7nB,aACA8/H,GAAA,IACAj4G,EAAAk4G,eAAA/zI,WAAA,WACA67B,EAAAq4G,YACAr4G,EAAAq4G,cACKJ,KAKLt/I,EAAQ,KAIRN,EAAAgsH,aAAA,oBAAAp9F,WAAAo9F,mBACA,IAAA5lB,KAAA4lB,cACA9/G,WAAA8/G,aACAhsH,EAAAigJ,eAAA,oBAAArxH,WAAAqxH,qBACA,IAAA75C,KAAA65C,gBACA/zI,WAAA+zI,oDC9DA,SAAA75C,EAAAvpB,IAAA,SAAAupB,EAAAp/F,GACA,aAEA,IAAAo/F,EAAA4lB,aAAA,CAIA,IAIAk0B,EA6HA7mI,EAZAu+G,EArBAuoB,EACAC,EAjGAC,EAAA,EACAC,EAAA,GACAC,GAAA,EACAtoI,EAAAmuF,EAAA/zF,SAoJAmuI,EAAAt/I,OAAAuwD,gBAAAvwD,OAAAuwD,eAAA20C,GACAo6C,OAAA10I,WAAA00I,EAAAp6C,EAGU,qBAAV,GAAUz5F,SAAAhM,KAAAylG,EAAAvpB,SApFVqjE,EAAA,SAAAO,GACA5jE,EAAAc,SAAA,WAA0C+iE,EAAAD,OAI1C,WAGA,GAAAr6C,EAAAu6C,cAAAv6C,EAAAw6C,cAAA,CACA,IAAAC,GAAA,EACAC,EAAA16C,EAAAr1E,UAMA,OALAq1E,EAAAr1E,UAAA,WACA8vH,GAAA,GAEAz6C,EAAAu6C,YAAA,QACAv6C,EAAAr1E,UAAA+vH,EACAD,GAwEKE,GAIA36C,EAAA46C,iBA9CLppB,EAAA,IAAAopB,gBACAC,MAAAlwH,UAAA,SAAAiQ,GAEA0/G,EADA1/G,EAAAvxB,OAIAywI,EAAA,SAAAO,GACA7oB,EAAAspB,MAAAP,YAAAF,KA2CKxoI,GAAA,uBAAAA,EAAAM,cAAA,WAtCLc,EAAApB,EAAAgU,gBACAi0H,EAAA,SAAAO,GAGA,IAAA1gE,EAAA9nE,EAAAM,cAAA,UACAwnE,EAAAzzD,mBAAA,WACAo0H,EAAAD,GACA1gE,EAAAzzD,mBAAA,KACAjT,EAAA8nI,YAAAphE,GACAA,EAAA,MAEA1mE,EAAAf,YAAAynE,KAKAmgE,EAAA,SAAAO,GACA30I,WAAA40I,EAAA,EAAAD,KAlDAN,EAAA,gBAAAnzI,KAAAwU,SAAA,IACA4+H,EAAA,SAAAp/G,GACAA,EAAAuK,SAAA66D,GACA,iBAAAplE,EAAAvxB,MACA,IAAAuxB,EAAAvxB,KAAAhF,QAAA01I,IACAO,GAAA1/G,EAAAvxB,KAAA3H,MAAAq4I,EAAAh3I,UAIAi9F,EAAA7vD,iBACA6vD,EAAA7vD,iBAAA,UAAA6pG,GAAA,GAEAh6C,EAAA0hB,YAAA,YAAAs4B,GAGAF,EAAA,SAAAO,GACAr6C,EAAAu6C,YAAAR,EAAAM,EAAA,OAgEAD,EAAAx0B,aA1KA,SAAAzgH,GAEA,mBAAAA,IACAA,EAAA,IAAAY,SAAA,GAAAZ,IAIA,IADA,IAAAzB,EAAA,IAAAwC,MAAAvC,UAAAZ,OAAA,GACA3I,EAAA,EAAqBA,EAAAsJ,EAAAX,OAAiB3I,IACtCsJ,EAAAtJ,GAAAuJ,UAAAvJ,EAAA,GAGA,IAAAgyE,EAAA,CAAkBjnE,WAAAzB,QAGlB,OAFAw2I,EAAAD,GAAA7tE,EACA0tE,EAAAG,GACAA,KA6JAG,EAAAP,iBA1JA,SAAAA,EAAAQ,UACAH,EAAAG,GAyBA,SAAAC,EAAAD,GAGA,GAAAF,EAGAz0I,WAAA40I,EAAA,EAAAD,OACS,CACT,IAAAjuE,EAAA8tE,EAAAG,GACA,GAAAjuE,EAAA,CACA+tE,GAAA,EACA,KAjCA,SAAA/tE,GACA,IAAAjnE,EAAAinE,EAAAjnE,SACAzB,EAAA0oE,EAAA1oE,KACA,OAAAA,EAAAX,QACA,OACAoC,IACA,MACA,OACAA,EAAAzB,EAAA,IACA,MACA,OACAyB,EAAAzB,EAAA,GAAAA,EAAA,IACA,MACA,OACAyB,EAAAzB,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,MACA,QACAyB,EAAAtB,MAAAjD,EAAA8C,IAiBAsU,CAAAo0D,GACiB,QACjBytE,EAAAQ,GACAF,GAAA,MAvEA,CAyLC,oBAAA3xH,UAAA,IAAAw3E,EAAAl6F,KAAAk6F,EAAAx3E,8DCzLD,SAAAw3E,GAWA,IAAAg7C,EAAqB9gJ,EAAQ,KAC7BL,EAAAD,QAAAohJ,EAAA,CAAiChhJ,OAAAgmG,EAAAhmG,0DCDjC,IAAAqS,EAAYnS,EAAQ,IAEpBL,EAAAD,QAAA,SAAAqhJ,EAAAviB,GACA,IAAA1+H,EAAAihJ,KAAAjhJ,OAEAod,EAAA,CACA8jI,YAAA,EACAC,aAAA,EACAC,UAAA,EACAC,YAAA,GAGA,QAAA1/I,KAAA+8H,EACAz8H,eAAA1B,KAAAm+H,EAAA/8H,KACAyb,EAAAzb,GAAA+8H,EAAA/8H,IAKA,IAAA2/I,EAAAjvI,EAAA8I,IACAomI,EAAAlvI,EAAA2wD,cAAAhjE,GAGAwhJ,EAAA,CACAD,iBACA1+E,eAAAxwD,EAAAwwD,eACAN,WAAAlwD,EAAAkwD,WACAE,gBAAApwD,EAAAowD,iBAUAg/E,EAAmBvhJ,EAAQ,MAAsB,KACjDwhJ,EAAiBxhJ,EAAQ,MAAkB,KAC3CyhJ,EAAoBzhJ,EAAQ,MAAwB,KACpD0hJ,EAAmB1hJ,EAAQ,MAAsB,KACjD2hJ,EAAmB3hJ,EAAQ,MAAe,KAG1C,OAAAqhJ,EAAA9qH,SACA,aACA,IAAAgrH,MAAAK,qBACA1kI,EAAA8jI,WAEA,OADAI,EAAA,wDACAE,EAEAF,EAAA,+BAEAE,EAAAO,YAAAN,EACAI,EAAAz+E,oBAAApjE,GAEAyhJ,EAAAO,iBAAAhiJ,GACAyhJ,EAAAQ,gBAAAjiJ,GACAyhJ,EAAAS,iBAAAliJ,GACAyhJ,EAAAK,mBAAA9hJ,GACAyhJ,EAAAU,YAAAniJ,GACAyhJ,EAAAW,wBAAApiJ,GACAyhJ,EAAAY,uBAAAriJ,GAEA6hJ,EAAAS,oBAAAtiJ,GACA,MACA,cACA,IAAA2hJ,MAAAG,qBACA1kI,EAAA+jI,YAEA,OADAG,EAAA,yDACAE,EAEAF,EAAA,gCAEAE,EAAAO,YAAAJ,EACAE,EAAAz+E,oBAAApjE,GAEA2hJ,EAAAK,iBAAAhiJ,GACA2hJ,EAAAO,iBAAAliJ,GACA2hJ,EAAAG,mBAAA9hJ,GACA2hJ,EAAAQ,YAAAniJ,GAEA6hJ,EAAAS,oBAAAtiJ,GACA,MACA,WACA,IAAA0hJ,MAAAI,qBAAA1kI,EAAAgkI,SAEA,OADAE,EAAA,yDACAE,EAEAF,EAAA,6BAEAE,EAAAO,YAAAL,EACAG,EAAAz+E,oBAAApjE,GAEA0hJ,EAAAM,iBAAAhiJ,GACA0hJ,EAAAI,mBAAA9hJ,GACA0hJ,EAAAa,iBAAAviJ,GAGA,MACA,aACA,IAAA4hJ,IAAAxkI,EAAAikI,WAEA,OADAC,EAAA,wDACAE,EAEAF,EAAA,+BAEAE,EAAAO,YAAAH,EACAC,EAAAz+E,oBAAApjE,GAEA4hJ,EAAAY,qBAAAxiJ,GACA4hJ,EAAAa,iBAAAziJ,GACA4hJ,EAAAc,oBAAA1iJ,GACA4hJ,EAAAe,qBAAA3iJ,GACA4hJ,EAAAgB,0BAAA5iJ,GACA4hJ,EAAAI,iBAAAhiJ,GACA4hJ,EAAAiB,sBAAA7iJ,GAEA6hJ,EAAAS,oBAAAtiJ,GACA,MACA,QACAshJ,EAAA,wBAIA,OAAAE,iCC9HA,IAAAnvI,EAAYnS,EAAQ,IACpBohJ,EAAAjvI,EAAA8I,IAEAsmI,EAAA,CACAQ,gBAAA,SAAAjiJ,GACAA,EAAAk1C,YAAAl1C,EAAAk1C,aAAAl1C,EAAA8iJ,mBAGAX,YAAA,SAAAniJ,GACA,oBAAAA,KAAAi0C,qBAAA,YACAj0C,EAAAi0C,kBAAAjyC,WAAA,CACAlB,OAAAC,eAAAf,EAAAi0C,kBAAAjyC,UAAA,WACAf,IAAA,WACA,OAAA6K,KAAAi3I,UAEAlrH,IAAA,SAAAhtB,GACAiB,KAAAi3I,UACAj3I,KAAAigD,oBAAA,QAAAjgD,KAAAi3I,UAEAj3I,KAAAqqC,iBAAA,QAAArqC,KAAAi3I,SAAAl4I,MAGA,IAAAm4I,EACAhjJ,EAAAi0C,kBAAAjyC,UAAA6wE,qBACA7yE,EAAAi0C,kBAAAjyC,UAAA6wE,qBAAA,WACA,IAAAve,EAAAxoD,KAyCA,OAxCAwoD,EAAA2uF,eACA3uF,EAAA2uF,aAAA,SAAAl4I,GAGAA,EAAAitB,OAAAme,iBAAA,oBAAA+sG,GACA,IAAA9zF,EAEAA,EADApvD,EAAAi0C,kBAAAjyC,UAAAmhJ,aACA7uF,EAAA6uF,eAAA59G,KAAA,SAAArkC,GACA,OAAAA,EAAAy3C,OAAAz3C,EAAAy3C,MAAA3tC,KAAAk4I,EAAAvqG,MAAA3tC,KAGA,CAA4B2tC,MAAAuqG,EAAAvqG,OAG5B,IAAA/X,EAAA,IAAAwiH,MAAA,SACAxiH,EAAA+X,MAAAuqG,EAAAvqG,MACA/X,EAAAwuB,WACAxuB,EAAA6tD,YAAA,CAAmCr/B,YACnCxuB,EAAAsX,QAAA,CAAAntC,EAAAitB,QACAs8B,EAAA+uF,cAAAziH,KAEA71B,EAAAitB,OAAAkjB,YAAAnuC,QAAA,SAAA4rC,GACA,IAAAyW,EAEAA,EADApvD,EAAAi0C,kBAAAjyC,UAAAmhJ,aACA7uF,EAAA6uF,eAAA59G,KAAA,SAAArkC,GACA,OAAAA,EAAAy3C,OAAAz3C,EAAAy3C,MAAA3tC,KAAA2tC,EAAA3tC,KAGA,CAA4B2tC,SAE5B,IAAA/X,EAAA,IAAAwiH,MAAA,SACAxiH,EAAA+X,QACA/X,EAAAwuB,WACAxuB,EAAA6tD,YAAA,CAAmCr/B,YACnCxuB,EAAAsX,QAAA,CAAAntC,EAAAitB,QACAs8B,EAAA+uF,cAAAziH,MAGA0zB,EAAAne,iBAAA,YAAAme,EAAA2uF,eAEAD,EAAAn5I,MAAAyqD,EAAA3qD,cAKA04I,uBAAA,SAAAriJ,GAEA,oBAAAA,KAAAi0C,qBACA,eAAAj0C,EAAAi0C,kBAAAjyC,YACA,qBAAAhC,EAAAi0C,kBAAAjyC,UAAA,CACA,IAAAshJ,EAAA,SAAAhvF,EAAA3b,GACA,OACAA,QACA4qG,WAQA,YAPA38I,IAAAkF,KAAA03I,QACA,UAAA7qG,EAAAxG,KACArmC,KAAA03I,MAAAlvF,EAAAkiE,iBAAA79E,GAEA7sC,KAAA03I,MAAA,MAGA13I,KAAA03I,OAEAC,IAAAnvF,IAKA,IAAAt0D,EAAAi0C,kBAAAjyC,UAAAu8H,WAAA,CACAv+H,EAAAi0C,kBAAAjyC,UAAAu8H,WAAA,WAEA,OADAzyH,KAAA43I,SAAA53I,KAAA43I,UAAA,GACA53I,KAAA43I,SAAAh8I,SAEA,IAAAi8I,EAAA3jJ,EAAAi0C,kBAAAjyC,UAAAu2C,SACAv4C,EAAAi0C,kBAAAjyC,UAAAu2C,SAAA,SAAAI,EAAA3gB,GACA,IACAwmG,EAAAmlB,EAAA95I,MADAiC,KACAnC,WAKA,OAJA60H,IACAA,EAAA8kB,EAHAx3I,KAGA6sC,GAHA7sC,KAIA43I,SAAA95I,KAAA40H,IAEAA,GAGA,IAAAolB,EAAA5jJ,EAAAi0C,kBAAAjyC,UAAAujF,YACAvlF,EAAAi0C,kBAAAjyC,UAAAujF,YAAA,SAAAi5C,GAEAolB,EAAA/5I,MADAiC,KACAnC,WACA,IAAA86C,EAFA34C,KAEA43I,SAAAr5I,QAAAm0H,IACA,IAAA/5E,GAHA34C,KAIA43I,SAAAr6I,OAAAo7C,EAAA,IAIA,IAAAo/F,EAAA7jJ,EAAAi0C,kBAAAjyC,UAAA+7H,UACA/9H,EAAAi0C,kBAAAjyC,UAAA+7H,UAAA,SAAA/lG,GACA,IAAAs8B,EAAAxoD,KACAwoD,EAAAovF,SAAApvF,EAAAovF,UAAA,GACAG,EAAAh6I,MAAAyqD,EAAA,CAAAt8B,IACAA,EAAAkjB,YAAAnuC,QAAA,SAAA4rC,GACA2b,EAAAovF,SAAA95I,KAAA05I,EAAAhvF,EAAA3b,OAIA,IAAAmrG,EAAA9jJ,EAAAi0C,kBAAAjyC,UAAAm8H,aACAn+H,EAAAi0C,kBAAAjyC,UAAAm8H,aAAA,SAAAnmG,GACA,IAAAs8B,EAAAxoD,KACAwoD,EAAAovF,SAAApvF,EAAAovF,UAAA,GACAI,EAAAj6I,MAAAyqD,EAAA,CAAAt8B,IAEAA,EAAAkjB,YAAAnuC,QAAA,SAAA4rC,GACA,IAAA6lF,EAAAlqE,EAAAovF,SAAAn+G,KAAA,SAAApjC,GACA,OAAAA,EAAAw2C,YAEA6lF,GACAlqE,EAAAovF,SAAAr6I,OAAAirD,EAAAovF,SAAAr5I,QAAAm0H,GAAA,WAIK,oBAAAx+H,KAAAi0C,mBACL,eAAAj0C,EAAAi0C,kBAAAjyC,WACA,qBAAAhC,EAAAi0C,kBAAAjyC,WACAhC,EAAA+jJ,gBACA,SAAA/jJ,EAAA+jJ,aAAA/hJ,WAAA,CACA,IAAAgiJ,EAAAhkJ,EAAAi0C,kBAAAjyC,UAAAu8H,WACAv+H,EAAAi0C,kBAAAjyC,UAAAu8H,WAAA,WACA,IAAAjqE,EAAAxoD,KACAw6C,EAAA09F,EAAAn6I,MAAAyqD,EAAA,IAIA,OAHAhO,EAAAv5C,QAAA,SAAAyxH,GACAA,EAAAilB,IAAAnvF,IAEAhO,GAGAxlD,OAAAC,eAAAf,EAAA+jJ,aAAA/hJ,UAAA,QACAf,IAAA,WAQA,YAPA2F,IAAAkF,KAAA03I,QACA,UAAA13I,KAAA6sC,MAAAxG,KACArmC,KAAA03I,MAAA13I,KAAA23I,IAAAjtB,iBAAA1qH,KAAA6sC,OAEA7sC,KAAA03I,MAAA,MAGA13I,KAAA03I,WAMAtB,iBAAA,SAAAliJ,GACA,IAAA60C,EAAA70C,KAAA60C,IAEA,iBAAA70C,KACAA,EAAAikJ,kBACA,cAAAjkJ,EAAAikJ,iBAAAjiJ,WAEAlB,OAAAC,eAAAf,EAAAikJ,iBAAAjiJ,UAAA,aACAf,IAAA,WACA,OAAA6K,KAAAo4I,YAEArsH,IAAA,SAAAG,GACA,IAAAxJ,EAAA1iB,KAEAA,KAAAo4I,WAAAlsH,EACAlsB,KAAA4oC,KACAG,EAAAgH,gBAAA/vC,KAAA4oC,KAGA1c,GAIAlsB,KAAA4oC,IAAAG,EAAAC,gBAAA9c,GAGAA,EAAAme,iBAAA,sBACA3nB,EAAAkmB,KACAG,EAAAgH,gBAAArtB,EAAAkmB,KAEAlmB,EAAAkmB,IAAAG,EAAAC,gBAAA9c,KAEAA,EAAAme,iBAAA,yBACA3nB,EAAAkmB,KACAG,EAAAgH,gBAAArtB,EAAAkmB,KAEAlmB,EAAAkmB,IAAAG,EAAAC,gBAAA9c,MAhBAlsB,KAAA4oC,IAAA,QAwBA0tG,wBAAA,SAAApiJ,GACA,IAAAuhJ,EAAAlvI,EAAA2wD,cAAAhjE,GAEA,KAAAA,EAAAi0C,kBAAAjyC,UAAAu2C,UACAgpG,EAAAzxH,SAAA,IADA,CAOA,IAAAq0H,EAAAnkJ,EAAAi0C,kBAAAjyC,UACAoiJ,gBACApkJ,EAAAi0C,kBAAAjyC,UAAAoiJ,gBAAA,WACA,IAAA51H,EAAA1iB,KACAu4I,EAAAF,EAAAt6I,MAAAiC,MAEA,OADA0iB,EAAA81H,gBAAA91H,EAAA81H,iBAAA,GACAD,EAAAx7I,IAAA,SAAAmvB,GACA,OAAAxJ,EAAA81H,gBAAAtsH,EAAAhtB,OAIA,IAAA64I,EAAA7jJ,EAAAi0C,kBAAAjyC,UAAA+7H,UACA/9H,EAAAi0C,kBAAAjyC,UAAA+7H,UAAA,SAAA/lG,GACA,IAAAs8B,EAAAxoD,KAeA,GAdAwoD,EAAAiwF,SAAAjwF,EAAAiwF,UAAA,GACAjwF,EAAAgwF,gBAAAhwF,EAAAgwF,iBAAA,GAEAtsH,EAAAkjB,YAAAnuC,QAAA,SAAA4rC,GAIA,GAHA2b,EAAAiqE,aAAAh5F,KAAA,SAAApjC,GACA,OAAAA,EAAAw2C,YAGA,UAAA6rG,aAAA,wBACA,yBAKAlwF,EAAAgwF,gBAAAtsH,EAAAhtB,IAAA,CACA,IAAAy5I,EAAA,IAAAzkJ,EAAAk1C,YAAAld,EAAAkjB,aACAoZ,EAAAiwF,SAAAvsH,EAAAhtB,IAAAy5I,EACAnwF,EAAAgwF,gBAAAG,EAAAz5I,IAAAgtB,EACAA,EAAAysH,EAEAZ,EAAAh6I,MAAAyqD,EAAA,CAAAt8B,KAGA,IAAA8rH,EAAA9jJ,EAAAi0C,kBAAAjyC,UAAAm8H,aACAn+H,EAAAi0C,kBAAAjyC,UAAAm8H,aAAA,SAAAnmG,GACA,IAAAs8B,EAAAxoD,KACAwoD,EAAAiwF,SAAAjwF,EAAAiwF,UAAA,GACAjwF,EAAAgwF,gBAAAhwF,EAAAgwF,iBAAA,GAEAR,EAAAj6I,MAAAyqD,EAAA,CAAAA,EAAAiwF,SAAAvsH,EAAAhtB,KAAAgtB,WACAs8B,EAAAgwF,gBAAAhwF,EAAAiwF,SAAAvsH,EAAAhtB,IACAspD,EAAAiwF,SAAAvsH,EAAAhtB,OAAAgtB,EAAAhtB,WACAspD,EAAAiwF,SAAAvsH,EAAAhtB,KAGAhL,EAAAi0C,kBAAAjyC,UAAAu2C,SAAA,SAAAI,EAAA3gB,GACA,IAAAs8B,EAAAxoD,KACA,cAAAwoD,EAAAwX,eACA,UAAA04E,aACA,sDACA,qBAEA,IAAAtsG,EAAA,GAAAxwC,MAAAnH,KAAAoJ,UAAA,GACA,OAAAuuC,EAAAnvC,SACAmvC,EAAA,GAAAgD,YAAA3V,KAAA,SAAAjkC,GACA,OAAAA,IAAAq3C,IAIA,UAAA6rG,aACA,gHAEA,qBAMA,GAHAlwF,EAAAiqE,aAAAh5F,KAAA,SAAApjC,GACA,OAAAA,EAAAw2C,YAGA,UAAA6rG,aAAA,wBACA,sBAGAlwF,EAAAiwF,SAAAjwF,EAAAiwF,UAAA,GACAjwF,EAAAgwF,gBAAAhwF,EAAAgwF,iBAAA,GACA,IAAAI,EAAApwF,EAAAiwF,SAAAvsH,EAAAhtB,IACA,GAAA05I,EAKAA,EAAAnsG,SAAAI,GAGAzB,QAAAC,UAAAtD,KAAA,WACAygB,EAAA+uF,cAAA,IAAAD,MAAA,4BAEO,CACP,IAAAqB,EAAA,IAAAzkJ,EAAAk1C,YAAA,CAAAyD,IACA2b,EAAAiwF,SAAAvsH,EAAAhtB,IAAAy5I,EACAnwF,EAAAgwF,gBAAAG,EAAAz5I,IAAAgtB,EACAs8B,EAAAypE,UAAA0mB,GAEA,OAAAnwF,EAAAiqE,aAAAh5F,KAAA,SAAApjC,GACA,OAAAA,EAAAw2C,aAgCA,+BAAA5rC,QAAA,SAAAgpG,GACA,IAAA4uC,EAAA3kJ,EAAAi0C,kBAAAjyC,UAAA+zG,GACA/1G,EAAAi0C,kBAAAjyC,UAAA+zG,GAAA,WACA,IAAAzhD,EAAAxoD,KACApC,EAAAC,UAGA,OAFAA,UAAAZ,QACA,mBAAAY,UAAA,GAEAg7I,EAAA96I,MAAAyqD,EAAA,CACA,SAAA43B,GACA,IAAAroD,EAAA+gH,EAAAtwF,EAAA43B,GACAxiF,EAAA,GAAAG,MAAA,MAAAg6B,KAEA,SAAAje,GACAlc,EAAA,IACAA,EAAA,GAAAG,MAAA,KAAA+b,IAEajc,UAAA,KAGbg7I,EAAA96I,MAAAyqD,EAAA3qD,WACAkqC,KAAA,SAAAq4C,GACA,OAAA04D,EAAAtwF,EAAA43B,QAKA,IAAA24D,EACA7kJ,EAAAi0C,kBAAAjyC,UAAAgtE,oBACAhvE,EAAAi0C,kBAAAjyC,UAAAgtE,oBAAA,WAEA,OAAArlE,UAAAZ,QAAAY,UAAA,GAAAwT,MAGAxT,UAAA,GA/CA,SAAA2qD,EAAA43B,GACA,IAAA5lD,EAAA4lD,EAAA5lD,IAOA,OANAxlC,OAAAq5B,KAAAm6B,EAAAgwF,iBAAA,IAAAv3I,QAAA,SAAA+3I,GACA,IAAAC,EAAAzwF,EAAAgwF,gBAAAQ,GACAE,EAAA1wF,EAAAiwF,SAAAQ,EAAA/5I,IACAs7B,IAAAp9B,QAAA,IAAA+mF,OAAA80D,EAAA/5I,GAAA,KACAg6I,EAAAh6I,MAEA,IAAAynE,sBAAA,CACAt1D,KAAA+uE,EAAA/uE,KACAmpB,QAqCA2+G,CAJAn5I,KAIAnC,UAAA,IACAk7I,EAAAh7I,MALAiC,KAKAnC,YAHAk7I,EAAAh7I,MAFAiC,KAEAnC,YAQA,IAAAu7I,EAAApkJ,OAAAqkJ,yBACAnlJ,EAAAi0C,kBAAAjyC,UAAA,oBACAlB,OAAAC,eAAAf,EAAAi0C,kBAAAjyC,UACA,oBACAf,IAAA,WACA,IACAirF,EAAAg5D,EAAAjkJ,IAAA4I,MAAAiC,MACA,WAAAogF,EAAA/uE,KACA+uE,EAEA04D,EALA94I,KAKAogF,MAIAlsF,EAAAi0C,kBAAAjyC,UAAAujF,YAAA,SAAAi5C,GACA,IAoBAxmG,EApBAs8B,EAAAxoD,KACA,cAAAwoD,EAAAwX,eACA,UAAA04E,aACA,sDACA,qBAIA,IAAAhmB,EAAAilB,IACA,UAAAe,aAAA,yFACA,aAGA,KADAhmB,EAAAilB,MAAAnvF,GAEA,UAAAkwF,aAAA,6CACA,sBAIAlwF,EAAAiwF,SAAAjwF,EAAAiwF,UAAA,GAEAzjJ,OAAAq5B,KAAAm6B,EAAAiwF,UAAAx3I,QAAA,SAAA+5E,GACAxyB,EAAAiwF,SAAAz9D,GAAA5rC,YAAA3V,KAAA,SAAAoT,GACA,OAAA6lF,EAAA7lF,cAGA3gB,EAAAs8B,EAAAiwF,SAAAz9D,MAIA9uD,IACA,IAAAA,EAAAkjB,YAAAnyC,OAGAurD,EAAA6pE,aAAA7pE,EAAAgwF,gBAAAtsH,EAAAhtB,KAGAgtB,EAAAutD,YAAAi5C,EAAA7lF,OAEA2b,EAAA+uF,cAAA,IAAAD,MAAA,wBAxHA,SAAAwB,EAAAtwF,EAAA43B,GACA,IAAA5lD,EAAA4lD,EAAA5lD,IAOA,OANAxlC,OAAAq5B,KAAAm6B,EAAAgwF,iBAAA,IAAAv3I,QAAA,SAAA+3I,GACA,IAAAC,EAAAzwF,EAAAgwF,gBAAAQ,GACAE,EAAA1wF,EAAAiwF,SAAAQ,EAAA/5I,IACAs7B,IAAAp9B,QAAA,IAAA+mF,OAAA+0D,EAAAh6I,GAAA,KACA+5I,EAAA/5I,MAEA,IAAAynE,sBAAA,CACAt1D,KAAA+uE,EAAA/uE,KACAmpB,UAmHAw7G,mBAAA,SAAA9hJ,GACA,IAAAuhJ,EAAAlvI,EAAA2wD,cAAAhjE,GAGA,GAAAA,EAAAi0C,kBAsBK,CAEL,IAAAmxG,EAAAplJ,EAAAi0C,kBACAj0C,EAAAi0C,kBAAA,SAAAoxG,EAAAhvG,GACA,GAAAgvG,KAAA5oF,WAAA,CAEA,IADA,IAAA6oF,EAAA,GACAllJ,EAAA,EAAyBA,EAAAilJ,EAAA5oF,WAAA1zD,OAAgC3I,IAAA,CACzD,IAAAs2D,EAAA2uF,EAAA5oF,WAAAr8D,IACAs2D,EAAAz0D,eAAA,SACAy0D,EAAAz0D,eAAA,QACAoQ,EAAAqwD,WAAA,yCACAhM,EAAAh0C,KAAAwK,MAAAxK,KAAA0K,UAAAspC,KACAmB,KAAAnB,EAAA9a,IACA0pG,EAAA17I,KAAA8sD,IAEA4uF,EAAA17I,KAAAy7I,EAAA5oF,WAAAr8D,IAGAilJ,EAAA5oF,WAAA6oF,EAEA,WAAAF,EAAAC,EAAAhvG,IAEAr2C,EAAAi0C,kBAAAjyC,UAAAojJ,EAAApjJ,UAEAlB,OAAAC,eAAAf,EAAAi0C,kBAAA,uBACAhzC,IAAA,WACA,OAAAmkJ,EAAAG,4BA/CAvlJ,EAAAi0C,kBAAA,SAAAoxG,EAAAhvG,GASA,OALAirG,EAAA,kBACA+D,KAAAzoF,qBACAyoF,EAAAG,cAAAH,EAAAzoF,oBAGA,IAAA58D,EAAAmjE,wBAAAkiF,EAAAhvG,IAEAr2C,EAAAi0C,kBAAAjyC,UACAhC,EAAAmjE,wBAAAnhE,UAEAhC,EAAAmjE,wBAAAoiF,qBACAzkJ,OAAAC,eAAAf,EAAAi0C,kBAAA,uBACAhzC,IAAA,WACA,OAAAjB,EAAAmjE,wBAAAoiF,uBAmCA,IAAAE,EAAAzlJ,EAAAi0C,kBAAAjyC,UAAA2jG,SACA3lG,EAAAi0C,kBAAAjyC,UAAA2jG,SAAA,SAAA+/C,EACA1rG,EAAAE,GACA,IAAA1rB,EAAA1iB,KACApC,EAAAC,UAIA,GAAAA,UAAAZ,OAAA,sBAAA28I,EACA,OAAAD,EAAA57I,MAAAiC,KAAAnC,WAKA,OAAA87I,EAAA18I,SAAA,IAAAY,UAAAZ,QACA,mBAAAY,UAAA,IACA,OAAA87I,EAAA57I,MAAAiC,KAAA,IAGA,IAAA65I,EAAA,SAAA79H,GACA,IAAA89H,EAAA,GAiBA,OAhBA99H,EAAAlM,SACA7O,QAAA,SAAAonD,GACA,IAAA0xF,EAAA,CACA76I,GAAAmpD,EAAAnpD,GACA6yG,UAAA1pD,EAAA0pD,UACA1gG,KAAA,CACA2oI,eAAA,kBACAC,gBAAA,oBACa5xF,EAAAh3C,OAAAg3C,EAAAh3C,MAEbg3C,EAAAu7B,QAAA3iF,QAAA,SAAApM,GACAklJ,EAAAllJ,GAAAwzD,EAAAwnD,KAAAh7G,KAEAilJ,EAAAC,EAAA76I,IAAA66I,IAGAD,GAIAI,EAAA,SAAArmH,GACA,WAAAvJ,IAAAt1B,OAAAq5B,KAAAwF,GAAA92B,IAAA,SAAAlH,GACA,OAAAA,EAAAg+B,EAAAh+B,QAIA,GAAAgI,UAAAZ,QAAA,GAKA,OAAA08I,EAAA57I,MAAAiC,KAAA,CAJA,SAAAgc,GACApe,EAAA,GAAAs8I,EAAAL,EAAA79H,MAIAne,UAAA,KAIA,WAAAutC,QAAA,SAAAC,EAAAC,GACAquG,EAAA57I,MAAA2kB,EAAA,CACA,SAAA1G,GACAqvB,EAAA6uG,EAAAL,EAAA79H,MACWsvB,MACJvD,KAAAmG,EAAAE,IAIPqnG,EAAAzxH,QAAA,IACA,iEACA/iB,QAAA,SAAAgpG,GACA,IAAA4uC,EAAA3kJ,EAAAi0C,kBAAAjyC,UAAA+zG,GACA/1G,EAAAi0C,kBAAAjyC,UAAA+zG,GAAA,WACA,IAAArsG,EAAAC,UACA6kB,EAAA1iB,KACAswC,EAAA,IAAAlF,QAAA,SAAAC,EAAAC,GACAutG,EAAA96I,MAAA2kB,EAAA,CAAA9kB,EAAA,GAAAytC,EAAAC,MAEA,OAAA1tC,EAAAX,OAAA,EACAqzC,EAEAA,EAAAvI,KAAA,WACAnqC,EAAA,GAAAG,MAAA,UAEA,SAAA+b,GACAlc,EAAAX,QAAA,GACAW,EAAA,GAAAG,MAAA,MAAA+b,SASA27H,EAAAzxH,QAAA,IACA,+BAAA/iB,QAAA,SAAAgpG,GACA,IAAA4uC,EAAA3kJ,EAAAi0C,kBAAAjyC,UAAA+zG,GACA/1G,EAAAi0C,kBAAAjyC,UAAA+zG,GAAA,WACA,IAAAvnF,EAAA1iB,KACA,GAAAnC,UAAAZ,OAAA,OAAAY,UAAAZ,QACA,iBAAAY,UAAA,IACA,IAAA+0H,EAAA,IAAA/0H,UAAAZ,OAAAY,UAAA,QAAA/C,EACA,WAAAswC,QAAA,SAAAC,EAAAC,GACAutG,EAAA96I,MAAA2kB,EAAA,CAAA2oB,EAAAC,EAAAsnF,MAGA,OAAAimB,EAAA96I,MAAAiC,KAAAnC,cAMA,iEACAoD,QAAA,SAAAgpG,GACA,IAAA4uC,EAAA3kJ,EAAAi0C,kBAAAjyC,UAAA+zG,GACA/1G,EAAAi0C,kBAAAjyC,UAAA+zG,GAAA,WAIA,OAHApsG,UAAA,2BAAAosG,EACA/1G,EAAA6tE,gBACA7tE,EAAAyyE,uBAAA9oE,UAAA,IACAg7I,EAAA96I,MAAAiC,KAAAnC,cAKA,IAAAs8I,EACAjmJ,EAAAi0C,kBAAAjyC,UAAAgsE,gBACAhuE,EAAAi0C,kBAAAjyC,UAAAgsE,gBAAA,WACA,OAAArkE,UAAA,GAMAs8I,EAAAp8I,MAAAiC,KAAAnC,YALAA,UAAA,IACAA,UAAA,GAAAE,MAAA,MAEAqtC,QAAAC,cASAt3C,EAAAD,QAAA,CACAqiJ,gBAAAR,EAAAQ,gBACAE,YAAAV,EAAAU,YACAC,wBAAAX,EAAAW,wBACAC,uBAAAZ,EAAAY,uBACAH,iBAAAT,EAAAS,iBACAJ,mBAAAL,EAAAK,mBACAE,iBAAoB9hJ,EAAQ,oCCtpB5B,IAAAmS,EAAYnS,EAAQ,IACpBohJ,EAAAjvI,EAAA8I,IAGAtb,EAAAD,QAAA,SAAAI,GACA,IAAAuhJ,EAAAlvI,EAAA2wD,cAAAhjE,GACA2zC,EAAA3zC,KAAA2zC,UAEAuyG,EAAA,SAAAzlJ,GACA,oBAAAA,KAAAiuC,WAAAjuC,EAAAkuC,SACA,OAAAluC,EAEA,IAAA0lJ,EAAA,GA4CA,OA3CArlJ,OAAAq5B,KAAA15B,GAAAsM,QAAA,SAAApL,GACA,eAAAA,GAAA,aAAAA,GAAA,gBAAAA,EAAA,CAGA,IAAAT,EAAA,iBAAAT,EAAAkB,GAAAlB,EAAAkB,GAAA,CAAuD4rC,MAAA9sC,EAAAkB,SACvDiF,IAAA1F,EAAA85C,OAAA,iBAAA95C,EAAA85C,QACA95C,EAAAquB,IAAAruB,EAAAssC,IAAAtsC,EAAA85C,OAEA,IAAAorG,EAAA,SAAAj8I,EAAAxJ,GACA,OAAAwJ,EACAA,EAAAxJ,EAAAwI,OAAA,GAAA4gF,cAAAppF,EAAA+G,MAAA,GAEA,aAAA/G,EAAA,WAAAA,GAEA,QAAAiG,IAAA1F,EAAAqsC,MAAA,CACA44G,EAAAx3G,SAAAw3G,EAAAx3G,UAAA,GACA,IAAA03G,EAAA,GACA,iBAAAnlJ,EAAAqsC,OACA84G,EAAAD,EAAA,MAAAzkJ,IAAAT,EAAAqsC,MACA44G,EAAAx3G,SAAA/kC,KAAAy8I,IACAA,EAAA,IACAD,EAAA,MAAAzkJ,IAAAT,EAAAqsC,MACA44G,EAAAx3G,SAAA/kC,KAAAy8I,KAEAA,EAAAD,EAAA,GAAAzkJ,IAAAT,EAAAqsC,MACA44G,EAAAx3G,SAAA/kC,KAAAy8I,SAGAz/I,IAAA1F,EAAA85C,OAAA,iBAAA95C,EAAA85C,OACAmrG,EAAAz3G,UAAAy3G,EAAAz3G,WAAA,GACAy3G,EAAAz3G,UAAA03G,EAAA,GAAAzkJ,IAAAT,EAAA85C,OAEA,cAAAjuC,QAAA,SAAAu5I,QACA1/I,IAAA1F,EAAAolJ,KACAH,EAAAz3G,UAAAy3G,EAAAz3G,WAAA,GACAy3G,EAAAz3G,UAAA03G,EAAAE,EAAA3kJ,IAAAT,EAAAolJ,SAKA7lJ,EAAA8lJ,WACAJ,EAAAx3G,UAAAw3G,EAAAx3G,UAAA,IAAAvlC,OAAA3I,EAAA8lJ,WAEAJ,GAGAK,EAAA,SAAAhoH,EAAAxyB,GACA,GAAAu1I,EAAAzxH,SAAA,GACA,OAAA9jB,EAAAwyB,GAGA,IADAA,EAAA9b,KAAAwK,MAAAxK,KAAA0K,UAAAoR,MACA,iBAAAA,EAAA8P,MAAA,CACA,IAAAm4G,EAAA,SAAA5+I,EAAAiH,EAAAC,GACAD,KAAAjH,KAAAkH,KAAAlH,KACAA,EAAAkH,GAAAlH,EAAAiH,UACAjH,EAAAiH,KAIA23I,GADAjoH,EAAA9b,KAAAwK,MAAAxK,KAAA0K,UAAAoR,KACA8P,MAAA,yCACAm4G,EAAAjoH,EAAA8P,MAAA,2CACA9P,EAAA8P,MAAA43G,EAAA1nH,EAAA8P,OAEA,GAAA9P,GAAA,iBAAAA,EAAA4O,MAAA,CAEA,IAAAs5G,EAAAloH,EAAA4O,MAAA2B,WACA23G,MAAA,iBAAAA,IAAA,CAA2Dn5G,MAAAm5G,IAC3D,IAQAn+H,EARAo+H,EAAApF,EAAAzxH,QAAA,GAEA,GAAA42H,IAAA,SAAAA,EAAA1rG,OAAA,gBAAA0rG,EAAA1rG,OACA,SAAA0rG,EAAAn5G,OAAA,gBAAAm5G,EAAAn5G,UACAoG,EAAAC,aAAAgzG,0BACAjzG,EAAAC,aAAAgzG,0BAAA73G,YACA43G,GAQA,UAPAnoH,EAAA4O,MAAA2B,WAEA,gBAAA23G,EAAA1rG,OAAA,gBAAA0rG,EAAAn5G,MACAhlB,EAAA,gBACS,SAAAm+H,EAAA1rG,OAAA,SAAA0rG,EAAAn5G,QACThlB,EAAA,WAEAA,EAEA,OAAAorB,EAAAC,aAAAF,mBACAG,KAAA,SAAAgE,GAIA,IAAAgvG,GAHAhvG,IAAA5S,OAAA,SAAAvkC,GACA,qBAAAA,EAAAyxC,QAEA5M,KAAA,SAAA7kC,GACA,OAAA6nB,EAAA+2B,KAAA,SAAA92B,GACA,WAAA9nB,EAAAuyC,MAAAn5B,cAAAzP,QAAAme,OAYA,OATAq+H,GAAAhvG,EAAA9uC,SAAA,IAAAwf,EAAAle,QAAA,UACAw8I,EAAAhvG,IAAA9uC,OAAA,IAEA89I,IACAroH,EAAA4O,MAAAyB,SAAA63G,EAAA1rG,MAAA,CAAyDA,MAAA6rG,EAAAh4G,UACzD,CAAyDtB,MAAAs5G,EAAAh4G,WAEzDrQ,EAAA4O,MAAA84G,EAAA1nH,EAAA4O,OACAk0G,EAAA,WAAA5+H,KAAA0K,UAAAoR,IACAxyB,EAAAwyB,KAIAA,EAAA4O,MAAA84G,EAAA1nH,EAAA4O,OAGA,OADAk0G,EAAA,WAAA5+H,KAAA0K,UAAAoR,IACAxyB,EAAAwyB,IAGAsoH,EAAA,SAAA/7I,GACA,OACApK,KAAA,CACAomJ,sBAAA,kBACAC,kBAAA,mBACAC,qBAAA,gBACAC,4BAAA,uBACAC,gBAAA,mBACAC,+BAAA,mBACAC,wBAAA,oBACOt8I,EAAApK,OAAAoK,EAAApK,KACPqa,QAAAjQ,EAAAiQ,QACAsoC,WAAAv4C,EAAAwzB,eACAhyB,SAAA,WACA,OAAAT,KAAAnL,MAAAmL,KAAAkP,SAAA,MAAAlP,KAAAkP,WAeA24B,EAAA0D,aAVA,SAAA7Y,EAAA/V,EAAAy9F,GACAsgC,EAAAhoH,EAAA,SAAA/9B,GACAkzC,EAAAuvB,mBAAAziE,EAAAgoB,EAAA,SAAA1d,GACAm7G,GACAA,EAAA4gC,EAAA/7I,SASA,IAAAu8I,EAAA,SAAA9oH,GACA,WAAA0Y,QAAA,SAAAC,EAAAC,GACAzD,EAAA0D,aAAA7Y,EAAA2Y,EAAAC,MA+BA,GA3BAzD,EAAAC,eACAD,EAAAC,aAAA,CACAyD,aAAAiwG,EACA5zG,iBAAA,WACA,WAAAwD,QAAA,SAAAC,GACA,IAAAowG,EAAA,CAAuBj5G,MAAA,aAAAlB,MAAA,cACvB,OAAAptC,EAAAwnJ,iBAAAC,WAAA,SAAA5vG,GACAV,EAAAU,EAAAhvC,IAAA,SAAA0pC,GACA,OAAsBU,MAAAV,EAAAU,MACtBd,KAAAo1G,EAAAh1G,EAAAJ,MACAtD,SAAA0D,EAAAvnC,GACA8nC,QAAA,YAKA8zG,wBAAA,WACA,OACA/3G,UAAA,EAAAmB,kBAAA,EAAAjB,YAAA,EACA6B,WAAA,EAAAtD,QAAA,EAAAmC,OAAA,MAQAkE,EAAAC,aAAAyD,aAIG,CAIH,IAAAqwG,EAAA/zG,EAAAC,aAAAyD,aACAz1C,KAAA+xC,EAAAC,cACAD,EAAAC,aAAAyD,aAAA,SAAAxb,GACA,OAAA2qH,EAAA3qH,EAAA,SAAAp7B,GACA,OAAAinJ,EAAAjnJ,GAAAozC,KAAA,SAAA7b,GACA,GAAAv3B,EAAA6tC,QAAAtW,EAAA2Z,iBAAA5oC,QACAtI,EAAA2sC,QAAApV,EAAA6Z,iBAAA9oC,OAIA,MAHAivB,EAAAkjB,YAAAnuC,QAAA,SAAA4rC,GACAA,EAAAle,SAEA,IAAA+pH,aAAA,oBAEA,OAAAxsH,GACS,SAAAjtB,GACT,OAAAmsC,QAAAE,OAAA0vG,EAAA/7I,cArBA4oC,EAAAC,aAAAyD,aAAA,SAAA7Y,GACA,OAAA8oH,EAAA9oH,SA4BA,IAAAmV,EAAAC,aAAAuC,mBACAxC,EAAAC,aAAAuC,iBAAA,WACAmrG,EAAA,sDAGA,IAAA3tG,EAAAC,aAAAmY,sBACApY,EAAAC,aAAAmY,oBAAA,WACAu1F,EAAA,mFClOA,IAAAjvI,EAAYnS,EAAQ,IACpBynJ,EAA4BznJ,EAAQ,KAEpCL,EAAAD,QAAA,CACAoiJ,iBAAoB9hJ,EAAQ,KAC5B4hJ,mBAAA,SAAA9hJ,GACA,IAAAuhJ,EAAAlvI,EAAA2wD,cAAAhjE,GAEA,GAAAA,EAAA4nJ,iBAGA5nJ,EAAA6tE,kBACA7tE,EAAA6tE,gBAAA,SAAAnkE,GACA,OAAAA,IAMA1J,EAAAyyE,wBACAzyE,EAAAyyE,sBAAA,SAAA/oE,GACA,OAAAA,IAMA63I,EAAAzxH,QAAA,QACA,IAAA+3H,EAAA/mJ,OAAAqkJ,yBACAnlJ,EAAAwnJ,iBAAAxlJ,UAAA,WACAlB,OAAAC,eAAAf,EAAAwnJ,iBAAAxlJ,UAAA,WACA61B,IAAA,SAAAx2B,GACAwmJ,EAAAhwH,IAAAt3B,KAAAuL,KAAAzK,GACA,IAAAi7D,EAAA,IAAA8mF,MAAA,WACA9mF,EAAAkoB,QAAAnjF,EACAyK,KAAAu3I,cAAA/mF,OAQAt8D,EAAA+jJ,cAAA,SAAA/jJ,EAAA+jJ,aAAA/hJ,WACAlB,OAAAC,eAAAf,EAAA+jJ,aAAA/hJ,UAAA,QACAf,IAAA,WAQA,YAPA2F,IAAAkF,KAAA03I,QACA,UAAA13I,KAAA6sC,MAAAxG,KACArmC,KAAA03I,MAAA,IAAAxjJ,EAAA8nJ,cAAAh8I,MACa,UAAAA,KAAA6sC,MAAAxG,OACbrmC,KAAA03I,MAAA,OAGA13I,KAAA03I,SAKAxjJ,EAAAi0C,kBACA0zG,EAAA3nJ,EAAAuhJ,EAAAzxH,UAEAyyH,iBAAA,SAAAviJ,IAEAA,EAAA+jJ,cACA,iBAAA/jJ,EAAA+jJ,aAAA/hJ,YACAhC,EAAA+jJ,aAAA/hJ,UAAAwxE,aACAxzE,EAAA+jJ,aAAA/hJ,UAAA+lJ,0CClEA,IAAAj/D,EAAe5oF,EAAQ,IAYvB,SAAAsuF,EAAAC,EAAAj2B,EAAAr7C,EAAA6a,EAAAgwH,GACA,IAAA1hH,EAAAwiD,EAAA2D,oBAAAgC,EAAAt8C,KAAAqmB,GAuBA,GApBAlyB,GAAAwiD,EAAAkD,mBACAyC,EAAAC,YAAAC,sBAGAroD,GAAAwiD,EAAA8C,oBACA6C,EAAAG,cAAAD,qBACA,UAAAxxE,EAAA,UAAA6qI,GAAA,UAEA1hH,GAAA,SAAAmoD,EAAAlqC,IAAA,OAEAkqC,EAAAI,WAAAJ,EAAAK,YACAxoD,GAAA,iBACGmoD,EAAAI,UACHvoD,GAAA,iBACGmoD,EAAAK,YACHxoD,GAAA,iBAEAA,GAAA,iBAGAmoD,EAAAI,UAAA,CACA,IAAApN,EAAAgN,EAAAI,UAAAo5D,iBACAx5D,EAAAI,UAAAl2C,MAAA3tC,GACAyjF,EAAAI,UAAAo5D,gBAAAxmE,EAEA,IAAAh0B,EAAA,SAAAz1B,IAAAhtB,GAAA,SACAy2E,EAAA,OACAn7C,GAAA,KAAAmnB,EAEAnnB,GAAA,UAAAmoD,EAAAM,uBAAA,GAAAryD,KACA,IAAA+wB,EAGAghC,EAAAM,uBAAA,GAAA3B,MACA9mD,GAAA,UAAAmoD,EAAAM,uBAAA,GAAA3B,IAAA1wD,KACA,IAAA+wB,EACAnnB,GAAA,oBACAmoD,EAAAM,uBAAA,GAAAryD,KAAA,IACA+xD,EAAAM,uBAAA,GAAA3B,IAAA1wD,KACA,QAUA,OANA4J,GAAA,UAAAmoD,EAAAM,uBAAA,GAAAryD,KACA,UAAAosD,EAAAE,WAAA,OACAyF,EAAAI,WAAAJ,EAAAM,uBAAA,GAAA3B,MACA9mD,GAAA,UAAAmoD,EAAAM,uBAAA,GAAA3B,IAAA1wD,KACA,UAAAosD,EAAAE,WAAA,QAEA1iD,EA2CA,SAAA4hH,EAAAC,EAAAC,GACA,IAAAC,EAAA,CACAl8D,OAAA,GACAC,iBAAA,GACAC,cAAA,IAGAi8D,EAAA,SAAAtkH,EAAAmoD,GACAnoD,EAAA1W,SAAA0W,EAAA,IACA,QAAA5jC,EAAA,EAAmBA,EAAA+rF,EAAApjF,OAAmB3I,IACtC,GAAA+rF,EAAA/rF,GAAAwmC,cAAA5C,GACAmoD,EAAA/rF,GAAAkqF,uBAAAtmD,EACA,OAAAmoD,EAAA/rF,IAKAmoJ,EAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAN,EAAAE,EAAA79D,WAAAsC,IAAAy7D,GACAG,EAAAP,EAAAG,EAAA99D,WAAAsC,IAAA07D,GACA,OAAAC,GAAAC,GACAD,EAAAjoJ,KAAAmZ,gBAAA+uI,EAAAloJ,KAAAmZ,eAqDA,OAlDAquI,EAAAh8D,OAAAp/E,QAAA,SAAA67I,GACA,QAAAxoJ,EAAA,EAAmBA,EAAAgoJ,EAAAj8D,OAAApjF,OAAsC3I,IAAA,CACzD,IAAAyoJ,EAAAT,EAAAj8D,OAAA/rF,GACA,GAAAwoJ,EAAAjoJ,KAAAmZ,gBAAA+uI,EAAAloJ,KAAAmZ,eACA8uI,EAAAz+D,YAAA0+D,EAAA1+D,UAAA,CACA,WAAAy+D,EAAAjoJ,KAAAmZ,eACA8uI,EAAAj+D,YAAAk+D,EAAAl+D,WAAAsC,MAGAs7D,EAAAK,EAAAC,EACAV,EAAAh8D,OAAAi8D,EAAAj8D,QACA,UAGA08D,EAAAnmI,KAAAwK,MAAAxK,KAAA0K,UAAAy7H,KAEAz+D,YAAAx9E,KAAA2iB,IAAAq5H,EAAAx+D,YACAy+D,EAAAz+D,aAEAi+D,EAAAl8D,OAAAviF,KAAAi/I,GAGAA,EAAA79D,aAAA69D,EAAA79D,aAAA/lD,OAAA,SAAAgmD,GACA,QAAAxiF,EAAA,EAAyBA,EAAAmgJ,EAAA59D,aAAAjiF,OAAgCN,IACzD,GAAAmgJ,EAAA59D,aAAAviF,GAAA0U,OAAA8tE,EAAA9tE,MACAyrI,EAAA59D,aAAAviF,GAAAqiF,YAAAG,EAAAH,UACA,SAGA,WAIA,UAKAq9D,EAAA/7D,iBAAAr/E,QAAA,SAAA+7I,GACA,QAAA1oJ,EAAA,EAAmBA,EAAAgoJ,EAAAh8D,iBAAArjF,OACnB3I,IAAA,CACA,IAAA2oJ,EAAAX,EAAAh8D,iBAAAhsF,GACA,GAAA0oJ,EAAA79I,MAAA89I,EAAA99I,IAAA,CACAo9I,EAAAj8D,iBAAAxiF,KAAAm/I,GACA,UAMAV,EAIA,SAAAW,EAAAx+G,EAAArtB,EAAA2uD,GACA,OASG,IATH,CACAmH,MAAA,CACAjE,oBAAA,8BACA6D,qBAAA,gCAEAE,OAAA,CACA/D,oBAAA,4CACA6D,qBAAA,8CAEG11D,GAAAqtB,GAAAngC,QAAAyhE,GAGH,SAAAm9E,EAAAC,EAAAjmH,GAGA,IAAAkmH,EAAAD,EAAAE,sBACA7jH,KAAA,SAAA8jH,GACA,OAAApmH,EAAAE,aAAAkmH,EAAAlmH,YACAF,EAAAI,KAAAgmH,EAAAhmH,IACAJ,EAAAd,OAAAknH,EAAAlnH,MACAc,EAAA9b,WAAAkiI,EAAAliI,UACA8b,EAAAvkB,WAAA2qI,EAAA3qI,UACAukB,EAAA9lB,OAAAksI,EAAAlsI,OAKA,OAHAgsI,GACAD,EAAAI,mBAAArmH,IAEAkmH,EAIA,SAAAI,EAAA5oJ,EAAAurF,GACA,IAAAnhF,EAAA,IAAAd,MAAAiiF,GAUA,OATAnhF,EAAApK,OAEAoK,EAAAwmB,KAAA,CACAi4H,kBAAA,EACAxC,kBAAA,GACAyC,mBAAA,GACAt8I,eAAAvG,EACA8iJ,oBAAA9iJ,GACGjG,GACHoK,EAGAlL,EAAAD,QAAA,SAAAI,EAAA63E,GAIA,SAAA8xE,EAAAhxG,EAAA3gB,GACAA,EAAAugB,SAAAI,GACA3gB,EAAAqrH,cAAA,IAAArjJ,EAAA4pJ,sBAAA,WACA,CAASjxG,WAST,SAAAkxG,EAAAv1F,EAAA3b,EAAAyW,EAAAlX,GACA,IAAA4xG,EAAA,IAAA1G,MAAA,SACA0G,EAAAnxG,QACAmxG,EAAA16F,WACA06F,EAAAr7D,YAAA,CAA8Br/B,YAC9B06F,EAAA5xG,UACAl4C,EAAA0L,WAAA,WACA4oD,EAAAy1F,eAAA,QAAAD,KAIA,IAAA71G,EAAA,SAAA3sC,GACA,IAAAgtD,EAAAxoD,KAEAk+I,EAAA/3I,SAAAgI,yBAwBA,GAvBA,2DACAlN,QAAA,SAAAgpG,GACAzhD,EAAAyhD,GAAAi0C,EAAAj0C,GAAAn0G,KAAAooJ,KAGAl+I,KAAAm+I,wBAAA,KAEAn+I,KAAAo+I,iBAAA,EAEAp+I,KAAAq+I,aAAA,GACAr+I,KAAAs+I,cAAA,GAEAt+I,KAAAu+I,kBAAA,KACAv+I,KAAAw+I,mBAAA,KAEAx+I,KAAAggE,eAAA,SACAhgE,KAAAogE,mBAAA,MACApgE,KAAAigE,gBAAA,MACAjgE,KAAAy+I,kBAAA,MAEAjjJ,EAAAob,KAAAwK,MAAAxK,KAAA0K,UAAA9lB,GAAA,KAEAwE,KAAA0+I,YAAA,eAAAljJ,EAAAmjJ,aACA,cAAAnjJ,EAAAojJ,cACA,MAAAnB,EAAA,oBACA,8CAKA,OAJKjiJ,EAAAojJ,gBACLpjJ,EAAAojJ,cAAA,WAGApjJ,EAAAs1D,oBACA,UACA,YACA,MACA,QACAt1D,EAAAs1D,mBAAA,MAIA,OAAAt1D,EAAAmjJ,cACA,eACA,iBACA,iBACA,MACA,QACAnjJ,EAAAmjJ,aAAA,WAOA,GAHAnjJ,EAAAm1D,WA/OA,SAAAA,EAAAob,GACA,IAAA8yE,GAAA,EAEA,OADAluF,EAAA/5C,KAAAwK,MAAAxK,KAAA0K,UAAAqvC,KACAx3B,OAAA,SAAAyxB,GACA,GAAAA,MAAAmB,MAAAnB,EAAA9a,KAAA,CACA,IAAAic,EAAAnB,EAAAmB,MAAAnB,EAAA9a,IACA8a,EAAA9a,MAAA8a,EAAAmB,MACAv8C,QAAAI,KAAA,qDAEA,IAAAkvI,EAAA,iBAAA/yF,EAoBA,OAnBA+yF,IACA/yF,EAAA,CAAAA,IAEAA,IAAA5yB,OAAA,SAAA2W,GAMA,OALA,IAAAA,EAAAvxC,QAAA,WACA,IAAAuxC,EAAAvxC,QAAA,mBACA,IAAAuxC,EAAAvxC,QAAA,WACAsgJ,EAMA,IAAA/uG,EAAAvxC,QAAA,UAAAwtE,GAAA,QACA,IAAAj8B,EAAAvxC,QAAA,mBAJAsgJ,GAAA,GACA,YAMAj0F,EAAA9a,IACA8a,EAAAmB,KAAA+yF,EAAA/yF,EAAA,GAAAA,IACAA,EAAA9uD,UAkNA8hJ,CAAAvjJ,EAAAm1D,YAAA,GAAAob,GAEA/rE,KAAAg/I,cAAA,GACAxjJ,EAAAyjJ,qBACA,QAAA3qJ,EAAAkH,EAAAyjJ,qBAA+C3qJ,EAAA,EAAOA,IACtD0L,KAAAg/I,cAAAlhJ,KAAA,IAAA5J,EAAA4nJ,eAAA,CACAnrF,WAAAn1D,EAAAm1D,WACAuuF,aAAA1jJ,EAAAs1D,2BAIAt1D,EAAAyjJ,qBAAA,EAGAj/I,KAAAm/I,QAAA3jJ,EAIAwE,KAAAo/I,aAAA,GAEAp/I,KAAAq/I,cAAAriE,EAAAqF,oBACAriF,KAAAs/I,mBAAA,EAEAt/I,KAAAu/I,eAAAzkJ,EAEAkF,KAAAw/I,WAAA,GAGAxqJ,OAAAC,eAAAkzC,EAAAjyC,UAAA,oBACAupJ,cAAA,EACAtqJ,IAAA,WACA,OAAA6K,KAAAu+I,qBAGAvpJ,OAAAC,eAAAkzC,EAAAjyC,UAAA,qBACAupJ,cAAA,EACAtqJ,IAAA,WACA,OAAA6K,KAAAw+I,sBAKAr2G,EAAAjyC,UAAAypE,eAAA,KACAx3B,EAAAjyC,UAAAm3H,YAAA,KACAllF,EAAAjyC,UAAAwpJ,QAAA,KACAv3G,EAAAjyC,UAAAq3H,eAAA,KACAplF,EAAAjyC,UAAA6pE,uBAAA,KACA53B,EAAAjyC,UAAAgqE,2BAAA,KACA/3B,EAAAjyC,UAAAypJ,wBAAA,KACAx3G,EAAAjyC,UAAA0pJ,0BAAA,KACAz3G,EAAAjyC,UAAAsqE,oBAAA,KACAr4B,EAAAjyC,UAAAu3H,cAAA,KAEAtlF,EAAAjyC,UAAA+nJ,eAAA,SAAAppJ,EAAAigC,GACA90B,KAAAw/I,YAGAx/I,KAAAu3I,cAAAziH,GACA,mBAAA90B,KAAA,KAAAnL,IACAmL,KAAA,KAAAnL,GAAAigC,KAIAqT,EAAAjyC,UAAA2pJ,0BAAA,WACA,IAAA/qH,EAAA,IAAAwiH,MAAA,2BACAt3I,KAAAi+I,eAAA,0BAAAnpH,IAGAqT,EAAAjyC,UAAA4pJ,iBAAA,WACA,OAAA9/I,KAAAm/I,SAGAh3G,EAAAjyC,UAAAoiJ,gBAAA,WACA,OAAAt4I,KAAAq+I,cAGAl2G,EAAAjyC,UAAA6pJ,iBAAA,WACA,OAAA//I,KAAAs+I,eAKAn2G,EAAAjyC,UAAA8pJ,mBAAA,SAAA35G,EAAA45G,GACA,IAAAC,EAAAlgJ,KAAAo/I,aAAAniJ,OAAA,EACA0lF,EAAA,CACA91C,MAAA,KACA+1C,YAAA,KACAw6D,aAAA,KACAt6D,cAAA,KACAu5D,kBAAA,KACAC,mBAAA,KACAv5D,UAAA,KACAC,YAAA,KACA38C,OACAoS,IAAA,KACAwqC,uBAAA,KACAk9D,uBAAA,KACAj0H,OAAA,KACAk0H,6BAAA,GACAC,aAAA,GAEA,GAAArgJ,KAAA0+I,aAAAwB,EACAv9D,EAAAy6D,aAAAp9I,KAAAo/I,aAAA,GAAAhC,aACAz6D,EAAAG,cAAA9iF,KAAAo/I,aAAA,GAAAt8D,kBACK,CACL,IAAAl6D,EAAA5oB,KAAAsgJ,8BACA39D,EAAAy6D,aAAAx0H,EAAAw0H,aACAz6D,EAAAG,cAAAl6D,EAAAk6D,cAKA,OAHAm9D,GACAjgJ,KAAAo/I,aAAAthJ,KAAA6kF,GAEAA,GAGAx6C,EAAAjyC,UAAAu2C,SAAA,SAAAI,EAAA3gB,GACA,GAAAlsB,KAAAw/I,UACA,MAAA/B,EAAA,oBACA,0DAGA,IAQA96D,EAJA,GAJA3iF,KAAAo/I,aAAA3lH,KAAA,SAAApjC,GACA,OAAAA,EAAAw2C,YAIA,MAAA4wG,EAAA,8CAIA,QAAAnpJ,EAAA,EAAmBA,EAAA0L,KAAAo/I,aAAAniJ,OAA8B3I,IACjD0L,KAAAo/I,aAAA9qJ,GAAAu4C,OACA7sC,KAAAo/I,aAAA9qJ,GAAA+xC,OAAAwG,EAAAxG,OACAs8C,EAAA3iF,KAAAo/I,aAAA9qJ,IAiBA,OAdAquF,IACAA,EAAA3iF,KAAAggJ,mBAAAnzG,EAAAxG,OAGArmC,KAAAugJ,+BAEA,IAAAvgJ,KAAAq+I,aAAA9/I,QAAA2tB,IACAlsB,KAAAq+I,aAAAvgJ,KAAAouB,GAGAy2D,EAAA91C,QACA81C,EAAAz2D,SACAy2D,EAAAI,UAAA,IAAA7uF,EAAA+jJ,aAAAprG,EACA81C,EAAAG,eACAH,EAAAI,WAGA56C,EAAAjyC,UAAA+7H,UAAA,SAAA/lG,GACA,IAAAs8B,EAAAxoD,KACA,GAAA+rE,GAAA,MACA7/C,EAAAkjB,YAAAnuC,QAAA,SAAA4rC,GACA2b,EAAA/b,SAAAI,EAAA3gB,SAEK,CAIL,IAAAs0H,EAAAt0H,EAAAg4C,QACAh4C,EAAAkjB,YAAAnuC,QAAA,SAAA4rC,EAAA8L,GACA,IAAA8nG,EAAAD,EAAApxG,YAAAuJ,GACA9L,EAAAxC,iBAAA,mBAAAvV,GACA2rH,EAAA/nE,QAAA5jD,EAAA4jD,YAGA8nE,EAAApxG,YAAAnuC,QAAA,SAAA4rC,GACA2b,EAAA/b,SAAAI,EAAA2zG,OAKAr4G,EAAAjyC,UAAAujF,YAAA,SAAAi5C,GACA,GAAA1yH,KAAAw/I,UACA,MAAA/B,EAAA,oBACA,6DAGA,KAAA/qB,aAAAx+H,EAAA+jJ,cACA,UAAA52I,UAAA,0FAIA,IAAAshF,EAAA3iF,KAAAo/I,aAAA3lH,KAAA,SAAAjkC,GACA,OAAAA,EAAAutF,YAAA2vC,IAGA,IAAA/vC,EACA,MAAA86D,EAAA,qBACA,8CAEA,IAAAvxH,EAAAy2D,EAAAz2D,OAEAy2D,EAAAI,UAAAp0D,OACAg0D,EAAAI,UAAA,KACAJ,EAAA91C,MAAA,KACA81C,EAAAz2D,OAAA,MAMA,IAHAlsB,KAAAo/I,aAAAriJ,IAAA,SAAAvH,GACA,OAAAA,EAAA02B,SAEA3tB,QAAA2tB,IACAlsB,KAAAq+I,aAAA9/I,QAAA2tB,IAAA,GACAlsB,KAAAq+I,aAAA9gJ,OAAAyC,KAAAq+I,aAAA9/I,QAAA2tB,GAAA,GAGAlsB,KAAAugJ,+BAGAp4G,EAAAjyC,UAAAm8H,aAAA,SAAAnmG,GACA,IAAAs8B,EAAAxoD,KACAksB,EAAAkjB,YAAAnuC,QAAA,SAAA4rC,GACA,IAAA6lF,EAAAlqE,EAAAiqE,aAAAh5F,KAAA,SAAApjC,GACA,OAAAA,EAAAw2C,YAEA6lF,GACAlqE,EAAAixB,YAAAi5C,MAKAvqF,EAAAjyC,UAAAu8H,WAAA,WACA,OAAAzyH,KAAAo/I,aAAAjmH,OAAA,SAAAwpD,GACA,QAAAA,EAAAI,YAEAhmF,IAAA,SAAA4lF,GACA,OAAAA,EAAAI,aAIA56C,EAAAjyC,UAAAmhJ,aAAA,WACA,OAAAr3I,KAAAo/I,aAAAjmH,OAAA,SAAAwpD,GACA,QAAAA,EAAAK,cAEAjmF,IAAA,SAAA4lF,GACA,OAAAA,EAAAK,eAKA76C,EAAAjyC,UAAAwqJ,mBAAA,SAAAz/E,EACAy9E,GACA,IAAAl2F,EAAAxoD,KACA,GAAA0+I,GAAAz9E,EAAA,EACA,OAAAjhE,KAAAo/I,aAAA,GAAAx8D,YACK,GAAA5iF,KAAAg/I,cAAA/hJ,OACL,OAAA+C,KAAAg/I,cAAA5oH,QAEA,IAAAwsD,EAAA,IAAA1uF,EAAA4nJ,eAAA,CACAnrF,WAAA3wD,KAAAm/I,QAAAxuF,WACAuuF,aAAAl/I,KAAAm/I,QAAAruF,qBAkBA,OAhBA97D,OAAAC,eAAA2tF,EAAA,QACA,CAASrtF,MAAA,MAAAorJ,UAAA,IAGT3gJ,KAAAo/I,aAAAn+E,GAAA2/E,wBAAA,GACA5gJ,KAAAo/I,aAAAn+E,GAAA4/E,iBAAA,SAAA/rH,GACA,IAAA+wF,GAAA/wF,EAAAqC,WAAA,IAAAniC,OAAAq5B,KAAAyG,EAAAqC,WAAAl6B,OAGA2lF,EAAAl+B,MAAAmhE,EAAA,wBACA,OAAAr9D,EAAA42F,aAAAn+E,GAAA2/E,yBACAp4F,EAAA42F,aAAAn+E,GAAA2/E,wBAAA9iJ,KAAAg3B,IAGA8tD,EAAAv4C,iBAAA,iBACArqC,KAAAo/I,aAAAn+E,GAAA4/E,kBACAj+D,GAIAz6C,EAAAjyC,UAAA4qJ,QAAA,SAAAroG,EAAAwoB,GACA,IAAAzY,EAAAxoD,KACA4iF,EAAA5iF,KAAAo/I,aAAAn+E,GAAA2hB,YACA,IAAAA,EAAAm+D,iBAAA,CAGA,IAAAH,EACA5gJ,KAAAo/I,aAAAn+E,GAAA2/E,wBACA5gJ,KAAAo/I,aAAAn+E,GAAA2/E,wBAAA,KACAh+D,EAAA3iC,oBAAA,iBACAjgD,KAAAo/I,aAAAn+E,GAAA4/E,kBACAj+D,EAAAm+D,iBAAA,SAAAC,GACA,KAAAx4F,EAAAk2F,aAAAz9E,EAAA,IAMA,IAAAnsC,EAAA,IAAAwiH,MAAA,gBACAxiH,EAAAqC,UAAA,CAAyBsqC,OAAAhpB,EAAAwoB,iBAEzB,IAAArpC,EAAAopH,EAAA7pH,UAEA0uF,GAAAjuF,GAAA,IAAA5iC,OAAAq5B,KAAAuJ,GAAA36B,OACA,GAAA4oH,EAGA,QAAAjjC,EAAAl+B,OAAA,cAAAk+B,EAAAl+B,QACAk+B,EAAAl+B,MAAA,iBAEO,CACP,QAAAk+B,EAAAl+B,QACAk+B,EAAAl+B,MAAA,aAGA9sB,EAAAN,UAAA,EAEAM,EAAAlC,MAAAktD,EAAAC,qBAAA9E,iBAEA,IAAAkjE,EAAAjkE,EAAAgB,eAAApmD,GACA9C,EAAAqC,UAAAniC,OAAAikF,OAAAnkD,EAAAqC,UACA6lD,EAAAU,eAAAujE,IAEAnsH,EAAAqC,oBAAA8pH,EACAnsH,EAAAqC,UAAA+pH,OAAA,WACA,OACA/pH,UAAArC,EAAAqC,oBACAsqC,OAAA3sC,EAAAqC,UAAAsqC,OACAR,cAAAnsC,EAAAqC,UAAA8pC,cACA8c,iBAAAjpD,EAAAqC,UAAA4mD,mBAMA,IAAAR,EAAAP,EAAAQ,iBAAAh1B,EAAA+1F,kBAAA/jH,KAKA+iD,EAAAzoD,EAAAqC,UAAA8pC,gBAJA4kD,EAKA,0BAHA,KAAA/wF,EAAAqC,oBAAA,OAKAqxB,EAAA+1F,kBAAA/jH,IACAwiD,EAAAM,eAAA90B,EAAA+1F,kBAAA/jH,KACA+iD,EAAA//E,KAAA,IACA,IAAA2jJ,EAAA34F,EAAA42F,aAAAjjE,MAAA,SAAAwG,GACA,OAAAA,EAAAC,aACA,cAAAD,EAAAC,YAAAl+B,QAGA,cAAA8D,EAAAi2F,oBACAj2F,EAAAi2F,kBAAA,YACAj2F,EAAAq3F,6BAKAh6B,GACAr9D,EAAAy1F,eAAA,eAAAnpH,GAEAqsH,IACA34F,EAAAy1F,eAAA,mBAAA3G,MAAA,iBACA9uF,EAAAi2F,kBAAA,WACAj2F,EAAAq3F,+BAKA3rJ,EAAA0L,WAAA,WACAghJ,EAAA3/I,QAAA,SAAAhC,GACA2jF,EAAAm+D,iBAAA9hJ,MAEK,KAILkpC,EAAAjyC,UAAAoqJ,4BAAA,WACA,IAAA93F,EAAAxoD,KACAo9I,EAAA,IAAAlpJ,EAAAktJ,gBAAA,MACAhE,EAAAiE,iBAAA,WACA74F,EAAA84F,4BACA94F,EAAA+4F,0BAGA,IAAAz+D,EAAA,IAAA5uF,EAAAstJ,iBAAApE,GAWA,OAVAt6D,EAAA2+D,kBAAA,WACAj5F,EAAA+4F,0BAEAz+D,EAAAr+D,QAAA,WAEAzvB,OAAAC,eAAA6tF,EAAA,QACA,CAAWvtF,MAAA,SAAAorJ,UAAA,IACXn4F,EAAA+4F,0BAGA,CACAnE,eACAt6D,kBAMA36C,EAAAjyC,UAAAwrJ,6BAAA,SACAzgF,GACA,IAAA2hB,EAAA5iF,KAAAo/I,aAAAn+E,GAAA2hB,YACAA,WACAA,EAAAm+D,wBACA/gJ,KAAAo/I,aAAAn+E,GAAA2hB,aAEA,IAAAw6D,EAAAp9I,KAAAo/I,aAAAn+E,GAAAm8E,aACAA,WACAA,EAAAiE,wBACArhJ,KAAAo/I,aAAAn+E,GAAAm8E,cAEA,IAAAt6D,EAAA9iF,KAAAo/I,aAAAn+E,GAAA6hB,cACAA,WACAA,EAAA2+D,yBACA3+D,EAAAr+D,eACAzkB,KAAAo/I,aAAAn+E,GAAA6hB,gBAKA36C,EAAAjyC,UAAAyrJ,YAAA,SAAAh/D,EACAtrE,EAAAuqI,GACA,IAAAzpH,EAAAikH,EAAAz5D,EAAA05D,kBACA15D,EAAA25D,oBACAjlI,GAAAsrE,EAAAI,YACA5qD,EAAAg9F,UAAAxyC,EAAAM,uBACA9qD,EAAAqoD,KAAA,CACAoB,MAAA5E,EAAAE,WACA6E,SAAAY,EAAAjB,eAAAK,UAEAY,EAAAw9D,uBAAAljJ,SACAk7B,EAAAqoD,KAAA5vD,KAAA+xD,EAAAw9D,uBAAA,GAAAvvH,MAEA+xD,EAAAI,UAAA1rE,KAAA8gB,IAEAypH,GAAAj/D,EAAAK,aAAA7qD,EAAAkoD,OAAApjF,OAAA,IAEA,UAAA0lF,EAAAt8C,MACAs8C,EAAAw9D,wBACAp0E,EAAA,OACA4W,EAAAw9D,uBAAAl/I,QAAA,SAAA7K,UACAA,EAAAkrF,MAGAqB,EAAAw9D,uBAAAljJ,OACAk7B,EAAAg9F,UAAAxyC,EAAAw9D,uBAEAhoH,EAAAg9F,UAAA,KAEAh9F,EAAAqoD,KAAA,CACAuB,SAAAY,EAAAjB,eAAAK,UAEAY,EAAAjB,eAAAE,QACAzpD,EAAAqoD,KAAAoB,MAAAe,EAAAjB,eAAAE,OAEAe,EAAAM,uBAAAhmF,SACAk7B,EAAAqoD,KAAA5vD,KAAA+xD,EAAAM,uBAAA,GAAAryD,MAEA+xD,EAAAK,YAAA6+D,QAAA1pH,KAIAgQ,EAAAjyC,UAAAgtE,oBAAA,SAAAkd,GACA,IAeA7C,EACA/kD,EAhBAgwB,EAAAxoD,KAGA,2BAAAzB,QAAA6hF,EAAA/uE,MACA,OAAA+5B,QAAAE,OAAAmyG,EAAA,YACA,qBAAAr9D,EAAA/uE,KAAA,MAGA,IAAA6rI,EAAA,sBACA98D,EAAA/uE,KAAAm3C,EAAAwX,iBAAAxX,EAAAg3F,UACA,OAAAp0G,QAAAE,OAAAmyG,EAAA,oBACA,qBAAAr9D,EAAA/uE,KACA,aAAAm3C,EAAAwX,iBAKA,aAAAogB,EAAA/uE,KAGAksE,EAAAP,EAAAK,cAAA+C,EAAA5lD,KACAhC,EAAA+kD,EAAAnnD,QACAmnD,EAAAt8E,QAAA,SAAAw+E,EAAAxe,GACA,IAAAvU,EAAAswB,EAAAmD,mBAAAV,GACAj3B,EAAA42F,aAAAn+E,GAAAo7E,kBAAA3vF,IAGAlE,EAAA42F,aAAAn+I,QAAA,SAAA0hF,EAAA1hB,GACAzY,EAAAs4F,QAAAn+D,EAAAlqC,IAAAwoB,UAEK,cAAAmf,EAAA/uE,KAAA,CACLksE,EAAAP,EAAAK,cAAA70B,EAAAg2F,mBAAAhkH,KACAhC,EAAA+kD,EAAAnnD,QACA,IAAA0rH,EAAA9kE,EAAAS,YAAAjlD,EACA,cAAAv7B,OAAA,EACAsgF,EAAAt8E,QAAA,SAAAw+E,EAAAxe,GACA,IAAA0hB,EAAAn6B,EAAA42F,aAAAn+E,GACA2hB,EAAAD,EAAAC,YACAw6D,EAAAz6D,EAAAy6D,aACAt6D,EAAAH,EAAAG,cACAu5D,EAAA15D,EAAA05D,kBACAC,EAAA35D,EAAA25D,mBAMA,KAHAt/D,EAAAoG,WAAA3D,IACA,IAAAzC,EAAAS,YAAAgC,EAAA,iBAAAxiF,UAEA0lF,EAAAo/D,SAAA,CACA,IAAAC,EAAAhlE,EAAAiD,iBACAR,EAAAjnD,GACAypH,EAAAjlE,EAAA2C,kBACAF,EAAAjnD,GACAspH,IACAG,EAAAriE,KAAA,UAGAp3B,EAAAk2F,aAAA,IAAAz9E,IACAzY,EAAAs4F,QAAAn+D,EAAAlqC,IAAAwoB,GACA,QAAAm8E,EAAA14F,OACA04F,EAAAv3H,MAAA+8D,EAAAo/D,EACAF,EAAA,4BAEA,QAAAh/D,EAAAp+B,OACAo+B,EAAAj9D,MAAAo8H,IAKA,IAAA9pH,EAAAikH,EAAAC,EACAC,GAIA9zF,EAAAm5F,YAAAh/D,EACAxqD,EAAAkoD,OAAApjF,OAAA,GACA,MAeA,OAVAurD,EAAA+1F,kBAAA,CACAltI,KAAA+uE,EAAA/uE,KACAmpB,IAAA4lD,EAAA5lD,KAEA,UAAA4lD,EAAA/uE,KACAm3C,EAAA05F,sBAAA,oBAEA15F,EAAA05F,sBAAA,UAGA92G,QAAAC,WAGAlD,EAAAjyC,UAAA6wE,qBAAA,SAAAqZ,GACA,IAAA53B,EAAAxoD,KAGA,2BAAAzB,QAAA6hF,EAAA/uE,MACA,OAAA+5B,QAAAE,OAAAmyG,EAAA,YACA,qBAAAr9D,EAAA/uE,KAAA,MAGA,IAAA6rI,EAAA,uBACA98D,EAAA/uE,KAAAm3C,EAAAwX,iBAAAxX,EAAAg3F,UACA,OAAAp0G,QAAAE,OAAAmyG,EAAA,oBACA,sBAAAr9D,EAAA/uE,KACA,aAAAm3C,EAAAwX,iBAGA,IAAA5zB,EAAA,GACAoc,EAAA81F,cAAAr9I,QAAA,SAAAirB,GACAkgB,EAAAlgB,EAAAhtB,IAAAgtB,IAEA,IAAAi2H,EAAA,GACA5kE,EAAAP,EAAAK,cAAA+C,EAAA5lD,KACAhC,EAAA+kD,EAAAnnD,QACA0rH,EAAA9kE,EAAAS,YAAAjlD,EACA,cAAAv7B,OAAA,EACAyhJ,EAAA1hE,EAAAS,YAAAjlD,EACA,mBAAAv7B,OAAA,EACAurD,EAAAk2F,cACA,IAAA0D,EAAAplE,EAAAS,YAAAjlD,EACA,qBA4UA,OA1UAgwB,EAAA21F,0BADAiE,GACAA,EAAA7jI,OAAA,IAAAzhB,MAAA,KACAyB,QAAA,cAKAg/E,EAAAt8E,QAAA,SAAAw+E,EAAAxe,GACA,IAAAjpC,EAAAglD,EAAAG,WAAAsC,GACAp5C,EAAA22C,EAAAmG,QAAA1D,GAEAsiE,EAAA/kE,EAAAoG,WAAA3D,IACA,IAAAzC,EAAAS,YAAAgC,EAAA,iBAAAxiF,OACA2V,EAAAolB,EAAA,GAAAzZ,OAAA,GAAAzhB,MAAA,QAEAu7B,EAAA2kD,EAAAkG,aAAAzD,EAAAjnD,GACA6pH,EAAArlE,EAAAiF,UAAAxC,GAEAhnC,EAAAukC,EAAAwC,OAAAC,IAAAzC,EAAAC,qBAGA,GAAA8kE,GAAA,gBAAA17G,IAAA,cAAAzzB,GACA,kBAAAA,GAGA41C,EAAA42F,aAAAn+E,GAAA,CACAxoB,MACApS,OACAzzB,WACAmvI,UAAA,OARA,CAmBA,IAAAp/D,EACAC,EACAw6D,EACAt6D,EACAE,EACAC,EACAk9D,EACA9D,EAEAxvG,GAfAk1G,GAAAv5F,EAAA42F,aAAAn+E,IACAzY,EAAA42F,aAAAn+E,GAAA8gF,WAEAv5F,EAAA42F,aAAAn+E,GAAAzY,EAAAw3F,mBAAA35G,GAAA,IAcA,IACA27G,EACAC,EAFA3F,EAAAt/D,EAAAmD,mBAAAV,GAGAsiE,IACAC,EAAAhlE,EAAAiD,iBAAAR,EACAjnD,IACAypH,EAAAjlE,EAAA2C,kBAAAF,EACAjnD,IACAonD,KAAA,UAEAugE,EACAnjE,EAAA8D,2BAAArB,GAEA,IAAAiC,EAAA1E,EAAAyE,oBAAAhC,GAEA6iE,EAAAtlE,EAAAS,YAAAgC,EACA,sBAAAjnD,GAAAv7B,OAAA,EACAukE,EAAAwb,EAAAS,YAAAgC,EAAA,gBACA1iF,IAAA,SAAA66B,GACA,OAAAolD,EAAAU,eAAA9lD,KAEAuB,OAAA,SAAAvB,GACA,WAAAA,EAAAN,YAuBA,IAnBA,UAAA8oD,EAAA/uE,MAAA,WAAA+uE,EAAA/uE,QACA0wI,GAAArD,GAAAz9E,EAAA,GACAzY,EAAA42F,aAAAn+E,KACAzY,EAAAk5F,6BAAAzgF,GACAzY,EAAA42F,aAAAn+E,GAAA2hB,YACAp6B,EAAA42F,aAAA,GAAAx8D,YACAp6B,EAAA42F,aAAAn+E,GAAAm8E,aACA50F,EAAA42F,aAAA,GAAAhC,aACA50F,EAAA42F,aAAAn+E,GAAA6hB,cACAt6B,EAAA42F,aAAA,GAAAt8D,cACAt6B,EAAA42F,aAAAn+E,GAAA8hB,WACAv6B,EAAA42F,aAAAn+E,GAAA8hB,UAAAw/D,aACA/5F,EAAA42F,aAAA,GAAAt8D,eAEAt6B,EAAA42F,aAAAn+E,GAAA+hB,aACAx6B,EAAA42F,aAAAn+E,GAAA+hB,YAAAu/D,aACA/5F,EAAA42F,aAAA,GAAAt8D,gBAGA,UAAA1C,EAAA/uE,MAAA0wI,GAmGO,cAAA3hE,EAAA/uE,OAAA0wI,EAAA,CAEPn/D,GADAD,EAAAn6B,EAAA42F,aAAAn+E,IACA2hB,YACAw6D,EAAAz6D,EAAAy6D,aACAt6D,EAAAH,EAAAG,cACAE,EAAAL,EAAAK,YACAC,EAAAN,EAAAM,uBACAo5D,EAAA15D,EAAA05D,kBAEA7zF,EAAA42F,aAAAn+E,GAAAk/E,uBACAA,EACA33F,EAAA42F,aAAAn+E,GAAAq7E,mBACAA,EACA9zF,EAAA42F,aAAAn+E,GAAAygB,iBAEAlgB,EAAAvkE,QAAA,QAAAmgJ,EAAA14F,SACAo9F,IAAAQ,GACA5D,GAAA,IAAAz9E,EAGAO,EAAAvgE,QAAA,SAAAk2B,GACAgmH,EAAAx6D,EAAAy6D,aAAAjmH,KAHAimH,EAAAoF,oBAAAhhF,IAQAk9E,GAAA,IAAAz9E,IACA,QAAAm8E,EAAA14F,OACA04F,EAAAv3H,MAAA+8D,EAAAo/D,EACA,eAEA,QAAAl/D,EAAAp+B,OACAo+B,EAAAj9D,MAAAo8H,KAMA7F,EACAz5D,EAAA05D,kBACA15D,EAAA25D,oBAEAj8D,OAAAlnD,OAAA,SAAAxkC,GACA,cAAAA,EAAAE,KAAAmZ,gBACS/Q,QACT0lF,EAAAM,uBAAA,GAAA3B,YACAqB,EAAAM,uBAAA,GAAA3B,IAGA94B,EAAAm5F,YAAAh/D,EACA,aAAAtqD,GAAA,aAAAA,EACA,aAAAA,GAAA,aAAAA,IAGA2qD,GACA,aAAA3qD,GAAA,aAAAA,SAiBAsqD,EAAAK,aAhBAn2C,EAAAm2C,EAAAn2C,MACAw1G,GACAj2G,EAAAi2G,EAAAn2H,UACAkgB,EAAAi2G,EAAAn2H,QAAA,IAAAh4B,EAAAk1C,aAEAy0G,EAAAhxG,EAAAT,EAAAi2G,EAAAn2H,SACAi2H,EAAArkJ,KAAA,CAAA+uC,EAAAm2C,EAAA52C,EAAAi2G,EAAAn2H,YAEAkgB,EAAA6gG,UACA7gG,EAAA6gG,QAAA,IAAA/4I,EAAAk1C,aAEAy0G,EAAAhxG,EAAAT,EAAA6gG,SACAkV,EAAArkJ,KAAA,CAAA+uC,EAAAm2C,EAAA52C,EAAA6gG,iBAvKA,EACAtqD,EAAAn6B,EAAA42F,aAAAn+E,IACAzY,EAAAw3F,mBAAA35G,IACAoS,MAEAkqC,EAAAC,cACAD,EAAAC,YAAAp6B,EAAAk4F,mBAAAz/E,EACAy9E,IAGAl9E,EAAAvkE,QAAA,QAAA0lF,EAAAy6D,aAAA14F,SACA49F,GAAA5D,GAAA,IAAAz9E,EAGAO,EAAAvgE,QAAA,SAAAk2B,GACAgmH,EAAAx6D,EAAAy6D,aAAAjmH,KAHAwrD,EAAAy6D,aAAAoF,oBAAAhhF,IAQA66E,EAAAnoJ,EAAAuuJ,eAAAC,gBAAAr8G,GAIA0lC,EAAA,QACAswE,EAAAh8D,OAAAg8D,EAAAh8D,OAAAlnD,OACA,SAAA6B,GACA,cAAAA,EAAAnmC,QAIAouF,EAAAN,EAAAM,wBAAA,EACAryD,KAAA,QAAAqwC,EAAA,KAIA,IAOA/0C,EAPAy2H,GAAA,EACA,gBAAAtqH,GAAA,aAAAA,GAKA,GAJAsqH,GAAAhgE,EAAAK,YACAA,EAAAL,EAAAK,aACA,IAAA9uF,EAAAuuJ,eAAA9/D,EAAAG,cAAAz8C,GAEAs8G,EAEA91G,EAAAm2C,EAAAn2C,MAEAw1G,GAAA,MAAAA,EAAAn2H,SAEam2H,GACbj2G,EAAAi2G,EAAAn2H,UACAkgB,EAAAi2G,EAAAn2H,QAAA,IAAAh4B,EAAAk1C,YACAp0C,OAAAC,eAAAm3C,EAAAi2G,EAAAn2H,QAAA,MACA/2B,IAAA,WACA,OAAAktJ,EAAAn2H,WAIAl3B,OAAAC,eAAA43C,EAAA,MACA13C,IAAA,WACA,OAAAktJ,EAAAx1G,SAGA3gB,EAAAkgB,EAAAi2G,EAAAn2H,UAEAkgB,EAAA6gG,UACA7gG,EAAA6gG,QAAA,IAAA/4I,EAAAk1C,aAEAld,EAAAkgB,EAAA6gG,UAEA/gH,IACA2xH,EAAAhxG,EAAA3gB,GACAy2D,EAAAy9D,6BAAAtiJ,KAAAouB,IAEAi2H,EAAArkJ,KAAA,CAAA+uC,EAAAm2C,EAAA92D,SAESy2D,EAAAK,aAAAL,EAAAK,YAAAn2C,QACT81C,EAAAy9D,6BAAAn/I,QAAA,SAAA5K,GACA,IA/zBAw2C,EAAA3gB,EA+zBA02H,EAAAvsJ,EAAA+4C,YAAA3V,KAAA,SAAAjkC,GACA,OAAAA,EAAA0J,KAAAyjF,EAAAK,YAAAn2C,MAAA3tC,KAEA0jJ,IAl0BA/1G,EAm0BA+1G,GAn0BA12H,EAm0BA71B,GAl0BAojF,YAAA5sC,GACA3gB,EAAAqrH,cAAA,IAAArjJ,EAAA4pJ,sBAAA,cACA,CAASjxG,cAm0BT81C,EAAAy9D,6BAAA,IAGAz9D,EAAA05D,oBACA15D,EAAA25D,qBACA35D,EAAAK,cACAL,EAAAjB,iBACAiB,EAAAM,yBACAN,EAAAw9D,yBAIA33F,EAAAm5F,YAAAn5F,EAAA42F,aAAAn+E,IACA,EACA0hF,YA8EA7nJ,IAAA0tD,EAAA+2F,YACA/2F,EAAA+2F,UAAA,UAAAn/D,EAAA/uE,KAAA,oBAGAm3C,EAAAg2F,mBAAA,CACAntI,KAAA+uE,EAAA/uE,KACAmpB,IAAA4lD,EAAA5lD,KAEA,UAAA4lD,EAAA/uE,KACAm3C,EAAA05F,sBAAA,qBAEA15F,EAAA05F,sBAAA,UAEAltJ,OAAAq5B,KAAA+d,GAAAnrC,QAAA,SAAAoV,GACA,IAAA6V,EAAAkgB,EAAA/1B,GACA,GAAA6V,EAAAkjB,YAAAnyC,OAAA,CACA,QAAAurD,EAAA81F,cAAA//I,QAAA2tB,GAAA,CACAs8B,EAAA81F,cAAAxgJ,KAAAouB,GACA,IAAA4I,EAAA,IAAAwiH,MAAA,aACAxiH,EAAA5I,SACAh4B,EAAA0L,WAAA,WACA4oD,EAAAy1F,eAAA,YAAAnpH,KAIAqtH,EAAAlhJ,QAAA,SAAAw6B,GACA,IAAAoR,EAAApR,EAAA,GACA6nB,EAAA7nB,EAAA,GACAvP,EAAAhtB,KAAAu8B,EAAA,GAAAv8B,IAGA6+I,EAAAv1F,EAAA3b,EAAAyW,EAAA,CAAAp3B,SAIAi2H,EAAAlhJ,QAAA,SAAAw6B,GACAA,EAAA,IAGAsiH,EAAAv1F,EAAA/sB,EAAA,GAAAA,EAAA,SAKAvnC,EAAA0L,WAAA,WACA4oD,KAAA42F,cAGA52F,EAAA42F,aAAAn+I,QAAA,SAAA0hF,GACAA,EAAAy6D,cACA,QAAAz6D,EAAAy6D,aAAA14F,OACAi+B,EAAAy6D,aAAAE,sBAAArgJ,OAAA,IACAuS,QAAAI,KAAA,sFAEA+yE,EAAAy6D,aAAAI,mBAAA,QAGK,KAELpyG,QAAAC,WAGAlD,EAAAjyC,UAAAqvB,MAAA,WACAvlB,KAAAo/I,aAAAn+I,QAAA,SAAA0hF,GAMAA,EAAAy6D,cACAz6D,EAAAy6D,aAAAzuH,OAEAg0D,EAAAG,eACAH,EAAAG,cAAAn0D,OAEAg0D,EAAAI,WACAJ,EAAAI,UAAAp0D,OAEAg0D,EAAAK,aACAL,EAAAK,YAAAr0D,SAIA3uB,KAAAw/I,WAAA,EACAx/I,KAAAkiJ,sBAAA,WAIA/5G,EAAAjyC,UAAAgsJ,sBAAA,SAAAxmF,GACA17D,KAAAggE,eAAAtE,EACA,IAAA5mC,EAAA,IAAAwiH,MAAA,wBACAt3I,KAAAi+I,eAAA,uBAAAnpH,IAIAqT,EAAAjyC,UAAAqqJ,4BAAA,WACA,IAAA/3F,EAAAxoD,KACA,WAAAA,KAAAggE,iBAAA,IAAAhgE,KAAAo+I,kBAGAp+I,KAAAo+I,iBAAA,EACAlqJ,EAAA0L,WAAA,WACA,GAAA4oD,EAAA41F,gBAAA,CACA51F,EAAA41F,iBAAA,EACA,IAAAtpH,EAAA,IAAAwiH,MAAA,qBACA9uF,EAAAy1F,eAAA,oBAAAnpH,KAEK,KAILqT,EAAAjyC,UAAAorJ,0BAAA,WACA,IAAA5lF,EACAmnF,EAAA,CACAC,IAAA,EACA/kF,OAAA,EACAglF,SAAA,EACAhvI,UAAA,EACA0sG,UAAA,EACAuiC,aAAA,EACAC,OAAA,GAuBA,GArBAjjJ,KAAAo/I,aAAAn+I,QAAA,SAAA0hF,GACAA,EAAAy6D,eAAAz6D,EAAAo/D,UACAc,EAAAlgE,EAAAy6D,aAAA14F,WAIAgX,EAAA,MACAmnF,EAAAI,OAAA,EACAvnF,EAAA,SACKmnF,EAAAE,SAAA,EACLrnF,EAAA,WACKmnF,EAAAG,aAAA,EACLtnF,EAAA,eACKmnF,EAAAC,IAAA,EACLpnF,EAAA,MACKmnF,EAAA9uI,UAAA,EACL2nD,EAAA,YACKmnF,EAAApiC,UAAA,IACL/kD,EAAA,aAGAA,IAAA17D,KAAAogE,mBAAA,CACApgE,KAAAogE,mBAAA1E,EACA,IAAA5mC,EAAA,IAAAwiH,MAAA,4BACAt3I,KAAAi+I,eAAA,2BAAAnpH,KAKAqT,EAAAjyC,UAAAqrJ,uBAAA,WACA,IAAA7lF,EACAmnF,EAAA,CACAC,IAAA,EACA/kF,OAAA,EACAmlF,WAAA,EACAnvI,UAAA,EACA0sG,UAAA,EACAuiC,aAAA,EACAC,OAAA,GAyBA,GAvBAjjJ,KAAAo/I,aAAAn+I,QAAA,SAAA0hF,GACAA,EAAAy6D,cAAAz6D,EAAAG,gBACAH,EAAAo/D,WACAc,EAAAlgE,EAAAy6D,aAAA14F,SACAm+F,EAAAlgE,EAAAG,cAAAp+B,YAIAm+F,EAAA9uI,WAAA8uI,EAAApiC,UAEA/kD,EAAA,MACAmnF,EAAAI,OAAA,EACAvnF,EAAA,SACKmnF,EAAAK,WAAA,EACLxnF,EAAA,aACKmnF,EAAAG,aAAA,EACLtnF,EAAA,eACKmnF,EAAAC,IAAA,EACLpnF,EAAA,MACKmnF,EAAA9uI,UAAA,IACL2nD,EAAA,aAGAA,IAAA17D,KAAAigE,gBAAA,CACAjgE,KAAAigE,gBAAAvE,EACA,IAAA5mC,EAAA,IAAAwiH,MAAA,yBACAt3I,KAAAi+I,eAAA,wBAAAnpH,KAIAqT,EAAAjyC,UAAA8sE,YAAA,WACA,IAAAxa,EAAAxoD,KAEA,GAAAwoD,EAAAg3F,UACA,OAAAp0G,QAAAE,OAAAmyG,EAAA,oBACA,yCAGA,IAAA0F,EAAA36F,EAAA42F,aAAAjmH,OAAA,SAAA3jC,GACA,gBAAAA,EAAA6wC,OACKppC,OACLmmJ,EAAA56F,EAAA42F,aAAAjmH,OAAA,SAAA3jC,GACA,gBAAAA,EAAA6wC,OACKppC,OAGLujI,EAAA3iI,UAAA,GACA,GAAA2iI,EAAA,CAEA,GAAAA,EAAA59F,WAAA49F,EAAA39F,SACA,UAAAxhC,UACA,6DAEAvG,IAAA0lI,EAAA9hB,sBAEAykC,GADA,IAAA3iB,EAAA9hB,oBACA,GACS,IAAA8hB,EAAA9hB,oBACT,EAEA8hB,EAAA9hB,0BAGA5jH,IAAA0lI,EAAA7hB,sBAEAykC,GADA,IAAA5iB,EAAA7hB,oBACA,GACS,IAAA6hB,EAAA7hB,oBACT,EAEA6hB,EAAA7hB,qBAoBA,IAfAn2D,EAAA42F,aAAAn+I,QAAA,SAAA0hF,GACA,UAAAA,EAAAt8C,OACA88G,EACA,IACAxgE,EAAA09D,aAAA,GAEO,UAAA19D,EAAAt8C,QACP+8G,EACA,IACAzgE,EAAA09D,aAAA,KAMA8C,EAAA,GAAAC,EAAA,GACAD,EAAA,IACA36F,EAAAw3F,mBAAA,SACAmD,KAEAC,EAAA,IACA56F,EAAAw3F,mBAAA,SACAoD,KAIA,IAAA5oH,EAAAwiD,EAAAsF,wBAAA95B,EAAA62F,cACA72F,EAAA82F,sBACA92F,EAAA42F,aAAAn+I,QAAA,SAAA0hF,EAAA1hB,GAGA,IAAAp0B,EAAA81C,EAAA91C,MACAxG,EAAAs8C,EAAAt8C,KACAoS,EAAAkqC,EAAAlqC,KAAAukC,EAAAC,qBACA0F,EAAAlqC,MAEAkqC,EAAAC,cACAD,EAAAC,YAAAp6B,EAAAk4F,mBAAAz/E,EACAzY,EAAAk2F,cAGA,IAAArC,EAAAnoJ,EAAA+jJ,aAAAyK,gBAAAr8G,GAGA0lC,EAAA,QACAswE,EAAAh8D,OAAAg8D,EAAAh8D,OAAAlnD,OACA,SAAA6B,GACA,cAAAA,EAAAnmC,QAGAwnJ,EAAAh8D,OAAAp/E,QAAA,SAAA+5B,GAGA,SAAAA,EAAAnmC,WACAiG,IAAAkgC,EAAA6jD,WAAA,6BACA7jD,EAAA6jD,WAAA,gCAKA8D,EAAA25D,oBACA35D,EAAA25D,mBAAAj8D,QACAsC,EAAA25D,mBAAAj8D,OAAAp/E,QAAA,SAAAoiJ,GACAroH,EAAAnmC,KAAAmZ,gBAAAq1I,EAAAxuJ,KAAAmZ,eACAgtB,EAAAqjD,YAAAglE,EAAAhlE,YACArjD,EAAAwjD,qBAAA6kE,EAAAvoH,iBAKAuhH,EAAA/7D,iBAAAr/E,QAAA,SAAAqiJ,IACA3gE,EAAA25D,oBACA35D,EAAA25D,mBAAAh8D,kBAAA,IACAr/E,QAAA,SAAAsiJ,GACAD,EAAAnkJ,MAAAokJ,EAAApkJ,MACAmkJ,EAAApkJ,GAAAqkJ,EAAArkJ,QAMA,IAAA+jF,EAAAN,EAAAM,wBAAA,EACAryD,KAAA,QAAAqwC,EAAA,KAEAp0B,GAEAk/B,GAAA,iBAAA1lC,IACA48C,EAAA,GAAA3B,MACA2B,EAAA,GAAA3B,IAAA,CACA1wD,KAAAqyD,EAAA,GAAAryD,KAAA,IAKA+xD,EAAA09D,cACA19D,EAAAK,YAAA,IAAA9uF,EAAAuuJ,eACA9/D,EAAAG,cAAAz8C,IAGAs8C,EAAA05D,oBACA15D,EAAAM,2BAIA,eAAAz6B,EAAA22F,QAAAR,eACAnkH,GAAA,kBAAAguB,EAAA42F,aAAAriJ,IAAA,SAAAvH,GACA,OAAAA,EAAAijD,MACOj7C,KAAA,aAEPg9B,GAAA,4BAEAguB,EAAA42F,aAAAn+I,QAAA,SAAA0hF,EAAA1hB,GACAzmC,GAAAkoD,EAAAC,IAAA05D,kBACA,QAAA15D,EAAAz2D,OAAAs8B,EAAA+2F,WACA/kH,GAAA,oBAEAmoD,EAAAC,aAAA,QAAAp6B,EAAAi2F,mBACA,IAAAx9E,GAAAzY,EAAAk2F,cACA/7D,EAAAC,YAAA4gE,qBAAAviJ,QAAA,SAAA22B,GACAA,EAAAN,UAAA,EACAkD,GAAA,KAAAwiD,EAAAgB,eAAApmD,GAAA,SAGA,cAAA+qD,EAAAC,YAAAl+B,QACAlqB,GAAA,8BAKA,IAAAzC,EAAA,IAAA7jC,EAAAyyE,sBAAA,CACAt1D,KAAA,QACAmpB,QAEA,OAAA4Q,QAAAC,QAAAtT,IAGAoQ,EAAAjyC,UAAA8wE,aAAA,WACA,IAAAxe,EAAAxoD,KAEA,GAAAwoD,EAAAg3F,UACA,OAAAp0G,QAAAE,OAAAmyG,EAAA,oBACA,0CAGA,yBAAAj1F,EAAAwX,gBACA,wBAAAxX,EAAAwX,eACA,OAAA50B,QAAAE,OAAAmyG,EAAA,oBACA,+CAAAj1F,EAAAwX,iBAGA,IAAAxlC,EAAAwiD,EAAAsF,wBAAA95B,EAAA62F,cACA72F,EAAA82F,sBACA92F,EAAAk2F,cACAlkH,GAAA,kBAAAguB,EAAA42F,aAAAriJ,IAAA,SAAAvH,GACA,OAAAA,EAAAijD,MACOj7C,KAAA,aAEPg9B,GAAA,4BAEA,IAAAipH,EAAAzmE,EAAAQ,iBACAh1B,EAAAg2F,mBAAAhkH,KAAAv9B,OACAurD,EAAA42F,aAAAn+I,QAAA,SAAA0hF,EAAA1hB,GACA,KAAAA,EAAA,EAAAwiF,GAAA,CAGA,GAAA9gE,EAAAo/D,SAkBA,MAjBA,gBAAAp/D,EAAAt8C,KACA,cAAAs8C,EAAA/vE,SACA4nB,GAAA,qCAEAA,GAAA,mBAAAmoD,EAAA/vE,SACA,0BAES,UAAA+vE,EAAAt8C,KACT7L,GAAA,4DAES,UAAAmoD,EAAAt8C,OACT7L,GAAA,sEAGAA,GAAA,2CAEAmoD,EAAAlqC,IAAA,QAMA,IAAA5G,EADA,GAAA8wC,EAAAz2D,OAEA,UAAAy2D,EAAAt8C,KACAwL,EAAA8wC,EAAAz2D,OAAA2Z,iBAAA,GACS,UAAA88C,EAAAt8C,OACTwL,EAAA8wC,EAAAz2D,OAAA6Z,iBAAA,IAEA8L,GAEAk6B,GAAA,iBAAA4W,EAAAt8C,OACAs8C,EAAAM,uBAAA,GAAA3B,MACAqB,EAAAM,uBAAA,GAAA3B,IAAA,CACA1wD,KAAA+xD,EAAAM,uBAAA,GAAAryD,KAAA,IAOA,IAAA2rH,EAAAH,EACAz5D,EAAA05D,kBACA15D,EAAA25D,qBAEAC,EAAAl8D,OAAAlnD,OAAA,SAAAxkC,GACA,cAAAA,EAAAE,KAAAmZ,gBACO/Q,QACP0lF,EAAAM,uBAAA,GAAA3B,YACAqB,EAAAM,uBAAA,GAAA3B,IAGA9mD,GAAAkoD,EAAAC,EAAA45D,EACA,SAAA55D,EAAAz2D,OAAAs8B,EAAA+2F,WACA58D,EAAAjB,gBACAiB,EAAAjB,eAAAI,cACAtnD,GAAA,uBAIA,IAAAzC,EAAA,IAAA7jC,EAAAyyE,sBAAA,CACAt1D,KAAA,SACAmpB,QAEA,OAAA4Q,QAAAC,QAAAtT,IAGAoQ,EAAAjyC,UAAAgsE,gBAAA,SAAA/qC,GACA,IACAomD,EADA/0B,EAAAxoD,KAEA,OAAAm3B,QAAAr8B,IAAAq8B,EAAA8pC,gBACA9pC,EAAAsqC,OACAr2B,QAAAE,OAAA,IAAAjqC,UAAA,qCAIA,IAAA+pC,QAAA,SAAAC,EAAAC,GACA,IAAAkd,EAAAg2F,mBACA,OAAAlzG,EAAAmyG,EAAA,oBACA,2DACO,GAAAtmH,GAAA,KAAAA,YAeA,CACP,IAAA8pC,EAAA9pC,EAAA8pC,cACA,GAAA9pC,EAAAsqC,OACA,QAAAntE,EAAA,EAAyBA,EAAAk0D,EAAA42F,aAAAniJ,OAA4B3I,IACrD,GAAAk0D,EAAA42F,aAAA9qJ,GAAAmkD,MAAAthB,EAAAsqC,OAAA,CACAR,EAAA3sE,EACA,MAIA,IAAAquF,EAAAn6B,EAAA42F,aAAAn+E,GACA,IAAA0hB,EAqCA,OAAAr3C,EAAAmyG,EAAA,iBACA,8BArCA,GAAA96D,EAAAo/D,SACA,OAAA12G,IAEA,IAAAzT,EAAA5iC,OAAAq5B,KAAA8I,aAAAl6B,OAAA,EACA+/E,EAAAU,eAAAvmD,aAAA,GAEA,WAAAS,EAAAhlB,WAAA,IAAAglB,EAAAvB,MAAA,IAAAuB,EAAAvB,MACA,OAAAgV,IAGA,GAAAzT,EAAAN,WAAA,IAAAM,EAAAN,UACA,OAAA+T,IAIA,QAAA41B,KAAA,GACA0hB,EAAAy6D,eAAA50F,EAAA42F,aAAA,GAAAhC,gBACAD,EAAAx6D,EAAAy6D,aAAAxlH,GACA,OAAA0T,EAAAmyG,EAAA,iBACA,8BAKA,IAAAiG,EAAAvsH,YAAAq6B,OACA,IAAAkyF,EAAAnlJ,QAAA,QACAmlJ,IAAAnlI,OAAA,KAEAg/D,EAAAP,EAAAQ,iBAAAh1B,EAAAg2F,mBAAAhkH,MACAymC,IAAA,MACArpC,EAAAvmB,KAAAqyI,EAAA,qBACA,OACAl7F,EAAAg2F,mBAAAhkH,IACAwiD,EAAAM,eAAA90B,EAAAg2F,mBAAAhkH,KACA+iD,EAAA//E,KAAA,SA5DA,QAAAb,EAAA,EAAuBA,EAAA6rD,EAAA42F,aAAAniJ,SACvBurD,EAAA42F,aAAAziJ,GAAAolJ,WAGAv5F,EAAA42F,aAAAziJ,GAAAygJ,aAAAI,mBAAA,KACAjgE,EAAAP,EAAAQ,iBAAAh1B,EAAAg2F,mBAAAhkH,MACA79B,IAAA,0BACA6rD,EAAAg2F,mBAAAhkH,IACAwiD,EAAAM,eAAA90B,EAAAg2F,mBAAAhkH,KACA+iD,EAAA//E,KAAA,KACAgrD,EAAAk2F,cAVmD/hJ,KAkEnD0uC,OAIAlD,EAAAjyC,UAAA2jG,SAAA,SAAA+/C,GACA,GAAAA,gBAAA1lJ,EAAAwnJ,iBAAA,CACA,IAAAiI,EAAA,KAUA,GATA3jJ,KAAAo/I,aAAAn+I,QAAA,SAAA0hF,GACAA,EAAAI,WACAJ,EAAAI,UAAAl2C,QAAA+sG,EACA+J,EAAAhhE,EAAAI,UACSJ,EAAAK,aACTL,EAAAK,YAAAn2C,QAAA+sG,IACA+J,EAAAhhE,EAAAK,gBAGA2gE,EACA,MAAAlG,EAAA,0CAEA,OAAAkG,EAAA9pD,WAGA,IAAA5d,EAAA,GASA,OARAj8E,KAAAo/I,aAAAn+I,QAAA,SAAA0hF,GACA,wDACA,iBAAA1hF,QAAA,SAAAgpG,GACAtnB,EAAAsnB,IACAhuB,EAAAn+E,KAAA6kF,EAAAsnB,GAAApQ,gBAIAzuD,QAAAsL,IAAAulC,GAAAl0C,KAAA,SAAA67G,GACA,IAAA1nE,EAAA,IAAA5xD,IAMA,OALAs5H,EAAA3iJ,QAAA,SAAA4yB,GACAA,EAAA5yB,QAAA,SAAA4uG,GACA3zB,EAAAnwD,IAAA8jF,EAAA3wG,GAAA2wG,OAGA3zB,KAKA,kDACA,sCACAj7E,QAAA,SAAA4iJ,GACA,IAAA9nJ,EAAA7H,EAAA2vJ,GACA,GAAA9nJ,KAAA7F,WAAA6F,EAAA7F,UAAA2jG,SAAA,CACA,IAAAiqD,EAAA/nJ,EAAA7F,UAAA2jG,SACA99F,EAAA7F,UAAA2jG,SAAA,WACA,OAAAiqD,EAAA/lJ,MAAAiC,MACA+nC,KAAA,SAAAg8G,GACA,IAAAC,EAAA,IAAA15H,IAKA,OAJAt1B,OAAAq5B,KAAA01H,GAAA9iJ,QAAA,SAAA/B,GA1uDA,IAAA2wG,EA2uDAk0C,EAAA7kJ,GAAAmS,KA1uDA,CACA4yI,WAAA,cACAC,YAAA,eACAC,cAAA,iBACAnK,eAAA,kBACAC,gBAAA,qBANApqC,EA2uDAk0C,EAAA7kJ,IApuDGmS,OAAAw+F,EAAAx+F,KAquDH2yI,EAAAj4H,IAAA7sB,EAAA6kJ,EAAA7kJ,MAEA8kJ,QAOA,IAAAnnE,EAAA,+BA8DA,OA7DAA,EAAA57E,QAAA,SAAAgpG,GACA,IAAA4uC,EAAA1wG,EAAAjyC,UAAA+zG,GACA9hE,EAAAjyC,UAAA+zG,GAAA,WACA,IAAArsG,EAAAC,UACA,yBAAAD,EAAA,IACA,mBAAAA,EAAA,GACAi7I,EAAA96I,MAAAiC,KAAA,CAAAnC,UAAA,KACAkqC,KAAA,SAAAq4C,GACA,mBAAAxiF,EAAA,IACAA,EAAA,GAAAG,MAAA,MAAAqiF,KAES,SAAA3wE,GACT,mBAAA7R,EAAA,IACAA,EAAA,GAAAG,MAAA,MAAA0R,MAIAopI,EAAA96I,MAAAiC,KAAAnC,eAIAg/E,EAAA,kEACA57E,QAAA,SAAAgpG,GACA,IAAA4uC,EAAA1wG,EAAAjyC,UAAA+zG,GACA9hE,EAAAjyC,UAAA+zG,GAAA,WACA,IAAArsG,EAAAC,UACA,yBAAAD,EAAA,IACA,mBAAAA,EAAA,GACAi7I,EAAA96I,MAAAiC,KAAAnC,WACAkqC,KAAA,WACA,mBAAAnqC,EAAA,IACAA,EAAA,GAAAG,MAAA,OAES,SAAA0R,GACT,mBAAA7R,EAAA,IACAA,EAAA,GAAAG,MAAA,MAAA0R,MAIAopI,EAAA96I,MAAAiC,KAAAnC,cAMA,aAAAoD,QAAA,SAAAgpG,GACA,IAAA4uC,EAAA1wG,EAAAjyC,UAAA+zG,GACA9hE,EAAAjyC,UAAA+zG,GAAA,WACA,IAAArsG,EAAAC,UACA,yBAAAD,EAAA,GACAi7I,EAAA96I,MAAAiC,KAAAnC,WACAkqC,KAAA,WACA,mBAAAnqC,EAAA,IACAA,EAAA,GAAAG,MAAA,QAIA86I,EAAA96I,MAAAiC,KAAAnC,cAIAsqC,iCCpzDAp0C,EAAAD,QAAA,SAAAI,GACA,IAAA2zC,EAAA3zC,KAAA2zC,UAcA+zG,EAAA/zG,EAAAC,aAAAyD,aACAz1C,KAAA+xC,EAAAC,cACAD,EAAAC,aAAAyD,aAAA,SAAA52C,GACA,OAAAinJ,EAAAjnJ,GAAA62C,MAAA,SAAAvsC,GACA,OAAAmsC,QAAAE,OAhBA,SAAArsC,GACA,OACApK,KAAA,CAAaomJ,sBAAA,mBAAyCh8I,EAAApK,OAAAoK,EAAApK,KACtDqa,QAAAjQ,EAAAiQ,QACAsoC,WAAAv4C,EAAAu4C,WACA/2C,SAAA,WACA,OAAAT,KAAAnL,OAUAmmJ,CAAA/7I,sCCpBA,IAAAsH,EAAYnS,EAAQ,IAEpByhJ,EAAA,CACAQ,YAAA,SAAAniJ,GACA,iBAAAA,MAAAi0C,mBAAA,YACAj0C,EAAAi0C,kBAAAjyC,WACAlB,OAAAC,eAAAf,EAAAi0C,kBAAAjyC,UAAA,WACAf,IAAA,WACA,OAAA6K,KAAAi3I,UAEAlrH,IAAA,SAAAhtB,GACAiB,KAAAi3I,WACAj3I,KAAAigD,oBAAA,QAAAjgD,KAAAi3I,UACAj3I,KAAAigD,oBAAA,YAAAjgD,KAAAm3I,eAEAn3I,KAAAqqC,iBAAA,QAAArqC,KAAAi3I,SAAAl4I,GACAiB,KAAAqqC,iBAAA,YAAArqC,KAAAm3I,aAAA,SAAAl4I,GACAA,EAAAitB,OAAAkjB,YAAAnuC,QAAA,SAAA4rC,GACA,IAAA/X,EAAA,IAAAwiH,MAAA,SACAxiH,EAAA+X,QACA/X,EAAAwuB,SAAA,CAAgCzW,SAChC/X,EAAA6tD,YAAA,CAAmCr/B,SAAAxuB,EAAAwuB,UACnCxuB,EAAAsX,QAAA,CAAAntC,EAAAitB,QACAlsB,KAAAu3I,cAAAziH,IACah/B,KAAAkK,QACFlK,KAAAkK,UAIX,iBAAA9L,KAAAkwJ,eACA,aAAAlwJ,EAAAkwJ,cAAAluJ,aACA,gBAAAhC,EAAAkwJ,cAAAluJ,YACAlB,OAAAC,eAAAf,EAAAkwJ,cAAAluJ,UAAA,eACAf,IAAA,WACA,OAAkBmuD,SAAAtjD,KAAAsjD,cAMlB8yF,iBAAA,SAAAliJ,GAEA,iBAAAA,KACAA,EAAAikJ,kBACA,cAAAjkJ,EAAAikJ,iBAAAjiJ,WAEAlB,OAAAC,eAAAf,EAAAikJ,iBAAAjiJ,UAAA,aACAf,IAAA,WACA,OAAA6K,KAAAqkJ,cAEAt4H,IAAA,SAAAG,GACAlsB,KAAAqkJ,aAAAn4H,OAOA8pH,mBAAA,SAAA9hJ,GACA,IAAAuhJ,EAAAlvI,EAAA2wD,cAAAhjE,GAEA,oBAAAA,MAAAi0C,mBACAj0C,EAAAowJ,sBADA,CAKApwJ,EAAAi0C,oBACAj0C,EAAAi0C,kBAAA,SAAAoxG,EAAAhvG,GACA,GAAAkrG,EAAAzxH,QAAA,IAGAu1H,KAAA5oF,WAAA,CAEA,IADA,IAAA6oF,EAAA,GACAllJ,EAAA,EAA2BA,EAAAilJ,EAAA5oF,WAAA1zD,OAAgC3I,IAAA,CAC3D,IAAAs2D,EAAA2uF,EAAA5oF,WAAAr8D,GACA,GAAAs2D,EAAAz0D,eAAA,QACA,QAAAwG,EAAA,EAA+BA,EAAAiuD,EAAAmB,KAAA9uD,OAAwBN,IAAA,CACvD,IAAA4nJ,EAAA,CACAz0G,IAAA8a,EAAAmB,KAAApvD,IAEA,IAAAiuD,EAAAmB,KAAApvD,GAAA4B,QAAA,UACAgmJ,EAAA3jG,SAAAgK,EAAAhK,SACA2jG,EAAA3kC,WAAAh1D,EAAAg1D,YAEA45B,EAAA17I,KAAAymJ,QAGA/K,EAAA17I,KAAAy7I,EAAA5oF,WAAAr8D,IAGAilJ,EAAA5oF,WAAA6oF,EAGA,WAAAtlJ,EAAAowJ,qBAAA/K,EAAAhvG,IAEAr2C,EAAAi0C,kBAAAjyC,UACAhC,EAAAowJ,qBAAApuJ,UAGAhC,EAAAowJ,qBAAA7K,qBACAzkJ,OAAAC,eAAAf,EAAAi0C,kBAAA,uBACAhzC,IAAA,WACA,OAAAjB,EAAAowJ,qBAAA7K,uBAKAvlJ,EAAAyyE,sBAAAzyE,EAAAswJ,yBACAtwJ,EAAA6tE,gBAAA7tE,EAAAuwJ,oBAIA,iEACAxjJ,QAAA,SAAAgpG,GACA,IAAA4uC,EAAA3kJ,EAAAi0C,kBAAAjyC,UAAA+zG,GACA/1G,EAAAi0C,kBAAAjyC,UAAA+zG,GAAA,WAIA,OAHApsG,UAAA,2BAAAosG,EACA/1G,EAAA6tE,gBACA7tE,EAAAyyE,uBAAA9oE,UAAA,IACAg7I,EAAA96I,MAAAiC,KAAAnC,cAKA,IAAAs8I,EACAjmJ,EAAAi0C,kBAAAjyC,UAAAgsE,gBACAhuE,EAAAi0C,kBAAAjyC,UAAAgsE,gBAAA,WACA,OAAArkE,UAAA,GAMAs8I,EAAAp8I,MAAAiC,KAAAnC,YALAA,UAAA,IACAA,UAAA,GAAAE,MAAA,MAEAqtC,QAAAC,YAMA,IASAq5G,EAAA,CACAT,WAAA,cACAC,YAAA,eACAC,cAAA,iBACAnK,eAAA,kBACAC,gBAAA,oBAGA0K,EAAAzwJ,EAAAi0C,kBAAAjyC,UAAA2jG,SACA3lG,EAAAi0C,kBAAAjyC,UAAA2jG,SAAA,SACA+/C,EACAgL,EACAC,GAEA,OAAAF,EAAA5mJ,MAAAiC,KAAA,CAAA45I,GAAA,OACA7xG,KAAA,SAAAlU,GAIA,GAHA4hH,EAAAzxH,QAAA,KACA6P,EA1BA,SAAAA,GACA,IAAA92B,EAAA,IAAAutB,IAKA,OAJAt1B,OAAAq5B,KAAAwF,GAAA5yB,QAAA,SAAApL,GACAkH,EAAAgvB,IAAAl2B,EAAAg+B,EAAAh+B,IACAkH,EAAAlH,GAAAg+B,EAAAh+B,KAEAkH,EAoBAm9I,CAAArmH,IAEA4hH,EAAAzxH,QAAA,KAAA4gI,EAGA,IACA/wH,EAAA5yB,QAAA,SAAA4uG,GACAA,EAAAx+F,KAAAqzI,EAAA70C,EAAAx+F,OAAAw+F,EAAAx+F,OAEa,MAAApS,GACb,iBAAAA,EAAApK,KACA,MAAAoK,EAGA40B,EAAA5yB,QAAA,SAAA4uG,EAAAv7G,GACAu/B,EAAA9H,IAAAz3B,EAAAU,OAAAikF,OAAA,GAA6C42B,EAAA,CAC7Cx+F,KAAAqzI,EAAA70C,EAAAx+F,OAAAw+F,EAAAx+F,UAKA,OAAAwiB,IAEAkU,KAAA68G,EAAAC,OAMA9wJ,EAAAD,QAAA,CACAuiJ,YAAAR,EAAAQ,YACAD,iBAAAP,EAAAO,iBACAJ,mBAAAH,EAAAG,mBACAE,iBAAoB9hJ,EAAQ,oCCpM5B,IAAAmS,EAAYnS,EAAQ,IACpBohJ,EAAAjvI,EAAA8I,IAGAtb,EAAAD,QAAA,SAAAI,GACA,IAAAuhJ,EAAAlvI,EAAA2wD,cAAAhjE,GACA2zC,EAAA3zC,KAAA2zC,UACA6zG,EAAAxnJ,KAAAwnJ,iBAEAV,EAAA,SAAA/7I,GACA,OACApK,KAAA,CACAiwJ,cAAA,mBACApH,kBAAA,YACAzC,sBAAA,kBACA8J,cAAA,mBACO9lJ,EAAApK,OAAAoK,EAAApK,KACPqa,QAAA,CACA81I,6BAAA,wFAEO/lJ,EAAAiQ,UAAAjQ,EAAAiQ,QACPsoC,WAAAv4C,EAAAu4C,WACA/2C,SAAA,WACA,OAAAT,KAAAnL,MAAAmL,KAAAkP,SAAA,MAAAlP,KAAAkP,WAMA+1I,EAAA,SAAAvyH,EAAA/V,EAAAy9F,GACA,IAAA8qC,EAAA,SAAAvwJ,GACA,oBAAAA,KAAAqG,QACA,OAAArG,EAEA,IAAAqG,EAAA,GAqCA,OApCAhG,OAAAq5B,KAAA15B,GAAAsM,QAAA,SAAApL,GACA,eAAAA,GAAA,aAAAA,GAAA,gBAAAA,EAAA,CAGA,IAAAT,EAAAT,EAAAkB,GAAA,iBAAAlB,EAAAkB,GACAlB,EAAAkB,GAAA,CAAsB4rC,MAAA9sC,EAAAkB,IAatB,QAZAiF,IAAA1F,EAAAquB,UACA3oB,IAAA1F,EAAAssC,UAAA5mC,IAAA1F,EAAA85C,OACAl0C,EAAA8C,KAAAjI,QAEAiF,IAAA1F,EAAA85C,QACA,iBAAA95C,EAAA85C,MACA95C,EAAAquB,IAAAruB,EAAAssC,IAAAtsC,EAAA85C,MAEAv6C,EAAAkB,GAAAT,EAAA85C,aAEA95C,EAAA85C,YAEAp0C,IAAA1F,EAAAqsC,MAAA,CACA9sC,EAAA8lJ,SAAA9lJ,EAAA8lJ,UAAA,GACA,IAAAF,EAAA,GACA,iBAAAnlJ,EAAAqsC,MACA84G,EAAA1kJ,GAAA,CAAuB4tB,IAAAruB,EAAAqsC,MAAAC,IAAAtsC,EAAAqsC,OAEvB84G,EAAA1kJ,GAAAT,EAAAqsC,MAEA9sC,EAAA8lJ,SAAA38I,KAAAy8I,UACAnlJ,EAAAqsC,MACAzsC,OAAAq5B,KAAAj5B,GAAA6H,eACAtI,EAAAkB,OAIAmF,EAAAiC,SACAtI,EAAAqG,WAEArG,GAaA,OAXA+9B,EAAA9b,KAAAwK,MAAAxK,KAAA0K,UAAAoR,IACA+iH,EAAAzxH,QAAA,KACAwxH,EAAA,SAAA5+H,KAAA0K,UAAAoR,IACAA,EAAA8P,QACA9P,EAAA8P,MAAA0iH,EAAAxyH,EAAA8P,QAEA9P,EAAA4O,QACA5O,EAAA4O,MAAA4jH,EAAAxyH,EAAA4O,QAEAk0G,EAAA,SAAA5+H,KAAA0K,UAAAoR,KAEAmV,EAAAsvB,gBAAAzkC,EAAA/V,EAAA,SAAA1d,GACAm7G,EAAA4gC,EAAA/7I,OA6BA,GAjBA4oC,EAAAC,eACAD,EAAAC,aAAA,CAA8ByD,aAR9B,SAAA7Y,GACA,WAAA0Y,QAAA,SAAAC,EAAAC,GACA25G,EAAAvyH,EAAA2Y,EAAAC,MAOAjB,iBAAA,aACA4V,oBAAA,eAGApY,EAAAC,aAAAF,iBACAC,EAAAC,aAAAF,kBAAA,WACA,WAAAwD,QAAA,SAAAC,GAKAA,EAJA,CACA,CAAahF,KAAA,aAAAtD,SAAA,UAAAoE,MAAA,GAAAH,QAAA,IACb,CAAaX,KAAA,aAAAtD,SAAA,UAAAoE,MAAA,GAAAH,QAAA,SAMbyuG,EAAAzxH,QAAA,IAEA,IAAAmhI,EACAt9G,EAAAC,aAAAF,iBAAA9xC,KAAA+xC,EAAAC,cACAD,EAAAC,aAAAF,iBAAA,WACA,OAAAu9G,IAAAp9G,UAAAjtC,EAAA,SAAAmE,GACA,qBAAAA,EAAApK,KACA,SAEA,MAAAoK,KAIA,GAAAw2I,EAAAzxH,QAAA,IACA,IAAA43H,EAAA/zG,EAAAC,aAAAyD,aACAz1C,KAAA+xC,EAAAC,cACAD,EAAAC,aAAAyD,aAAA,SAAA52C,GACA,OAAAinJ,EAAAjnJ,GAAAozC,KAAA,SAAA7b,GAEA,GAAAv3B,EAAA6tC,QAAAtW,EAAA2Z,iBAAA5oC,QACAtI,EAAA2sC,QAAApV,EAAA6Z,iBAAA9oC,OAIA,MAHAivB,EAAAkjB,YAAAnuC,QAAA,SAAA4rC,GACAA,EAAAle,SAEA,IAAA+pH,aAAA,oCACA,iBAEA,OAAAxsH,GACO,SAAAjtB,GACP,OAAAmsC,QAAAE,OAAA0vG,EAAA/7I,OAIA,KAAAw2I,EAAAzxH,QAAA,IACA,oBAAA6jB,EAAAC,aAAAgzG,2BAAA,CACA,IAAAH,EAAA,SAAA5+I,EAAAiH,EAAAC,GACAD,KAAAjH,KAAAkH,KAAAlH,KACAA,EAAAkH,GAAAlH,EAAAiH,UACAjH,EAAAiH,KAIAoiJ,EAAAv9G,EAAAC,aAAAyD,aACAz1C,KAAA+xC,EAAAC,cAUA,GATAD,EAAAC,aAAAyD,aAAA,SAAA52C,GAMA,MALA,iBAAAA,GAAA,iBAAAA,EAAA6tC,QACA7tC,EAAAiiB,KAAAwK,MAAAxK,KAAA0K,UAAA3sB,IACAgmJ,EAAAhmJ,EAAA6tC,MAAA,wCACAm4G,EAAAhmJ,EAAA6tC,MAAA,2CAEA4iH,EAAAzwJ,IAGA+mJ,KAAAxlJ,UAAAi8C,YAAA,CACA,IAAAkzG,EAAA3J,EAAAxlJ,UAAAi8C,YACAupG,EAAAxlJ,UAAAi8C,YAAA,WACA,IAAAp2C,EAAAspJ,EAAAtnJ,MAAAiC,KAAAnC,WAGA,OAFA88I,EAAA5+I,EAAA,wCACA4+I,EAAA5+I,EAAA,0CACAA,GAIA,GAAA2/I,KAAAxlJ,UAAAm5C,iBAAA,CACA,IAAAi2G,EAAA5J,EAAAxlJ,UAAAm5C,iBACAqsG,EAAAxlJ,UAAAm5C,iBAAA,SAAA16C,GAMA,MALA,UAAAqL,KAAAqmC,MAAA,iBAAA1xC,IACAA,EAAAiiB,KAAAwK,MAAAxK,KAAA0K,UAAA3sB,IACAgmJ,EAAAhmJ,EAAA,wCACAgmJ,EAAAhmJ,EAAA,2CAEA2wJ,EAAAvnJ,MAAAiC,KAAA,CAAArL,MAIAkzC,EAAA0D,aAAA,SAAA7Y,EAAA/V,EAAAy9F,GACA,GAAAq7B,EAAAzxH,QAAA,GACA,OAAAihI,EAAAvyH,EAAA/V,EAAAy9F,GAGA7zG,EAAAqwD,WAAA,yBACA,uCACA/uB,EAAAC,aAAAyD,aAAA7Y,GAAAqV,KAAAprB,EAAAy9F,mCCtMA,IAAA7zG,EAAYnS,EAAQ,IAEpB0hJ,EAAA,CAOAc,oBAAA,SAAA1iJ,GACA,oBAAAA,KAAAi0C,kBAAA,CA+BA,GA5BA,oBAAAj0C,EAAAi0C,kBAAAjyC,YACAhC,EAAAi0C,kBAAAjyC,UAAAoiJ,gBAAA,WAIA,OAHAt4I,KAAAulJ,gBACAvlJ,KAAAulJ,cAAA,IAEAvlJ,KAAAulJ,gBAGA,kBAAArxJ,EAAAi0C,kBAAAjyC,YACAhC,EAAAi0C,kBAAAjyC,UAAAsvJ,cAAA,SAAAtmJ,GACA,IAAA4Q,EAAA,KAeA,OAdA9P,KAAAulJ,eACAvlJ,KAAAulJ,cAAAtkJ,QAAA,SAAAirB,GACAA,EAAAhtB,SACA4Q,EAAAoc,KAIAlsB,KAAAylJ,gBACAzlJ,KAAAylJ,eAAAxkJ,QAAA,SAAAirB,GACAA,EAAAhtB,SACA4Q,EAAAoc,KAIApc,MAGA,cAAA5b,EAAAi0C,kBAAAjyC,WAAA,CACA,IAAAwvJ,EAAAxxJ,EAAAi0C,kBAAAjyC,UAAAu2C,SACAv4C,EAAAi0C,kBAAAjyC,UAAA+7H,UAAA,SAAA/lG,GACAlsB,KAAAulJ,gBACAvlJ,KAAAulJ,cAAA,KAEA,IAAAvlJ,KAAAulJ,cAAAhnJ,QAAA2tB,IACAlsB,KAAAulJ,cAAAznJ,KAAAouB,GAEA,IAAAxJ,EAAA1iB,KACAksB,EAAAkjB,YAAAnuC,QAAA,SAAA4rC,GACA64G,EAAAjxJ,KAAAiuB,EAAAmqB,EAAA3gB,MAIAh4B,EAAAi0C,kBAAAjyC,UAAAu2C,SAAA,SAAAI,EAAA3gB,GACAA,IACAlsB,KAAAulJ,eAEW,IAAAvlJ,KAAAulJ,cAAAhnJ,QAAA2tB,IACXlsB,KAAAulJ,cAAAznJ,KAAAouB,GAFAlsB,KAAAulJ,cAAA,CAAAr5H,IAKAw5H,EAAAjxJ,KAAAuL,KAAA6sC,EAAA3gB,IAGA,iBAAAh4B,EAAAi0C,kBAAAjyC,YACAhC,EAAAi0C,kBAAAjyC,UAAAm8H,aAAA,SAAAnmG,GACAlsB,KAAAulJ,gBACAvlJ,KAAAulJ,cAAA,IAEA,IAAAjnJ,EAAA0B,KAAAulJ,cAAAhnJ,QAAA2tB,GACA,QAAA5tB,EAAA,CAGA0B,KAAAulJ,cAAAhoJ,OAAAe,EAAA,GACA,IAAAokB,EAAA1iB,KACAuzC,EAAArnB,EAAAkjB,YACApvC,KAAAyyH,aAAAxxH,QAAA,SAAAyxH,IACA,IAAAn/E,EAAAh1C,QAAAm0H,EAAA7lF,QACAnqB,EAAA+2D,YAAAi5C,UAMAmkB,qBAAA,SAAA3iJ,GACA,iBAAAA,KAAAi0C,oBAGA,qBAAAj0C,EAAAi0C,kBAAAjyC,YACAhC,EAAAi0C,kBAAAjyC,UAAA6pJ,iBAAA,WACA,OAAA//I,KAAAylJ,eAAAzlJ,KAAAylJ,eAAA,KAGA,gBAAAvxJ,EAAAi0C,kBAAAjyC,WACAlB,OAAAC,eAAAf,EAAAi0C,kBAAAjyC,UAAA,eACAf,IAAA,WACA,OAAA6K,KAAA2lJ,cAEA55H,IAAA,SAAAhtB,GACAiB,KAAA2lJ,eACA3lJ,KAAAigD,oBAAA,YAAAjgD,KAAA2lJ,cACA3lJ,KAAAigD,oBAAA,QAAAjgD,KAAA4lJ,mBAEA5lJ,KAAAqqC,iBAAA,YAAArqC,KAAA2lJ,aAAA5mJ,GACAiB,KAAAqqC,iBAAA,QAAArqC,KAAA4lJ,iBAAA,SAAA3mJ,GACA,IAAAitB,EAAAjtB,EAAAmtC,QAAA,GAIA,GAHApsC,KAAAylJ,iBACAzlJ,KAAAylJ,eAAA,MAEAzlJ,KAAAylJ,eAAAlnJ,QAAA2tB,IAAA,IAGAlsB,KAAAylJ,eAAA3nJ,KAAAouB,GACA,IAAA4I,EAAA,IAAAwiH,MAAA,aACAxiH,EAAA5I,OAAAjtB,EAAAmtC,QAAA,GACApsC,KAAAu3I,cAAAziH,KACWh/B,KAAAkK,YAKX22I,iBAAA,SAAAziJ,GACA,oBAAAA,KAAAi0C,kBAAA,CAGA,IAAAjyC,EAAAhC,EAAAi0C,kBAAAjyC,UACA8sE,EAAA9sE,EAAA8sE,YACAgE,EAAA9wE,EAAA8wE,aACA9D,EAAAhtE,EAAAgtE,oBACA6D,EAAA7wE,EAAA6wE,qBACA7E,EAAAhsE,EAAAgsE,gBAEAhsE,EAAA8sE,YAAA,SAAA90B,EAAA8vE,GACA,IAAA1sG,EAAAzT,UAAAZ,QAAA,EAAAY,UAAA,GAAAA,UAAA,GACAyyC,EAAA0yB,EAAAjlE,MAAAiC,KAAA,CAAAsR,IACA,OAAA0sG,GAGA1tE,EAAAvI,KAAAmG,EAAA8vE,GACA5yE,QAAAC,WAHAiF,GAMAp6C,EAAA8wE,aAAA,SAAA94B,EAAA8vE,GACA,IAAA1sG,EAAAzT,UAAAZ,QAAA,EAAAY,UAAA,GAAAA,UAAA,GACAyyC,EAAA02B,EAAAjpE,MAAAiC,KAAA,CAAAsR,IACA,OAAA0sG,GAGA1tE,EAAAvI,KAAAmG,EAAA8vE,GACA5yE,QAAAC,WAHAiF,GAMA,IAAAu1G,EAAA,SAAAzlE,EAAAlyC,EAAA8vE,GACA,IAAA1tE,EAAA4yB,EAAAnlE,MAAAiC,KAAA,CAAAogF,IACA,OAAA49B,GAGA1tE,EAAAvI,KAAAmG,EAAA8vE,GACA5yE,QAAAC,WAHAiF,GAKAp6C,EAAAgtE,oBAAA2iF,EAEAA,EAAA,SAAAzlE,EAAAlyC,EAAA8vE,GACA,IAAA1tE,EAAAy2B,EAAAhpE,MAAAiC,KAAA,CAAAogF,IACA,OAAA49B,GAGA1tE,EAAAvI,KAAAmG,EAAA8vE,GACA5yE,QAAAC,WAHAiF,GAKAp6C,EAAA6wE,qBAAA8+E,EAEAA,EAAA,SAAA1uH,EAAA+W,EAAA8vE,GACA,IAAA1tE,EAAA4xB,EAAAnkE,MAAAiC,KAAA,CAAAm3B,IACA,OAAA6mF,GAGA1tE,EAAAvI,KAAAmG,EAAA8vE,GACA5yE,QAAAC,WAHAiF,GAKAp6C,EAAAgsE,gBAAA2jF,IAEA3P,iBAAA,SAAAhiJ,GACA,IAAA2zC,EAAA3zC,KAAA2zC,UAEAA,EAAA0D,eACA1D,EAAAuvB,mBACAvvB,EAAA0D,aAAA1D,EAAAuvB,mBAAAthE,KAAA+xC,GACOA,EAAAC,cACPD,EAAAC,aAAAyD,eACA1D,EAAA0D,aAAA,SAAA7Y,EAAA+xF,EAAAqhC,GACAj+G,EAAAC,aAAAyD,aAAA7Y,GACAqV,KAAA08E,EAAAqhC,IACShwJ,KAAA+xC,MAIT6uG,qBAAA,SAAAxiJ,GAEA,IAAAolJ,EAAAplJ,EAAAi0C,kBACAj0C,EAAAi0C,kBAAA,SAAAoxG,EAAAhvG,GACA,GAAAgvG,KAAA5oF,WAAA,CAEA,IADA,IAAA6oF,EAAA,GACAllJ,EAAA,EAAuBA,EAAAilJ,EAAA5oF,WAAA1zD,OAAgC3I,IAAA,CACvD,IAAAs2D,EAAA2uF,EAAA5oF,WAAAr8D,IACAs2D,EAAAz0D,eAAA,SACAy0D,EAAAz0D,eAAA,QACAoQ,EAAAqwD,WAAA,yCACAhM,EAAAh0C,KAAAwK,MAAAxK,KAAA0K,UAAAspC,KACAmB,KAAAnB,EAAA9a,WACA8a,EAAA9a,IACA0pG,EAAA17I,KAAA8sD,IAEA4uF,EAAA17I,KAAAy7I,EAAA5oF,WAAAr8D,IAGAilJ,EAAA5oF,WAAA6oF,EAEA,WAAAF,EAAAC,EAAAhvG,IAEAr2C,EAAAi0C,kBAAAjyC,UAAAojJ,EAAApjJ,UAEA,wBAAAhC,EAAAi0C,mBACAnzC,OAAAC,eAAAf,EAAAi0C,kBAAA,uBACAhzC,IAAA,WACA,OAAAmkJ,EAAAG,wBAKA3C,0BAAA,SAAA5iJ,GAEA,iBAAAA,KAAAi0C,mBACA,aAAAj0C,EAAAkwJ,cAAAluJ,YAGAhC,EAAA6xJ,gBACA/wJ,OAAAC,eAAAf,EAAAkwJ,cAAAluJ,UAAA,eACAf,IAAA,WACA,OAAkBmuD,SAAAtjD,KAAAsjD,cAMlByzF,sBAAA,SAAA7iJ,GACA,IAAA8xJ,EAAA9xJ,EAAAi0C,kBAAAjyC,UAAA8sE,YACA9uE,EAAAi0C,kBAAAjyC,UAAA8sE,YAAA,SAAAw9D,GACA,IAAAh4E,EAAAxoD,KACA,GAAAwgI,EAAA,CACA,IAAAylB,EAAAz9F,EAAA09F,kBAAAzsH,KAAA,SAAAkpD,GACA,OAAAA,EAAA+vC,OAAA7lF,OACA,UAAA81C,EAAA+vC,OAAA7lF,MAAAxG,QAEA,IAAAm6F,EAAA9hB,qBAAAunC,EACA,aAAAA,EAAA5tH,UACA4tH,EAAAE,aAAA,YACW,aAAAF,EAAA5tH,WACX4tH,EAAAE,aAAA,aAES,IAAA3lB,EAAA9hB,qBACTunC,GACAz9F,EAAA49F,eAAA,SAGA,IAAAC,EAAA79F,EAAA09F,kBAAAzsH,KAAA,SAAAkpD,GACA,OAAAA,EAAA+vC,OAAA7lF,OACA,UAAA81C,EAAA+vC,OAAA7lF,MAAAxG,QAEA,IAAAm6F,EAAA7hB,qBAAA0nC,EACA,aAAAA,EAAAhuH,UACAguH,EAAAF,aAAA,YACW,aAAAE,EAAAhuH,WACXguH,EAAAF,aAAA,aAES,IAAA3lB,EAAA7hB,qBACT0nC,GACA79F,EAAA49F,eAAA,SAGA,OAAAJ,EAAAjoJ,MAAAyqD,EAAA3qD,cAMA9J,EAAAD,QAAA,CACA6iJ,iBAAAb,EAAAa,iBACAC,oBAAAd,EAAAc,oBACAC,qBAAAf,EAAAe,qBACAX,iBAAAJ,EAAAI,iBACAQ,qBAAAZ,EAAAY,qBACAI,0BAAAhB,EAAAgB,0BACAC,sBAAAjB,EAAAiB,qDCtSA,IAAA/5D,EAAe5oF,EAAQ,IACvBmS,EAAYnS,EAAQ,IAqDpBL,EAAAD,QAAA,CACA0iJ,oBAAA,SAAAtiJ,GAGA,KAAAA,EAAA6tE,iBAAA,eACA7tE,EAAA6tE,gBAAA7rE,WADA,CAKA,IAAAowJ,EAAApyJ,EAAA6tE,gBACA7tE,EAAA6tE,gBAAA,SAAAnkE,GAEA,iBAAAA,KAAAu5B,WACA,IAAAv5B,EAAAu5B,UAAA54B,QAAA,SACAX,EAAAgZ,KAAAwK,MAAAxK,KAAA0K,UAAA1jB,KACAu5B,UAAAv5B,EAAAu5B,UAAA5Y,OAAA,IAIA,IAAAgoI,EAAA,IAAAD,EAAA1oJ,GACA4oJ,EAAAxpE,EAAAU,eAAA9/E,EAAAu5B,WACAsvH,EAAAzxJ,OAAAikF,OAAAstE,EACAC,GAWA,OARAC,EAAAvF,OAAA,WACA,OACA/pH,UAAAsvH,EAAAtvH,UACAsqC,OAAAglF,EAAAhlF,OACAR,cAAAwlF,EAAAxlF,cACA8c,iBAAA0oE,EAAA1oE,mBAGA0oE,GAlFA,SAAAvyJ,EAAAwyJ,EAAA7pI,GACA,GAAA3oB,EAAAi0C,kBAAA,CAGA,IAAAx1B,EAAAze,EAAAi0C,kBAAAjyC,UACAywJ,EAAAh0I,EAAA03B,iBACA13B,EAAA03B,iBAAA,SAAAu8G,EAAAniC,GACA,GAAAmiC,IAAAF,EACA,OAAAC,EAAA5oJ,MAAAiC,KAAAnC,WAEA,IAAAgmH,EAAA,SAAA5kH,GACAwlH,EAAA5nG,EAAA5d,KAIA,OAFAe,KAAA6mJ,UAAA7mJ,KAAA6mJ,WAAA,GACA7mJ,KAAA6mJ,UAAApiC,GAAAZ,EACA8iC,EAAA5oJ,MAAAiC,KAAA,CAAA4mJ,EACA/iC,KAGA,IAAAijC,EAAAn0I,EAAAstC,oBACAttC,EAAAstC,oBAAA,SAAA2mG,EAAAniC,GACA,GAAAmiC,IAAAF,IAAA1mJ,KAAA6mJ,YACA7mJ,KAAA6mJ,UAAApiC,GACA,OAAAqiC,EAAA/oJ,MAAAiC,KAAAnC,WAEA,IAAAkpJ,EAAA/mJ,KAAA6mJ,UAAApiC,GAEA,cADAzkH,KAAA6mJ,UAAApiC,GACAqiC,EAAA/oJ,MAAAiC,KAAA,CAAA4mJ,EACAG,KAGA/xJ,OAAAC,eAAA0d,EAAA,KAAA+zI,EAAA,CACAvxJ,IAAA,WACA,OAAA6K,KAAA,MAAA0mJ,IAEA36H,IAAA,SAAA04F,GACAzkH,KAAA,MAAA0mJ,KACA1mJ,KAAAigD,oBAAAymG,EACA1mJ,KAAA,MAAA0mJ,WACA1mJ,KAAA,MAAA0mJ,IAEAjiC,GACAzkH,KAAAqqC,iBAAAq8G,EACA1mJ,KAAA,MAAA0mJ,GAAAjiC,OA4CAuiC,CAAA9yJ,EAAA,wBAAA+K,GAOA,OANAA,EAAAk4B,WACAniC,OAAAC,eAAAgK,EAAA,aACA1J,MAAA,IAAArB,EAAA6tE,gBAAA9iE,EAAAk4B,WACAwpH,SAAA,UAGA1hJ,MAMAq4D,oBAAA,SAAApjE,GACA,IAAA60C,EAAA70C,KAAA60C,IAEA,oBAAA70C,KAAAikJ,kBACA,cAAAjkJ,EAAAikJ,iBAAAjiJ,WACA6yC,EAAAC,iBAAAD,EAAAgH,gBAFA,CAOA,IAAAk3G,EAAAl+G,EAAAC,gBAAAlzC,KAAAizC,GACAm+G,EAAAn+G,EAAAgH,gBAAAj6C,KAAAizC,GACAqD,EAAA,IAAA9hB,IAAA68H,EAAA,EAEAp+G,EAAAC,gBAAA,SAAA9c,GACA,iBAAAA,EAAA,CACA,IAAA4jB,EAAA,eAAAq3G,EAIA,OAHA/6G,EAAArgB,IAAA+jB,EAAA5jB,GACA3lB,EAAAqwD,WAAA,8BACA,2BACA9mB,EAEA,OAAAm3G,EAAA/6H,IAEA6c,EAAAgH,gBAAA,SAAAD,GACAo3G,EAAAp3G,GACA1D,EAAA3d,OAAAqhB,IAGA,IAAAs3G,EAAApyJ,OAAAqkJ,yBAAAnlJ,EAAAikJ,iBAAAjiJ,UACA,OACAlB,OAAAC,eAAAf,EAAAikJ,iBAAAjiJ,UAAA,OACAf,IAAA,WACA,OAAAiyJ,EAAAjyJ,IAAA4I,MAAAiC,OAEA+rB,IAAA,SAAA+jB,GAEA,OADA9vC,KAAAsoC,UAAA8D,EAAAj3C,IAAA26C,IAAA,KACAs3G,EAAAr7H,IAAAhuB,MAAAiC,KAAA,CAAA8vC,OAIA,IAAAu3G,EAAAnzJ,EAAAikJ,iBAAAjiJ,UAAA2W,aACA3Y,EAAAikJ,iBAAAjiJ,UAAA2W,aAAA,WAKA,OAJA,IAAAhP,UAAAZ,QACA,YAAAY,UAAA,IAAAmQ,gBACAhO,KAAAsoC,UAAA8D,EAAAj3C,IAAA0I,UAAA,WAEAwpJ,EAAAtpJ,MAAAiC,KAAAnC,gCClKA,IAAAypJ,EAAA,SAAAntG,GACA,OAAA73C,OAAAzB,OAAAs5C,QAAAt5C,OAAAs5C,MAgBAotG,EAAA,SAAAxrJ,EAAA8nB,EAAAhD,GACA,IAAA2mI,EAAAzrJ,EAAAlH,MAAAkH,EAAA6nF,MACA7nF,EAAA+B,OAAA+lB,EAAA9nB,EAAA+B,MACA+lB,EAAA9nB,EAAA+B,MAAA,GAEA0pJ,IAAA3jI,EAAA9nB,EAAAlH,QACAgvB,EAAA9nB,EAAAlH,MAAA,IAEA,IAAA4yJ,EAAA1rJ,EAAA+B,KACA,GACA0pJ,EAAA3jI,EAAA9nB,EAAAlH,MAAAgvB,GAvBA,SAAAnH,EAAAmH,EAAA+/D,EAAA8jE,GACA,GAAAA,IAAA9jE,EACA//D,EAAA6jI,GAAAJ,EAAA5qI,EAAA,SAGA,QAAApoB,EAAA,EAAmBA,EAAAsvF,EAAA3mF,OAAkB3I,GAAA,EACrC,MAAAooB,EAAApoB,EAAA,KACAuvB,EAAA+/D,EAAAtvF,IAAAgzJ,EAAA5qI,EAAApoB,EAAA,KAkBAqzJ,CAAA9mI,EAAAnE,MAAA3gB,EAAA4nF,KAAA8jE,EAAA1rJ,EAAA6nF,MAAA7nF,EAAAlH,MAEAkH,EAAA+B,MACA+lB,EAAA9nB,EAAA+B,WAAA2pJ,IAIA/jE,EAActvF,EAAQ,IACtBwzJ,EAAAzjE,OAAAjuF,UAAAiH,KAAArH,KAAA,iBAEAhC,EAAAstB,MAAA,SAAAoZ,GACA,IAAArZ,EAAA,GACAgV,EAAA,GACAtS,EAAA1C,EAoBA,OAjBAqZ,EAAA19B,MAAA,gBAAAq8B,OAAAyuH,GAAA3mJ,QAAA,SAAA1M,GACA,IAAA8c,EAAA9c,EAAA,GACAssB,EAAAtsB,EAAAqH,MAAA,GACA,MAAAyV,IACA8kB,EAAAr4B,KAAA,CAAkBi9B,IAAA,GAAAY,KAAA,KAClB9X,EAAAsS,IAAAl5B,OAAA,IAGA,QAAAN,EAAA,EAAmBA,GAAA+mF,EAAAryE,IAAA,IAAApU,OAAkCN,GAAA,GACrD,IAAAZ,EAAA2nF,EAAAryE,GAAA1U,GACA,GAAAZ,EAAA4nF,IAAAxmF,KAAA0jB,GACA,OAAA0mI,EAAAxrJ,EAAA8nB,EAAAhD,MAKAM,EAAAgV,QACAhV,GAGA,IAAA0mI,EAAA,SAAAC,EAAA7wF,GACA,IAAA5gE,EAAA4gE,EAAAn6D,MAAA,WAIA,OAHA,IAAAzG,EAAA4G,SACA6qJ,EAAAzxJ,EAAA,IAAAixJ,EAAAjxJ,EAAA,KAEAyxJ,GAGAh0J,EAAA0rD,YAAA,SAAAv7C,GACA,OAAAA,EAAAnH,MAAA,SAAsBm4G,OAAA4yC,EAAA,KAItB/zJ,EAAAyrD,gBAAAzrD,EAAA0rD,YAEA1rD,EAAA2rD,cAAA,SAAAx7C,GACA,OAAAA,EAAAnH,MAAA,KAAAC,IAAA8D,SAGA/M,EAAA4rD,sBAAA,SAAAz7C,GAGA,IAFA,IAAAq9D,EAAA,GACAziE,EAAAoF,EAAAnH,MAAA,KAAAC,IAAAuqJ,GACAhzJ,EAAA,EAAiBA,EAAAuK,EAAA5B,OAAkB3I,GAAA,EACnCgtE,EAAAxjE,KAAA,CACAw5B,UAAAz4B,EAAAvK,GACAijC,GAAA14B,EAAAvK,EAAA,GACA+hC,KAAAx3B,EAAAvK,EAAA,KAGA,OAAAgtE,GAGAxtE,EAAA6rD,qBAAA,SAAA17C,GACA,OAAAA,EAAAnH,MAAA,KAAAC,IAAA,SAAA0+B,GACA,OAAAA,EAAAj9B,UAAA,EAAAi9B,EAAAx+B,OAAA,GAAAH,MAAA,KAAAm4G,OAAA4yC,EAAA,OAIA/zJ,EAAA8rD,yBAAA,SAAA37C,GACA,OAAAA,EAAAnH,MAAA,KAAqBC,IAAA,SAAAmvB,GACrB,OAAAA,EAAApvB,MAAA,KAAAC,IAAA,SAAA8rB,GACA,IAAAk/H,EAAA7zI,GAAA,EASA,MAPA,MAAA2U,EAAA,GACAk/H,EAAAT,EAAAz+H,IAEAk/H,EAAAT,EAAAz+H,EAAArqB,UAAA,EAAAqqB,EAAA5rB,SACAiX,GAAA,GAGA,CACA6zI,OACA7zI,gCCrHA,IAAAwvE,EAActvF,EAAQ,IAGtB4zJ,EAAA,WAyBAC,EAAA,SAAA52I,EAAAtV,EAAA8nB,GACA,IAIAjmB,EAAA,CAAAyT,EAAA,KAJAtV,EAAA8sB,kBAAA5oB,SACAlE,EAAA8sB,OAAA9sB,EAAA+B,KAAA+lB,IAAA9nB,EAAAlH,OACAkH,EAAA8sB,SAGA,GAAA9sB,EAAA6nF,MACA,QAAAtvF,EAAA,EAAmBA,EAAAyH,EAAA6nF,MAAA3mF,OAAsB3I,GAAA,GACzC,IAAAyB,EAAAgG,EAAA6nF,MAAAtvF,GACAyH,EAAAlH,KACA+I,EAAAE,KAAA+lB,EAAA9nB,EAAAlH,MAAAkB,IAGA6H,EAAAE,KAAA+lB,EAAA9nB,EAAA6nF,MAAAtvF,UAKAsJ,EAAAE,KAAA+lB,EAAA9nB,EAAAlH,OAEA,OA5CA,SAAAqzJ,GACA,IAAA5zJ,EAAA,EACAsJ,EAAAC,UACA8C,EAAA/C,EAAAX,OACA,OAAAirJ,EAAA9qJ,QAAA4qJ,EAAA,SAAAvlJ,GACA,GAAAnO,GAAAqM,EACA,OAAA8B,EAEA,IAAAjC,EAAA5C,EAAAtJ,GAEA,OADAA,GAAA,EACAmO,GACA,SACA,UACA,SACA,OAAAH,OAAA9B,GACA,SACA,OAAAK,OAAAL,GACA,SACA,aA0BAzC,MAAA,KAAAH,IAKAuqJ,EAAA,CACA,gBACA,gBACA,qBAEAC,EAAA,kBAGAr0J,EAAAD,QAAA,SAAAqtB,EAAAyxG,GACAA,KAAA,GAEA,MAAAzxG,EAAA6C,UACA7C,EAAA6C,QAAA,GAEA,MAAA7C,EAAAtsB,OACAssB,EAAAtsB,KAAA,KAEAssB,EAAAgV,MAAAl1B,QAAA,SAAAg5B,GACA,MAAAA,EAAAkB,WACAlB,EAAAkB,SAAA,MAIA,IAAAktH,EAAAz1B,EAAAy1B,YAAAF,EACAG,EAAA11B,EAAA01B,YAAAF,EACA5tH,EAAA,GAkCA,OA/BA6tH,EAAApnJ,QAAA,SAAAoQ,GACAqyE,EAAAryE,GAAApQ,QAAA,SAAAlF,GACAA,EAAAlH,QAAAssB,GAAA,MAAAA,EAAAplB,EAAAlH,MACA2lC,EAAA18B,KAAAmqJ,EAAA52I,EAAAtV,EAAAolB,IAEAplB,EAAA+B,QAAAqjB,GAAA,MAAAA,EAAAplB,EAAA+B,OACAqjB,EAAAplB,EAAA+B,MAAAmD,QAAA,SAAA0K,GACA6uB,EAAA18B,KAAAmqJ,EAAA52I,EAAAtV,EAAA4P,UAOAwV,EAAAgV,MAAAl1B,QAAA,SAAAg5B,GACAO,EAAA18B,KAAAmqJ,EAAA,IAAAvkE,EAAAhvF,EAAA,GAAAulC,IAEAquH,EAAArnJ,QAAA,SAAAoQ,GACAqyE,EAAAryE,GAAApQ,QAAA,SAAAlF,GACAA,EAAAlH,QAAAolC,GAAA,MAAAA,EAAAl+B,EAAAlH,MACA2lC,EAAA18B,KAAAmqJ,EAAA52I,EAAAtV,EAAAk+B,IAEAl+B,EAAA+B,QAAAm8B,GAAA,MAAAA,EAAAl+B,EAAA+B,OACAm8B,EAAAl+B,EAAA+B,MAAAmD,QAAA,SAAA0K,GACA6uB,EAAA18B,KAAAmqJ,EAAA52I,EAAAtV,EAAA4P,YAOA6uB,EAAAh9B,KAAA,iCCjGA1J,EAAA04H,QAAkBp4H,EAAQ,mCCK1B,IAAAquD,EAAgBruD,EAAQ,KACxBk7E,EAAkBl7E,EAAQ,KAK1B,SAAAm0J,EAAAt5I,GACA,iBAAAA,EAAAwpC,MACAxpC,EAAAwpC,IAAAxpC,EAAAwpC,IAAAh4C,YAKA,SAAA+rH,IASAxsH,KAAAgnG,MAAA,CACAwhD,SAAA,GACAC,SAAA,IAIA10J,EAAAD,QAAA04H,EAKAA,EAAAt2H,UAAAwyJ,uBAAA,SAAAvxH,GACA,IAAAS,EAAA,IAAAmqC,gBAAA5qC,GAKA,OAHAS,EAAAqpC,cAAAjhE,KAAAgnG,MAAAwhD,SAAA5wH,EAAAqpC,eAGArpC,GAMA40F,EAAAt2H,UAAAyyJ,iBAAA,SAAAxxH,GACA,IAAAS,EAAA,IAAAmqC,gBAAA5qC,GAEA,OAAAS,EAAA6pC,OAAAljE,QAAA,SACAq5B,EAAA6pC,OAAA,YACK,QAAA7pC,EAAA6pC,OAAAljE,QAAA,SAGL,UAAAJ,MAAA,kBAAAy5B,EAAA6pC,OAAA,gBAFA7pC,EAAA6pC,OAAA,QAOA,OAFA7pC,EAAAqpC,cAAAjhE,KAAAgnG,MAAAyhD,SAAA7wH,EAAAqpC,eAEArpC,GAWA40F,EAAAt2H,UAAA0yJ,+BAAA,SAAAv3I,GACA,IAAArR,KAAAgnG,MAAA//B,OACA,YAGA,IAAA9lD,EAAAshC,EAAArhC,MAAAphB,KAAAgnG,MAAA//B,QACA,GAAA9lD,KAAAgV,OAAA/1B,MAAAG,QAAA4gB,EAAAgV,OACA,QAAA7hC,EAAA,EAAuBA,EAAA6sB,EAAAgV,MAAAl5B,OAA0B3I,IACjD,GAAA6sB,EAAAgV,MAAA7hC,GAAA+c,WACA8P,EAAAgV,MAAA7hC,GAAA+jC,WACA,aAAAlX,EAAAgV,MAAA7hC,GAAA+jC,WACA,aAAAlX,EAAAgV,MAAA7hC,GAAA+jC,WACA,OAAA/jC,EAKA,aAWAk4H,EAAAt2H,UAAA46H,QAAA,SAAA/4F,GACA,IAAArV,EAAA1iB,KAGA,oBAAA+3B,GAAA,OAAAA,GACA,iBAAAA,EAAAyC,IAEA,OADAhrB,QAAAI,KAAA,mDACAmoB,EAIA,IAAA5W,EAAAshC,EAAArhC,MAAA2W,EAAAyC,KAGA,YAAArZ,EAAAgV,QACA/1B,MAAAG,QAAA4gB,EAAAgV,QAAA,IAAAhV,EAAAgV,MAAAl5B,OAEA,OADAuS,QAAAI,KAAA,iCACAmoB,EAKA,GAAA5W,EAAAgV,MAAAl5B,QAAA,GAAAkkB,EAAAgV,MAAAgmD,MAAA,SAAAznF,GACA,oCAAA6J,QAAA7J,EAAA+jD,OAGA,OADAjpC,QAAAI,KAAA,qDACAmoB,EAQA,IAFA,IAAAyC,EAAAzC,EAAAyC,IACAquH,GAAA,EACAv0J,EAAA,EAAmBA,EAAA6sB,EAAAgV,MAAAl5B,OAA0B3I,IAAA,CAC7C6sB,EAAAgV,MAAA7hC,GACAymC,IAAA95B,QAAA,SAAA85B,GACA,YAAAA,EAAAC,MACA,CACA6tH,GAAA,EACA,IAAA1hF,EAAA1kB,EAAArhC,MAAAsB,EAAAskF,MAAA7/B,OACApsC,EAAAC,MAAAmsC,EAAAhxC,MAAA7hC,GAAAymC,IAAA,GAAAC,SAIA6tH,IACAruH,EAAAioB,EAAAnD,MAAAn+B,IAKAnhB,KAAAgnG,MAAAjvE,EAAA1mB,MAAAmpB,EAKA,IAAArE,EAAAhV,EAAAgV,MACAhV,EAAAgV,MAAA,GAKA,IAAA2yH,EAAA,GAIAC,EAAA,GAGAC,EAAA,GAEA7yH,EAAAl1B,QAAA,SAAAgoJ,GAGA,GAFAV,EAAAU,IAEA,iBAAAA,EAAAC,SACA,aAAAD,EAAAC,UACA,aAAAD,EAAA5wH,WAAA,gBAAA4wH,EAAA53I,KACA,UAAAlT,MAAA,4FAMA,IAAA2qJ,EAAAG,EAAA53I,OACA,aAAAy3I,EAAAG,EAAA53I,MAAAgnB,YACAywH,EAAAG,EAAA53I,MAAA43I,KAKA9yH,EAAAl1B,QAAA,SAAAgoJ,GACA,IAAA53I,EAAA43I,EAAA53I,KAEA,mBAAAA,EAIA,OAHA43I,EAAAxwG,IAAA,OACAt3B,EAAAgV,MAAAr4B,KAAAmrJ,QACAF,EAAAjrJ,KAAAmrJ,EAAAxwG,KAKA,iBAAAwwG,EAAAj0F,SACAhgE,OAAAq5B,KAAA46H,EAAAj0F,SAAA/zD,QAAA,SAAA2vB,GACA,iBAAAk4H,EAAAz3I,GAAA2jD,UACA8zF,EAAAz3I,GAAA2jD,QAAA,IAGA8zF,EAAAz3I,GAAA2jD,QAAApkC,GAAAq4H,EAAAj0F,QAAApkC,QAEA,IAAAq4H,EAAAtnG,OAOAmnG,EAAAz3I,GAAA2jD,QAAApkC,GAAA+wB,KAAAsnG,EAAAtnG,aAQA,IAAAsnG,EAAA3vH,YACAl5B,MAAAG,QAAA0oJ,EAAA3vH,mBAGA,IAAAwvH,EAAAz3I,GAAAioB,YACAl5B,MAAAG,QAAAuoJ,EAAAz3I,GAAAioB,cACAwvH,EAAAz3I,GAAAioB,WAAA,IAIAg2C,EAAAvxE,MAAA+qJ,EAAAz3I,GAAAioB,WACA,CAAA2vH,EAAA3vH,eACAwvH,EAAAz3I,GAAAioB,WACAwvH,EAAAz3I,GAAAioB,WAAAh8B,OAAA2rJ,EAAA3vH,cAIA,IAAAjB,EAAA4wH,EAAA5wH,UAEA2wH,EAAA33I,IACA23I,EAAA33I,IAAA,GACA83I,EAAA9wH,GAAA,YAEAywH,EAAAz3I,KAAA43I,IAEAA,EAAAxwG,IAAApnC,SAGA43I,EAAAG,kBAGAH,EAAAtnG,KAEA,aAAAtpB,GAEA0wH,EAAAjrJ,KAAAuT,GAIA8P,EAAAgV,MAAAr4B,KAAAmrJ,MAKA9nI,EAAAk6B,OAAA7H,KAAA,SAAA9Z,GACA,cAAAA,EAAAroB,KAEA,OADAqoB,EAAA2vH,KAAAN,EAAAvrJ,KAAA,MACA,IAKA2jB,EAAAmoI,aAAA,CACAC,SAAA,MACAr9F,MAAA,KAGA,IAAAukE,EAAAhuE,EAAAnD,MAAAn+B,GAEA,WAAAwlD,sBAAA,CACAt1D,KAAA0mB,EAAA1mB,KACAmpB,IAAAi2F,KAcAjE,EAAAt2H,UAAA49H,cAAA,SAAA/7F,GACA,IAAArV,EAAA1iB,KAGA,oBAAA+3B,GAAA,OAAAA,GACA,iBAAAA,EAAAyC,IAEA,OADAhrB,QAAAI,KAAA,mDACAmoB,EAGA,IAAA5W,EAAAshC,EAAArhC,MAAA2W,EAAAyC,KAGA,YAAArZ,EAAAgV,QACA/1B,MAAAG,QAAA4gB,EAAAgV,QAAA,IAAAhV,EAAAgV,MAAAl5B,OAEA,OADAuS,QAAAI,KAAA,iCACAmoB,EAKA,GAAA5W,EAAAgV,MAAAl5B,OAAA,IAAAkkB,EAAAgV,MAAAgmD,MAAA,SAAAznF,GACA,oCAAA6J,QAAA7J,EAAA+jD,OAGA,OADAjpC,QAAAI,KAAA,+CACAmoB,EAIA,IAAAsxH,EAAA,GACAloI,EAAAgV,MAAAl1B,QAAA,SAAAvM,GACA20J,EAAAvrJ,KAAApJ,EAAA+jD,OAGA,IAuCA+wG,EAvCAC,GAAA,EASA,QARA,IAAAtoI,EAAAk6B,QACAj7C,MAAAG,QAAA4gB,EAAAk6B,UACAouG,EAAAtoI,EAAAk6B,OAAA8gC,MAAA,SAAAjf,GACA,iBAAAA,EAAA7rD,MACAi+D,EAAAvxE,MAAAm/D,EAAAmsF,KAAAp/G,OAAA,CAAAo/G,EAAAp/G,aAIAw/G,EACA,UAAAtrJ,MAAA,wFA8BA,IAAA6B,KAAAgnG,MAAAjvE,EAAA1mB,QACAm4I,EAAA/mG,EAAArhC,MAAAphB,KAAAgnG,MAAAjvE,EAAA1mB,QAGA,IAAAq4I,EAAA,CACAlnH,MAAA,GACAlB,MAAA,IAKAqoH,EAAA,GACAC,EAAA,EACAC,EAAA,EAqNA,GAnNA1oI,EAAAgV,MAAAl1B,QAAA,SAAA6oJ,GAEA,qBAAAA,EAAAZ,SACA,aAAAY,EAAAZ,UACA,aAAAY,EAAAzxH,WAAA,gBAAAyxH,EAAAz4I,KACA,UAAAlT,MAAA,6FAIA,mBAAA2rJ,EAAAz4I,KAAA,CACA,IAAA04I,EAAA,KAWA,OAVAP,KAAArzH,QACA4zH,EAAAP,EAAArzH,MAAAsD,KAAA,SAAAwvH,GACA,sBAAAA,EAAA53I,aAGA04I,EACAJ,EAAAI,EAAAtxG,KAAAsxG,EAEAJ,EAAAG,EAAArxG,KAAAqxG,GAOA,IAAA90F,EAAA80F,EAAA90F,QACA17B,EAAAwwH,EAAAxwH,WACAgoC,EAAAwoF,EAAAxoF,WACA0oF,EAAAF,EAAAE,SACAC,EAAAH,EAAAG,OACAjzH,EAAA8yH,EAAA9yH,YACAX,EAAAyzH,EAAAzzH,YAIAyzH,EAAA90F,eACA80F,EAAAxwH,kBACAwwH,EAAAxoF,kBACAwoF,EAAAE,gBACAF,EAAAG,cACAH,EAAA9yH,mBACA8yH,EAAAzzH,YACAyzH,EAAArxG,IAGA,IAAAyxG,EAAA,QACA,IAAA5wH,GAAAl5B,MAAAG,QAAA+4B,IACAA,EAAAr4B,QAAA,SAAAo5B,GAIA,QAAAA,EAAAV,gBAMA,IAAAU,EAAApB,OACA74B,MAAAG,QAAA85B,EAAApB,QACAoB,EAAApB,MAAAh4B,QAAA,SAAA2vB,QACA,IAAAs5H,EAAAt5H,KACAs5H,EAAAt5H,GAAA,IAGAs5H,EAAAt5H,GAAA9yB,KAAAu8B,OAOA,IAAA8vH,EAAA,GAEA,iBAAAn1F,GAGAhgE,OAAAq5B,KAAA2mC,GAAA/zD,QAAA,SAAA2vB,GAMA,IAAAq4H,EAOA,aAAAlxH,EAAA1mB,MAQA2jD,EAAApkC,GAAA+wB,KAsBA,QAdA,IAAAuoG,EAAAt5H,IACAxwB,MAAAG,QAAA2pJ,EAAAt5H,KACAs5H,EAAAt5H,GAAA4iB,KAAA,SAAAnZ,GAGA,OAAAA,EAAApB,MAAAua,KAAA,SAAA42G,GACA,oBAAAD,EAAAC,GAEA,OADAnB,EAAAkB,EAAAC,IACA,MAMA,iBAAAnB,EAEAA,EAAAj0F,QAAApkC,GAAAokC,EAAApkC,UACAokC,EAAApkC,GAAA+wB,SACiB,CAuCjB,GArCAsnG,EAAAj0J,OAAAY,OAAAk0J,GACAK,EAAAv5H,GAAAq4H,OAEA,IAAAj0F,EAAApkC,GAAA+wB,OAMAsnG,EAAAtnG,KAAAqT,EAAApkC,GAAA+wB,YACAqT,EAAApkC,GAAA+wB,MAIAsnG,EAAAj0F,QAAA,GACAi0F,EAAAj0F,QAAApkC,GAAAokC,EAAApkC,GACAq4H,EAAA3vH,WAAA4wH,EAAAt5H,QAIA,IAAA44H,QACA,IAAAA,EAAArzH,OACA/1B,MAAAG,QAAAipJ,EAAArzH,QAEAqzH,EAAArzH,MAAAl1B,QAAA,SAAAvM,GACA,iBAAAA,EAAAsgE,SACAhgE,OAAAq5B,KAAA35B,EAAAsgE,SAAA/zD,QAAA,SAAA5K,GACAA,IAAAu6B,IACAq4H,EAAAxwG,IAAA/jD,EAAA+jD,SAOA8vG,EAAAU,QAEA,IAAAA,EAAAxwG,IAAA,CAeA,cAAA1gB,EAAA1mB,KACA,UAAAlT,MAAA,+BAGA8qJ,EAAAxwG,IAAA,CAAAqxG,EAAAz4I,KAAA,IAAAuf,GAAApzB,KAAA,IAIAyrJ,EAAA3nF,aACA2nF,EAAAe,WACAf,EAAAgB,SACAhB,EAAAjyH,cACAiyH,EAAA5yH,OAEAszH,EAAAV,EAAAxwG,KAAAwwG,EAEAvmI,EAAAskF,MAAAyhD,SAAAoB,GAAAD,OACA,IAAAlnI,EAAAskF,MAAAwhD,SAAAoB,KACAlnI,EAAAskF,MAAAwhD,SAAAoB,GAAAC,GAEAA,SAnGAH,EAAAI,EAAAz4I,MAAAuf,GAAAokC,EAAApkC,KAwGAg5H,MAKAzoI,EAAAgV,MAAA,GACAkzH,EAAA,GAEA,WAAAtxH,EAAA1mB,KAcA,QAAA/c,EAAA,EAAuBA,EAAAk1J,EAAArzH,MAAAl5B,OAAyB3I,IAAA,CAChD,IAAA20J,EAAAO,EAAArzH,MAAA7hC,GACAi0J,EAAAU,QAEA,IAAAU,EAAAV,EAAAxwG,cAaAwwG,EAAAtnG,YACAsnG,EAAAj0F,eACAi0F,EAAA3vH,WACA2vH,EAAA5wH,WACA,aAAA4wH,EAAA5wH,UAEA,aAAA4wH,EAAA5wH,YACA4wH,EAAA5wH,UAAA,YAFA4wH,EAAA5wH,UAAA,YAWAlX,EAAAgV,MAAAr4B,KAAAmrJ,GACA,iBAAAA,EAAAxwG,KAEA4wG,EAAAvrJ,KAAAmrJ,EAAAxwG,eAaA,IAAA+wG,QACA,IAAAA,EAAArzH,OACA/1B,MAAAG,QAAAipJ,EAAArzH,QACAqzH,EAAArzH,MAAAl1B,QAAA,SAAAgoJ,GACAV,EAAAU,GACAI,EAAAvrJ,KAAAmrJ,EAAAxwG,UACA,IAAAkxG,EAAAV,EAAAxwG,KACAt3B,EAAAgV,MAAAr4B,KAAA6rJ,EAAAV,EAAAxwG,cAEAwwG,EAAAtnG,YACAsnG,EAAAj0F,eACAi0F,EAAA3vH,WACA2vH,EAAA5wH,WACA,aAAA4wH,EAAA5wH,YACA4wH,EAAA5wH,UAAA,YACA4wH,EAAA5wH,WACA,aAAA4wH,EAAA5wH,YACA4wH,EAAA5wH,UAAA,YACAlX,EAAAgV,MAAAr4B,KAAAmrJ,MAMAj0J,OAAAq5B,KAAAs7H,GAAA1oJ,QAAA,SAAAw3C,IACA,IAAA4wG,EAAA9qJ,QAAAk6C,KACA4wG,EAAAvrJ,KAAA26C,GACA,aAAAkxG,EAAAlxG,GAAApgB,UAMAlX,EAAAgV,MAAAqd,KAAA,SAAAy1G,GACA,iBAAAA,EAAA5wH,WACA,aAAA4wH,EAAA5wH,YACA4wH,EAAA53I,OAAAs4I,EAAAlxG,GAAApnC,KASA,OANArc,OAAAq5B,KAAAs7H,EAAAlxG,GAAAuc,SAAA/zD,QACA,SAAA2vB,GACAq4H,EAAAj0F,QAAApkC,GACA+4H,EAAAlxG,GAAAuc,QAAApkC,MAGA,IAIAzP,EAAAgV,MAAAr4B,KAAA6rJ,EAAAlxG,OAWA,kBAAAx3C,QAAA,SAAAoQ,GACA,GAAA8P,KAAAgV,OAAA/1B,MAAAG,QAAA4gB,EAAAgV,OAAA,CAGA,IAAAwiB,EAAA,KACA,GAAA3jD,OAAAq5B,KAAAq7H,EAAAr4I,IAAApU,OAAA,GAEA,QADA07C,EAAAj2B,EAAAkmI,+BAAAv3I,IAMA,QAAA/c,EAAA,EAA+BA,EAAA6sB,EAAAgV,MAAAl5B,OAA0B3I,IACzD,GAAA6sB,EAAAgV,MAAA7hC,GAAA+c,SAAA,CACAsnC,EAAArkD,EACA,MAMA,GAAAqkD,GAAAx3B,EAAAgV,MAAAl5B,OAAA07C,EAAA,CACA,IAAA1e,EAAA9Y,EAAAgV,MAAAwiB,GACA3jD,OAAAq5B,KAAAq7H,EAAAr4I,IAAApQ,QAAA,SAAA2vB,GACAqJ,EAAA+6B,SAAA/6B,EAAA+6B,QAAApkC,IACAphB,QAAAI,KAAA,+BAEAqqB,EAAA+6B,UACA/6B,EAAA+6B,QAAA,IAGA/6B,EAAA+6B,QAAApkC,GAAA84H,EAAAr4I,GAAAuf,SAMAzP,EAAAk6B,OAAA7H,KAAA,SAAA9Z,GACA,cAAAA,EAAAroB,KAEA,OADAqoB,EAAA2vH,OAAA7rJ,KAAA,MACA,IAKA2jB,EAAAmoI,aAAA,CACAC,SAAA,MACAr9F,MAAA,KAGA,IAAAukE,EAAAhuE,EAAAnD,MAAAn+B,GAMA,OAFAnhB,KAAAgnG,MAAAjvE,EAAA1mB,MAAAo/G,EAEA,IAAA9pD,sBAAA,CACAt1D,KAAA0mB,EAAA1mB,KACAmpB,IAAAi2F,KAcA,IAAA04B,EAAA,CACAkB,SAAA,EACAC,SAAA,EACAC,SAAA,EACAC,SAAA,oBChyBA,IAAA/nG,EAAgBruD,EAAQ,IAExBN,EAAAwrD,MAAA,SAAAn+B,EAAAyxG,GAgDA,YA9CA,IAAAzxG,QACA,IAAAA,EAAAgV,OACA/1B,MAAAG,QAAA4gB,EAAAgV,QAEAhV,EAAAgV,MAAAl1B,QAAA,SAAAg5B,QAEA,IAAAA,EAAA+6B,SACA,IAAAhgE,OAAAq5B,KAAA4L,EAAA+6B,SAAA/3D,SACAg9B,EAAAhB,MAAA,GACAjkC,OAAAq5B,KAAA4L,EAAA+6B,SAAA/zD,QAAA,SAAA2vB,GACA,IAAAyO,EAAApF,EAAA+6B,QAAApkC,GACA57B,OAAAq5B,KAAAgR,GAAAp+B,QAAA,SAAAiI,GACA+wB,EAAAhB,MAAAn7B,KAAA,CACAoB,GAAA0xB,EACA1nB,YACA3T,MAAA8pC,EAAAn2B,gBAIA+wB,EAAA+6B,cAIA,IAAA/6B,EAAAX,YACAl5B,MAAAG,QAAA05B,EAAAX,aACAW,EAAAX,WAAAr4B,QAAA,SAAAo5B,QACA,IAAAA,EAAApB,OACA74B,MAAAG,QAAA85B,EAAApB,SACAoB,EAAApB,MAAAoB,EAAApB,MAAAz7B,KAAA,eAQA,IAAA2jB,QACA,IAAAA,EAAAk6B,QAAAj7C,MAAAG,QAAA4gB,EAAAk6B,SAEAl6B,EAAAk6B,OAAAp6C,QAAA,SAAAi8D,QACA,IAAAA,EAAAmsF,MAAAjpJ,MAAAG,QAAA28D,EAAAmsF,QACAnsF,EAAAmsF,KAAAnsF,EAAAmsF,KAAA7rJ,KAAA,QAKAilD,EAAAnD,MAAAn+B,EAAAyxG,IAGA9+H,EAAAstB,MAAA,SAAAoZ,GACA,IAAArZ,EAAAshC,EAAArhC,MAAAoZ,GAwCA,YAtCA,IAAArZ,QAAA,IAAAA,EAAAgV,OACA/1B,MAAAG,QAAA4gB,EAAAgV,QAEAhV,EAAAgV,MAAAl1B,QAAA,SAAAg5B,QAEA,IAAAA,EAAAhB,OAAA74B,MAAAG,QAAA05B,EAAAhB,SACAgB,EAAA+6B,QAAA,GACA/6B,EAAAhB,MAAAh4B,QAAA,SAAA2vB,GACAqJ,EAAA+6B,QAAApkC,EAAA1xB,MACA+6B,EAAA+6B,QAAApkC,EAAA1xB,IAAA,IACA+6B,EAAA+6B,QAAApkC,EAAA1xB,IAAA0xB,EAAA1nB,WAAA0nB,EAAAr7B,eAGA0kC,EAAAhB,YAIA,IAAAgB,EAAAX,YACAl5B,MAAAG,QAAA05B,EAAAX,aACAW,EAAAX,WAAAr4B,QAAA,SAAAo5B,GACA,iBAAAA,EAAApB,QACAoB,EAAApB,MAAAoB,EAAApB,MAAAn8B,MAAA,eAOA,IAAAqkB,QACA,IAAAA,EAAAk6B,QAAAj7C,MAAAG,QAAA4gB,EAAAk6B,SAEAl6B,EAAAk6B,OAAAp6C,QAAA,SAAAi8D,GACA,iBAAAA,EAAAmsF,OACAnsF,EAAAmsF,KAAAnsF,EAAAmsF,KAAAvsJ,MAAA,QAKAqkB,kBC9FAptB,EAAAD,QAAA,SAAAw7E,EAAAl2C,GAEA,IAAAA,EACA,SAGA,GAAAp5B,KAAA/C,QAAAm8B,EAAAn8B,OACA,SAEA,QAAA3I,EAAA,EAAAC,EAAAyL,KAAA/C,OAAoC3I,EAAAC,EAAOD,IAE3C,GAAA0L,KAAA1L,aAAA8L,OAAAg5B,EAAA9kC,aAAA8L,OAEA,IAAAkvE,EAAAvxE,MAAAiC,KAAA1L,GAAA,CAAA8kC,EAAA9kC,KACA,cACS,GAAA0L,KAAA1L,IAAA8kC,EAAA9kC,GAGT,SAGA,2BCrBA,IAAAmuD,EAAgBruD,EAAQ,IACxBq2J,EAAqBr2J,EAAQ,KAC7Bs2J,EAAAD,EAAAC,WACAC,EAAAF,EAAAE,WAIAC,EAAA,EAIA,SAAA5wH,EAAAC,EAAArJ,EAAAsJ,GACA,OAAAD,EACAhB,MACAE,OAAA,SAAAD,GAAoC,OAAAA,EAAAh6B,KAAA0xB,IACpCuI,OAAA,SAAAD,GAAoC,OAAAA,EAAAhwB,YAAAgxB,IACpCn9B,IAAA,SAAAm8B,GAAiC,OAAAA,EAAA3jC,QAAyB,GAK1D,SAAAm3H,EAAAp7G,GAEAtR,KAAAsR,WAAA,GAEAtR,KAAAsR,QAAAs7G,cACA5sH,KAAAsR,QAAAs7G,YAAAg+B,GAEAp7I,QAAAH,IAAA,uBAAArP,KAAAsR,QAAAs7G,YAAA,WAMA5sH,KAAAq5H,UAAA,GAiBA,SAAAwxB,EAAA1pI,EAAAud,GACA,MAAAvd,GAAA/gB,MAAAG,QAAA4gB,EAAAgV,QAIAhV,EAAAgV,MAAAl1B,QAAA,SAAAg5B,GACA,UAAAA,EAAA5oB,MACAqtB,EAAAzE,KAKA,SAAA6wH,EAAA/yH,GAEA,OAAAA,GAAA,MAAAA,GACAA,EAAA1mB,MAAA,IAAA0mB,EAAA1mB,MACA0mB,EAAAyC,KAAA,IAAAzC,EAAAyC,IAuJAkyF,EAAAx2H,UAAA60J,eAAA,WACA/qJ,KAAAq5H,UAAA,IAWA3M,EAAAx2H,UAAAy7H,aAAA,SAAA14F,GACAj5B,KAAAq5H,UAAApgG,GAYAyzF,EAAAx2H,UAAA80J,gBAAA,SAAA/wH,GACA,IAAAL,EAAAK,EAAAX,YACAW,EAAAX,WAAAG,KAAA,SAAAC,GAA+C,cAAAA,EAAAC,YAC/C,OAAAC,EACAA,EAAAX,MACAn8B,MAAA,KACAC,IAAA,SAAAu9B,GAAoC,OAAA9Y,SAAA8Y,KAEpC,CAAAL,EAAAhB,MAAA,GAAA/5B,KAIAwtH,EAAAx2H,UAAA+0J,sBAAA,SAAAC,EAAAC,GAEA,IADA,IAAAvxG,EAAA,GACAtlD,EAAA,EAAmBA,EAAA42J,EAAAjuJ,SAAwB3I,EAAA,CAC3C,IAAA82J,EAAAF,EAAA52J,GACA+2J,EAAAF,EAAA72J,IAAA,KACAslD,EAAAwxG,GAAAC,EAEA,OAAAzxG,GAGA8yE,EAAAx2H,UAAAo1J,2BAAA,SAAArxH,GACAzqB,QAAAH,IAAA,sCAAArP,KAAAq5H,WACA,IAAAkyB,EAAAvrJ,KAAAgrJ,gBAAA/wH,GACAzqB,QAAAH,IAAA,sCAAAk8I,GACA,IAAAC,EAAAxxH,EAAAC,EAAAsxH,EAAA,WACAE,EAAAzxH,EAAAC,EAAAsxH,EAAA,YACAG,EAAA1rJ,KAAAirJ,sBAAAM,EAAAvrJ,KAAAq5H,WACA7pH,QAAAH,IAAA,uCAAAq8I,GAGA,IAAAC,EAAA3rJ,KAAAq5H,UACAlgG,OAAA,SAAAvI,GAAgC,WAAA57B,OAAAw4B,OAAAk+H,GAAAntJ,QAAAqyB,KA2BhC,OA1BAphB,QAAAH,IAAA,oCAAAs8I,GAGA1xH,EAAAhB,MAAAh4B,QAAA,SAAA2vB,GACA86H,EAAA96H,EAAA1xB,MACA0xB,EAAA1xB,GAAAwsJ,EAAA96H,EAAA1xB,OAIAysJ,EAAA1qJ,QAAA,SAAA2vB,GACAqJ,EAAAhB,MAAAn7B,KAAA,CACAoB,GAAA0xB,EACA1nB,UAAA,OACA3T,MAAAi2J,IAEAvxH,EAAAhB,MAAAn7B,KAAA,CACAoB,GAAA0xB,EACA1nB,UAAA,QACA3T,MAAAk2J,MAGAxxH,EAAAX,WAAAW,EAAAX,YAAA,GACAW,EAAAX,WAAAx7B,KAAA,CACA67B,UAAA,MACAV,MAAAj5B,KAAAq5H,UAAA77H,KAAA,OAEAy8B,GAGAyyF,EAAAx2H,UAAA01J,oBAAA,SAAA3xH,EAAAV,GAkBA,IAjBA,IAAAsyH,EAAA,SAAA5xH,EAAArJ,GACAqJ,EAAAhB,MAAAn7B,KAAA,CACAoB,GAAA0xB,EACA1nB,UAAA,QACA3T,MAAA8kI,IAEApgG,EAAAhB,MAAAn7B,KAAA,CACAoB,GAAA0xB,EACA1nB,UAAA,OACA3T,MAAA6kI,KAGAA,EAAApgG,EAAAC,EAAAV,EAAA,QACA8gG,EAAArgG,EAAAC,EAAAV,EAAA,SAGAuyH,EAAA,GACAx3J,EAAA,EAAmBA,EAAA0L,KAAAsR,QAAAs7G,YAAA,IAAkCt4H,EAAA,CACrD,IAAAy3J,EArRAjrJ,KAAAE,MAAA,WAAAF,KAAAwU,UADA,EAuRAu2I,EAAA5xH,EAAA8xH,GACAD,EAAAhuJ,KAAAiuJ,GAOA,OALA9xH,EAAAX,WAAAW,EAAAX,YAAA,GACAW,EAAAX,WAAAx7B,KAAA,CACA67B,UAAA,MACAV,MAAAM,EAAA,IAAAuyH,EAAAtuJ,KAAA,OAEAy8B,GAoBAyyF,EAAAx2H,UAAA81J,kBAAA,SAAA/xH,GAGA,IAAAV,EACAP,EAAAiB,EAAAhB,OAAAgB,EAAAhB,MACAl8B,IAAA,SAAAm8B,GAAiC,OAAAA,EAAAh6B,KACjCi6B,OAAA,SAAAvI,EAAAtyB,EAAA86B,GACA,OAAAA,EAAA76B,QAAAqyB,KAAAtyB,IAEArB,QAAA,EACAo8B,EAAAY,EAAAX,YAAAW,EAAAX,WAAAr8B,QAAA,EAEA,OAAA+7B,KAAA,EAEA,OAAAiB,EAEA,MAAAjB,GAAA,IAAAK,EAEA,OAAAY,EAGA,OAAAjB,EACAO,EAAAU,EAAAhB,MAAA,GAAA/5B,OACK,CAGL,IAAAs6B,EAAAS,EAAAX,WAAAH,OAAA,SAAAO,GAAgE,cAAAA,EAAAC,YAAoC,GACpG,IAAAH,EAIA,OAAAS,EAHAV,EAAA/X,SAAAgY,EAAAP,MAAAn8B,MAAA,SAsBA,OAhBA0S,QAAAH,IAAA,qCAAArP,KAAAq5H,WACA7pH,QAAAH,IAAA,qCAAAkqB,IAEA,IAAAv5B,KAAAq5H,UAAA96H,QAAAg7B,IAGA/pB,QAAAH,IAAA,2EAEA4qB,EAAAj6B,KAAAsrJ,2BAAArxH,KAEAzqB,QAAAH,IAAA,2EAEA4qB,EAAAj6B,KAAA4rJ,oBAAA3xH,EAAAV,IAGAv5B,KAAAq5H,UAAAr5H,KAAAgrJ,gBAAA/wH,GACAA,GAYAyyF,EAAAx2H,UAAA89H,uBAAA,SAAAj8F,GAEA,IAAA+yH,EAAA/yH,GACA,OAAAA,EAGA,IAAA5W,EAAAshC,EAAArhC,MAAA2W,EAAAyC,KAEA9X,EAAA1iB,KAmBA,OAlBA6qJ,EAAA1pI,EAAA,SAAA8Y,GAGAvX,EAAApR,QAAAu7G,uBAtWA,SAAA5yF,GAEA,GAAAA,GAAA75B,MAAAG,QAAA05B,EAAAX,YASA,IALA,IAAA07B,EAAA01F,EAAAzwH,GACAssB,EAAA,GAGA5pD,EAAAs9B,EAAAX,WAAAr8B,OACAN,KAEA,WAAAs9B,EAAAX,WAAA38B,GAAAg9B,UAAA,CAMA,IAFA,IAAAsyH,EAAAhyH,EAAAX,WAAA38B,GAAAs8B,MAAAn8B,MAAA,KAEAxI,EAAA,EAAuBA,EAAA23J,EAAAhvJ,OAA2B3I,IAAA,CAElD,IAAAs8B,EAAAq7H,EAAA33J,GACAiyD,EAAAzoD,KAAA8yB,GAEA,IAAA/xB,EAAAm2D,EAAApkC,GAAA+wB,KAAA7kD,MAAA,KACAk4D,EAAApkC,GAAA+wB,KAAA,CAAA9iD,EAAA,OAAAvK,EAAA,IAAAuK,EAAA,OAAAvK,GAAAkJ,KAAA,IACAw3D,EAAApkC,GAAAgxD,MAAA,CAAA5sB,EAAApkC,GAAAgxD,MAAA,IAAAttF,GAAAkJ,KAAA,IAGAy8B,EAAAX,WAAAr4B,QAAA,SAAAirJ,GACA,WAAAA,EAAAvyH,UAAA,CAIA,IAAAwyH,EAAAD,EAAAjzH,MAAAn8B,MAAA,MACA,IAAAqvJ,EAAA5tJ,QAAAqyB,IAKAu7H,EAAAlrJ,QAAA,SAAAmrJ,GACAp3F,EAAAo3F,GAAAzqG,KAAAqT,EAAApkC,GAAA+wB,KACAqT,EAAAo3F,GAAAxqE,MAAA5sB,EAAApkC,GAAAgxD,MACAwqE,IAAAx7H,GACA21B,EAAAzoD,KAAAsuJ,QAQAnyH,EAAAhB,MAAA0xH,EAAA31F,EAAAzO,GACAtsB,EAAAX,WAAA/7B,OAAAZ,EAAA,IAkTAkwH,CAAA5yF,GA9SA,SAAAA,GAEA,GAAAA,GAAA75B,MAAAG,QAAA05B,EAAAX,YAAA,CAMA,IAAA07B,EAAA01F,EAAAzwH,GAGAA,EAAAX,WAAAr4B,QAAA,SAAAorJ,GACA,WAAAA,EAAA1yH,UAAA,CAIAnqB,QAAAG,KAAA,wBAAA08I,EAAApzH,OAEAozH,EAAAC,MAAA,EAKA,IAHA,IAAAL,EAAAI,EAAApzH,MAAAn8B,MAAA,KAGAxI,EAAA,EAAuBA,EAAA23J,EAAAhvJ,OAA2B3I,IAAA,CAElD,IAAAs8B,EAAAq7H,EAAA33J,UACA0gE,EAAApkC,GAGAqJ,EAAAX,WAAAr4B,QAAA,SAAAirJ,GACA,WAAAA,EAAAvyH,UAAA,CAIA,IAAAwyH,EAAAD,EAAAjzH,MAAAn8B,MAAA,MACA,IAAAqvJ,EAAA5tJ,QAAAqyB,KAKAu7H,EAAAlrJ,QAAA,SAAAmrJ,UACAp3F,EAAAo3F,KAIAF,EAAAI,MAAA,UAOAryH,EAAAhB,MAAA0xH,EAAA31F,GAIA,IADA,IAAA1gE,EAAA2lC,EAAAX,WAAAr8B,OACA3I,KACA2lC,EAAAX,WAAAhlC,GAAAg4J,MACAryH,EAAAX,WAAA/7B,OAAAjJ,EAAA,QAvDAkb,QAAAG,KAAA,6DA6SA48I,CAAAtyH,GAKAvX,EAAA22G,UAAAp8H,OAAA,EAtPA,SAAAg9B,GACA,GAAAA,GAAA75B,MAAAG,QAAA05B,EAAAuyH,SAKA,IADA,IAAAl4J,EAAA2lC,EAAAuyH,QAAAvvJ,OACA3I,KACA,4BAAA2lC,EAAAuyH,QAAAl4J,GAAAiB,OACA0kC,EAAAuyH,QAAAjvJ,OAAAjJ,EAAA,GA+OAm4J,CAAAxyH,GA1OA,SAAAA,GACAA,IAIA75B,MAAAG,QAAA05B,EAAAuyH,WACAvyH,EAAAuyH,QAAA,IAGAvyH,EAAAuyH,QAAAh5G,KACA,SAAAl/C,GAA0B,mCAAAA,EAAAiB,SAC1B0kC,EAAAuyH,QAAA1uJ,KAAA,CAA4BvI,MAAA,8BAiO5Bm3J,CAAAzyH,KAIA,IAAA0sC,sBAAA,CACAt1D,KAAA0mB,EAAA1mB,KACAmpB,IAAAioB,EAAAnD,MAAAn+B,MAWAurG,EAAAx2H,UAAA4/H,sBAAA,SAAA/9F,GAEA,IAAA+yH,EAAA/yH,GACA,OAAAA,EAGA,IAAA5W,EAAAshC,EAAArhC,MAAA2W,EAAAyC,KAEA9X,EAAA1iB,KASA,OARA6qJ,EAAA1pI,EAAA,SAAA8Y,GACA,YAAAA,EAAA5B,WAAA,YAAA4B,EAAA5B,WAIA3V,EAAAspI,kBAAA/xH,KAGA,IAAA0sC,sBAAA,CACAt1D,KAAA0mB,EAAA1mB,KACAmpB,IAAAioB,EAAAnD,MAAAn+B,MAMAptB,EAAAD,QAAA44H,iBCxdA54H,EAAA62J,WAAA,SAAA31F,EAAAzO,GACA,IAAAttB,EAAA,GAGA,YAAA+7B,GACA,IAAAhgE,OAAAq5B,KAAA2mC,GAAA/3D,OAAA,CAEAmD,MAAAG,QAAAgmD,KACAA,EAAA,IAIA,QAAAjyD,EAAA,EAAmBA,EAAAiyD,EAAAtpD,OAAkB3I,IAAA,CACrC,IAAAs8B,EAAA21B,EAAAjyD,GACA+qC,EAAA21B,EAAApkC,GACA57B,OAAAq5B,KAAAgR,GAAAp+B,QAAA,SAAAiI,GACA+vB,EAAAn7B,KAAA,CACAoB,GAAA0xB,EACA1nB,YACA3T,MAAA8pC,EAAAn2B,OAMAlU,OAAAq5B,KAAA2mC,GAAA/zD,QAAA,SAAA2vB,GAEA,GADAA,EAAApP,SAAAoP,KACA21B,EAAAhoD,QAAAqyB,IAAA,IAKA,IAAAyO,EAAA21B,EAAApkC,GACA57B,OAAAq5B,KAAAgR,GAAAp+B,QAAA,SAAAiI,GACA+vB,EAAAn7B,KAAA,CACAoB,GAAA0xB,EACA1nB,YACA3T,MAAA8pC,EAAAn2B,UAMA,OAAA+vB,GAGAnlC,EAAA42J,WAAA,SAAAzwH,GACA,IAAA+6B,EAAA,GASA,YAPA,IAAA/6B,EAAAhB,OAAA74B,MAAAG,QAAA05B,EAAAhB,QACAgB,EAAAhB,MAAAh4B,QAAA,SAAA2vB,GACAokC,EAAApkC,EAAA1xB,MACA81D,EAAApkC,EAAA1xB,IAAA,IACA81D,EAAApkC,EAAA1xB,IAAA0xB,EAAA1nB,WAAA0nB,EAAAr7B,QAGAy/D,kBC3DAjhE,EAAOD,QATiB,SAASspF,EAAMvoF,EAAM6vF,EAAWojD,GACpD9nI,KAAKo9E,KAAOA,EACZp9E,KAAKnL,KAAOA,EACZmL,KAAK0kF,UAAYA,EACjB1kF,KAAK8nI,UAAYA,oBCdrB,IAAM6kB,EAAuB3xJ,EAAQ,KAC/B4xJ,EAAO5xJ,EAAQ,KACfusI,EAAgBvsI,EAAQ,IAKxBqsI,EAAgB,WAElBrnI,KAAK8vC,IAiHT,WACI,IAAM5gC,EAAU,2DAEhB,QAAyBpU,IAArBU,OAAOqxJ,UACPr9I,QAAQH,IAAIH,OACT,CACH,IAAM49I,EAAWtxJ,OAAOqxJ,UAExB,QAA0B/xJ,IAAtBgyJ,EAAS9gH,UAA0B8gH,EAAS9gH,SAAS,YACrD,OAAO8gH,EAEXt9I,QAAQH,IAAIH,IA5HL69I,IAMf1lB,EAAcnxI,UAAYlB,OAAOY,OAAO+2J,EAAqBz2J,WAK7DmxI,EAAc1vF,YAAc0vF,EAS5BA,EAAcnxI,UAAUqoI,YAAc,SAASyuB,EAAe3tJ,GAC1DmQ,QAAQH,IAAR,6BAAA/R,OAAyC0C,KAAK8vC,MAC9CtgC,QAAQH,IAAR,8BAAA/R,OAA0C0vJ,IAC1C,IAAMhjF,EAAU,IAAI9pD,eAEpB8pD,EAAQ5pD,mBAAqB,WACzB,GAAI4pD,EAAQ9nD,aAAehC,eAAe+sI,MAChB,MAAnBjjF,EAAQrwD,OACXta,EAAS2qE,EAAQ5rD,mBACd,GAAI4rD,EAAQ9nD,aAAehC,eAAe+sI,KAC7C,MAAM,IAAI9uJ,MAAJ,yDAAAb,OAEE0sE,EAAQrwD,UAKxBqwD,EAAQjnD,KAAK,OAAQ/iB,KAAK8vC,KAC1Bk6B,EAAQ/mD,iBAAiB,eACrBskH,EAAcziD,4BAClB9a,EAAQ3yD,KAAK21I,GACbx9I,QAAQH,IAAR,QAAA/R,OAAoB0vJ,KASxB3lB,EAAcnxI,UAAUg3J,eAAiB,SAASlxI,GAC9C,IAAMlM,EAAS8G,KAAKwK,MAAMpF,GAAUmxI,QAKpCr9I,EAAOsmB,QACP,IAAMgD,EAAQ,GAOd,OALAtpB,EAAO7O,QACH,SAAAinI,GAAI,OACAA,EAAKklB,QACEh0H,EAAMt7B,KAAK,IAAI8uJ,EAAK1kB,EAAKA,KAAMA,EAAKriH,MAAOqiH,EAAKriB,QAExDzsF,GAQXiuG,EAAcnxI,UAAUm3J,OAAS,SAASrxI,GAItC,GAHAxM,QAAQH,IAAR,wBAAA/R,OAAoC0e,EAASvb,aAGrB,iBAAbub,EACP,OAAO,EAIX,IAAI81C,EAEJ,IACIA,EAAOl7C,KAAKwK,MAAMpF,GACpB,MAAOvM,GAGL,OAFAD,QAAQH,IAAII,IAEL,EAIX,QAAqB3U,IAAjBg3D,EAAKq7F,QACL,OAAO,EAIX,IAAM/zH,EAAQ04B,EAAKq7F,QAEnB,SAAM/zH,EAAM,KAAMA,EAAM,GAAG,gBA8B/BrlC,EAAOD,QAAUuzI,iBCxIjB,IAAMslB,EAAuB,WACzB,MAAM,IAAIxuJ,MAAM,0DAapBwuJ,EAAqBz2J,UAAUmhB,KAAO,SAAc+wH,EAAiB/oI,GAAU,IAAAqoC,EAAA1nC,KAC3EA,KAAKu+H,YAAY6J,EAAgBhrD,KAAM,SAAAphE,GAC/B0rB,EAAK2lH,OAAOrxI,GACZosH,EAAgBN,UAAYpgG,EAAKwlH,eAAelxI,IAEhDxM,QAAQH,IAAI,wDACZ+4H,EAAgBN,UAAY,IAEhCzoI,EAAS+oI,MAcjBukB,EAAqBz2J,UAAUqoI,YAAc,SAAS+uB,EAAWjuJ,GAC7D,MAAM,IAAIlB,MAAM,iDAmBpBwuJ,EAAqBz2J,UAAUg3J,eAAiB,SAASlxI,GACrD,MAAM,IAAI7d,MAAM,4CAUpBwuJ,EAAqBz2J,UAAUm3J,OAAS,SAASrxI,GAC7C,MAAM,IAAI7d,MAAM,4CAGpBpK,EAAOD,QAAU64J,iBCrEjB,IAAMC,EAAO,SAAS1kB,EAAMD,EAAOpiB,GAC/B7lH,KAAKkoI,KAAOA,EACZloI,KAAKioI,MAAQA,EACbjoI,KAAK6lH,IAAMA,GAOf+mC,EAAK12J,UAAUq3J,QAAU,WACrB,OAAOvtJ,KAAKkoI,MAOhB0kB,EAAK12J,UAAUs3J,aAAe,WAC1B,OAAOxtJ,KAAKioI,OAOhB2kB,EAAK12J,UAAUu3J,WAAa,WACxB,OAAOztJ,KAAK6lH,KAGhB9xH,EAAOD,QAAU84J","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 115);\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    CONFERENCE_SETUP_FAILED: 'xmpp.conference_setup_failed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /* Event fired when XMPP error is returned to any request, it is meant to be\n     * used to report 'signaling' errors to CallStats\n     *\n     * {\n     *   code: {XMPP error code}\n     *   reason: {XMPP error condition}\n     *   source = request.tree()\n     *   session = {JingleSession instance}\n     * }\n     */\n    JINGLE_ERROR: 'xmpp.jingle_error',\n\n    // Event fired when we have failed to set initial offer\n    JINGLE_FATAL_ERROR: 'xmpp.jingle_fatal_error',\n\n    // Designates an event indicating that we were kicked from the XMPP MUC.\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTCIPANT_FEATURES_CHANGED: 'xmpp.partcipant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n    PEERCONNECTION_READY: 'xmpp.peerconnection_ready',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","/** File: strophe.js\n *  A JavaScript library for writing XMPP clients.\n *\n *  This library uses either Bidirectional-streams Over Synchronous HTTP (BOSH)\n *  to emulate a persistent, stateful, two-way connection to an XMPP server or\n *  alternatively WebSockets.\n *\n *  More information on BOSH can be found in XEP 124.\n *  For more information on XMPP-over WebSocket see this RFC:\n *  http://tools.ietf.org/html/rfc7395\n */\n\n/* All of the Strophe globals are defined in this special function below so\n * that references to the globals become closures.  This will ensure that\n * on page reload, these references will still be available to callbacks\n * that are still executing.\n */\n\n/* jshint ignore:start */\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //Allow using this built library as an AMD module\n        //in another project. That other project will only\n        //see this AMD call, not the internal modules in\n        //the closure below.\n        define([], factory);\n    } else {\n        //Browser globals case.\n        var wrapper = factory();\n        root.Strophe        = wrapper.Strophe;\n        root.$build         = wrapper.$build;\n        root.$iq            = wrapper.$iq;\n        root.$msg           = wrapper.$msg;\n        root.$pres          = wrapper.$pres;\n        root.SHA1           = wrapper.SHA1;\n        root.MD5            = wrapper.MD5;\n        root.b64_hmac_sha1  = wrapper.b64_hmac_sha1;\n        root.b64_sha1       = wrapper.b64_sha1;\n        root.str_hmac_sha1  = wrapper.str_hmac_sha1;\n        root.str_sha1       = wrapper.str_sha1;\n    }\n}(this, function () {\n    //almond, and your modules will be inlined here\n/* jshint ignore:end */\n/**\n * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, http://github.com/requirejs/almond/LICENSE\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name) {\n            name = name.split('/');\n            lastIndex = name.length - 1;\n\n            // If wanting node ID compatibility, strip .js from end\n            // of IDs. Have to do this here, and not in nameToUrl\n            // because node allows either .js or non .js to map\n            // to same file.\n            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n            }\n\n            // Starts with a '.' so need the baseName\n            if (name[0].charAt(0) === '.' && baseParts) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that 'directory' and not name of the baseName's\n                //module. For instance, baseName of 'one/two/three', maps to\n                //'one/two/three.js', but we want the directory, 'one/two' for\n                //this normalization.\n                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                name = normalizedBaseParts.concat(name);\n            }\n\n            //start trimDots\n            for (i = 0; i < name.length; i++) {\n                part = name[i];\n                if (part === '.') {\n                    name.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        name.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n            //end trimDots\n\n            name = name.join('/');\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    //Creates a parts array for a relName where first part is plugin ID,\n    //second part is resource ID. Assumes relName has already been normalized.\n    function makeRelParts(relName) {\n        return relName ? splitPrefix(relName) : [];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relParts) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0],\n            relResourceName = relParts[1];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relResourceName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relResourceName));\n            } else {\n                name = normalize(name, relResourceName);\n            }\n        } else {\n            name = normalize(name, relResourceName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i, relParts,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n        relParts = makeRelParts(relName);\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relParts);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, makeRelParts(callback)).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"node_modules/almond/almond.js\", function(){});\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/* global define */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-polyfill',[], function () {\n            return factory(root);\n        });\n    } else {\n        // Browser globals\n        return factory(root);\n    }\n}(this, function (root) {\n\n/** Function: Function.prototype.bind\n *  Bind a function to an instance.\n *\n *  This Function object extension method creates a bound method similar\n *  to those in Python.  This means that the 'this' object will point\n *  to the instance you want.  See <MDC's bind() documentation at https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind>\n *  and <Bound Functions and Function Imports in JavaScript at http://benjamin.smedbergs.us/blog/2007-01-03/bound-functions-and-function-imports-in-javascript/>\n *  for a complete explanation.\n *\n *  This extension already exists in some browsers (namely, Firefox 3), but\n *  we provide it to support those that don't.\n *\n *  Parameters:\n *    (Object) obj - The object that will become 'this' in the bound function.\n *    (Object) argN - An option argument that will be prepended to the\n *      arguments given for the function call\n *\n *  Returns:\n *    The bound function.\n */\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (obj /*, arg1, arg2, ... */) {\n        var func = this;\n        var _slice = Array.prototype.slice;\n        var _concat = Array.prototype.concat;\n        var _args = _slice.call(arguments, 1);\n        return function () {\n            return func.apply(obj ? obj : this, _concat.call(_args, _slice.call(arguments, 0)));\n        };\n    };\n}\n\n/** Function: Array.isArray\n *  This is a polyfill for the ES5 Array.isArray method.\n */\nif (!Array.isArray) {\n    Array.isArray = function(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n}\n\n/** Function: Array.prototype.indexOf\n *  Return the index of an object in an array.\n *\n *  This function is not supplied by some JavaScript implementations, so\n *  we provide it if it is missing.  This code is from:\n *  http://developer.mozilla.org/En/Core_JavaScript_1.5_Reference:Objects:Array:indexOf\n *\n *  Parameters:\n *    (Object) elt - The object to look for.\n *    (Integer) from - The index from which to start looking. (optional).\n *\n *  Returns:\n *    The index of elt in the array or -1 if not found.\n */\nif (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function(elt /*, from*/) {\n        var len = this.length;\n        var from = Number(arguments[1]) || 0;\n        from = (from < 0) ? Math.ceil(from) : Math.floor(from);\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from++) {\n            if (from in this && this[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n}\n\n/** Function: Array.prototype.forEach\n *\n *  This function is not available in IE < 9\n *\n *  See <forEach on developer.mozilla.org at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach>\n */\nif (!Array.prototype.forEach) {\n    Array.prototype.forEach = function(callback, thisArg) {\n        var T, k;\n        if (this === null) {\n            throw new TypeError(' this is null or not defined');\n        }\n        // 1. Let O be the result of calling toObject() passing the\n        // |this| value as the argument.\n        var O = Object(this);\n        // 2. Let lenValue be the result of calling the Get() internal\n        // method of O with the argument \"length\".\n        // 3. Let len be toUint32(lenValue).\n        var len = O.length >>> 0;\n        // 4. If isCallable(callback) is false, throw a TypeError exception.\n        // See: http://es5.github.com/#x9.11\n        if (typeof callback !== \"function\") {\n            throw new TypeError(callback + ' is not a function');\n        }\n        // 5. If thisArg was supplied, let T be thisArg; else let\n        // T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n        // 6. Let k be 0\n        k = 0;\n        // 7. Repeat, while k < len\n        while (k < len) {\n            var kValue;\n            // a. Let Pk be ToString(k).\n            //        This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty\n            //        internal method of O with argument Pk.\n            //        This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n                // i. Let kValue be the result of calling the Get internal\n                // method of O with argument Pk.\n                kValue = O[k];\n                // ii. Call the Call internal method of callback with T as\n                // the this value and argument list containing kValue, k, and O.\n                callback.call(T, kValue, k, O);\n            }\n            // d. Increase k by 1.\n            k++;\n        }\n        // 8. return undefined\n    };\n}\n\n// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\nvar keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nif (!root.btoa) {\n    root.btoa = function (input) {\n        /**\n         * Encodes a string in base64\n         * @param {String} input The string to encode in base64.\n         */\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n        do {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n                enc2 = ((chr1 & 3) << 4);\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n            output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) +\n                keyStr.charAt(enc3) + keyStr.charAt(enc4);\n        } while (i < input.length);\n        return output;\n    };\n}\n\nif (!root.atob) {\n    root.atob = function (input) {\n        /**\n         * Decodes a base64 string.\n         * @param {String} input The string to decode.\n         */\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n        do {\n            enc1 = keyStr.indexOf(input.charAt(i++));\n            enc2 = keyStr.indexOf(input.charAt(i++));\n            enc3 = keyStr.indexOf(input.charAt(i++));\n            enc4 = keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 !== 64) {\n                output = output + String.fromCharCode(chr2);\n            }\n            if (enc4 !== 64) {\n                output = output + String.fromCharCode(chr3);\n            }\n        } while (i < input.length);\n        return output;\n    };\n}\n}));\n\n/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: false */\n/* global define */\n\n/* Some functions and variables have been stripped for use with Strophe */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-sha1', [],function () {\n            return factory();\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.SHA1 = factory();\n    }\n}(this, function () {\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction core_sha1(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << (24 - len % 32);\n  x[((len + 64 >> 9) << 4) + 15] = len;\n\n  var w = new Array(80);\n  var a =  1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d =  271733878;\n  var e = -1009589776;\n\n  var i, j, t, olda, oldb, oldc, oldd, olde;\n  for (i = 0; i < x.length; i += 16)\n  {\n    olda = a;\n    oldb = b;\n    oldc = c;\n    oldd = d;\n    olde = e;\n\n    for (j = 0; j < 80; j++)\n    {\n      if (j < 16) { w[j] = x[i + j]; }\n      else { w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1); }\n      t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n  return [a, b, c, d, e];\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft(t, b, c, d)\n{\n  if (t < 20) { return (b & c) | ((~b) & d); }\n  if (t < 40) { return b ^ c ^ d; }\n  if (t < 60) { return (b & c) | (b & d) | (c & d); }\n  return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t)\n{\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\n         (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Calculate the HMAC-SHA1 of a key and some data\n */\nfunction core_hmac_sha1(key, data)\n{\n  var bkey = str2binb(key);\n  if (bkey.length > 16) { bkey = core_sha1(bkey, key.length * 8); }\n\n  var ipad = new Array(16), opad = new Array(16);\n  for (var i = 0; i < 16; i++)\n  {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\n  }\n\n  var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n  return core_sha1(opad.concat(hash), 512 + 160);\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction rol(num, cnt)\n{\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\n/*\n * Convert an 8-bit or 16-bit string to an array of big-endian words\n * In 8-bit function, characters >255 have their hi-byte silently ignored.\n */\nfunction str2binb(str)\n{\n  var bin = [];\n  var mask = 255;\n  for (var i = 0; i < str.length * 8; i += 8)\n  {\n    bin[i>>5] |= (str.charCodeAt(i / 8) & mask) << (24 - i%32);\n  }\n  return bin;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\nfunction binb2str(bin)\n{\n  var str = \"\";\n  var mask = 255;\n  for (var i = 0; i < bin.length * 32; i += 8)\n  {\n    str += String.fromCharCode((bin[i>>5] >>> (24 - i%32)) & mask);\n  }\n  return str;\n}\n\n/*\n * Convert an array of big-endian words to a base-64 string\n */\nfunction binb2b64(binarray)\n{\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var str = \"\";\n  var triplet, j;\n  for (var i = 0; i < binarray.length * 4; i += 3)\n  {\n    triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16) |\n              (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 ) |\n               ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);\n    for (j = 0; j < 4; j++)\n    {\n      if (i * 8 + j * 6 > binarray.length * 32) { str += \"=\"; }\n      else { str += tab.charAt((triplet >> 6*(3-j)) & 0x3F); }\n    }\n  }\n  return str;\n}\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nreturn {\n    b64_hmac_sha1:  function (key, data){ return binb2b64(core_hmac_sha1(key, data)); },\n    b64_sha1:       function (s) { return binb2b64(core_sha1(str2binb(s),s.length * 8)); },\n    binb2str:       binb2str,\n    core_hmac_sha1: core_hmac_sha1,\n    str_hmac_sha1:  function (key, data){ return binb2str(core_hmac_sha1(key, data)); },\n    str_sha1:       function (s) { return binb2str(core_sha1(str2binb(s),s.length * 8)); },\n};\n}));\n\n/*\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n/*\n * Everything that isn't used by Strophe has been stripped here!\n */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-md5',[], function () {\n            return factory();\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.MD5 = factory();\n    }\n}(this, function () {\n    /*\n     * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n     * to work around bugs in some JS interpreters.\n     */\n    var safe_add = function (x, y) {\n        var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n        return (msw << 16) | (lsw & 0xFFFF);\n    };\n\n    /*\n     * Bitwise rotate a 32-bit number to the left.\n     */\n    var bit_rol = function (num, cnt) {\n        return (num << cnt) | (num >>> (32 - cnt));\n    };\n\n    /*\n     * Convert a string to an array of little-endian words\n     */\n    var str2binl = function (str) {\n        var bin = [];\n        for(var i = 0; i < str.length * 8; i += 8)\n        {\n            bin[i>>5] |= (str.charCodeAt(i / 8) & 255) << (i%32);\n        }\n        return bin;\n    };\n\n    /*\n     * Convert an array of little-endian words to a string\n     */\n    var binl2str = function (bin) {\n        var str = \"\";\n        for(var i = 0; i < bin.length * 32; i += 8)\n        {\n            str += String.fromCharCode((bin[i>>5] >>> (i % 32)) & 255);\n        }\n        return str;\n    };\n\n    /*\n     * Convert an array of little-endian words to a hex string.\n     */\n    var binl2hex = function (binarray) {\n        var hex_tab = \"0123456789abcdef\";\n        var str = \"\";\n        for(var i = 0; i < binarray.length * 4; i++)\n        {\n            str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) +\n                hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);\n        }\n        return str;\n    };\n\n    /*\n     * These functions implement the four basic operations the algorithm uses.\n     */\n    var md5_cmn = function (q, a, b, x, s, t) {\n        return safe_add(bit_rol(safe_add(safe_add(a, q),safe_add(x, t)), s),b);\n    };\n\n    var md5_ff = function (a, b, c, d, x, s, t) {\n        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\n    };\n\n    var md5_gg = function (a, b, c, d, x, s, t) {\n        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\n    };\n\n    var md5_hh = function (a, b, c, d, x, s, t) {\n        return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n    };\n\n    var md5_ii = function (a, b, c, d, x, s, t) {\n        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\n    };\n\n    /*\n     * Calculate the MD5 of an array of little-endian words, and a bit length\n     */\n    var core_md5 = function (x, len) {\n        /* append padding */\n        x[len >> 5] |= 0x80 << ((len) % 32);\n        x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n        var a =  1732584193;\n        var b = -271733879;\n        var c = -1732584194;\n        var d =  271733878;\n\n        var olda, oldb, oldc, oldd;\n        for (var i = 0; i < x.length; i += 16)\n        {\n            olda = a;\n            oldb = b;\n            oldc = c;\n            oldd = d;\n\n            a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);\n            d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);\n            c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);\n            b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);\n            a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);\n            d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);\n            c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);\n            b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);\n            a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);\n            d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);\n            c = md5_ff(c, d, a, b, x[i+10], 17, -42063);\n            b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);\n            a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);\n            d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);\n            c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);\n            b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);\n\n            a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);\n            d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);\n            c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);\n            b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);\n            a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);\n            d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);\n            c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);\n            b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);\n            a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);\n            d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);\n            c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);\n            b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);\n            a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);\n            d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);\n            c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);\n            b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);\n\n            a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);\n            d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);\n            c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);\n            b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);\n            a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);\n            d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);\n            c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);\n            b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);\n            a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);\n            d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);\n            c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);\n            b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);\n            a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);\n            d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);\n            c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);\n            b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);\n\n            a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);\n            d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);\n            c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);\n            b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);\n            a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);\n            d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);\n            c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);\n            b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);\n            a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);\n            d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);\n            c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);\n            b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);\n            a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);\n            d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);\n            c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);\n            b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);\n\n            a = safe_add(a, olda);\n            b = safe_add(b, oldb);\n            c = safe_add(c, oldc);\n            d = safe_add(d, oldd);\n        }\n        return [a, b, c, d];\n    };\n\n    var obj = {\n        /*\n         * These are the functions you'll usually want to call.\n         * They take string arguments and return either hex or base-64 encoded\n         * strings.\n         */\n        hexdigest: function (s) {\n            return binl2hex(core_md5(str2binl(s), s.length * 8));\n        },\n\n        hash: function (s) {\n            return binl2str(core_md5(str2binl(s), s.length * 8));\n        }\n    };\n    return obj;\n}));\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-utils',[], function () {\n            return factory();\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.stropheUtils = factory();\n    }\n}(this, function () {\n\n    var utils = {\n\n        utf16to8: function (str) {\n            var i, c;\n            var out = \"\";\n            var len = str.length;\n            for (i = 0; i < len; i++) {\n                c = str.charCodeAt(i);\n                if ((c >= 0x0000) && (c <= 0x007F)) {\n                    out += str.charAt(i);\n                } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));\n                    out += String.fromCharCode(0x80 | ((c >>  6) & 0x3F));\n                    out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));\n                } else {\n                    out += String.fromCharCode(0xC0 | ((c >>  6) & 0x1F));\n                    out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));\n                }\n            }\n            return out;\n        },\n\n        addCookies: function (cookies) {\n            /* Parameters:\n             *  (Object) cookies - either a map of cookie names\n             *    to string values or to maps of cookie values.\n             *\n             * For example:\n             * { \"myCookie\": \"1234\" }\n             *\n             * or:\n             * { \"myCookie\": {\n             *      \"value\": \"1234\",\n             *      \"domain\": \".example.org\",\n             *      \"path\": \"/\",\n             *      \"expires\": expirationDate\n             *      }\n             *  }\n             *\n             *  These values get passed to Strophe.Connection via\n             *   options.cookies\n             */\n            var cookieName, cookieObj, isObj, cookieValue, expires, domain, path;\n            for (cookieName in (cookies || {})) {\n                expires = '';\n                domain = '';\n                path = '';\n                cookieObj = cookies[cookieName];\n                isObj = typeof cookieObj === \"object\";\n                cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n                if (isObj) {\n                    expires = cookieObj.expires ? \";expires=\"+cookieObj.expires : '';\n                    domain = cookieObj.domain ? \";domain=\"+cookieObj.domain : '';\n                    path = cookieObj.path ? \";path=\"+cookieObj.path : '';\n                }\n                document.cookie =\n                    cookieName+'='+cookieValue + expires + domain + path;\n            }\n        }\n    };\n    return utils;\n}));\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/*global define, document, sessionStorage, setTimeout, clearTimeout, ActiveXObject, DOMParser, btoa, atob */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-core',[\n            'strophe-sha1',\n            'strophe-md5',\n            'strophe-utils'\n        ], function () {\n            return factory.apply(this, arguments);\n        });\n    }  else if (typeof exports === 'object') {\n        module.exports = factory(\n            require('./sha1'),\n            require('./md5'),\n            require('./utils')\n        );\n    } else {\n        // Browser globals\n        var o = factory(root.SHA1, root.MD5, root.stropheUtils);\n        root.Strophe =        o.Strophe;\n        root.$build =         o.$build;\n        root.$iq =            o.$iq;\n        root.$msg =           o.$msg;\n        root.$pres =          o.$pres;\n        root.SHA1 =           o.SHA1;\n        root.MD5 =            o.MD5;\n        root.b64_hmac_sha1 =  o.SHA1.b64_hmac_sha1;\n        root.b64_sha1 =       o.SHA1.b64_sha1;\n        root.str_hmac_sha1 =  o.SHA1.str_hmac_sha1;\n        root.str_sha1 =       o.SHA1.str_sha1;\n    }\n}(this, function (SHA1, MD5, utils) {\n\nvar Strophe;\n\n/** Function: $build\n *  Create a Strophe.Builder.\n *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n *\n *  Parameters:\n *    (String) name - The root element name.\n *    (Object) attrs - The attributes for the root element in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $build(name, attrs) { return new Strophe.Builder(name, attrs); }\n\n/** Function: $msg\n *  Create a Strophe.Builder with a <message/> element as the root.\n *\n *  Parameters:\n *    (Object) attrs - The <message/> element attributes in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $msg(attrs) { return new Strophe.Builder(\"message\", attrs); }\n\n/** Function: $iq\n *  Create a Strophe.Builder with an <iq/> element as the root.\n *\n *  Parameters:\n *    (Object) attrs - The <iq/> element attributes in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $iq(attrs) { return new Strophe.Builder(\"iq\", attrs); }\n\n/** Function: $pres\n *  Create a Strophe.Builder with a <presence/> element as the root.\n *\n *  Parameters:\n *    (Object) attrs - The <presence/> element attributes in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $pres(attrs) { return new Strophe.Builder(\"presence\", attrs); }\n\n/** Class: Strophe\n *  An object container for all Strophe library functions.\n *\n *  This class is just a container for all the objects and constants\n *  used in the library.  It is not meant to be instantiated, but to\n *  provide a namespace for library objects, constants, and functions.\n */\nStrophe = {\n    /** Constant: VERSION */\n    VERSION: \"1.2.16\",\n\n    /** Constants: XMPP Namespace Constants\n     *  Common namespace constants from the XMPP RFCs and XEPs.\n     *\n     *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n     *  NS.BOSH - BOSH namespace from XEP 206.\n     *  NS.CLIENT - Main XMPP client namespace.\n     *  NS.AUTH - Legacy authentication namespace.\n     *  NS.ROSTER - Roster operations namespace.\n     *  NS.PROFILE - Profile namespace.\n     *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n     *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n     *  NS.MUC - Multi-User Chat namespace from XEP 45.\n     *  NS.SASL - XMPP SASL namespace from RFC 3920.\n     *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n     *  NS.BIND - XMPP Binding namespace from RFC 3920.\n     *  NS.SESSION - XMPP Session namespace from RFC 3920.\n     *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n     *  NS.XHTML - XHTML body namespace from XEP 71.\n     */\n    NS: {\n        HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n        BOSH: \"urn:xmpp:xbosh\",\n        CLIENT: \"jabber:client\",\n        AUTH: \"jabber:iq:auth\",\n        ROSTER: \"jabber:iq:roster\",\n        PROFILE: \"jabber:iq:profile\",\n        DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n        DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n        MUC: \"http://jabber.org/protocol/muc\",\n        SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n        STREAM: \"http://etherx.jabber.org/streams\",\n        FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n        BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n        SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n        VERSION: \"jabber:iq:version\",\n        STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n        XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n        XHTML: \"http://www.w3.org/1999/xhtml\"\n    },\n\n    /** Constants: XHTML_IM Namespace\n     *  contains allowed tags, tag attributes, and css properties.\n     *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n     *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n     *  allowed tags and their attributes.\n     */\n    XHTML: {\n        tags: ['a','blockquote','br','cite','em','img','li','ol','p','span','strong','ul','body'],\n        attributes: {\n            'a':          ['href'],\n            'blockquote': ['style'],\n            'br':         [],\n            'cite':       ['style'],\n            'em':         [],\n            'img':        ['src', 'alt', 'style', 'height', 'width'],\n            'li':         ['style'],\n            'ol':         ['style'],\n            'p':          ['style'],\n            'span':       ['style'],\n            'strong':     [],\n            'ul':         ['style'],\n            'body':       []\n        },\n        css: ['background-color','color','font-family','font-size','font-style','font-weight','margin-left','margin-right','text-align','text-decoration'],\n        /** Function: XHTML.validTag\n         *\n         * Utility method to determine whether a tag is allowed\n         * in the XHTML_IM namespace.\n         *\n         * XHTML tag names are case sensitive and must be lower case.\n         */\n        validTag: function(tag) {\n            for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                if (tag === Strophe.XHTML.tags[i]) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        /** Function: XHTML.validAttribute\n         *\n         * Utility method to determine whether an attribute is allowed\n         * as recommended per XEP-0071\n         *\n         * XHTML attribute names are case sensitive and must be lower case.\n         */\n        validAttribute: function(tag, attribute) {\n            if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                    if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                    }\n                }\n            }\n        return false;\n        },\n        validCSS: function(style) {\n            for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                if (style === Strophe.XHTML.css[i]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    },\n\n    /** Constants: Connection Status Constants\n     *  Connection status constants for use by the connection handler\n     *  callback.\n     *\n     *  Status.ERROR - An error has occurred\n     *  Status.CONNECTING - The connection is currently being made\n     *  Status.CONNFAIL - The connection attempt failed\n     *  Status.AUTHENTICATING - The connection is authenticating\n     *  Status.AUTHFAIL - The authentication attempt failed\n     *  Status.CONNECTED - The connection has succeeded\n     *  Status.DISCONNECTED - The connection has been terminated\n     *  Status.DISCONNECTING - The connection is currently being terminated\n     *  Status.ATTACHED - The connection has been attached\n     *  Status.REDIRECT - The connection has been redirected\n     *  Status.CONNTIMEOUT - The connection has timed out\n     */\n    Status: {\n        ERROR: 0,\n        CONNECTING: 1,\n        CONNFAIL: 2,\n        AUTHENTICATING: 3,\n        AUTHFAIL: 4,\n        CONNECTED: 5,\n        DISCONNECTED: 6,\n        DISCONNECTING: 7,\n        ATTACHED: 8,\n        REDIRECT: 9,\n        CONNTIMEOUT: 10\n    },\n\n    ErrorCondition: {\n        BAD_FORMAT: \"bad-format\",\n        CONFLICT: \"conflict\",\n        MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n        NO_AUTH_MECH: \"no-auth-mech\",\n        UNKNOWN_REASON: \"unknown\",\n    },\n\n    /** Constants: Log Level Constants\n     *  Logging level indicators.\n     *\n     *  LogLevel.DEBUG - Debug output\n     *  LogLevel.INFO - Informational output\n     *  LogLevel.WARN - Warnings\n     *  LogLevel.ERROR - Errors\n     *  LogLevel.FATAL - Fatal errors\n     */\n    LogLevel: {\n        DEBUG: 0,\n        INFO: 1,\n        WARN: 2,\n        ERROR: 3,\n        FATAL: 4\n    },\n\n    /** PrivateConstants: DOM Element Type Constants\n     *  DOM element types.\n     *\n     *  ElementType.NORMAL - Normal element.\n     *  ElementType.TEXT - Text data element.\n     *  ElementType.FRAGMENT - XHTML fragment element.\n     */\n    ElementType: {\n        NORMAL: 1,\n        TEXT: 3,\n        CDATA: 4,\n        FRAGMENT: 11\n    },\n\n    /** PrivateConstants: Timeout Values\n     *  Timeout values for error states.  These values are in seconds.\n     *  These should not be changed unless you know exactly what you are\n     *  doing.\n     *\n     *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n     *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n     *      This defaults to 1.1, and with default wait, 66 seconds.\n     *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n     *      Strophe can detect early failure, it will consider the request\n     *      failed if it doesn't return after\n     *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n     *      This defaults to 0.1, and with default wait, 6 seconds.\n     */\n    TIMEOUT: 1.1,\n    SECONDARY_TIMEOUT: 0.1,\n\n    /** Function: addNamespace\n     *  This function is used to extend the current namespaces in\n     *  Strophe.NS.  It takes a key and a value with the key being the\n     *  name of the new namespace, with its actual value.\n     *  For example:\n     *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n     *\n     *  Parameters:\n     *    (String) name - The name under which the namespace will be\n     *      referenced under Strophe.NS\n     *    (String) value - The actual namespace.\n     */\n    addNamespace: function (name, value) {\n        Strophe.NS[name] = value;\n    },\n\n    /** Function: forEachChild\n     *  Map a function over some or all child elements of a given element.\n     *\n     *  This is a small convenience function for mapping a function over\n     *  some or all of the children of an element.  If elemName is null, all\n     *  children will be passed to the function, otherwise only children\n     *  whose tag names match elemName will be passed.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The element to operate on.\n     *    (String) elemName - The child element tag name filter.\n     *    (Function) func - The function to apply to each child.  This\n     *      function should take a single argument, a DOM element.\n     */\n    forEachChild: function (elem, elemName, func) {\n        var i, childNode;\n        for (i = 0; i < elem.childNodes.length; i++) {\n            childNode = elem.childNodes[i];\n            if (childNode.nodeType === Strophe.ElementType.NORMAL &&\n                (!elemName || this.isTagEqual(childNode, elemName))) {\n                func(childNode);\n            }\n        }\n    },\n\n    /** Function: isTagEqual\n     *  Compare an element's tag name with a string.\n     *\n     *  This function is case sensitive.\n     *\n     *  Parameters:\n     *    (XMLElement) el - A DOM element.\n     *    (String) name - The element name.\n     *\n     *  Returns:\n     *    true if the element's tag name matches _el_, and false\n     *    otherwise.\n     */\n    isTagEqual: function (el, name) {\n        return el.tagName === name;\n    },\n\n    /** PrivateVariable: _xmlGenerator\n     *  _Private_ variable that caches a DOM document to\n     *  generate elements.\n     */\n    _xmlGenerator: null,\n\n    /** PrivateFunction: _makeGenerator\n     *  _Private_ function that creates a dummy XML DOM document to serve as\n     *  an element and text node generator.\n     */\n    _makeGenerator: function () {\n        var doc;\n        // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n        // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n        if (document.implementation.createDocument === undefined ||\n                        document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n            doc = this._getIEXmlDom();\n            doc.appendChild(doc.createElement('strophe'));\n        } else {\n            doc = document.implementation\n                .createDocument('jabber:client', 'strophe', null);\n        }\n        return doc;\n    },\n\n    /** Function: xmlGenerator\n     *  Get the DOM document to generate elements.\n     *\n     *  Returns:\n     *    The currently used DOM document.\n     */\n    xmlGenerator: function () {\n        if (!Strophe._xmlGenerator) {\n            Strophe._xmlGenerator = Strophe._makeGenerator();\n        }\n        return Strophe._xmlGenerator;\n    },\n\n    /** PrivateFunction: _getIEXmlDom\n     *  Gets IE xml doc object\n     *\n     *  Returns:\n     *    A Microsoft XML DOM Object\n     *  See Also:\n     *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n     */\n    _getIEXmlDom : function() {\n        var doc = null;\n        var docStrings = [\n            \"Msxml2.DOMDocument.6.0\",\n            \"Msxml2.DOMDocument.5.0\",\n            \"Msxml2.DOMDocument.4.0\",\n            \"MSXML2.DOMDocument.3.0\",\n            \"MSXML2.DOMDocument\",\n            \"MSXML.DOMDocument\",\n            \"Microsoft.XMLDOM\"\n        ];\n\n        for (var d = 0; d < docStrings.length; d++) {\n            if (doc === null) {\n                try {\n                    doc = new ActiveXObject(docStrings[d]);\n                } catch (e) {\n                    doc = null;\n                }\n            } else {\n                break;\n            }\n        }\n        return doc;\n    },\n\n    /** Function: xmlElement\n     *  Create an XML DOM element.\n     *\n     *  This function creates an XML DOM element correctly across all\n     *  implementations. Note that these are not HTML DOM elements, which\n     *  aren't appropriate for XMPP stanzas.\n     *\n     *  Parameters:\n     *    (String) name - The name for the element.\n     *    (Array|Object) attrs - An optional array or object containing\n     *      key/value pairs to use as element attributes. The object should\n     *      be in the format {'key': 'value'} or {key: 'value'}. The array\n     *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n     *    (String) text - The text child data for the element.\n     *\n     *  Returns:\n     *    A new XML DOM element.\n     */\n    xmlElement: function (name) {\n        if (!name) { return null; }\n\n        var node = Strophe.xmlGenerator().createElement(name);\n        // FIXME: this should throw errors if args are the wrong type or\n        // there are more than two optional args\n        var a, i, k;\n        for (a = 1; a < arguments.length; a++) {\n            var arg = arguments[a];\n            if (!arg) { continue; }\n            if (typeof(arg) === \"string\" ||\n                typeof(arg) === \"number\") {\n                node.appendChild(Strophe.xmlTextNode(arg));\n            } else if (typeof(arg) === \"object\" &&\n                       typeof(arg.sort) === \"function\") {\n                for (i = 0; i < arg.length; i++) {\n                    var attr = arg[i];\n                    if (typeof(attr) === \"object\" &&\n                        typeof(attr.sort) === \"function\" &&\n                        attr[1] !== undefined &&\n                        attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                    }\n                }\n            } else if (typeof(arg) === \"object\") {\n                for (k in arg) {\n                    if (arg.hasOwnProperty(k)) {\n                        if (arg[k] !== undefined &&\n                            arg[k] !== null) {\n                            node.setAttribute(k, arg[k]);\n                        }\n                    }\n                }\n            }\n        }\n\n        return node;\n    },\n\n    /*  Function: xmlescape\n     *  Excapes invalid xml characters.\n     *\n     *  Parameters:\n     *     (String) text - text to escape.\n     *\n     *  Returns:\n     *      Escaped text.\n     */\n    xmlescape: function(text) {\n        text = text.replace(/\\&/g, \"&amp;\");\n        text = text.replace(/</g,  \"&lt;\");\n        text = text.replace(/>/g,  \"&gt;\");\n        text = text.replace(/'/g,  \"&apos;\");\n        text = text.replace(/\"/g,  \"&quot;\");\n        return text;\n    },\n\n    /*  Function: xmlunescape\n    *  Unexcapes invalid xml characters.\n    *\n    *  Parameters:\n    *     (String) text - text to unescape.\n    *\n    *  Returns:\n    *      Unescaped text.\n    */\n    xmlunescape: function(text) {\n        text = text.replace(/\\&amp;/g, \"&\");\n        text = text.replace(/&lt;/g,  \"<\");\n        text = text.replace(/&gt;/g,  \">\");\n        text = text.replace(/&apos;/g,  \"'\");\n        text = text.replace(/&quot;/g,  \"\\\"\");\n        return text;\n    },\n\n    /** Function: xmlTextNode\n     *  Creates an XML DOM text node.\n     *\n     *  Provides a cross implementation version of document.createTextNode.\n     *\n     *  Parameters:\n     *    (String) text - The content of the text node.\n     *\n     *  Returns:\n     *    A new XML DOM text node.\n     */\n    xmlTextNode: function (text) {\n        return Strophe.xmlGenerator().createTextNode(text);\n    },\n\n    /** Function: xmlHtmlNode\n     *  Creates an XML DOM html node.\n     *\n     *  Parameters:\n     *    (String) html - The content of the html node.\n     *\n     *  Returns:\n     *    A new XML DOM text node.\n     */\n    xmlHtmlNode: function (html) {\n        var node;\n        //ensure text is escaped\n        if (DOMParser) {\n            var parser = new DOMParser();\n            node = parser.parseFromString(html, \"text/xml\");\n        } else {\n            node = new ActiveXObject(\"Microsoft.XMLDOM\");\n            node.async=\"false\";\n            node.loadXML(html);\n        }\n        return node;\n    },\n\n    /** Function: getText\n     *  Get the concatenation of all text children of an element.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    A String with the concatenated text of all text element children.\n     */\n    getText: function (elem) {\n        if (!elem) { return null; }\n\n        var str = \"\";\n        if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n            str += elem.nodeValue;\n        }\n\n        for (var i = 0; i < elem.childNodes.length; i++) {\n            if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                str += elem.childNodes[i].nodeValue;\n            }\n        }\n\n        return Strophe.xmlescape(str);\n    },\n\n    /** Function: copyElement\n     *  Copy an XML DOM element.\n     *\n     *  This function copies a DOM element and all its descendants and returns\n     *  the new copy.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    A new, copied DOM element tree.\n     */\n    copyElement: function (elem) {\n        var i, el;\n        if (elem.nodeType === Strophe.ElementType.NORMAL) {\n            el = Strophe.xmlElement(elem.tagName);\n\n            for (i = 0; i < elem.attributes.length; i++) {\n                el.setAttribute(elem.attributes[i].nodeName,\n                                elem.attributes[i].value);\n            }\n\n            for (i = 0; i < elem.childNodes.length; i++) {\n                el.appendChild(Strophe.copyElement(elem.childNodes[i]));\n            }\n        } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n            el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n        }\n        return el;\n    },\n\n\n    /** Function: createHtml\n     *  Copy an HTML DOM element into an XML DOM.\n     *\n     *  This function copies a DOM element and all its descendants and returns\n     *  the new copy.\n     *\n     *  Parameters:\n     *    (HTMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    A new, copied DOM element tree.\n     */\n    createHtml: function (elem) {\n        var i, el, j, tag, attribute, value, css, cssAttrs, attr, cssName, cssValue;\n        if (elem.nodeType === Strophe.ElementType.NORMAL) {\n            tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n            if(Strophe.XHTML.validTag(tag)) {\n                try {\n                    el = Strophe.xmlElement(tag);\n                    for(i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        attribute = Strophe.XHTML.attributes[tag][i];\n                        value = elem.getAttribute(attribute);\n                        if(typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                            continue;\n                        }\n                        if(attribute === 'style' && typeof value === 'object') {\n                            if(typeof value.cssText !== 'undefined') {\n                                value = value.cssText; // we're dealing with IE, need to get CSS out\n                            }\n                        }\n                        // filter out invalid css styles\n                        if(attribute === 'style') {\n                            css = [];\n                            cssAttrs = value.split(';');\n                            for(j = 0; j < cssAttrs.length; j++) {\n                                attr = cssAttrs[j].split(':');\n                                cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n                                if(Strophe.XHTML.validCSS(cssName)) {\n                                    cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                                    css.push(cssName + ': ' + cssValue);\n                                }\n                            }\n                            if(css.length > 0) {\n                                value = css.join('; ');\n                                el.setAttribute(attribute, value);\n                            }\n                        } else {\n                            el.setAttribute(attribute, value);\n                        }\n                    }\n\n                    for (i = 0; i < elem.childNodes.length; i++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                    }\n                } catch(e) { // invalid elements\n                  el = Strophe.xmlTextNode('');\n                }\n            } else {\n                el = Strophe.xmlGenerator().createDocumentFragment();\n                for (i = 0; i < elem.childNodes.length; i++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                }\n            }\n        } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n            el = Strophe.xmlGenerator().createDocumentFragment();\n            for (i = 0; i < elem.childNodes.length; i++) {\n                el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n            }\n        } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n            el = Strophe.xmlTextNode(elem.nodeValue);\n        }\n        return el;\n    },\n\n    /** Function: escapeNode\n     *  Escape the node part (also called local part) of a JID.\n     *\n     *  Parameters:\n     *    (String) node - A node (or local part).\n     *\n     *  Returns:\n     *    An escaped node (or local part).\n     */\n    escapeNode: function (node) {\n        if (typeof node !== \"string\") { return node; }\n        return node.replace(/^\\s+|\\s+$/g, '')\n            .replace(/\\\\/g,  \"\\\\5c\")\n            .replace(/ /g,   \"\\\\20\")\n            .replace(/\\\"/g,  \"\\\\22\")\n            .replace(/\\&/g,  \"\\\\26\")\n            .replace(/\\'/g,  \"\\\\27\")\n            .replace(/\\//g,  \"\\\\2f\")\n            .replace(/:/g,   \"\\\\3a\")\n            .replace(/</g,   \"\\\\3c\")\n            .replace(/>/g,   \"\\\\3e\")\n            .replace(/@/g,   \"\\\\40\");\n    },\n\n    /** Function: unescapeNode\n     *  Unescape a node part (also called local part) of a JID.\n     *\n     *  Parameters:\n     *    (String) node - A node (or local part).\n     *\n     *  Returns:\n     *    An unescaped node (or local part).\n     */\n    unescapeNode: function (node) {\n        if (typeof node !== \"string\") { return node; }\n        return node.replace(/\\\\20/g, \" \")\n            .replace(/\\\\22/g, '\"')\n            .replace(/\\\\26/g, \"&\")\n            .replace(/\\\\27/g, \"'\")\n            .replace(/\\\\2f/g, \"/\")\n            .replace(/\\\\3a/g, \":\")\n            .replace(/\\\\3c/g, \"<\")\n            .replace(/\\\\3e/g, \">\")\n            .replace(/\\\\40/g, \"@\")\n            .replace(/\\\\5c/g, \"\\\\\");\n    },\n\n    /** Function: getNodeFromJid\n     *  Get the node portion of a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the node.\n     */\n    getNodeFromJid: function (jid) {\n        if (jid.indexOf(\"@\") < 0) { return null; }\n        return jid.split(\"@\")[0];\n    },\n\n    /** Function: getDomainFromJid\n     *  Get the domain portion of a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the domain.\n     */\n    getDomainFromJid: function (jid) {\n        var bare = Strophe.getBareJidFromJid(jid);\n        if (bare.indexOf(\"@\") < 0) {\n            return bare;\n        } else {\n            var parts = bare.split(\"@\");\n            parts.splice(0, 1);\n            return parts.join('@');\n        }\n    },\n\n    /** Function: getResourceFromJid\n     *  Get the resource portion of a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the resource.\n     */\n    getResourceFromJid: function (jid) {\n        var s = jid.split(\"/\");\n        if (s.length < 2) { return null; }\n        s.splice(0, 1);\n        return s.join('/');\n    },\n\n    /** Function: getBareJidFromJid\n     *  Get the bare JID from a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the bare JID.\n     */\n    getBareJidFromJid: function (jid) {\n        return jid ? jid.split(\"/\")[0] : null;\n    },\n\n    /** PrivateFunction: _handleError\n     *  _Private_ function that properly logs an error to the console\n     */\n    _handleError: function (e) {\n        if (typeof e.stack !== \"undefined\") {\n            Strophe.fatal(e.stack);\n        }\n        if (e.sourceURL) {\n            Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" +\n                          e.line + \" - \" + e.name + \": \" + e.message);\n        } else if (e.fileName) {\n            Strophe.fatal(\"error: \" + this.handler + \" \" +\n                          e.fileName + \":\" + e.lineNumber + \" - \" +\n                          e.name + \": \" + e.message);\n        } else {\n            Strophe.fatal(\"error: \" + e.message);\n        }\n    },\n\n    /** Function: log\n     *  User overrideable logging function.\n     *\n     *  This function is called whenever the Strophe library calls any\n     *  of the logging functions.  The default implementation of this\n     *  function logs only fatal errors.  If client code wishes to handle the logging\n     *  messages, it should override this with\n     *  > Strophe.log = function (level, msg) {\n     *  >   (user code here)\n     *  > };\n     *\n     *  Please note that data sent and received over the wire is logged\n     *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n     *\n     *  The different levels and their meanings are\n     *\n     *    DEBUG - Messages useful for debugging purposes.\n     *    INFO - Informational messages.  This is mostly information like\n     *      'disconnect was called' or 'SASL auth succeeded'.\n     *    WARN - Warnings about potential problems.  This is mostly used\n     *      to report transient connection errors like request timeouts.\n     *    ERROR - Some error occurred.\n     *    FATAL - A non-recoverable fatal error occurred.\n     *\n     *  Parameters:\n     *    (Integer) level - The log level of the log message.  This will\n     *      be one of the values in Strophe.LogLevel.\n     *    (String) msg - The log message.\n     */\n    log: function (level, msg) {\n        if (level === this.LogLevel.FATAL &&\n            typeof window.console === 'object' &&\n            typeof window.console.error === 'function') {\n            window.console.error(msg);\n        }\n    },\n\n    /** Function: debug\n     *  Log a message at the Strophe.LogLevel.DEBUG level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    debug: function(msg) {\n        this.log(this.LogLevel.DEBUG, msg);\n    },\n\n    /** Function: info\n     *  Log a message at the Strophe.LogLevel.INFO level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    info: function (msg) {\n        this.log(this.LogLevel.INFO, msg);\n    },\n\n    /** Function: warn\n     *  Log a message at the Strophe.LogLevel.WARN level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    warn: function (msg) {\n        this.log(this.LogLevel.WARN, msg);\n    },\n\n    /** Function: error\n     *  Log a message at the Strophe.LogLevel.ERROR level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    error: function (msg) {\n        this.log(this.LogLevel.ERROR, msg);\n    },\n\n    /** Function: fatal\n     *  Log a message at the Strophe.LogLevel.FATAL level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    fatal: function (msg) {\n        this.log(this.LogLevel.FATAL, msg);\n    },\n\n    /** Function: serialize\n     *  Render a DOM element and all descendants to a String.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    The serialized element tree as a String.\n     */\n    serialize: function (elem) {\n        var result;\n\n        if (!elem) { return null; }\n\n        if (typeof(elem.tree) === \"function\") {\n            elem = elem.tree();\n        }\n\n        var nodeName = elem.nodeName;\n        var i, child;\n\n        if (elem.getAttribute(\"_realname\")) {\n            nodeName = elem.getAttribute(\"_realname\");\n        }\n\n        result = \"<\" + nodeName;\n        for (i = 0; i < elem.attributes.length; i++) {\n             if(elem.attributes[i].nodeName !== \"_realname\") {\n               result += \" \" + elem.attributes[i].nodeName +\n                   \"='\" + Strophe.xmlescape(elem.attributes[i].value) + \"'\";\n             }\n        }\n\n        if (elem.childNodes.length > 0) {\n            result += \">\";\n            for (i = 0; i < elem.childNodes.length; i++) {\n                child = elem.childNodes[i];\n                switch( child.nodeType ){\n                  case Strophe.ElementType.NORMAL:\n                    // normal element, so recurse\n                    result += Strophe.serialize(child);\n                    break;\n                  case Strophe.ElementType.TEXT:\n                    // text element to escape values\n                    result += Strophe.xmlescape(child.nodeValue);\n                    break;\n                  case Strophe.ElementType.CDATA:\n                    // cdata section so don't escape values\n                    result += \"<![CDATA[\"+child.nodeValue+\"]]>\";\n                }\n            }\n            result += \"</\" + nodeName + \">\";\n        } else {\n            result += \"/>\";\n        }\n\n        return result;\n    },\n\n    /** PrivateVariable: _requestId\n     *  _Private_ variable that keeps track of the request ids for\n     *  connections.\n     */\n    _requestId: 0,\n\n    /** PrivateVariable: Strophe.connectionPlugins\n     *  _Private_ variable Used to store plugin names that need\n     *  initialization on Strophe.Connection construction.\n     */\n    _connectionPlugins: {},\n\n    /** Function: addConnectionPlugin\n     *  Extends the Strophe.Connection object with the given plugin.\n     *\n     *  Parameters:\n     *    (String) name - The name of the extension.\n     *    (Object) ptype - The plugin's prototype.\n     */\n    addConnectionPlugin: function (name, ptype) {\n        Strophe._connectionPlugins[name] = ptype;\n    }\n};\n\n/** Class: Strophe.Builder\n *  XML DOM builder.\n *\n *  This object provides an interface similar to JQuery but for building\n *  DOM elements easily and rapidly.  All the functions except for toString()\n *  and tree() return the object, so calls can be chained.  Here's an\n *  example using the $iq() builder helper.\n *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n *  >     .c('query', {xmlns: 'strophe:example'})\n *  >     .c('example')\n *  >     .toString()\n *\n *  The above generates this XML fragment\n *  > <iq to='you' from='me' type='get' id='1'>\n *  >   <query xmlns='strophe:example'>\n *  >     <example/>\n *  >   </query>\n *  > </iq>\n *  The corresponding DOM manipulations to get a similar fragment would be\n *  a lot more tedious and probably involve several helper variables.\n *\n *  Since adding children makes new operations operate on the child, up()\n *  is provided to traverse up the tree.  To add two children, do\n *  > builder.c('child1', ...).up().c('child2', ...)\n *  The next operation on the Builder will be relative to the second child.\n */\n\n/** Constructor: Strophe.Builder\n *  Create a Strophe.Builder object.\n *\n *  The attributes should be passed in object notation.  For example\n *  > var b = new Builder('message', {to: 'you', from: 'me'});\n *  or\n *  > var b = new Builder('messsage', {'xml:lang': 'en'});\n *\n *  Parameters:\n *    (String) name - The name of the root element.\n *    (Object) attrs - The attributes for the root element in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder.\n */\nStrophe.Builder = function (name, attrs) {\n    // Set correct namespace for jabber:client elements\n    if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n        if (attrs && !attrs.xmlns) {\n            attrs.xmlns = Strophe.NS.CLIENT;\n        } else if (!attrs) {\n            attrs = {xmlns: Strophe.NS.CLIENT};\n        }\n    }\n\n    // Holds the tree being built.\n    this.nodeTree = Strophe.xmlElement(name, attrs);\n\n    // Points to the current operation node.\n    this.node = this.nodeTree;\n};\n\nStrophe.Builder.prototype = {\n    /** Function: tree\n     *  Return the DOM tree.\n     *\n     *  This function returns the current DOM tree as an element object.  This\n     *  is suitable for passing to functions like Strophe.Connection.send().\n     *\n     *  Returns:\n     *    The DOM tree as a element object.\n     */\n    tree: function () {\n        return this.nodeTree;\n    },\n\n    /** Function: toString\n     *  Serialize the DOM tree to a String.\n     *\n     *  This function returns a string serialization of the current DOM\n     *  tree.  It is often used internally to pass data to a\n     *  Strophe.Request object.\n     *\n     *  Returns:\n     *    The serialized DOM tree in a String.\n     */\n    toString: function () {\n        return Strophe.serialize(this.nodeTree);\n    },\n\n    /** Function: up\n     *  Make the current parent element the new current element.\n     *\n     *  This function is often used after c() to traverse back up the tree.\n     *  For example, to add two children to the same element\n     *  > builder.c('child1', {}).up().c('child2', {});\n     *\n     *  Returns:\n     *    The Stophe.Builder object.\n     */\n    up: function () {\n        this.node = this.node.parentNode;\n        return this;\n    },\n\n    /** Function: root\n     *  Make the root element the new current element.\n     *\n     *  When at a deeply nested element in the tree, this function can be used\n     *  to jump back to the root of the tree, instead of having to repeatedly\n     *  call up().\n     *\n     *  Returns:\n     *    The Stophe.Builder object.\n     */\n    root: function () {\n        this.node = this.nodeTree;\n        return this;\n    },\n\n    /** Function: attrs\n     *  Add or modify attributes of the current element.\n     *\n     *  The attributes should be passed in object notation.  This function\n     *  does not move the current element pointer.\n     *\n     *  Parameters:\n     *    (Object) moreattrs - The attributes to add/modify in object notation.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    attrs: function (moreattrs) {\n        for (var k in moreattrs) {\n            if (moreattrs.hasOwnProperty(k)) {\n                if (moreattrs[k] === undefined) {\n                    this.node.removeAttribute(k);\n                } else {\n                    this.node.setAttribute(k, moreattrs[k]);\n                }\n            }\n        }\n        return this;\n    },\n\n    /** Function: c\n     *  Add a child to the current element and make it the new current\n     *  element.\n     *\n     *  This function moves the current element pointer to the child,\n     *  unless text is provided.  If you need to add another child, it\n     *  is necessary to use up() to go back to the parent in the tree.\n     *\n     *  Parameters:\n     *    (String) name - The name of the child.\n     *    (Object) attrs - The attributes of the child in object notation.\n     *    (String) text - The text to add to the child.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    c: function (name, attrs, text) {\n        var child = Strophe.xmlElement(name, attrs, text);\n        this.node.appendChild(child);\n        if (typeof text !== \"string\" && typeof text !==\"number\") {\n            this.node = child;\n        }\n        return this;\n    },\n\n    /** Function: cnode\n     *  Add a child to the current element and make it the new current\n     *  element.\n     *\n     *  This function is the same as c() except that instead of using a\n     *  name and an attributes object to create the child it uses an\n     *  existing DOM element object.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    cnode: function (elem) {\n        var impNode;\n        var xmlGen = Strophe.xmlGenerator();\n        try {\n            impNode = (xmlGen.importNode !== undefined);\n        } catch (e) {\n            impNode = false;\n        }\n        var newElem = impNode ?\n                      xmlGen.importNode(elem, true) :\n                      Strophe.copyElement(elem);\n        this.node.appendChild(newElem);\n        this.node = newElem;\n        return this;\n    },\n\n    /** Function: t\n     *  Add a child text element.\n     *\n     *  This *does not* make the child the new current element since there\n     *  are no children of text elements.\n     *\n     *  Parameters:\n     *    (String) text - The text data to append to the current element.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    t: function (text) {\n        var child = Strophe.xmlTextNode(text);\n        this.node.appendChild(child);\n        return this;\n    },\n\n    /** Function: h\n     *  Replace current element contents with the HTML passed in.\n     *\n     *  This *does not* make the child the new current element\n     *\n     *  Parameters:\n     *    (String) html - The html to insert as contents of current element.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    h: function (html) {\n        var fragment = document.createElement('body');\n\n        // force the browser to try and fix any invalid HTML tags\n        fragment.innerHTML = html;\n\n        // copy cleaned html into an xml dom\n        var xhtml = Strophe.createHtml(fragment);\n\n        while(xhtml.childNodes.length > 0) {\n            this.node.appendChild(xhtml.childNodes[0]);\n        }\n        return this;\n    }\n};\n\n/** PrivateClass: Strophe.Handler\n *  _Private_ helper class for managing stanza handlers.\n *\n *  A Strophe.Handler encapsulates a user provided callback function to be\n *  executed when matching stanzas are received by the connection.\n *  Handlers can be either one-off or persistant depending on their\n *  return value. Returning true will cause a Handler to remain active, and\n *  returning false will remove the Handler.\n *\n *  Users will not use Strophe.Handler objects directly, but instead they\n *  will use Strophe.Connection.addHandler() and\n *  Strophe.Connection.deleteHandler().\n */\n\n/** PrivateConstructor: Strophe.Handler\n *  Create and initialize a new Strophe.Handler.\n *\n *  Parameters:\n *    (Function) handler - A function to be executed when the handler is run.\n *    (String) ns - The namespace to match.\n *    (String) name - The element name to match.\n *    (String) type - The element type to match.\n *    (String) id - The element id attribute to match.\n *    (String) from - The element from attribute to match.\n *    (Object) options - Handler options\n *\n *  Returns:\n *    A new Strophe.Handler object.\n */\nStrophe.Handler = function (handler, ns, name, type, id, from, options) {\n    this.handler = handler;\n    this.ns = ns;\n    this.name = name;\n    this.type = type;\n    this.id = id;\n    this.options = options || {'matchBareFromJid': false, 'ignoreNamespaceFragment': false};\n    // BBB: Maintain backward compatibility with old `matchBare` option\n    if (this.options.matchBare) {\n        Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n        this.options.matchBareFromJid = this.options.matchBare;\n        delete this.options.matchBare;\n    }\n\n    if (this.options.matchBareFromJid) {\n        this.from = from ? Strophe.getBareJidFromJid(from) : null;\n    } else {\n        this.from = from;\n    }\n    // whether the handler is a user handler or a system handler\n    this.user = true;\n};\n\nStrophe.Handler.prototype = {\n    /** PrivateFunction: getNamespace\n     *  Returns the XML namespace attribute on an element.\n     *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n     *  URL fragment will be stripped.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML element with the namespace.\n     *\n     *  Returns:\n     *    The namespace, with optionally the fragment stripped.\n     */\n    getNamespace: function (elem) {\n        var elNamespace = elem.getAttribute(\"xmlns\");\n        if (elNamespace && this.options.ignoreNamespaceFragment) {\n            elNamespace = elNamespace.split('#')[0];\n        }\n        return elNamespace;\n    },\n\n    /** PrivateFunction: namespaceMatch\n     *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML element to test.\n     *\n     *  Returns:\n     *    true if the stanza matches and false otherwise.\n     */\n    namespaceMatch: function (elem) {\n        var nsMatch = false;\n        if (!this.ns) {\n            return true;\n        } else {\n            var that = this;\n            Strophe.forEachChild(elem, null, function (elem) {\n                if (that.getNamespace(elem) === that.ns) {\n                    nsMatch = true;\n                }\n            });\n            nsMatch = nsMatch || this.getNamespace(elem) === this.ns;\n        }\n        return nsMatch;\n    },\n\n    /** PrivateFunction: isMatch\n     *  Tests if a stanza matches the Strophe.Handler.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML element to test.\n     *\n     *  Returns:\n     *    true if the stanza matches and false otherwise.\n     */\n    isMatch: function (elem) {\n        var from = elem.getAttribute('from');\n        if (this.options.matchBareFromJid) {\n            from = Strophe.getBareJidFromJid(from);\n        }\n        var elem_type = elem.getAttribute(\"type\");\n        if (this.namespaceMatch(elem) &&\n            (!this.name || Strophe.isTagEqual(elem, this.name)) &&\n            (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) &&\n            (!this.id || elem.getAttribute(\"id\") === this.id) &&\n            (!this.from || from === this.from)) {\n                return true;\n        }\n        return false;\n    },\n\n    /** PrivateFunction: run\n     *  Run the callback on a matching stanza.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The DOM element that triggered the\n     *      Strophe.Handler.\n     *\n     *  Returns:\n     *    A boolean indicating if the handler should remain active.\n     */\n    run: function (elem) {\n        var result = null;\n        try {\n            result = this.handler(elem);\n        } catch (e) {\n            Strophe._handleError(e);\n            throw e;\n        }\n        return result;\n    },\n\n    /** PrivateFunction: toString\n     *  Get a String representation of the Strophe.Handler object.\n     *\n     *  Returns:\n     *    A String.\n     */\n    toString: function () {\n        return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" +\n            this.id + \",\" + this.ns + \")}\";\n    }\n};\n\n/** PrivateClass: Strophe.TimedHandler\n *  _Private_ helper class for managing timed handlers.\n *\n *  A Strophe.TimedHandler encapsulates a user provided callback that\n *  should be called after a certain period of time or at regular\n *  intervals.  The return value of the callback determines whether the\n *  Strophe.TimedHandler will continue to fire.\n *\n *  Users will not use Strophe.TimedHandler objects directly, but instead\n *  they will use Strophe.Connection.addTimedHandler() and\n *  Strophe.Connection.deleteTimedHandler().\n */\n\n/** PrivateConstructor: Strophe.TimedHandler\n *  Create and initialize a new Strophe.TimedHandler object.\n *\n *  Parameters:\n *    (Integer) period - The number of milliseconds to wait before the\n *      handler is called.\n *    (Function) handler - The callback to run when the handler fires.  This\n *      function should take no arguments.\n *\n *  Returns:\n *    A new Strophe.TimedHandler object.\n */\nStrophe.TimedHandler = function (period, handler) {\n    this.period = period;\n    this.handler = handler;\n    this.lastCalled = new Date().getTime();\n    this.user = true;\n};\n\nStrophe.TimedHandler.prototype = {\n    /** PrivateFunction: run\n     *  Run the callback for the Strophe.TimedHandler.\n     *\n     *  Returns:\n     *    true if the Strophe.TimedHandler should be called again, and false\n     *      otherwise.\n     */\n    run: function () {\n        this.lastCalled = new Date().getTime();\n        return this.handler();\n    },\n\n    /** PrivateFunction: reset\n     *  Reset the last called time for the Strophe.TimedHandler.\n     */\n    reset: function () {\n        this.lastCalled = new Date().getTime();\n    },\n\n    /** PrivateFunction: toString\n     *  Get a string representation of the Strophe.TimedHandler object.\n     *\n     *  Returns:\n     *    The string representation.\n     */\n    toString: function () {\n        return \"{TimedHandler: \" + this.handler + \"(\" + this.period +\")}\";\n    }\n};\n\n/** Class: Strophe.Connection\n *  XMPP Connection manager.\n *\n *  This class is the main part of Strophe.  It manages a BOSH or websocket\n *  connection to an XMPP server and dispatches events to the user callbacks\n *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n *  and legacy authentication.\n *\n *  After creating a Strophe.Connection object, the user will typically\n *  call connect() with a user supplied callback to handle connection level\n *  events like authentication failure, disconnection, or connection\n *  complete.\n *\n *  The user will also have several event handlers defined by using\n *  addHandler() and addTimedHandler().  These will allow the user code to\n *  respond to interesting stanzas or do something periodically with the\n *  connection. These handlers will be active once authentication is\n *  finished.\n *\n *  To send data to the connection, use send().\n */\n\n/** Constructor: Strophe.Connection\n *  Create and initialize a Strophe.Connection object.\n *\n *  The transport-protocol for this connection will be chosen automatically\n *  based on the given service parameter. URLs starting with \"ws://\" or\n *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n *  or without a protocol will use BOSH.\n *\n *  To make Strophe connect to the current host you can leave out the protocol\n *  and host part and just pass the path, e.g.\n *\n *  > var conn = new Strophe.Connection(\"/http-bind/\");\n *\n *  Options common to both Websocket and BOSH:\n *  ------------------------------------------\n *\n *  cookies:\n *\n *  The *cookies* option allows you to pass in cookies to be added to the\n *  document. These cookies will then be included in the BOSH XMLHttpRequest\n *  or in the websocket connection.\n *\n *  The passed in value must be a map of cookie names and string values.\n *\n *  > { \"myCookie\": {\n *  >     \"value\": \"1234\",\n *  >     \"domain\": \".example.org\",\n *  >     \"path\": \"/\",\n *  >     \"expires\": expirationDate\n *  >     }\n *  > }\n *\n *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n *  Those cookies need to be set under those domains, for example they can be\n *  set server-side by making a XHR call to that domain to ask it to set any\n *  necessary cookies.\n *\n *  mechanisms:\n *\n *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n *  instance of Strophe.Connection (and therefore your XMPP client) will\n *  support.\n *\n *  The value must be an array of objects with Strophe.SASLMechanism\n *  prototypes.\n *\n *  If nothing is specified, then the following mechanisms (and their\n *  priorities) are registered:\n *\n *      SCRAM-SHA1 - 70\n *      DIGEST-MD5 - 60\n *      PLAIN - 50\n *      OAUTH-BEARER - 40\n *      OAUTH-2 - 30\n *      ANONYMOUS - 20\n *      EXTERNAL - 10\n *\n *  WebSocket options:\n *  ------------------\n *\n *  If you want to connect to the current host with a WebSocket connection you\n *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n *  for Secure WebSocket.\n *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n *\n *  > var conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n *\n *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n *  of the current site.\n *\n *  Also because downgrading security is not permitted by browsers, when using\n *  relative URLs both BOSH and WebSocket connections will use their secure\n *  variants if the current connection to the site is also secure (https).\n *\n *  BOSH options:\n *  -------------\n *\n *  By adding \"sync\" to the options, you can control if requests will\n *  be made synchronously or not. The default behaviour is asynchronous.\n *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n *  > var conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n *\n *  You can also toggle this on an already established connection.\n *  > conn.options.sync = true;\n *\n *  The *customHeaders* option can be used to provide custom HTTP headers to be\n *  included in the XMLHttpRequests made.\n *\n *  The *keepalive* option can be used to instruct Strophe to maintain the\n *  current BOSH session across interruptions such as webpage reloads.\n *\n *  It will do this by caching the sessions tokens in sessionStorage, and when\n *  \"restore\" is called it will check whether there are cached tokens with\n *  which it can resume an existing session.\n *\n *  The *withCredentials* option should receive a Boolean value and is used to\n *  indicate wether cookies should be included in ajax requests (by default\n *  they're not).\n *  Set this value to true if you are connecting to a BOSH service\n *  and for some reason need to send cookies to it.\n *  In order for this to work cross-domain, the server must also enable\n *  credentials by setting the Access-Control-Allow-Credentials response header\n *  to \"true\". For most usecases however this setting should be false (which\n *  is the default).\n *  Additionally, when using Access-Control-Allow-Credentials, the\n *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n *  instead must be restricted to actual domains.\n *\n *  The *contentType* option can be set to change the default Content-Type\n *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n *  CORS preflight requests that are sent to the server.\n *\n *  Parameters:\n *    (String) service - The BOSH or WebSocket service URL.\n *    (Object) options - A hash of configuration options\n *\n *  Returns:\n *    A new Strophe.Connection object.\n */\nStrophe.Connection = function (service, options) {\n    // The service URL\n    this.service = service;\n    // Configuration options\n    this.options = options || {};\n    var proto = this.options.protocol || \"\";\n\n    // Select protocal based on service or options\n    if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 ||\n            proto.indexOf(\"ws\") === 0) {\n        this._proto = new Strophe.Websocket(this);\n    } else {\n        this._proto = new Strophe.Bosh(this);\n    }\n\n    /* The connected JID. */\n    this.jid = \"\";\n    /* the JIDs domain */\n    this.domain = null;\n    /* stream:features */\n    this.features = null;\n\n    // SASL\n    this._sasl_data = {};\n    this.do_session = false;\n    this.do_bind = false;\n\n    // handler lists\n    this.timedHandlers = [];\n    this.handlers = [];\n    this.removeTimeds = [];\n    this.removeHandlers = [];\n    this.addTimeds = [];\n    this.addHandlers = [];\n    this.protocolErrorHandlers = {\n        'HTTP': {},\n        'websocket': {}\n    };\n\n    this._idleTimeout = null;\n    this._disconnectTimeout = null;\n\n    this.authenticated = false;\n    this.connected = false;\n    this.disconnecting = false;\n    this.do_authentication = true;\n    this.paused = false;\n    this.restored = false;\n\n    this._data = [];\n    this._uniqueId = 0;\n\n    this._sasl_success_handler = null;\n    this._sasl_failure_handler = null;\n    this._sasl_challenge_handler = null;\n\n    // Max retries before disconnecting\n    this.maxRetries = 5;\n\n    // Call onIdle callback every 1/10th of a second\n    // XXX: setTimeout should be called only with function expressions (23974bc1)\n    this._idleTimeout = setTimeout(function() {\n        this._onIdle();\n    }.bind(this), 100);\n\n    utils.addCookies(this.options.cookies);\n    this.registerSASLMechanisms(this.options.mechanisms);\n\n    // initialize plugins\n    for (var k in Strophe._connectionPlugins) {\n        if (Strophe._connectionPlugins.hasOwnProperty(k)) {\n            var ptype = Strophe._connectionPlugins[k];\n            // jslint complaints about the below line, but this is fine\n            var F = function () {}; // jshint ignore:line\n            F.prototype = ptype;\n            this[k] = new F();\n            this[k].init(this);\n        }\n    }\n};\n\nStrophe.Connection.prototype = {\n    /** Function: reset\n     *  Reset the connection.\n     *\n     *  This function should be called after a connection is disconnected\n     *  before that connection is reused.\n     */\n    reset: function () {\n        this._proto._reset();\n\n        // SASL\n        this.do_session = false;\n        this.do_bind = false;\n\n        // handler lists\n        this.timedHandlers = [];\n        this.handlers = [];\n        this.removeTimeds = [];\n        this.removeHandlers = [];\n        this.addTimeds = [];\n        this.addHandlers = [];\n\n        this.authenticated = false;\n        this.connected = false;\n        this.disconnecting = false;\n        this.restored = false;\n\n        this._data = [];\n        this._requests = [];\n        this._uniqueId = 0;\n    },\n\n    /** Function: pause\n     *  Pause the request manager.\n     *\n     *  This will prevent Strophe from sending any more requests to the\n     *  server.  This is very useful for temporarily pausing\n     *  BOSH-Connections while a lot of send() calls are happening quickly.\n     *  This causes Strophe to send the data in a single request, saving\n     *  many request trips.\n     */\n    pause: function () {\n        this.paused = true;\n    },\n\n    /** Function: resume\n     *  Resume the request manager.\n     *\n     *  This resumes after pause() has been called.\n     */\n    resume: function () {\n        this.paused = false;\n    },\n\n    /** Function: getUniqueId\n     *  Generate a unique ID for use in <iq/> elements.\n     *\n     *  All <iq/> stanzas are required to have unique id attributes.  This\n     *  function makes creating these easy.  Each connection instance has\n     *  a counter which starts from zero, and the value of this counter\n     *  plus a colon followed by the suffix becomes the unique id. If no\n     *  suffix is supplied, the counter is used as the unique id.\n     *\n     *  Suffixes are used to make debugging easier when reading the stream\n     *  data, and their use is recommended.  The counter resets to 0 for\n     *  every new connection for the same reason.  For connections to the\n     *  same server that authenticate the same way, all the ids should be\n     *  the same, which makes it easy to see changes.  This is useful for\n     *  automated testing as well.\n     *\n     *  Parameters:\n     *    (String) suffix - A optional suffix to append to the id.\n     *\n     *  Returns:\n     *    A unique string to be used for the id attribute.\n     */\n    getUniqueId: function(suffix) {\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random() * 16 | 0,\n                v = c === 'x' ? r : r & 0x3 | 0x8;\n            return v.toString(16);\n        });\n        if (typeof(suffix) === \"string\" || typeof(suffix) === \"number\") {\n            return uuid + \":\" + suffix;\n        } else {\n            return uuid + \"\";\n        }\n    },\n\n    /** Function: addProtocolErrorHandler\n     *  Register a handler function for when a protocol (websocker or HTTP)\n     *  error occurs.\n     *\n     *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n     *  Patches that handle websocket errors would be very welcome.\n     *\n     *  Parameters:\n     *    (String) protocol - 'HTTP' or 'websocket'\n     *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n     *    (Function) callback - Function that will fire on Http error\n     *\n     *  Example:\n     *  function onError(err_code){\n     *    //do stuff\n     *  }\n     *\n     *  var conn = Strophe.connect('http://example.com/http-bind');\n     *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n     *  // Triggers HTTP 500 error and onError handler will be called\n     *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n     */\n    addProtocolErrorHandler: function(protocol, status_code, callback){\n        this.protocolErrorHandlers[protocol][status_code] = callback;\n    },\n\n\n    /** Function: connect\n     *  Starts the connection process.\n     *\n     *  As the connection process proceeds, the user supplied callback will\n     *  be triggered multiple times with status updates.  The callback\n     *  should take two arguments - the status code and the error condition.\n     *\n     *  The status code will be one of the values in the Strophe.Status\n     *  constants.  The error condition will be one of the conditions\n     *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n     *\n     *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n     *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n     *  of the optional parameters.\n     *\n     *  Parameters:\n     *    (String) jid - The user's JID.  This may be a bare JID,\n     *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n     *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n     *      process the provided password value as an access token).\n     *    (String) pass - The user's password.\n     *    (Function) callback - The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (String) route - The optional route value.\n     *    (String) authcid - The optional alternative authentication identity\n     *      (username) if intending to impersonate another user.\n     *      When using the SASL-EXTERNAL authentication mechanism, for example\n     *      with client certificates, then the authcid value is used to\n     *      determine whether an authorization JID (authzid) should be sent to\n     *      the server. The authzid should not be sent to the server if the\n     *      authzid and authcid are the same. So to prevent it from being sent\n     *      (for example when the JID is already contained in the client\n     *      certificate), set authcid to that same JID. See XEP-178 for more\n     *      details.\n     */\n    connect: function (jid, pass, callback, wait, hold, route, authcid) {\n        this.jid = jid;\n        /** Variable: authzid\n         *  Authorization identity.\n         */\n        this.authzid = Strophe.getBareJidFromJid(this.jid);\n\n        /** Variable: authcid\n         *  Authentication identity (User name).\n         */\n        this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n\n        /** Variable: pass\n         *  Authentication identity (User password).\n         */\n        this.pass = pass;\n\n        /** Variable: servtype\n         *  Digest MD5 compatibility.\n         */\n        this.servtype = \"xmpp\";\n\n        this.connect_callback = callback;\n        this.disconnecting = false;\n        this.connected = false;\n        this.authenticated = false;\n        this.restored = false;\n\n        // parse jid for domain\n        this.domain = Strophe.getDomainFromJid(this.jid);\n\n        this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n        this._proto._connect(wait, hold, route);\n    },\n\n    /** Function: attach\n     *  Attach to an already created and authenticated BOSH session.\n     *\n     *  This function is provided to allow Strophe to attach to BOSH\n     *  sessions which have been created externally, perhaps by a Web\n     *  application.  This is often used to support auto-login type features\n     *  without putting user credentials into the page.\n     *\n     *  Parameters:\n     *    (String) jid - The full JID that is bound by the session.\n     *    (String) sid - The SID of the BOSH session.\n     *    (String) rid - The current RID of the BOSH session.  This RID\n     *      will be used by the next request.\n     *    (Function) callback The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    attach: function (jid, sid, rid, callback, wait, hold, wind) {\n        if (this._proto instanceof Strophe.Bosh) {\n            this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n        } else {\n            throw {\n                name: 'StropheSessionError',\n                message: 'The \"attach\" method can only be used with a BOSH connection.'\n            };\n        }\n    },\n\n    /** Function: restore\n     *  Attempt to restore a cached BOSH session.\n     *\n     *  This function is only useful in conjunction with providing the\n     *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n     *\n     *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n     *  RID (Request ID) and SID (Session ID) and then when this function is\n     *  called, it will attempt to restore the session from those cached\n     *  tokens.\n     *\n     *  This function must therefore be called instead of connect or attach.\n     *\n     *  For an example on how to use it, please see examples/restore.js\n     *\n     *  Parameters:\n     *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n     *    (Function) callback - The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    restore: function (jid, callback, wait, hold, wind) {\n        if (this._sessionCachingSupported()) {\n            this._proto._restore(jid, callback, wait, hold, wind);\n        } else {\n            throw {\n                name: 'StropheSessionError',\n                message: 'The \"restore\" method can only be used with a BOSH connection.'\n            };\n        }\n    },\n\n    /** PrivateFunction: _sessionCachingSupported\n     * Checks whether sessionStorage and JSON are supported and whether we're\n     * using BOSH.\n     */\n    _sessionCachingSupported: function () {\n        if (this._proto instanceof Strophe.Bosh) {\n            if (!JSON) { return false; }\n            try {\n                sessionStorage.setItem('_strophe_', '_strophe_');\n                sessionStorage.removeItem('_strophe_');\n            } catch (e) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    },\n\n    /** Function: xmlInput\n     *  User overrideable function that receives XML data coming into the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.xmlInput = function (elem) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n     *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n     *\n     *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n     *  <Strophe.Bosh.strip> if you want to strip this tag.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML data received by the connection.\n     */\n    /* jshint unused:false */\n    xmlInput: function (elem) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: xmlOutput\n     *  User overrideable function that receives XML data sent to the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.xmlOutput = function (elem) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n     *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n     *\n     *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n     *  <Strophe.Bosh.strip> if you want to strip this tag.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XMLdata sent by the connection.\n     */\n    /* jshint unused:false */\n    xmlOutput: function (elem) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: rawInput\n     *  User overrideable function that receives raw data coming into the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.rawInput = function (data) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Parameters:\n     *    (String) data - The data received by the connection.\n     */\n    /* jshint unused:false */\n    rawInput: function (data) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: rawOutput\n     *  User overrideable function that receives raw data sent to the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.rawOutput = function (data) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Parameters:\n     *    (String) data - The data sent by the connection.\n     */\n    /* jshint unused:false */\n    rawOutput: function (data) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: nextValidRid\n     *  User overrideable function that receives the new valid rid.\n     *\n     *  The default function does nothing. User code can override this with\n     *  > Strophe.Connection.nextValidRid = function (rid) {\n     *  >    (user code)\n     *  > };\n     *\n     *  Parameters:\n     *    (Number) rid - The next valid rid\n     */\n    /* jshint unused:false */\n    nextValidRid: function (rid) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: send\n     *  Send a stanza.\n     *\n     *  This function is called to push data onto the send queue to\n     *  go out over the wire.  Whenever a request is sent to the BOSH\n     *  server, all pending data is sent and the queue is flushed.\n     *\n     *  Parameters:\n     *    (XMLElement |\n     *     [XMLElement] |\n     *     Strophe.Builder) elem - The stanza to send.\n     */\n    send: function (elem) {\n        if (elem === null) { return ; }\n        if (typeof(elem.sort) === \"function\") {\n            for (var i = 0; i < elem.length; i++) {\n                this._queueData(elem[i]);\n            }\n        } else if (typeof(elem.tree) === \"function\") {\n            this._queueData(elem.tree());\n        } else {\n            this._queueData(elem);\n        }\n\n        this._proto._send();\n    },\n\n    /** Function: flush\n     *  Immediately send any pending outgoing data.\n     *\n     *  Normally send() queues outgoing data until the next idle period\n     *  (100ms), which optimizes network use in the common cases when\n     *  several send()s are called in succession. flush() can be used to\n     *  immediately send all pending data.\n     */\n    flush: function () {\n        // cancel the pending idle period and run the idle function\n        // immediately\n        clearTimeout(this._idleTimeout);\n        this._onIdle();\n    },\n\n    /** Function: sendPresence\n     *  Helper function to send presence stanzas. The main benefit is for\n     *  sending presence stanzas for which you expect a responding presence\n     *  stanza with the same id (for example when leaving a chat room).\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza to send.\n     *    (Function) callback - The callback function for a successful request.\n     *    (Function) errback - The callback function for a failed or timed\n     *      out request.  On timeout, the stanza will be null.\n     *    (Integer) timeout - The time specified in milliseconds for a\n     *      timeout to occur.\n     *\n     *  Returns:\n     *    The id used to send the presence.\n     */\n    sendPresence: function(elem, callback, errback, timeout) {\n        var timeoutHandler = null;\n        var that = this;\n        if (typeof(elem.tree) === \"function\") {\n            elem = elem.tree();\n        }\n        var id = elem.getAttribute('id');\n        if (!id) { // inject id if not found\n            id = this.getUniqueId(\"sendPresence\");\n            elem.setAttribute(\"id\", id);\n        }\n\n        if (typeof callback === \"function\" || typeof errback === \"function\") {\n            var handler = this.addHandler(function (stanza) {\n                // remove timeout handler if there is one\n                if (timeoutHandler) {\n                    that.deleteTimedHandler(timeoutHandler);\n                }\n                var type = stanza.getAttribute('type');\n                if (type === 'error') {\n                    if (errback) {\n                        errback(stanza);\n                    }\n                } else if (callback) {\n                    callback(stanza);\n                }\n            }, null, 'presence', null, id);\n\n            // if timeout specified, set up a timeout handler.\n            if (timeout) {\n                timeoutHandler = this.addTimedHandler(timeout, function () {\n                    // get rid of normal handler\n                    that.deleteHandler(handler);\n                    // call errback on timeout with null stanza\n                    if (errback) {\n                        errback(null);\n                    }\n                    return false;\n                });\n            }\n        }\n        this.send(elem);\n        return id;\n    },\n\n    /** Function: sendIQ\n     *  Helper function to send IQ stanzas.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza to send.\n     *    (Function) callback - The callback function for a successful request.\n     *    (Function) errback - The callback function for a failed or timed\n     *      out request.  On timeout, the stanza will be null.\n     *    (Integer) timeout - The time specified in milliseconds for a\n     *      timeout to occur.\n     *\n     *  Returns:\n     *    The id used to send the IQ.\n    */\n    sendIQ: function(elem, callback, errback, timeout) {\n        var timeoutHandler = null;\n        var that = this;\n        if (typeof(elem.tree) === \"function\") {\n            elem = elem.tree();\n        }\n        var id = elem.getAttribute('id');\n        if (!id) { // inject id if not found\n            id = this.getUniqueId(\"sendIQ\");\n            elem.setAttribute(\"id\", id);\n        }\n\n        if (typeof callback === \"function\" || typeof errback === \"function\") {\n            var handler = this.addHandler(function (stanza) {\n                // remove timeout handler if there is one\n                if (timeoutHandler) {\n                    that.deleteTimedHandler(timeoutHandler);\n                }\n                var iqtype = stanza.getAttribute('type');\n                if (iqtype === 'result') {\n                    if (callback) {\n                        callback(stanza);\n                    }\n                } else if (iqtype === 'error') {\n                    if (errback) {\n                        errback(stanza);\n                    }\n                } else {\n                    throw {\n                        name: \"StropheError\",\n                        message: \"Got bad IQ type of \" + iqtype\n                    };\n                }\n            }, null, 'iq', ['error', 'result'], id);\n\n            // if timeout specified, set up a timeout handler.\n            if (timeout) {\n                timeoutHandler = this.addTimedHandler(timeout, function () {\n                    // get rid of normal handler\n                    that.deleteHandler(handler);\n                    // call errback on timeout with null stanza\n                    if (errback) {\n                        errback(null);\n                    }\n                    return false;\n                });\n            }\n        }\n        this.send(elem);\n        return id;\n    },\n\n    /** PrivateFunction: _queueData\n     *  Queue outgoing data for later sending.  Also ensures that the data\n     *  is a DOMElement.\n     */\n    _queueData: function (element) {\n        if (element === null ||\n            !element.tagName ||\n            !element.childNodes) {\n            throw {\n                name: \"StropheError\",\n                message: \"Cannot queue non-DOMElement.\"\n            };\n        }\n        this._data.push(element);\n    },\n\n    /** PrivateFunction: _sendRestart\n     *  Send an xmpp:restart stanza.\n     */\n    _sendRestart: function () {\n        this._data.push(\"restart\");\n        this._proto._sendRestart();\n        // XXX: setTimeout should be called only with function expressions (23974bc1)\n        this._idleTimeout = setTimeout(function() {\n            this._onIdle();\n        }.bind(this), 100);\n    },\n\n    /** Function: addTimedHandler\n     *  Add a timed handler to the connection.\n     *\n     *  This function adds a timed handler.  The provided handler will\n     *  be called every period milliseconds until it returns false,\n     *  the connection is terminated, or the handler is removed.  Handlers\n     *  that wish to continue being invoked should return true.\n     *\n     *  Because of method binding it is necessary to save the result of\n     *  this function if you wish to remove a handler with\n     *  deleteTimedHandler().\n     *\n     *  Note that user handlers are not active until authentication is\n     *  successful.\n     *\n     *  Parameters:\n     *    (Integer) period - The period of the handler.\n     *    (Function) handler - The callback function.\n     *\n     *  Returns:\n     *    A reference to the handler that can be used to remove it.\n     */\n    addTimedHandler: function (period, handler) {\n        var thand = new Strophe.TimedHandler(period, handler);\n        this.addTimeds.push(thand);\n        return thand;\n    },\n\n    /** Function: deleteTimedHandler\n     *  Delete a timed handler for a connection.\n     *\n     *  This function removes a timed handler from the connection.  The\n     *  handRef parameter is *not* the function passed to addTimedHandler(),\n     *  but is the reference returned from addTimedHandler().\n     *\n     *  Parameters:\n     *    (Strophe.TimedHandler) handRef - The handler reference.\n     */\n    deleteTimedHandler: function (handRef) {\n        // this must be done in the Idle loop so that we don't change\n        // the handlers during iteration\n        this.removeTimeds.push(handRef);\n    },\n\n    /** Function: addHandler\n     *  Add a stanza handler for the connection.\n     *\n     *  This function adds a stanza handler to the connection.  The\n     *  handler callback will be called for any stanza that matches\n     *  the parameters.  Note that if multiple parameters are supplied,\n     *  they must all match for the handler to be invoked.\n     *\n     *  The handler will receive the stanza that triggered it as its argument.\n     *  *The handler should return true if it is to be invoked again;\n     *  returning false will remove the handler after it returns.*\n     *\n     *  As a convenience, the ns parameters applies to the top level element\n     *  and also any of its immediate children.  This is primarily to make\n     *  matching /iq/query elements easy.\n     *\n     *  Options\n     *  ~~~~~~~\n     *  With the options argument, you can specify boolean flags that affect how\n     *  matches are being done.\n     *\n     *  Currently two flags exist:\n     *\n     *  - matchBareFromJid:\n     *      When set to true, the from parameter and the\n     *      from attribute on the stanza will be matched as bare JIDs instead\n     *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n     *      value of options. The default value for matchBareFromJid is false.\n     *\n     *  - ignoreNamespaceFragment:\n     *      When set to true, a fragment specified on the stanza's namespace\n     *      URL will be ignored when it's matched with the one configured for\n     *      the handler.\n     *\n     *      This means that if you register like this:\n     *      >   connection.addHandler(\n     *      >       handler,\n     *      >       'http://jabber.org/protocol/muc',\n     *      >       null, null, null, null,\n     *      >       {'ignoreNamespaceFragment': true}\n     *      >   );\n     *\n     *      Then a stanza with XML namespace of\n     *      'http://jabber.org/protocol/muc#user' will also be matched. If\n     *      'ignoreNamespaceFragment' is false, then only stanzas with\n     *      'http://jabber.org/protocol/muc' will be matched.\n     *\n     *  Deleting the handler\n     *  ~~~~~~~~~~~~~~~~~~~~\n     *  The return value should be saved if you wish to remove the handler\n     *  with deleteHandler().\n     *\n     *  Parameters:\n     *    (Function) handler - The user callback.\n     *    (String) ns - The namespace to match.\n     *    (String) name - The stanza name to match.\n     *    (String|Array) type - The stanza type (or types if an array) to match.\n     *    (String) id - The stanza id attribute to match.\n     *    (String) from - The stanza from attribute to match.\n     *    (String) options - The handler options\n     *\n     *  Returns:\n     *    A reference to the handler that can be used to remove it.\n     */\n    addHandler: function (handler, ns, name, type, id, from, options) {\n        var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n        this.addHandlers.push(hand);\n        return hand;\n    },\n\n    /** Function: deleteHandler\n     *  Delete a stanza handler for a connection.\n     *\n     *  This function removes a stanza handler from the connection.  The\n     *  handRef parameter is *not* the function passed to addHandler(),\n     *  but is the reference returned from addHandler().\n     *\n     *  Parameters:\n     *    (Strophe.Handler) handRef - The handler reference.\n     */\n    deleteHandler: function (handRef) {\n        // this must be done in the Idle loop so that we don't change\n        // the handlers during iteration\n        this.removeHandlers.push(handRef);\n        // If a handler is being deleted while it is being added,\n        // prevent it from getting added\n        var i = this.addHandlers.indexOf(handRef);\n        if (i >= 0) {\n            this.addHandlers.splice(i, 1);\n        }\n    },\n\n    /** Function: registerSASLMechanisms\n     *\n     * Register the SASL mechanisms which will be supported by this instance of\n     * Strophe.Connection (i.e. which this XMPP client will support).\n     *\n     *  Parameters:\n     *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n     *\n     */\n    registerSASLMechanisms: function (mechanisms) {\n        this.mechanisms = {};\n        mechanisms = mechanisms || [\n            Strophe.SASLAnonymous,\n            Strophe.SASLExternal,\n            Strophe.SASLMD5,\n            Strophe.SASLOAuthBearer,\n            Strophe.SASLXOAuth2,\n            Strophe.SASLPlain,\n            Strophe.SASLSHA1\n        ];\n        mechanisms.forEach(this.registerSASLMechanism.bind(this));\n    },\n\n    /** Function: registerSASLMechanism\n     *\n     * Register a single SASL mechanism, to be supported by this client.\n     *\n     *  Parameters:\n     *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n     *\n     */\n    registerSASLMechanism: function (mechanism) {\n        this.mechanisms[mechanism.prototype.name] = mechanism;\n    },\n\n    /** Function: disconnect\n     *  Start the graceful disconnection process.\n     *\n     *  This function starts the disconnection process.  This process starts\n     *  by sending unavailable presence and sending BOSH body of type\n     *  terminate.  A timeout handler makes sure that disconnection happens\n     *  even if the BOSH server does not respond.\n     *  If the Connection object isn't connected, at least tries to abort all pending requests\n     *  so the connection object won't generate successful requests (which were already opened).\n     *\n     *  The user supplied connection callback will be notified of the\n     *  progress as this process happens.\n     *\n     *  Parameters:\n     *    (String) reason - The reason the disconnect is occuring.\n     */\n    disconnect: function (reason) {\n        this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n        Strophe.info(\"Disconnect was called because: \" + reason);\n        if (this.connected) {\n            var pres = false;\n            this.disconnecting = true;\n            if (this.authenticated) {\n                pres = $pres({\n                    xmlns: Strophe.NS.CLIENT,\n                    type: 'unavailable'\n                });\n            }\n            // setup timeout handler\n            this._disconnectTimeout = this._addSysTimedHandler(\n                3000, this._onDisconnectTimeout.bind(this));\n            this._proto._disconnect(pres);\n        } else {\n            Strophe.info(\"Disconnect was called before Strophe connected to the server\");\n            this._proto._abortAllRequests();\n            this._doDisconnect();\n        }\n    },\n\n    /** PrivateFunction: _changeConnectStatus\n     *  _Private_ helper function that makes sure plugins and the user's\n     *  callback are notified of connection status changes.\n     *\n     *  Parameters:\n     *    (Integer) status - the new connection status, one of the values\n     *      in Strophe.Status\n     *    (String) condition - the error condition or null\n     *    (XMLElement) elem - The triggering stanza.\n     */\n    _changeConnectStatus: function (status, condition, elem) {\n        // notify all plugins listening for status changes\n        for (var k in Strophe._connectionPlugins) {\n            if (Strophe._connectionPlugins.hasOwnProperty(k)) {\n                var plugin = this[k];\n                if (plugin.statusChanged) {\n                    try {\n                        plugin.statusChanged(status, condition);\n                    } catch (err) {\n                        Strophe.error(\"\" + k + \" plugin caused an exception \" +\n                                      \"changing status: \" + err);\n                    }\n                }\n            }\n        }\n\n        // notify the user's callback\n        if (this.connect_callback) {\n            try {\n                this.connect_callback(status, condition, elem);\n            } catch (e) {\n                Strophe._handleError(e);\n                Strophe.error(\n                    \"User connection callback caused an \"+\"exception: \"+e);\n            }\n        }\n    },\n\n    /** PrivateFunction: _doDisconnect\n     *  _Private_ function to disconnect.\n     *\n     *  This is the last piece of the disconnection logic.  This resets the\n     *  connection and alerts the user's connection callback.\n     */\n    _doDisconnect: function (condition) {\n        if (typeof this._idleTimeout === \"number\") {\n            clearTimeout(this._idleTimeout);\n        }\n\n        // Cancel Disconnect Timeout\n        if (this._disconnectTimeout !== null) {\n            this.deleteTimedHandler(this._disconnectTimeout);\n            this._disconnectTimeout = null;\n        }\n\n        Strophe.info(\"_doDisconnect was called\");\n        this._proto._doDisconnect();\n\n        this.authenticated = false;\n        this.disconnecting = false;\n        this.restored = false;\n\n        // delete handlers\n        this.handlers = [];\n        this.timedHandlers = [];\n        this.removeTimeds = [];\n        this.removeHandlers = [];\n        this.addTimeds = [];\n        this.addHandlers = [];\n\n        // tell the parent we disconnected\n        this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n        this.connected = false;\n    },\n\n    /** PrivateFunction: _dataRecv\n     *  _Private_ handler to processes incoming data from the the connection.\n     *\n     *  Except for _connect_cb handling the initial connection request,\n     *  this function handles the incoming data for all requests.  This\n     *  function also fires stanza handlers that match each incoming\n     *  stanza.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The request that has data ready.\n     *    (string) req - The stanza a raw string (optiona).\n     */\n    _dataRecv: function (req, raw) {\n        Strophe.info(\"_dataRecv called\");\n        var elem = this._proto._reqToData(req);\n        if (elem === null) { return; }\n\n        if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n            if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                this.xmlInput(elem.childNodes[0]);\n            } else {\n                this.xmlInput(elem);\n            }\n        }\n        if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n            if (raw) {\n                this.rawInput(raw);\n            } else {\n                this.rawInput(Strophe.serialize(elem));\n            }\n        }\n\n        // remove handlers scheduled for deletion\n        var i, hand;\n        while (this.removeHandlers.length > 0) {\n            hand = this.removeHandlers.pop();\n            i = this.handlers.indexOf(hand);\n            if (i >= 0) {\n                this.handlers.splice(i, 1);\n            }\n        }\n\n        // add handlers scheduled for addition\n        while (this.addHandlers.length > 0) {\n            this.handlers.push(this.addHandlers.pop());\n        }\n\n        // handle graceful disconnect\n        if (this.disconnecting && this._proto._emptyQueue()) {\n            this._doDisconnect();\n            return;\n        }\n\n        var type = elem.getAttribute(\"type\");\n        var cond, conflict;\n        if (type !== null && type === \"terminate\") {\n            // Don't process stanzas that come in after disconnect\n            if (this.disconnecting) {\n                return;\n            }\n\n            // an error occurred\n            cond = elem.getAttribute(\"condition\");\n            conflict = elem.getElementsByTagName(\"conflict\");\n            if (cond !== null) {\n                if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                    cond = \"conflict\";\n                }\n                this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n            } else {\n                this._changeConnectStatus(\n                    Strophe.Status.CONNFAIL,\n                    Strophe.ErrorCondition.UNKOWN_REASON\n                );\n            }\n            this._doDisconnect(cond);\n            return;\n        }\n\n        // send each incoming stanza through the handler chain\n        var that = this;\n        Strophe.forEachChild(elem, null, function (child) {\n            var i, newList;\n            // process handlers\n            newList = that.handlers;\n            that.handlers = [];\n            for (i = 0; i < newList.length; i++) {\n                var hand = newList[i];\n                // encapsulate 'handler.run' not to lose the whole handler list if\n                // one of the handlers throws an exception\n                try {\n                    if (hand.isMatch(child) &&\n                        (that.authenticated || !hand.user)) {\n                        if (hand.run(child)) {\n                            that.handlers.push(hand);\n                        }\n                    } else {\n                        that.handlers.push(hand);\n                    }\n                } catch(e) {\n                    // if the handler throws an exception, we consider it as false\n                    Strophe.warn('Removing Strophe handlers due to uncaught exception: '+e.message);\n                }\n            }\n        });\n    },\n\n\n    /** Attribute: mechanisms\n     *  SASL Mechanisms available for Connection.\n     */\n    mechanisms: {},\n\n    /** PrivateFunction: _connect_cb\n     *  _Private_ handler for initial connection request.\n     *\n     *  This handler is used to process the initial connection request\n     *  response from the BOSH server. It is used to set up authentication\n     *  handlers and start the authentication process.\n     *\n     *  SASL authentication will be attempted if available, otherwise\n     *  the code will fall back to legacy authentication.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The current request.\n     *    (Function) _callback - low level (xmpp) connect callback function.\n     *      Useful for plugins with their own xmpp connect callback (when they\n     *      want to do something special).\n     */\n    _connect_cb: function (req, _callback, raw) {\n        Strophe.info(\"_connect_cb was called\");\n        this.connected = true;\n\n        var bodyWrap;\n        try {\n            bodyWrap = this._proto._reqToData(req);\n        } catch (e) {\n            if (e !== \"badformat\") { throw e; }\n            this._changeConnectStatus(\n                Strophe.Status.CONNFAIL,\n                Strophe.ErrorCondition.BAD_FORMAT\n            );\n            this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n        }\n        if (!bodyWrap) { return; }\n\n        if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n            if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                this.xmlInput(bodyWrap.childNodes[0]);\n            } else {\n                this.xmlInput(bodyWrap);\n            }\n        }\n        if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n            if (raw) {\n                this.rawInput(raw);\n            } else {\n                this.rawInput(Strophe.serialize(bodyWrap));\n            }\n        }\n\n        var conncheck = this._proto._connect_cb(bodyWrap);\n        if (conncheck === Strophe.Status.CONNFAIL) {\n            return;\n        }\n\n        // Check for the stream:features tag\n        var hasFeatures;\n        if (bodyWrap.getElementsByTagNameNS) {\n            hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n        } else {\n            hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 ||\n                            bodyWrap.getElementsByTagName(\"features\").length > 0;\n        }\n        if (!hasFeatures) {\n            this._proto._no_auth_received(_callback);\n            return;\n        }\n\n        var matched = [], i, mech;\n        var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n        if (mechanisms.length > 0) {\n            for (i = 0; i < mechanisms.length; i++) {\n                mech = Strophe.getText(mechanisms[i]);\n                if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n            }\n        }\n        if (matched.length === 0) {\n            if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                // There are no matching SASL mechanisms and also no legacy\n                // auth available.\n                this._proto._no_auth_received(_callback);\n                return;\n            }\n        }\n        if (this.do_authentication !== false) {\n            this.authenticate(matched);\n        }\n    },\n\n    /** Function: sortMechanismsByPriority\n     *\n     *  Sorts an array of objects with prototype SASLMechanism according to\n     *  their priorities.\n     *\n     *  Parameters:\n     *    (Array) mechanisms - Array of SASL mechanisms.\n     *\n     */\n    sortMechanismsByPriority: function (mechanisms) {\n        // Sorting mechanisms according to priority.\n        var i, j, higher, swap;\n        for (i = 0; i < mechanisms.length - 1; ++i) {\n            higher = i;\n            for (j = i + 1; j < mechanisms.length; ++j) {\n                if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                    higher = j;\n                }\n            }\n            if (higher !== i) {\n                swap = mechanisms[i];\n                mechanisms[i] = mechanisms[higher];\n                mechanisms[higher] = swap;\n            }\n        }\n        return mechanisms;\n    },\n\n    /** PrivateFunction: _attemptSASLAuth\n     *\n     *  Iterate through an array of SASL mechanisms and attempt authentication\n     *  with the highest priority (enabled) mechanism.\n     *\n     *  Parameters:\n     *    (Array) mechanisms - Array of SASL mechanisms.\n     *\n     *  Returns:\n     *    (Boolean) mechanism_found - true or false, depending on whether a\n     *          valid SASL mechanism was found with which authentication could be\n     *          started.\n     */\n    _attemptSASLAuth: function (mechanisms) {\n        mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n        var i = 0, mechanism_found = false;\n        for (i = 0; i < mechanisms.length; ++i) {\n            if (!mechanisms[i].prototype.test(this)) {\n                continue;\n            }\n            this._sasl_success_handler = this._addSysHandler(\n                this._sasl_success_cb.bind(this), null,\n                \"success\", null, null);\n            this._sasl_failure_handler = this._addSysHandler(\n                this._sasl_failure_cb.bind(this), null,\n                \"failure\", null, null);\n            this._sasl_challenge_handler = this._addSysHandler(\n                this._sasl_challenge_cb.bind(this), null,\n                \"challenge\", null, null);\n\n            this._sasl_mechanism = new mechanisms[i]();\n            this._sasl_mechanism.onStart(this);\n\n            var request_auth_exchange = $build(\"auth\", {\n                xmlns: Strophe.NS.SASL,\n                mechanism: this._sasl_mechanism.name\n            });\n            if (this._sasl_mechanism.isClientFirst) {\n                var response = this._sasl_mechanism.onChallenge(this, null);\n                request_auth_exchange.t(btoa(response));\n            }\n            this.send(request_auth_exchange.tree());\n            mechanism_found = true;\n            break;\n        }\n        return mechanism_found;\n    },\n\n    /** PrivateFunction: _attemptLegacyAuth\n     *\n     *  Attempt legacy (i.e. non-SASL) authentication.\n     *\n     */\n    _attemptLegacyAuth: function () {\n        if (Strophe.getNodeFromJid(this.jid) === null) {\n            // we don't have a node, which is required for non-anonymous\n            // client connections\n            this._changeConnectStatus(\n                Strophe.Status.CONNFAIL,\n                Strophe.ErrorCondition.MISSING_JID_NODE\n            );\n            this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n        } else {\n            // Fall back to legacy authentication\n            this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n            this._addSysHandler(\n                this._auth1_cb.bind(this),\n                null, null, null, \"_auth_1\"\n            );\n            this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                }).c(\"query\", {xmlns: Strophe.NS.AUTH})\n                .c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid))\n                .tree());\n        }\n    },\n\n    /** Function: authenticate\n     * Set up authentication\n     *\n     *  Continues the initial connection request by setting up authentication\n     *  handlers and starting the authentication process.\n     *\n     *  SASL authentication will be attempted if available, otherwise\n     *  the code will fall back to legacy authentication.\n     *\n     *  Parameters:\n     *    (Array) matched - Array of SASL mechanisms supported.\n     *\n     */\n    authenticate: function (matched) {\n        if (!this._attemptSASLAuth(matched)) {\n            this._attemptLegacyAuth();\n        }\n    },\n\n    /** PrivateFunction: _sasl_challenge_cb\n     *  _Private_ handler for the SASL challenge\n     *\n     */\n    _sasl_challenge_cb: function(elem) {\n      var challenge = atob(Strophe.getText(elem));\n      var response = this._sasl_mechanism.onChallenge(this, challenge);\n      var stanza = $build('response', {\n          'xmlns': Strophe.NS.SASL\n      });\n      if (response !== \"\") {\n        stanza.t(btoa(response));\n      }\n      this.send(stanza.tree());\n      return true;\n    },\n\n    /** PrivateFunction: _auth1_cb\n     *  _Private_ handler for legacy authentication.\n     *\n     *  This handler is called in response to the initial <iq type='get'/>\n     *  for legacy authentication.  It builds an authentication <iq/> and\n     *  sends it, creating a handler (calling back to _auth2_cb()) to\n     *  handle the result\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza that triggered the callback.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    /* jshint unused:false */\n    _auth1_cb: function (elem) {\n        // build plaintext auth iq\n        var iq = $iq({type: \"set\", id: \"_auth_2\"})\n            .c('query', {xmlns: Strophe.NS.AUTH})\n            .c('username', {}).t(Strophe.getNodeFromJid(this.jid))\n            .up()\n            .c('password').t(this.pass);\n\n        if (!Strophe.getResourceFromJid(this.jid)) {\n            // since the user has not supplied a resource, we pick\n            // a default one here.  unlike other auth methods, the server\n            // cannot do this for us.\n            this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n        }\n        iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n        this._addSysHandler(this._auth2_cb.bind(this), null,\n                            null, null, \"_auth_2\");\n        this.send(iq.tree());\n        return false;\n    },\n    /* jshint unused:true */\n\n    /** PrivateFunction: _sasl_success_cb\n     *  _Private_ handler for succesful SASL authentication.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_success_cb: function (elem) {\n        if (this._sasl_data[\"server-signature\"]) {\n            var serverSignature;\n            var success = atob(Strophe.getText(elem));\n            var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n            var matches = success.match(attribMatch);\n            if (matches[1] === \"v\") {\n                serverSignature = matches[2];\n            }\n\n            if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n              // remove old handlers\n              this.deleteHandler(this._sasl_failure_handler);\n              this._sasl_failure_handler = null;\n              if (this._sasl_challenge_handler) {\n                this.deleteHandler(this._sasl_challenge_handler);\n                this._sasl_challenge_handler = null;\n              }\n\n              this._sasl_data = {};\n              return this._sasl_failure_cb(null);\n            }\n        }\n        Strophe.info(\"SASL authentication succeeded.\");\n\n        if (this._sasl_mechanism) {\n          this._sasl_mechanism.onSuccess();\n        }\n\n        // remove old handlers\n        this.deleteHandler(this._sasl_failure_handler);\n        this._sasl_failure_handler = null;\n        if (this._sasl_challenge_handler) {\n            this.deleteHandler(this._sasl_challenge_handler);\n            this._sasl_challenge_handler = null;\n        }\n\n        var streamfeature_handlers = [];\n        var wrapper = function(handlers, elem) {\n            while (handlers.length) {\n                this.deleteHandler(handlers.pop());\n            }\n            this._sasl_auth1_cb.bind(this)(elem);\n            return false;\n        };\n        streamfeature_handlers.push(this._addSysHandler(function(elem) {\n            wrapper.bind(this)(streamfeature_handlers, elem);\n        }.bind(this), null, \"stream:features\", null, null));\n        streamfeature_handlers.push(this._addSysHandler(function(elem) {\n            wrapper.bind(this)(streamfeature_handlers, elem);\n        }.bind(this), Strophe.NS.STREAM, \"features\", null, null));\n\n        // we must send an xmpp:restart now\n        this._sendRestart();\n\n        return false;\n    },\n\n    /** PrivateFunction: _sasl_auth1_cb\n     *  _Private_ handler to start stream binding.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_auth1_cb: function (elem) {\n        // save stream:features for future usage\n        this.features = elem;\n        var i, child;\n        for (i = 0; i < elem.childNodes.length; i++) {\n            child = elem.childNodes[i];\n            if (child.nodeName === 'bind') {\n                this.do_bind = true;\n            }\n\n            if (child.nodeName === 'session') {\n                this.do_session = true;\n            }\n        }\n\n        if (!this.do_bind) {\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n            return false;\n        } else {\n            this._addSysHandler(this._sasl_bind_cb.bind(this), null, null,\n                                null, \"_bind_auth_2\");\n\n            var resource = Strophe.getResourceFromJid(this.jid);\n            if (resource) {\n                this.send($iq({type: \"set\", id: \"_bind_auth_2\"})\n                          .c('bind', {xmlns: Strophe.NS.BIND})\n                          .c('resource', {}).t(resource).tree());\n            } else {\n                this.send($iq({type: \"set\", id: \"_bind_auth_2\"})\n                          .c('bind', {xmlns: Strophe.NS.BIND})\n                          .tree());\n            }\n        }\n        return false;\n    },\n\n    /** PrivateFunction: _sasl_bind_cb\n     *  _Private_ handler for binding result and session start.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_bind_cb: function (elem) {\n        if (elem.getAttribute(\"type\") === \"error\") {\n            Strophe.info(\"SASL binding failed.\");\n            var conflict = elem.getElementsByTagName(\"conflict\"), condition;\n            if (conflict.length > 0) {\n                condition = Strophe.ErrorCondition.CONFLICT;\n            }\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n            return false;\n        }\n\n        // TODO - need to grab errors\n        var bind = elem.getElementsByTagName(\"bind\");\n        var jidNode;\n        if (bind.length > 0) {\n            // Grab jid\n            jidNode = bind[0].getElementsByTagName(\"jid\");\n            if (jidNode.length > 0) {\n                this.jid = Strophe.getText(jidNode[0]);\n\n                if (this.do_session) {\n                    this._addSysHandler(this._sasl_session_cb.bind(this),\n                                        null, null, null, \"_session_auth_2\");\n\n                    this.send($iq({type: \"set\", id: \"_session_auth_2\"})\n                                  .c('session', {xmlns: Strophe.NS.SESSION})\n                                  .tree());\n                } else {\n                    this.authenticated = true;\n                    this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                }\n            }\n        } else {\n            Strophe.info(\"SASL binding failed.\");\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n            return false;\n        }\n    },\n\n    /** PrivateFunction: _sasl_session_cb\n     *  _Private_ handler to finish successful SASL connection.\n     *\n     *  This sets Connection.authenticated to true on success, which\n     *  starts the processing of user handlers.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_session_cb: function (elem) {\n        if (elem.getAttribute(\"type\") === \"result\") {\n            this.authenticated = true;\n            this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n        } else if (elem.getAttribute(\"type\") === \"error\") {\n            Strophe.info(\"Session creation failed.\");\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n            return false;\n        }\n        return false;\n    },\n\n    /** PrivateFunction: _sasl_failure_cb\n     *  _Private_ handler for SASL authentication failure.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    /* jshint unused:false */\n    _sasl_failure_cb: function (elem) {\n        // delete unneeded handlers\n        if (this._sasl_success_handler) {\n            this.deleteHandler(this._sasl_success_handler);\n            this._sasl_success_handler = null;\n        }\n        if (this._sasl_challenge_handler) {\n            this.deleteHandler(this._sasl_challenge_handler);\n            this._sasl_challenge_handler = null;\n        }\n\n        if(this._sasl_mechanism)\n          this._sasl_mechanism.onFailure();\n        this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n        return false;\n    },\n    /* jshint unused:true */\n\n    /** PrivateFunction: _auth2_cb\n     *  _Private_ handler to finish legacy authentication.\n     *\n     *  This handler is called when the result from the jabber:iq:auth\n     *  <iq/> stanza is returned.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza that triggered the callback.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _auth2_cb: function (elem) {\n        if (elem.getAttribute(\"type\") === \"result\") {\n            this.authenticated = true;\n            this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n        } else if (elem.getAttribute(\"type\") === \"error\") {\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n            this.disconnect('authentication failed');\n        }\n        return false;\n    },\n\n    /** PrivateFunction: _addSysTimedHandler\n     *  _Private_ function to add a system level timed handler.\n     *\n     *  This function is used to add a Strophe.TimedHandler for the\n     *  library code.  System timed handlers are allowed to run before\n     *  authentication is complete.\n     *\n     *  Parameters:\n     *    (Integer) period - The period of the handler.\n     *    (Function) handler - The callback function.\n     */\n    _addSysTimedHandler: function (period, handler) {\n        var thand = new Strophe.TimedHandler(period, handler);\n        thand.user = false;\n        this.addTimeds.push(thand);\n        return thand;\n    },\n\n    /** PrivateFunction: _addSysHandler\n     *  _Private_ function to add a system level stanza handler.\n     *\n     *  This function is used to add a Strophe.Handler for the\n     *  library code.  System stanza handlers are allowed to run before\n     *  authentication is complete.\n     *\n     *  Parameters:\n     *    (Function) handler - The callback function.\n     *    (String) ns - The namespace to match.\n     *    (String) name - The stanza name to match.\n     *    (String) type - The stanza type attribute to match.\n     *    (String) id - The stanza id attribute to match.\n     */\n    _addSysHandler: function (handler, ns, name, type, id) {\n        var hand = new Strophe.Handler(handler, ns, name, type, id);\n        hand.user = false;\n        this.addHandlers.push(hand);\n        return hand;\n    },\n\n    /** PrivateFunction: _onDisconnectTimeout\n     *  _Private_ timeout handler for handling non-graceful disconnection.\n     *\n     *  If the graceful disconnect process does not complete within the\n     *  time allotted, this handler finishes the disconnect anyway.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _onDisconnectTimeout: function () {\n        Strophe.info(\"_onDisconnectTimeout was called\");\n        this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n        this._proto._onDisconnectTimeout();\n        // actually disconnect\n        this._doDisconnect();\n        return false;\n    },\n\n    /** PrivateFunction: _onIdle\n     *  _Private_ handler to process events during idle cycle.\n     *\n     *  This handler is called every 100ms to fire timed handlers that\n     *  are ready and keep poll requests going.\n     */\n    _onIdle: function () {\n        var i, thand, since, newList;\n\n        // add timed handlers scheduled for addition\n        // NOTE: we add before remove in the case a timed handler is\n        // added and then deleted before the next _onIdle() call.\n        while (this.addTimeds.length > 0) {\n            this.timedHandlers.push(this.addTimeds.pop());\n        }\n\n        // remove timed handlers that have been scheduled for deletion\n        while (this.removeTimeds.length > 0) {\n            thand = this.removeTimeds.pop();\n            i = this.timedHandlers.indexOf(thand);\n            if (i >= 0) {\n                this.timedHandlers.splice(i, 1);\n            }\n        }\n\n        // call ready timed handlers\n        var now = new Date().getTime();\n        newList = [];\n        for (i = 0; i < this.timedHandlers.length; i++) {\n            thand = this.timedHandlers[i];\n            if (this.authenticated || !thand.user) {\n                since = thand.lastCalled + thand.period;\n                if (since - now <= 0) {\n                    if (thand.run()) {\n                        newList.push(thand);\n                    }\n                } else {\n                    newList.push(thand);\n                }\n            }\n        }\n        this.timedHandlers = newList;\n\n        clearTimeout(this._idleTimeout);\n\n        this._proto._onIdle();\n\n        // reactivate the timer only if connected\n        if (this.connected) {\n            // XXX: setTimeout should be called only with function expressions (23974bc1)\n            this._idleTimeout = setTimeout(function() {\n                this._onIdle();\n            }.bind(this), 100);\n        }\n    }\n};\n\n/** Class: Strophe.SASLMechanism\n *\n *  encapsulates SASL authentication mechanisms.\n *\n *  User code may override the priority for each mechanism or disable it completely.\n *  See <priority> for information about changing priority and <test> for informatian on\n *  how to disable a mechanism.\n *\n *  By default, all mechanisms are enabled and the priorities are\n *\n *      OAUTHBEARER - 60\n *      SCRAM-SHA1 - 50\n *      DIGEST-MD5 - 40\n *      PLAIN - 30\n *      ANONYMOUS - 20\n *      EXTERNAL - 10\n *\n *  See: Strophe.Connection.addSupportedSASLMechanisms\n */\n\n/**\n * PrivateConstructor: Strophe.SASLMechanism\n * SASL auth mechanism abstraction.\n *\n *  Parameters:\n *    (String) name - SASL Mechanism name.\n *    (Boolean) isClientFirst - If client should send response first without challenge.\n *    (Number) priority - Priority.\n *\n *  Returns:\n *    A new Strophe.SASLMechanism object.\n */\nStrophe.SASLMechanism = function(name, isClientFirst, priority) {\n  /** PrivateVariable: name\n   *  Mechanism name.\n   */\n  this.name = name;\n  /** PrivateVariable: isClientFirst\n   *  If client sends response without initial server challenge.\n   */\n  this.isClientFirst = isClientFirst;\n  /** Variable: priority\n   *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n   *  Users may override this to prioritize mechanisms differently.\n   *\n   *  In the default configuration the priorities are\n   *\n   *  SCRAM-SHA1 - 40\n   *  DIGEST-MD5 - 30\n   *  Plain - 20\n   *\n   *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n   *\n   *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n   *\n   *  See <SASL mechanisms> for a list of available mechanisms.\n   *\n   */\n  this.priority = priority;\n};\n\nStrophe.SASLMechanism.prototype = {\n  /**\n   *  Function: test\n   *  Checks if mechanism able to run.\n   *  To disable a mechanism, make this return false;\n   *\n   *  To disable plain authentication run\n   *  > Strophe.SASLPlain.test = function() {\n   *  >   return false;\n   *  > }\n   *\n   *  See <SASL mechanisms> for a list of available mechanisms.\n   *\n   *  Parameters:\n   *    (Strophe.Connection) connection - Target Connection.\n   *\n   *  Returns:\n   *    (Boolean) If mechanism was able to run.\n   */\n  /* jshint unused:false */\n  test: function(connection) {\n    return true;\n  },\n  /* jshint unused:true */\n\n  /** PrivateFunction: onStart\n   *  Called before starting mechanism on some connection.\n   *\n   *  Parameters:\n   *    (Strophe.Connection) connection - Target Connection.\n   */\n  onStart: function(connection) {\n    this._connection = connection;\n  },\n\n  /** PrivateFunction: onChallenge\n   *  Called by protocol implementation on incoming challenge. If client is\n   *  first (isClientFirst === true) challenge will be null on the first call.\n   *\n   *  Parameters:\n   *    (Strophe.Connection) connection - Target Connection.\n   *    (String) challenge - current challenge to handle.\n   *\n   *  Returns:\n   *    (String) Mechanism response.\n   */\n  /* jshint unused:false */\n  onChallenge: function(connection, challenge) {\n    throw new Error(\"You should implement challenge handling!\");\n  },\n  /* jshint unused:true */\n\n  /** PrivateFunction: onFailure\n   *  Protocol informs mechanism implementation about SASL failure.\n   */\n  onFailure: function() {\n    this._connection = null;\n  },\n\n  /** PrivateFunction: onSuccess\n   *  Protocol informs mechanism implementation about SASL success.\n   */\n  onSuccess: function() {\n    this._connection = null;\n  }\n};\n\n  /** Constants: SASL mechanisms\n   *  Available authentication mechanisms\n   *\n   *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n   *  Strophe.SASLPlain - SASL PLAIN authentication.\n   *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n   *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n   *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n   *  Strophe.SASLExternal - SASL EXTERNAL authentication\n   *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n   */\n\n// Building SASL callbacks\n\n/** PrivateConstructor: SASLAnonymous\n *  SASL ANONYMOUS authentication.\n */\nStrophe.SASLAnonymous = function() {};\nStrophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\nStrophe.SASLAnonymous.prototype.test = function(connection) {\n    return connection.authcid === null;\n};\n\n\n/** PrivateConstructor: SASLPlain\n *  SASL PLAIN authentication.\n */\nStrophe.SASLPlain = function() {};\nStrophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\nStrophe.SASLPlain.prototype.test = function(connection) {\n    return connection.authcid !== null;\n};\n\nStrophe.SASLPlain.prototype.onChallenge = function(connection) {\n    var auth_str = connection.authzid;\n    auth_str = auth_str + \"\\u0000\";\n    auth_str = auth_str + connection.authcid;\n    auth_str = auth_str + \"\\u0000\";\n    auth_str = auth_str + connection.pass;\n    return utils.utf16to8(auth_str);\n};\n\n\n/** PrivateConstructor: SASLSHA1\n *  SASL SCRAM SHA 1 authentication.\n */\nStrophe.SASLSHA1 = function() {};\nStrophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\nStrophe.SASLSHA1.prototype.test = function(connection) {\n    return connection.authcid !== null;\n};\n\nStrophe.SASLSHA1.prototype.onChallenge = function(connection, challenge, test_cnonce) {\n  var cnonce = test_cnonce || MD5.hexdigest(Math.random() * 1234567890);\n  var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n  auth_str += \",r=\";\n  auth_str += cnonce;\n  connection._sasl_data.cnonce = cnonce;\n  connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n\n  auth_str = \"n,,\" + auth_str;\n\n  this.onChallenge = function (connection, challenge) {\n    var nonce, salt, iter, Hi, U, U_old, i, k, pass;\n    var clientKey, serverKey, clientSignature;\n    var responseText = \"c=biws,\";\n    var authMessage = connection._sasl_data[\"client-first-message-bare\"] + \",\" +\n      challenge + \",\";\n    var cnonce = connection._sasl_data.cnonce;\n    var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n    while (challenge.match(attribMatch)) {\n      var matches = challenge.match(attribMatch);\n      challenge = challenge.replace(matches[0], \"\");\n      switch (matches[1]) {\n      case \"r\":\n        nonce = matches[2];\n        break;\n      case \"s\":\n        salt = matches[2];\n        break;\n      case \"i\":\n        iter = matches[2];\n        break;\n      }\n    }\n\n    if (nonce.substr(0, cnonce.length) !== cnonce) {\n      connection._sasl_data = {};\n      return connection._sasl_failure_cb();\n    }\n\n    responseText += \"r=\" + nonce;\n    authMessage += responseText;\n\n    salt = atob(salt);\n    salt += \"\\x00\\x00\\x00\\x01\";\n\n    pass = utils.utf16to8(connection.pass);\n    Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n    for (i = 1; i < iter; i++) {\n      U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n      for (k = 0; k < 5; k++) {\n        Hi[k] ^= U[k];\n      }\n      U_old = U;\n    }\n    Hi = SHA1.binb2str(Hi);\n\n    clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n    serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n    clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n    connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n    for (k = 0; k < 5; k++) {\n      clientKey[k] ^= clientSignature[k];\n    }\n\n    responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n    return responseText;\n  }.bind(this);\n\n  return auth_str;\n};\n\n\n/** PrivateConstructor: SASLMD5\n *  SASL DIGEST MD5 authentication.\n */\nStrophe.SASLMD5 = function() {};\nStrophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\nStrophe.SASLMD5.prototype.test = function(connection) {\n    return connection.authcid !== null;\n};\n\n/** PrivateFunction: _quote\n *  _Private_ utility function to backslash escape and quote strings.\n *\n *  Parameters:\n *    (String) str - The string to be quoted.\n *\n *  Returns:\n *    quoted string\n */\nStrophe.SASLMD5.prototype._quote = function (str) {\n    return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"';\n    //\" end string workaround for emacs\n};\n\nStrophe.SASLMD5.prototype.onChallenge = function(connection, challenge, test_cnonce) {\n  var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n  var cnonce = test_cnonce || MD5.hexdigest(\"\" + (Math.random() * 1234567890));\n  var realm = \"\";\n  var host = null;\n  var nonce = \"\";\n  var qop = \"\";\n  var matches;\n\n  while (challenge.match(attribMatch)) {\n    matches = challenge.match(attribMatch);\n    challenge = challenge.replace(matches[0], \"\");\n    matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n    switch (matches[1]) {\n    case \"realm\":\n      realm = matches[2];\n      break;\n    case \"nonce\":\n      nonce = matches[2];\n      break;\n    case \"qop\":\n      qop = matches[2];\n      break;\n    case \"host\":\n      host = matches[2];\n      break;\n    }\n  }\n\n  var digest_uri = connection.servtype + \"/\" + connection.domain;\n  if (host !== null) {\n    digest_uri = digest_uri + \"/\" + host;\n  }\n\n  var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n  var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n  var A2 = 'AUTHENTICATE:' + digest_uri;\n\n  var responseText = \"\";\n  responseText += 'charset=utf-8,';\n  responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n  responseText += 'realm=' + this._quote(realm) + ',';\n  responseText += 'nonce=' + this._quote(nonce) + ',';\n  responseText += 'nc=00000001,';\n  responseText += 'cnonce=' + this._quote(cnonce) + ',';\n  responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n  responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" +\n                                              nonce + \":00000001:\" +\n                                              cnonce + \":auth:\" +\n                                              MD5.hexdigest(A2)) + \",\";\n  responseText += 'qop=auth';\n\n  this.onChallenge = function () {\n      return \"\";\n  };\n  return responseText;\n};\n\n\n/** PrivateConstructor: SASLOAuthBearer\n *  SASL OAuth Bearer authentication.\n */\nStrophe.SASLOAuthBearer = function() {};\nStrophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\nStrophe.SASLOAuthBearer.prototype.test = function(connection) {\n    return connection.pass !== null;\n};\n\nStrophe.SASLOAuthBearer.prototype.onChallenge = function(connection) {\n    var auth_str = 'n,';\n    if (connection.authcid !== null) {\n      auth_str = auth_str + 'a=' + connection.authzid;\n    }\n    auth_str = auth_str + ',';\n    auth_str = auth_str + \"\\u0001\";\n    auth_str = auth_str + 'auth=Bearer ';\n    auth_str = auth_str + connection.pass;\n    auth_str = auth_str + \"\\u0001\";\n    auth_str = auth_str + \"\\u0001\";\n\n    return utils.utf16to8(auth_str);\n};\n\n\n/** PrivateConstructor: SASLExternal\n *  SASL EXTERNAL authentication.\n *\n *  The EXTERNAL mechanism allows a client to request the server to use\n *  credentials established by means external to the mechanism to\n *  authenticate the client. The external means may be, for instance,\n *  TLS services.\n */\nStrophe.SASLExternal = function() {};\nStrophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\nStrophe.SASLExternal.prototype.onChallenge = function(connection) {\n    /** According to XEP-178, an authzid SHOULD NOT be presented when the\n     * authcid contained or implied in the client certificate is the JID (i.e.\n     * authzid) with which the user wants to log in as.\n     *\n     * To NOT send the authzid, the user should therefore set the authcid equal\n     * to the JID when instantiating a new Strophe.Connection object.\n     */\n    return connection.authcid === connection.authzid ? '' : connection.authzid;\n};\n\n\n/** PrivateConstructor: SASLXOAuth2\n *  SASL X-OAuth2 authentication.\n */\nStrophe.SASLXOAuth2 = function () { };\nStrophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\nStrophe.SASLXOAuth2.prototype.test = function (connection) {\n    return connection.pass !== null;\n};\n\nStrophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n    var auth_str = '\\u0000';\n    if (connection.authcid !== null) {\n        auth_str = auth_str + connection.authzid;\n    }\n    auth_str = auth_str + \"\\u0000\";\n    auth_str = auth_str + connection.pass;\n\n    return utils.utf16to8(auth_str);\n};\n\n\nreturn {\n    'Strophe':         Strophe,\n    '$build':          $build,\n    '$iq':             $iq,\n    '$msg':            $msg,\n    '$pres':           $pres,\n    'SHA1':            SHA1,\n    'MD5':             MD5,\n    'b64_hmac_sha1':   SHA1.b64_hmac_sha1,\n    'b64_sha1':        SHA1.b64_sha1,\n    'str_hmac_sha1':   SHA1.str_hmac_sha1,\n    'str_sha1':        SHA1.str_sha1\n};\n}));\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/* global define, window, setTimeout, clearTimeout, XMLHttpRequest, ActiveXObject, Strophe, $build */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-bosh',['strophe-core'], function (core) {\n            return factory(\n                core.Strophe,\n                core.$build\n            );\n        });\n    } else if (typeof exports === 'object') {\n        var core = require('./core');\n\n        module.exports = factory(core.Strophe, core.$build);\n    } else {\n        // Browser globals\n        return factory(Strophe, $build);\n    }\n}(this, function (Strophe, $build) {\n\n/** PrivateClass: Strophe.Request\n *  _Private_ helper class that provides a cross implementation abstraction\n *  for a BOSH related XMLHttpRequest.\n *\n *  The Strophe.Request class is used internally to encapsulate BOSH request\n *  information.  It is not meant to be used from user's code.\n */\n\n/** PrivateConstructor: Strophe.Request\n *  Create and initialize a new Strophe.Request object.\n *\n *  Parameters:\n *    (XMLElement) elem - The XML data to be sent in the request.\n *    (Function) func - The function that will be called when the\n *      XMLHttpRequest readyState changes.\n *    (Integer) rid - The BOSH rid attribute associated with this request.\n *    (Integer) sends - The number of times this same request has been sent.\n */\nStrophe.Request = function (elem, func, rid, sends) {\n    this.id = ++Strophe._requestId;\n    this.xmlData = elem;\n    this.data = Strophe.serialize(elem);\n    // save original function in case we need to make a new request\n    // from this one.\n    this.origFunc = func;\n    this.func = func;\n    this.rid = rid;\n    this.date = NaN;\n    this.sends = sends || 0;\n    this.abort = false;\n    this.dead = null;\n\n    this.age = function () {\n        if (!this.date) { return 0; }\n        var now = new Date();\n        return (now - this.date) / 1000;\n    };\n    this.timeDead = function () {\n        if (!this.dead) { return 0; }\n        var now = new Date();\n        return (now - this.dead) / 1000;\n    };\n    this.xhr = this._newXHR();\n};\n\nStrophe.Request.prototype = {\n    /** PrivateFunction: getResponse\n     *  Get a response from the underlying XMLHttpRequest.\n     *\n     *  This function attempts to get a response from the request and checks\n     *  for errors.\n     *\n     *  Throws:\n     *    \"parsererror\" - A parser error occured.\n     *    \"badformat\" - The entity has sent XML that cannot be processed.\n     *\n     *  Returns:\n     *    The DOM element tree of the response.\n     */\n    getResponse: function () {\n        var node = null;\n        if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n            node = this.xhr.responseXML.documentElement;\n            if (node.tagName === \"parsererror\") {\n                Strophe.error(\"invalid response received\");\n                Strophe.error(\"responseText: \" + this.xhr.responseText);\n                Strophe.error(\"responseXML: \" +\n                              Strophe.serialize(this.xhr.responseXML));\n                throw \"parsererror\";\n            }\n        } else if (this.xhr.responseText) {\n            // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n            Strophe.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n            node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n            if (!node) {\n                throw new Error('Parsing produced null node');\n            } else if (node.querySelector('parsererror')) {\n                Strophe.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                Strophe.error(\"responseText: \" + this.xhr.responseText);\n                throw \"badformat\";\n            }\n        }\n        return node;\n    },\n\n    /** PrivateFunction: _newXHR\n     *  _Private_ helper function to create XMLHttpRequests.\n     *\n     *  This function creates XMLHttpRequests across all implementations.\n     *\n     *  Returns:\n     *    A new XMLHttpRequest.\n     */\n    _newXHR: function () {\n        var xhr = null;\n        if (window.XMLHttpRequest) {\n            xhr = new XMLHttpRequest();\n            if (xhr.overrideMimeType) {\n                xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n            }\n        } else if (window.ActiveXObject) {\n            xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        // use Function.bind() to prepend ourselves as an argument\n        xhr.onreadystatechange = this.func.bind(null, this);\n        return xhr;\n    }\n};\n\n/** Class: Strophe.Bosh\n *  _Private_ helper class that handles BOSH Connections\n *\n *  The Strophe.Bosh class is used internally by Strophe.Connection\n *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n */\n\n/** File: bosh.js\n *  A JavaScript library to enable BOSH in Strophejs.\n *\n *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n *  More information on BOSH can be found in XEP 124.\n */\n\n/** PrivateConstructor: Strophe.Bosh\n *  Create and initialize a Strophe.Bosh object.\n *\n *  Parameters:\n *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n *\n *  Returns:\n *    A new Strophe.Bosh object.\n */\nStrophe.Bosh = function(connection) {\n    this._conn = connection;\n    /* request id for body tags */\n    this.rid = Math.floor(Math.random() * 4294967295);\n    /* The current session ID. */\n    this.sid = null;\n\n    // default BOSH values\n    this.hold = 1;\n    this.wait = 60;\n    this.window = 5;\n    this.errors = 0;\n    this.inactivity = null;\n\n    this.lastResponseHeaders = null;\n\n    this._requests = [];\n};\n\nStrophe.Bosh.prototype = {\n    /** Variable: strip\n     *\n     *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n     *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n     *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n     *\n     *  > Strophe.Bosh.prototype.strip = \"body\";\n     *\n     *  This will enable stripping of the body tag in both\n     *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n     */\n    strip: null,\n\n    /** PrivateFunction: _buildBody\n     *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n     *\n     *  Returns:\n     *    A Strophe.Builder with a <body/> element.\n     */\n    _buildBody: function () {\n        var bodyWrap = $build('body', {\n            rid: this.rid++,\n            xmlns: Strophe.NS.HTTPBIND\n        });\n        if (this.sid !== null) {\n            bodyWrap.attrs({sid: this.sid});\n        }\n        if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n            this._cacheSession();\n        }\n        return bodyWrap;\n    },\n\n    /** PrivateFunction: _reset\n     *  Reset the connection.\n     *\n     *  This function is called by the reset function of the Strophe Connection\n     */\n    _reset: function () {\n        this.rid = Math.floor(Math.random() * 4294967295);\n        this.sid = null;\n        this.errors = 0;\n        if (this._conn._sessionCachingSupported()) {\n            window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n\n        this._conn.nextValidRid(this.rid);\n    },\n\n    /** PrivateFunction: _connect\n     *  _Private_ function that initializes the BOSH connection.\n     *\n     *  Creates and sends the Request that initializes the BOSH connection.\n     */\n    _connect: function (wait, hold, route) {\n        this.wait = wait || this.wait;\n        this.hold = hold || this.hold;\n        this.errors = 0;\n\n        // build the body tag\n        var body = this._buildBody().attrs({\n            to: this._conn.domain,\n            \"xml:lang\": \"en\",\n            wait: this.wait,\n            hold: this.hold,\n            content: \"text/xml; charset=utf-8\",\n            ver: \"1.6\",\n            \"xmpp:version\": \"1.0\",\n            \"xmlns:xmpp\": Strophe.NS.BOSH\n        });\n\n        if(route){\n            body.attrs({\n                route: route\n            });\n        }\n\n        var _connect_cb = this._conn._connect_cb;\n\n        this._requests.push(\n            new Strophe.Request(body.tree(),\n                                this._onRequestStateChange.bind(\n                                    this, _connect_cb.bind(this._conn)),\n                                body.tree().getAttribute(\"rid\")));\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _attach\n     *  Attach to an already created and authenticated BOSH session.\n     *\n     *  This function is provided to allow Strophe to attach to BOSH\n     *  sessions which have been created externally, perhaps by a Web\n     *  application.  This is often used to support auto-login type features\n     *  without putting user credentials into the page.\n     *\n     *  Parameters:\n     *    (String) jid - The full JID that is bound by the session.\n     *    (String) sid - The SID of the BOSH session.\n     *    (String) rid - The current RID of the BOSH session.  This RID\n     *      will be used by the next request.\n     *    (Function) callback The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    _attach: function (jid, sid, rid, callback, wait, hold, wind) {\n        this._conn.jid = jid;\n        this.sid = sid;\n        this.rid = rid;\n\n        this._conn.connect_callback = callback;\n\n        this._conn.domain = Strophe.getDomainFromJid(this._conn.jid);\n\n        this._conn.authenticated = true;\n        this._conn.connected = true;\n\n        this.wait = wait || this.wait;\n        this.hold = hold || this.hold;\n        this.window = wind || this.window;\n\n        this._conn._changeConnectStatus(Strophe.Status.ATTACHED, null);\n    },\n\n    /** PrivateFunction: _restore\n     *  Attempt to restore a cached BOSH session\n     *\n     *  Parameters:\n     *    (String) jid - The full JID that is bound by the session.\n     *      This parameter is optional but recommended, specifically in cases\n     *      where prebinded BOSH sessions are used where it's important to know\n     *      that the right session is being restored.\n     *    (Function) callback The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    _restore: function (jid, callback, wait, hold, wind) {\n        var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n        if (typeof session !== \"undefined\" &&\n                   session !== null &&\n                   session.rid &&\n                   session.sid &&\n                   session.jid &&\n                   (    typeof jid === \"undefined\" ||\n                        jid === null ||\n                        Strophe.getBareJidFromJid(session.jid) === Strophe.getBareJidFromJid(jid) ||\n                        // If authcid is null, then it's an anonymous login, so\n                        // we compare only the domains:\n                        ((Strophe.getNodeFromJid(jid) === null) && (Strophe.getDomainFromJid(session.jid) === jid))\n                    )\n        ) {\n            this._conn.restored = true;\n            this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n        } else {\n            throw { name: \"StropheSessionError\", message: \"_restore: no restoreable session.\" };\n        }\n    },\n\n    /** PrivateFunction: _cacheSession\n     *  _Private_ handler for the beforeunload event.\n     *\n     *  This handler is used to process the Bosh-part of the initial request.\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     */\n    _cacheSession: function () {\n        if (this._conn.authenticated) {\n            if (this._conn.jid && this.rid && this.sid) {\n                window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                    'jid': this._conn.jid,\n                    'rid': this.rid,\n                    'sid': this.sid\n                }));\n            }\n        } else {\n            window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n    },\n\n    /** PrivateFunction: _connect_cb\n     *  _Private_ handler for initial connection request.\n     *\n     *  This handler is used to process the Bosh-part of the initial request.\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     */\n    _connect_cb: function (bodyWrap) {\n        var typ = bodyWrap.getAttribute(\"type\");\n        var cond, conflict;\n        if (typ !== null && typ === \"terminate\") {\n            // an error occurred\n            cond = bodyWrap.getAttribute(\"condition\");\n            Strophe.error(\"BOSH-Connection failed: \" + cond);\n            conflict = bodyWrap.getElementsByTagName(\"conflict\");\n            if (cond !== null) {\n                if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                    cond = \"conflict\";\n                }\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n            } else {\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"unknown\");\n            }\n            this._conn._doDisconnect(cond);\n            return Strophe.Status.CONNFAIL;\n        }\n\n        // check to make sure we don't overwrite these if _connect_cb is\n        // called multiple times in the case of missing stream:features\n        if (!this.sid) {\n            this.sid = bodyWrap.getAttribute(\"sid\");\n        }\n        var wind = bodyWrap.getAttribute('requests');\n        if (wind) { this.window = parseInt(wind, 10); }\n        var hold = bodyWrap.getAttribute('hold');\n        if (hold) { this.hold = parseInt(hold, 10); }\n        var wait = bodyWrap.getAttribute('wait');\n        if (wait) { this.wait = parseInt(wait, 10); }\n        var inactivity = bodyWrap.getAttribute('inactivity');\n        if (inactivity) { this.inactivity = parseInt(inactivity, 10); }\n    },\n\n    /** PrivateFunction: _disconnect\n     *  _Private_ part of Connection.disconnect for Bosh\n     *\n     *  Parameters:\n     *    (Request) pres - This stanza will be sent before disconnecting.\n     */\n    _disconnect: function (pres) {\n        this._sendTerminate(pres);\n    },\n\n    /** PrivateFunction: _doDisconnect\n     *  _Private_ function to disconnect.\n     *\n     *  Resets the SID and RID.\n     */\n    _doDisconnect: function () {\n        this.sid = null;\n        this.rid = Math.floor(Math.random() * 4294967295);\n        if (this._conn._sessionCachingSupported()) {\n            window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n\n        this._conn.nextValidRid(this.rid);\n    },\n\n    /** PrivateFunction: _emptyQueue\n     * _Private_ function to check if the Request queue is empty.\n     *\n     *  Returns:\n     *    True, if there are no Requests queued, False otherwise.\n     */\n    _emptyQueue: function () {\n        return this._requests.length === 0;\n    },\n\n    /** PrivateFunction: _callProtocolErrorHandlers\n     *  _Private_ function to call error handlers registered for HTTP errors.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The request that is changing readyState.\n     */\n    _callProtocolErrorHandlers: function (req) {\n        var reqStatus = this._getRequestStatus(req),\n            err_callback;\n        err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n        if (err_callback) {\n            err_callback.call(this, reqStatus);\n        }\n    },\n\n    /** PrivateFunction: _hitError\n     *  _Private_ function to handle the error count.\n     *\n     *  Requests are resent automatically until their error count reaches\n     *  5.  Each time an error is encountered, this function is called to\n     *  increment the count and disconnect if the count is too high.\n     *\n     *  Parameters:\n     *    (Integer) reqStatus - The request status.\n     */\n    _hitError: function (reqStatus) {\n        this.errors++;\n        Strophe.warn(\"request errored, status: \" + reqStatus +\n                     \", number of errors: \" + this.errors);\n        if (this.errors > 4) {\n            this._conn._onDisconnectTimeout();\n        }\n    },\n\n    /** PrivateFunction: _no_auth_received\n     *\n     * Called on stream start/restart when no stream:features\n     * has been received and sends a blank poll request.\n     */\n    _no_auth_received: function (callback) {\n        Strophe.warn(\"Server did not yet offer a supported authentication \"+\n                     \"mechanism. Sending a blank poll request.\");\n        if (callback) {\n            callback = callback.bind(this._conn);\n        } else {\n            callback = this._conn._connect_cb.bind(this._conn);\n        }\n        var body = this._buildBody();\n        this._requests.push(\n            new Strophe.Request(\n                body.tree(),\n                this._onRequestStateChange.bind(this, callback),\n                body.tree().getAttribute(\"rid\")\n            )\n        );\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _onDisconnectTimeout\n     *  _Private_ timeout handler for handling non-graceful disconnection.\n     *\n     *  Cancels all remaining Requests and clears the queue.\n     */\n    _onDisconnectTimeout: function () {\n        this._abortAllRequests();\n    },\n\n    /** PrivateFunction: _abortAllRequests\n     *  _Private_ helper function that makes sure all pending requests are aborted.\n     */\n    _abortAllRequests: function _abortAllRequests() {\n        var req;\n        while (this._requests.length > 0) {\n            req = this._requests.pop();\n            req.abort = true;\n            req.xhr.abort();\n            // jslint complains, but this is fine. setting to empty func\n            // is necessary for IE6\n            req.xhr.onreadystatechange = function () {}; // jshint ignore:line\n        }\n    },\n\n    /** PrivateFunction: _onIdle\n     *  _Private_ handler called by Strophe.Connection._onIdle\n     *\n     *  Sends all queued Requests or polls with empty Request if there are none.\n     */\n    _onIdle: function () {\n        var data = this._conn._data;\n        // if no requests are in progress, poll\n        if (this._conn.authenticated && this._requests.length === 0 &&\n            data.length === 0 && !this._conn.disconnecting) {\n            Strophe.info(\"no requests during idle cycle, sending \" +\n                         \"blank request\");\n            data.push(null);\n        }\n\n        if (this._conn.paused) {\n            return;\n        }\n\n        if (this._requests.length < 2 && data.length > 0) {\n            var body = this._buildBody();\n            for (var i = 0; i < data.length; i++) {\n                if (data[i] !== null) {\n                    if (data[i] === \"restart\") {\n                        body.attrs({\n                            to: this._conn.domain,\n                            \"xml:lang\": \"en\",\n                            \"xmpp:restart\": \"true\",\n                            \"xmlns:xmpp\": Strophe.NS.BOSH\n                        });\n                    } else {\n                        body.cnode(data[i]).up();\n                    }\n                }\n            }\n            delete this._conn._data;\n            this._conn._data = [];\n            this._requests.push(\n                new Strophe.Request(body.tree(),\n                                    this._onRequestStateChange.bind(\n                                        this, this._conn._dataRecv.bind(this._conn)),\n                                    body.tree().getAttribute(\"rid\")));\n            this._throttledRequestHandler();\n        }\n\n        if (this._requests.length > 0) {\n            var time_elapsed = this._requests[0].age();\n            if (this._requests[0].dead !== null) {\n                if (this._requests[0].timeDead() >\n                    Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n                    this._throttledRequestHandler();\n                }\n            }\n\n            if (time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait)) {\n                Strophe.warn(\"Request \" +\n                             this._requests[0].id +\n                             \" timed out, over \" + Math.floor(Strophe.TIMEOUT * this.wait) +\n                             \" seconds since last activity\");\n                this._throttledRequestHandler();\n            }\n        }\n    },\n\n    /** PrivateFunction: _getRequestStatus\n     *\n     *  Returns the HTTP status code from a Strophe.Request\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The Strophe.Request instance.\n     *    (Integer) def - The default value that should be returned if no\n     *          status value was found.\n     */\n    _getRequestStatus: function (req, def) {\n        var reqStatus;\n        if (req.xhr.readyState === 4) {\n            try {\n                reqStatus = req.xhr.status;\n            } catch (e) {\n                // ignore errors from undefined status attribute. Works\n                // around a browser bug\n                Strophe.error(\n                    \"Caught an error while retrieving a request's status, \" +\n                    \"reqStatus: \" + reqStatus);\n            }\n        }\n        if (typeof(reqStatus) === \"undefined\") {\n            reqStatus = typeof def === 'number' ? def : 0;\n        }\n        return reqStatus;\n    },\n\n    /** PrivateFunction: _onRequestStateChange\n     *  _Private_ handler for Strophe.Request state changes.\n     *\n     *  This function is called when the XMLHttpRequest readyState changes.\n     *  It contains a lot of error handling logic for the many ways that\n     *  requests can fail, and calls the request callback when requests\n     *  succeed.\n     *\n     *  Parameters:\n     *    (Function) func - The handler for the request.\n     *    (Strophe.Request) req - The request that is changing readyState.\n     */\n    _onRequestStateChange: function (func, req) {\n        Strophe.debug(\"request id \"+req.id+\".\"+req.sends+\n                      \" state changed to \"+req.xhr.readyState);\n        if (req.abort) {\n            req.abort = false;\n            return;\n        }\n        if (req.xhr.readyState !== 4) {\n            // The request is not yet complete\n            return;\n        }\n        var reqStatus = this._getRequestStatus(req);\n        this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n        if (this.disconnecting && reqStatus >= 400) {\n            this._hitError(reqStatus);\n            this._callProtocolErrorHandlers(req);\n            return;\n        }\n\n        var valid_request = reqStatus > 0 && reqStatus < 500;\n        var too_many_retries = req.sends > this._conn.maxRetries;\n        if (valid_request || too_many_retries) {\n            // remove from internal queue\n            this._removeRequest(req);\n            Strophe.debug(\"request id \"+req.id+\" should now be removed\");\n        }\n\n        if (reqStatus === 200) {\n            // request succeeded\n            var reqIs0 = (this._requests[0] === req);\n            var reqIs1 = (this._requests[1] === req);\n            // if request 1 finished, or request 0 finished and request\n            // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n            // restart the other - both will be in the first spot, as the\n            // completed request has been removed from the queue already\n            if (reqIs1 ||\n                (reqIs0 && this._requests.length > 0 &&\n                    this._requests[0].age() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait))) {\n                this._restartRequest(0);\n            }\n            this._conn.nextValidRid(Number(req.rid) + 1);\n            Strophe.debug(\"request id \"+req.id+\".\"+req.sends+\" got 200\");\n            func(req); // call handler\n            this.errors = 0;\n        } else if (reqStatus === 0 ||\n                   (reqStatus >= 400 && reqStatus < 600) ||\n                   reqStatus >= 12000) {\n            // request failed\n            Strophe.error(\"request id \"+req.id+\".\"+req.sends+\" error \"+reqStatus+\" happened\");\n            this._hitError(reqStatus);\n            this._callProtocolErrorHandlers(req);\n            if (reqStatus >= 400 && reqStatus < 500) {\n                this._conn._changeConnectStatus(Strophe.Status.DISCONNECTING, null);\n                this._conn._doDisconnect();\n            }\n        } else {\n            Strophe.error(\"request id \"+req.id+\".\"+req.sends+\" error \"+reqStatus+\" happened\");\n        }\n\n        if (!valid_request && !too_many_retries) {\n            this._throttledRequestHandler();\n        } else if (too_many_retries && !this._conn.connected) {\n            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"giving-up\");\n        }\n    },\n\n    /** PrivateFunction: _processRequest\n     *  _Private_ function to process a request in the queue.\n     *\n     *  This function takes requests off the queue and sends them and\n     *  restarts dead requests.\n     *\n     *  Parameters:\n     *    (Integer) i - The index of the request in the queue.\n     */\n    _processRequest: function (i) {\n        var self = this;\n        var req = this._requests[i];\n        var reqStatus = this._getRequestStatus(req, -1);\n\n        // make sure we limit the number of retries\n        if (req.sends > this._conn.maxRetries) {\n            this._conn._onDisconnectTimeout();\n            return;\n        }\n\n        var time_elapsed = req.age();\n        var primaryTimeout = (!isNaN(time_elapsed) &&\n                              time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait));\n        var secondaryTimeout = (req.dead !== null &&\n                                req.timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait));\n        var requestCompletedWithServerError = (req.xhr.readyState === 4 &&\n                                               (reqStatus < 1 || reqStatus >= 500));\n        if (primaryTimeout || secondaryTimeout ||\n            requestCompletedWithServerError) {\n            if (secondaryTimeout) {\n                Strophe.error(\"Request \" + this._requests[i].id +\n                              \" timed out (secondary), restarting\");\n            }\n            req.abort = true;\n            req.xhr.abort();\n            // setting to null fails on IE6, so set to empty function\n            req.xhr.onreadystatechange = function () {};\n            this._requests[i] = new Strophe.Request(req.xmlData,\n                                                    req.origFunc,\n                                                    req.rid,\n                                                    req.sends);\n            req = this._requests[i];\n        }\n\n        if (req.xhr.readyState === 0) {\n            Strophe.debug(\"request id \"+req.id+\".\"+req.sends+\" posting\");\n\n            try {\n                var contentType = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n                if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                    // IE9 doesn't have setRequestHeader\n                    req.xhr.setRequestHeader(\"Content-Type\", contentType);\n                }\n                if (this._conn.options.withCredentials) {\n                    req.xhr.withCredentials = true;\n                }\n            } catch (e2) {\n                Strophe.error(\"XHR open failed: \" + e2.toString());\n                if (!this._conn.connected) {\n                    this._conn._changeConnectStatus(\n                            Strophe.Status.CONNFAIL, \"bad-service\");\n                }\n                this._conn.disconnect();\n                return;\n            }\n\n            // Fires the XHR request -- may be invoked immediately\n            // or on a gradually expanding retry window for reconnects\n            var sendFunc = function () {\n                req.date = new Date();\n                if (self._conn.options.customHeaders){\n                    var headers = self._conn.options.customHeaders;\n                    for (var header in headers) {\n                        if (headers.hasOwnProperty(header)) {\n                            req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                    }\n                }\n                req.xhr.send(req.data);\n            };\n\n            // Implement progressive backoff for reconnects --\n            // First retry (send === 1) should also be instantaneous\n            if (req.sends > 1) {\n                // Using a cube of the retry number creates a nicely\n                // expanding retry window\n                var backoff = Math.min(Math.floor(Strophe.TIMEOUT * this.wait),\n                                       Math.pow(req.sends, 3)) * 1000;\n                setTimeout(function() {\n                    // XXX: setTimeout should be called only with function expressions (23974bc1)\n                    sendFunc();\n                }, backoff);\n            } else {\n                sendFunc();\n            }\n\n            req.sends++;\n\n            if (this._conn.xmlOutput !== Strophe.Connection.prototype.xmlOutput) {\n                if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                    this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                } else {\n                    this._conn.xmlOutput(req.xmlData);\n                }\n            }\n            if (this._conn.rawOutput !== Strophe.Connection.prototype.rawOutput) {\n                this._conn.rawOutput(req.data);\n            }\n        } else {\n            Strophe.debug(\"_processRequest: \" +\n                          (i === 0 ? \"first\" : \"second\") +\n                          \" request has readyState of \" +\n                          req.xhr.readyState);\n        }\n    },\n\n    /** PrivateFunction: _removeRequest\n     *  _Private_ function to remove a request from the queue.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The request to remove.\n     */\n    _removeRequest: function (req) {\n        Strophe.debug(\"removing request\");\n        var i;\n        for (i = this._requests.length - 1; i >= 0; i--) {\n            if (req === this._requests[i]) {\n                this._requests.splice(i, 1);\n            }\n        }\n        // IE6 fails on setting to null, so set to empty function\n        req.xhr.onreadystatechange = function () {};\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _restartRequest\n     *  _Private_ function to restart a request that is presumed dead.\n     *\n     *  Parameters:\n     *    (Integer) i - The index of the request in the queue.\n     */\n    _restartRequest: function (i) {\n        var req = this._requests[i];\n        if (req.dead === null) {\n            req.dead = new Date();\n        }\n\n        this._processRequest(i);\n    },\n\n    /** PrivateFunction: _reqToData\n     * _Private_ function to get a stanza out of a request.\n     *\n     * Tries to extract a stanza out of a Request Object.\n     * When this fails the current connection will be disconnected.\n     *\n     *  Parameters:\n     *    (Object) req - The Request.\n     *\n     *  Returns:\n     *    The stanza that was passed.\n     */\n    _reqToData: function (req) {\n        try {\n            return req.getResponse();\n        } catch (e) {\n            if (e !== \"parsererror\") { throw e; }\n            this._conn.disconnect(\"strophe-parsererror\");\n        }\n    },\n\n    /** PrivateFunction: _sendTerminate\n     *  _Private_ function to send initial disconnect sequence.\n     *\n     *  This is the first step in a graceful disconnect.  It sends\n     *  the BOSH server a terminate body and includes an unavailable\n     *  presence if authentication has completed.\n     */\n    _sendTerminate: function (pres) {\n        Strophe.info(\"_sendTerminate was called\");\n        var body = this._buildBody().attrs({type: \"terminate\"});\n        if (pres) {\n            body.cnode(pres.tree());\n        }\n        var req = new Strophe.Request(\n            body.tree(),\n            this._onRequestStateChange.bind(\n            this, this._conn._dataRecv.bind(this._conn)),\n            body.tree().getAttribute(\"rid\")\n        );\n        this._requests.push(req);\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _send\n     *  _Private_ part of the Connection.send function for BOSH\n     *\n     * Just triggers the RequestHandler to send the messages that are in the queue\n     */\n    _send: function () {\n        clearTimeout(this._conn._idleTimeout);\n        this._throttledRequestHandler();\n\n        // XXX: setTimeout should be called only with function expressions (23974bc1)\n        this._conn._idleTimeout = setTimeout(function() {\n            this._onIdle();\n        }.bind(this._conn), 100);\n    },\n\n    /** PrivateFunction: _sendRestart\n     *\n     *  Send an xmpp:restart stanza.\n     */\n    _sendRestart: function () {\n        this._throttledRequestHandler();\n        clearTimeout(this._conn._idleTimeout);\n    },\n\n    /** PrivateFunction: _throttledRequestHandler\n     *  _Private_ function to throttle requests to the connection window.\n     *\n     *  This function makes sure we don't send requests so fast that the\n     *  request ids overflow the connection window in the case that one\n     *  request died.\n     */\n    _throttledRequestHandler: function () {\n        if (!this._requests) {\n            Strophe.debug(\"_throttledRequestHandler called with \" +\n                          \"undefined requests\");\n        } else {\n            Strophe.debug(\"_throttledRequestHandler called with \" +\n                          this._requests.length + \" requests\");\n        }\n\n        if (!this._requests || this._requests.length === 0) {\n            return;\n        }\n\n        if (this._requests.length > 0) {\n            this._processRequest(0);\n        }\n\n        if (this._requests.length > 1 &&\n            Math.abs(this._requests[0].rid -\n                     this._requests[1].rid) < this.window) {\n            this._processRequest(1);\n        }\n    }\n};\nreturn Strophe;\n}));\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/* global define, window, clearTimeout, WebSocket, DOMParser, Strophe, $build */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-websocket',['strophe-core'], function (core) {\n            return factory(\n                core.Strophe,\n                core.$build\n            );\n        });\n    } else if (typeof exports === 'object') {\n        var core = require('./core');\n\n        module.exports = factory(core.Strophe, core.$build);\n    } else {\n        // Browser globals\n        return factory(Strophe, $build);\n    }\n}(this, function (Strophe, $build) {\n\n/** Class: Strophe.WebSocket\n *  _Private_ helper class that handles WebSocket Connections\n *\n *  The Strophe.WebSocket class is used internally by Strophe.Connection\n *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n */\n\n/** File: websocket.js\n *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n *\n *  This file implements XMPP over WebSockets for Strophejs.\n *  If a Connection is established with a Websocket url (ws://...)\n *  Strophe will use WebSockets.\n *  For more information on XMPP-over-WebSocket see RFC 7395:\n *  http://tools.ietf.org/html/rfc7395\n *\n *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n */\n\n/** PrivateConstructor: Strophe.Websocket\n *  Create and initialize a Strophe.WebSocket object.\n *  Currently only sets the connection Object.\n *\n *  Parameters:\n *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n *\n *  Returns:\n *    A new Strophe.WebSocket object.\n */\nStrophe.Websocket = function(connection) {\n    this._conn = connection;\n    this.strip = \"wrapper\";\n\n    var service = connection.service;\n    if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n        // If the service is not an absolute URL, assume it is a path and put the absolute\n        // URL together from options, current URL and the path.\n        var new_service = \"\";\n\n        if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n            new_service += \"ws\";\n        } else {\n            new_service += \"wss\";\n        }\n\n        new_service += \"://\" + window.location.host;\n\n        if (service.indexOf(\"/\") !== 0) {\n            new_service += window.location.pathname + service;\n        } else {\n            new_service += service;\n        }\n\n        connection.service = new_service;\n    }\n};\n\nStrophe.Websocket.prototype = {\n    /** PrivateFunction: _buildStream\n     *  _Private_ helper function to generate the <stream> start tag for WebSockets\n     *\n     *  Returns:\n     *    A Strophe.Builder with a <stream> element.\n     */\n    _buildStream: function () {\n        return $build(\"open\", {\n            \"xmlns\": Strophe.NS.FRAMING,\n            \"to\": this._conn.domain,\n            \"version\": '1.0'\n        });\n    },\n\n    /** PrivateFunction: _check_streamerror\n     * _Private_ checks a message for stream:error\n     *\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     *    connectstatus - The ConnectStatus that will be set on error.\n     *  Returns:\n     *     true if there was a streamerror, false otherwise.\n     */\n    _check_streamerror: function (bodyWrap, connectstatus) {\n        var errors;\n        if (bodyWrap.getElementsByTagNameNS) {\n            errors = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"error\");\n        } else {\n            errors = bodyWrap.getElementsByTagName(\"stream:error\");\n        }\n        if (errors.length === 0) {\n            return false;\n        }\n        var error = errors[0];\n\n        var condition = \"\";\n        var text = \"\";\n\n        var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n        for (var i = 0; i < error.childNodes.length; i++) {\n            var e = error.childNodes[i];\n            if (e.getAttribute(\"xmlns\") !== ns) {\n                break;\n            } if (e.nodeName === \"text\") {\n                text = e.textContent;\n            } else {\n                condition = e.nodeName;\n            }\n        }\n\n        var errorString = \"WebSocket stream error: \";\n\n        if (condition) {\n            errorString += condition;\n        } else {\n            errorString += \"unknown\";\n        }\n\n        if (text) {\n            errorString += \" - \" + text;\n        }\n\n        Strophe.error(errorString);\n\n        // close the connection on stream_error\n        this._conn._changeConnectStatus(connectstatus, condition);\n        this._conn._doDisconnect();\n        return true;\n    },\n\n    /** PrivateFunction: _reset\n     *  Reset the connection.\n     *\n     *  This function is called by the reset function of the Strophe Connection.\n     *  Is not needed by WebSockets.\n     */\n    _reset: function () {\n        return;\n    },\n\n    /** PrivateFunction: _connect\n     *  _Private_ function called by Strophe.Connection.connect\n     *\n     *  Creates a WebSocket for a connection and assigns Callbacks to it.\n     *  Does nothing if there already is a WebSocket.\n     */\n    _connect: function () {\n        // Ensure that there is no open WebSocket from a previous Connection.\n        this._closeSocket();\n\n        // Create the new WobSocket\n        this.socket = new WebSocket(this._conn.service, \"xmpp\");\n        this.socket.onopen = this._onOpen.bind(this);\n        this.socket.onerror = this._onError.bind(this);\n        this.socket.onclose = this._onClose.bind(this);\n        this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n    },\n\n    /** PrivateFunction: _connect_cb\n     *  _Private_ function called by Strophe.Connection._connect_cb\n     *\n     * checks for stream:error\n     *\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     */\n    _connect_cb: function(bodyWrap) {\n        var error = this._check_streamerror(bodyWrap, Strophe.Status.CONNFAIL);\n        if (error) {\n            return Strophe.Status.CONNFAIL;\n        }\n    },\n\n    /** PrivateFunction: _handleStreamStart\n     * _Private_ function that checks the opening <open /> tag for errors.\n     *\n     * Disconnects if there is an error and returns false, true otherwise.\n     *\n     *  Parameters:\n     *    (Node) message - Stanza containing the <open /> tag.\n     */\n    _handleStreamStart: function(message) {\n        var error = false;\n\n        // Check for errors in the <open /> tag\n        var ns = message.getAttribute(\"xmlns\");\n        if (typeof ns !== \"string\") {\n            error = \"Missing xmlns in <open />\";\n        } else if (ns !== Strophe.NS.FRAMING) {\n            error = \"Wrong xmlns in <open />: \" + ns;\n        }\n\n        var ver = message.getAttribute(\"version\");\n        if (typeof ver !== \"string\") {\n            error = \"Missing version in <open />\";\n        } else if (ver !== \"1.0\") {\n            error = \"Wrong version in <open />: \" + ver;\n        }\n\n        if (error) {\n            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, error);\n            this._conn._doDisconnect();\n            return false;\n        }\n\n        return true;\n    },\n\n    /** PrivateFunction: _connect_cb_wrapper\n     * _Private_ function that handles the first connection messages.\n     *\n     * On receiving an opening stream tag this callback replaces itself with the real\n     * message handler. On receiving a stream error the connection is terminated.\n     */\n    _connect_cb_wrapper: function(message) {\n        if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n            // Strip the XML Declaration, if there is one\n            var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n            if (data === '') return;\n\n            var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n            this._conn.xmlInput(streamStart);\n            this._conn.rawInput(message.data);\n\n            //_handleStreamSteart will check for XML errors and disconnect on error\n            if (this._handleStreamStart(streamStart)) {\n                //_connect_cb will check for stream:error and disconnect on error\n                this._connect_cb(streamStart);\n            }\n        } else if (message.data.indexOf(\"<close \") === 0) { // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n            // Parse the raw string to an XML element\n            var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n            // Report this input to the raw and xml handlers\n            this._conn.xmlInput(parsedMessage);\n            this._conn.rawInput(message.data);\n            var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n            if (see_uri) {\n                var service = this._conn.service;\n                // Valid scenarios: WSS->WSS, WS->ANY\n                var isSecureRedirect = (service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0) || (service.indexOf(\"ws:\") >= 0);\n                if(isSecureRedirect) {\n                    this._conn._changeConnectStatus(\n                        Strophe.Status.REDIRECT,\n                        \"Received see-other-uri, resetting connection\"\n                    );\n                    this._conn.reset();\n                    this._conn.service = see_uri;\n                    this._connect();\n                }\n            } else {\n                this._conn._changeConnectStatus(\n                    Strophe.Status.CONNFAIL,\n                    \"Received closing stream\"\n                );\n                this._conn._doDisconnect();\n            }\n        } else {\n            var string = this._streamWrap(message.data);\n            var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n            this.socket.onmessage = this._onMessage.bind(this);\n            this._conn._connect_cb(elem, null, message.data);\n        }\n    },\n\n    /** PrivateFunction: _disconnect\n     *  _Private_ function called by Strophe.Connection.disconnect\n     *\n     *  Disconnects and sends a last stanza if one is given\n     *\n     *  Parameters:\n     *    (Request) pres - This stanza will be sent before disconnecting.\n     */\n    _disconnect: function (pres) {\n        if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n            if (pres) {\n                this._conn.send(pres);\n            }\n            var close = $build(\"close\", { \"xmlns\": Strophe.NS.FRAMING });\n            this._conn.xmlOutput(close.tree());\n            var closeString = Strophe.serialize(close);\n            this._conn.rawOutput(closeString);\n            try {\n                this.socket.send(closeString);\n            } catch (e) {\n                Strophe.info(\"Couldn't send <close /> tag.\");\n            }\n        }\n        this._conn._doDisconnect();\n    },\n\n    /** PrivateFunction: _doDisconnect\n     *  _Private_ function to disconnect.\n     *\n     *  Just closes the Socket for WebSockets\n     */\n    _doDisconnect: function () {\n        Strophe.info(\"WebSockets _doDisconnect was called\");\n        this._closeSocket();\n    },\n\n    /** PrivateFunction _streamWrap\n     *  _Private_ helper function to wrap a stanza in a <stream> tag.\n     *  This is used so Strophe can process stanzas from WebSockets like BOSH\n     */\n    _streamWrap: function (stanza) {\n        return \"<wrapper>\" + stanza + '</wrapper>';\n    },\n\n\n    /** PrivateFunction: _closeSocket\n     *  _Private_ function to close the WebSocket.\n     *\n     *  Closes the socket if it is still open and deletes it\n     */\n    _closeSocket: function () {\n        if (this.socket) { try {\n            this.socket.onerror = null;\n            this.socket.close();\n        } catch (e) {} }\n        this.socket = null;\n    },\n\n    /** PrivateFunction: _emptyQueue\n     * _Private_ function to check if the message queue is empty.\n     *\n     *  Returns:\n     *    True, because WebSocket messages are send immediately after queueing.\n     */\n    _emptyQueue: function () {\n        return true;\n    },\n\n    /** PrivateFunction: _onClose\n     * _Private_ function to handle websockets closing.\n     *\n     * Nothing to do here for WebSockets\n     */\n    _onClose: function(e) {\n        if(this._conn.connected && !this._conn.disconnecting) {\n            Strophe.error(\"Websocket closed unexpectedly\");\n            this._conn._doDisconnect();\n        } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n            // in case the onError callback was not called (Safari 10 does not\n            // call onerror when the initial connection fails) we need to\n            // dispatch a CONNFAIL status update to be consistent with the\n            // behavior on other browsers.\n            Strophe.error(\"Websocket closed unexcectedly\");\n            this._conn._changeConnectStatus(\n                Strophe.Status.CONNFAIL,\n                \"The WebSocket connection could not be established or was disconnected.\"\n            );\n            this._conn._doDisconnect();\n        } else {\n            Strophe.info(\"Websocket closed\");\n        }\n    },\n\n    /** PrivateFunction: _no_auth_received\n     *\n     * Called on stream start/restart when no stream:features\n     * has been received.\n     */\n    _no_auth_received: function (callback) {\n        Strophe.error(\"Server did not offer a supported authentication mechanism\");\n        this._changeConnectStatus(\n            Strophe.Status.CONNFAIL,\n            Strophe.ErrorCondition.NO_AUTH_MECH\n        );\n        if (callback) {\n            callback.call(this._conn);\n        }\n        this._conn._doDisconnect();\n    },\n\n    /** PrivateFunction: _onDisconnectTimeout\n     *  _Private_ timeout handler for handling non-graceful disconnection.\n     *\n     *  This does nothing for WebSockets\n     */\n    _onDisconnectTimeout: function () {},\n\n    /** PrivateFunction: _abortAllRequests\n     *  _Private_ helper function that makes sure all pending requests are aborted.\n     */\n    _abortAllRequests: function () {},\n\n    /** PrivateFunction: _onError\n     * _Private_ function to handle websockets errors.\n     *\n     * Parameters:\n     * (Object) error - The websocket error.\n     */\n    _onError: function(error) {\n        Strophe.error(\"Websocket error \" + error);\n        this._conn._changeConnectStatus(\n            Strophe.Status.CONNFAIL,\n            \"The WebSocket connection could not be established or was disconnected.\"\n        );\n        this._disconnect();\n    },\n\n    /** PrivateFunction: _onIdle\n     *  _Private_ function called by Strophe.Connection._onIdle\n     *\n     *  sends all queued stanzas\n     */\n    _onIdle: function () {\n        var data = this._conn._data;\n        if (data.length > 0 && !this._conn.paused) {\n            for (var i = 0; i < data.length; i++) {\n                if (data[i] !== null) {\n                    var stanza, rawStanza;\n                    if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                    } else {\n                        stanza = data[i];\n                    }\n                    rawStanza = Strophe.serialize(stanza);\n                    this._conn.xmlOutput(stanza);\n                    this._conn.rawOutput(rawStanza);\n                    this.socket.send(rawStanza);\n                }\n            }\n            this._conn._data = [];\n        }\n    },\n\n    /** PrivateFunction: _onMessage\n     * _Private_ function to handle websockets messages.\n     *\n     * This function parses each of the messages as if they are full documents.\n     * [TODO : We may actually want to use a SAX Push parser].\n     *\n     * Since all XMPP traffic starts with\n     *  <stream:stream version='1.0'\n     *                 xml:lang='en'\n     *                 xmlns='jabber:client'\n     *                 xmlns:stream='http://etherx.jabber.org/streams'\n     *                 id='3697395463'\n     *                 from='SERVER'>\n     *\n     * The first stanza will always fail to be parsed.\n     *\n     * Additionally, the seconds stanza will always be <stream:features> with\n     * the stream NS defined in the previous stanza, so we need to 'force'\n     * the inclusion of the NS in this stanza.\n     *\n     * Parameters:\n     * (string) message - The websocket message.\n     */\n    _onMessage: function(message) {\n        var elem, data;\n        // check for closing stream\n        var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n        if (message.data === close) {\n            this._conn.rawInput(close);\n            this._conn.xmlInput(message);\n            if (!this._conn.disconnecting) {\n                this._conn._doDisconnect();\n            }\n            return;\n        } else if (message.data.search(\"<open \") === 0) {\n            // This handles stream restarts\n            elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n            if (!this._handleStreamStart(elem)) {\n                return;\n            }\n        } else {\n            data = this._streamWrap(message.data);\n            elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n        }\n\n        if (this._check_streamerror(elem, Strophe.Status.ERROR)) {\n            return;\n        }\n\n        //handle unavailable presence stanza before disconnecting\n        if (this._conn.disconnecting &&\n                elem.firstChild.nodeName === \"presence\" &&\n                elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n            this._conn.xmlInput(elem);\n            this._conn.rawInput(Strophe.serialize(elem));\n            // if we are already disconnecting we will ignore the unavailable stanza and\n            // wait for the </stream:stream> tag before we close the connection\n            return;\n        }\n        this._conn._dataRecv(elem, message.data);\n    },\n\n    /** PrivateFunction: _onOpen\n     * _Private_ function to handle websockets connection setup.\n     *\n     * The opening stream tag is sent here.\n     */\n    _onOpen: function() {\n        Strophe.info(\"Websocket open\");\n        var start = this._buildStream();\n        this._conn.xmlOutput(start.tree());\n\n        var startString = Strophe.serialize(start);\n        this._conn.rawOutput(startString);\n        this.socket.send(startString);\n    },\n\n    /** PrivateFunction: _reqToData\n     * _Private_ function to get a stanza out of a request.\n     *\n     * WebSockets don't use requests, so the passed argument is just returned.\n     *\n     *  Parameters:\n     *    (Object) stanza - The stanza.\n     *\n     *  Returns:\n     *    The stanza that was passed.\n     */\n    _reqToData: function (stanza) {\n        return stanza;\n    },\n\n    /** PrivateFunction: _send\n     *  _Private_ part of the Connection.send function for WebSocket\n     *\n     * Just flushes the messages that are in the queue\n     */\n    _send: function () {\n        this._conn.flush();\n    },\n\n    /** PrivateFunction: _sendRestart\n     *\n     *  Send an xmpp:restart stanza.\n     */\n    _sendRestart: function () {\n        clearTimeout(this._conn._idleTimeout);\n        this._conn._onIdle.bind(this._conn)();\n    }\n};\nreturn Strophe;\n}));\n\n(function(root){\n    if(typeof define === 'function' && define.amd){\n        define('strophe',[\n            \"strophe-core\",\n            \"strophe-bosh\",\n            \"strophe-websocket\"\n        ], function (wrapper) {\n            return wrapper;\n        });\n    } else if (typeof exports === 'object') {\n        var core = require('./core');\n        require('./bosh');\n        require('./websocket');\n        module.exports = core;\n    }\n})(this);\n\n\nrequire([\"strophe-polyfill\"]);\n/* jshint ignore:start */\n    //The modules for your project will be inlined above\n    //this snippet. Ask almond to synchronously require the\n    //module value for 'main' here and return it as the\n    //value to use for the public API for the built file.\n    return require('strophe');\n}));\n/* jshint ignore:end */\n","/**\n * The events for the conference.\n */\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * A participant avatar has changed.\n */\nexport const AVATAR_CHANGED = 'conference.avatarChanged';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","import EventEmitter from 'events';\n\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport RTPStats from './RTPStatsCollector';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as StatisticsEvents from '../../service/statistics/Events';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl\n                || 'https://api.callstats.io/static/callstats-ws.min.js',\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    const userName = Settings.callStatsUserName;\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.swapUserNameAndAlias\n            ? options.callStatsAliasName : userName,\n        aliasName: options.swapUserNameAndAlias\n            ? userName : options.callStatsAliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} callStatsAliasName - The alias name to use when\n * initializing callstats.\n * @property {string} callStatsConfIDNamespace - A namespace to prepend the\n * callstats conference ID with.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {boolean} swapUserNameAndAlias - Whether to swap the places of\n * username and alias when initiating callstats.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.callStatsConfIDNamespace) {\n            logger.warn('\"callStatsConfIDNamespace\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                2000,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this._getCallStatsConfID(),\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Constructs the CallStats conference ID based on the options currently\n * configured in this instance.\n * @return {string}\n * @private\n */\nStatistics.prototype._getCallStatsConfID = function() {\n    // The conference ID is case sensitive!!!\n    return this.options.callStatsConfIDNamespace\n        ? `${this.options.callStatsConfIDNamespace}/${this.options.roomName}`\n        : this.options.roomName;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    CallStats.sendFeedback(this._getCallStatsConfID(), overall, comment);\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport RandomUtil from '../util/RandomUtil';\nimport browser from '../browser';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.log(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.log(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.log('did not find typ in the right place');\n            logger.log(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribtue is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by\n     *  moving it to the beginning of the payload types\n     *  list (modifies the given mline in place).  If there\n     *  are multiple options within the same codec (multiple h264\n     *  profiles, for instance), this will prefer the first one\n     *  that is found.\n     * @param {object} videoMLine the video mline object from\n     *  an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferVideoCodec(videoMLine, codecName) {\n        let payloadType = null;\n\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        for (let i = 0; i < videoMLine.rtp.length; ++i) {\n            const rtp = videoMLine.rtp[i];\n\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                payloadType = rtp.payload;\n                break;\n            }\n        }\n        if (payloadType) {\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const payloadTypes\n                = videoMLine.payloads\n                    .toString()\n                    .split(' ')\n                    .map(p => parseInt(p, 10));\n            const payloadIndex = payloadTypes.indexOf(payloadType);\n\n            payloadTypes.splice(payloadIndex, 1);\n            payloadTypes.unshift(payloadType);\n            videoMLine.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} videoMLine the video mline object from an sdp as parsed\n     * by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     */\n    stripVideoCodec(videoMLine, codecName) {\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        const removePts = [];\n\n        for (const rtp of videoMLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                removePts.push(rtp.payload);\n            }\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = videoMLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = videoMLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other video codecs, disable the stream.\n                videoMLine.port = 0;\n                videoMLine.direction = 'inactive';\n                videoMLine.payloads = '*';\n            } else {\n                videoMLine.payloads = keepPts.join(' ');\n            }\n\n            videoMLine.rtp = videoMLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            videoMLine.fmtp = videoMLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (videoMLine.rtcpFb) {\n                videoMLine.rtcpFb = videoMLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    GRANTED_PERMISSIONS: 'rtc.granted_permissions',\n\n    IS_SELECTED_CHANGED: 'rtc.is_selected_change',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType) {\n    return {\n        attributes: { 'media_type': mediaType },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function() {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted'\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport Listenable from '../util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport screenObtainer from './ScreenObtainer';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default resolution to obtain for video tracks if no resolution is specified.\n * This default is used for old gum flow only, as new gum flow uses\n * {@link DEFAULT_CONSTRAINTS}.\n */\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\n\n/**\n * Default devices to obtain when no specific devices are specified. This\n * default is used for old gum flow only.\n */\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        aspectRatio: 16 / 9,\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 240\n        }\n    }\n};\n\n/**\n * The default frame rate for Screen Sharing.\n */\nconst SS_DEFAULT_FRAME_RATE = 40;\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Disables Highpass Filter\nlet disableHPF = false;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices;\nlet availableDevicesPollTimer;\n\n/**\n * Initialize wrapper function for enumerating devices.\n * TODO: remove this, it should no longer be needed.\n *\n * @returns {?Function}\n */\nfunction initEnumerateDevicesWithCallback() {\n    if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n        return callback => {\n            navigator.mediaDevices.enumerateDevices()\n                .then(callback, () => callback([]));\n        };\n    }\n}\n\n/**\n *\n * @param constraints\n * @param isNewStyleConstraintsSupported\n * @param resolution\n */\nfunction setResolutionConstraints(\n        constraints,\n        isNewStyleConstraintsSupported,\n        resolution) {\n    if (Resolutions[resolution]) {\n        if (isNewStyleConstraintsSupported) {\n            constraints.video.width = {\n                ideal: Resolutions[resolution].width\n            };\n            constraints.video.height = {\n                ideal: Resolutions[resolution].height\n            };\n        }\n\n        constraints.video.mandatory.minWidth = Resolutions[resolution].width;\n        constraints.video.mandatory.minHeight = Resolutions[resolution].height;\n    }\n\n    if (constraints.video.mandatory.minWidth) {\n        constraints.video.mandatory.maxWidth\n            = constraints.video.mandatory.minWidth;\n    }\n\n    if (constraints.video.mandatory.minHeight) {\n        constraints.video.mandatory.maxHeight\n            = constraints.video.mandatory.minHeight;\n    }\n}\n\n/**\n * @param {string[]} um required user media types\n *\n * @param {Object} [options={}] optional parameters\n * @param {string} options.resolution\n * @param {number} options.bandwidth\n * @param {number} options.fps\n * @param {string} options.desktopStream\n * @param {string} options.cameraDeviceId\n * @param {string} options.micDeviceId\n * @param {CameraFacingMode} options.facingMode\n * @param {bool} firefox_fake_device\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n */\nfunction getConstraints(um, options = {}) {\n    const constraints = {\n        audio: false,\n        video: false\n    };\n\n    // Don't mix new and old style settings for Chromium as this leads\n    // to TypeError in new Chromium versions. @see\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=614716\n    // This is a temporary solution, in future we will fully split old and\n    // new style constraints when new versions of Chromium and Firefox will\n    // have stable support of new constraints format. For more information\n    // @see https://github.com/jitsi/lib-jitsi-meet/pull/136\n    const isNewStyleConstraintsSupported\n        = browser.isFirefox()\n            || browser.isSafariWithVP8()\n            || browser.isEdge()\n            || browser.isReactNative();\n\n    if (um.indexOf('video') >= 0) {\n        // same behaviour as true\n        constraints.video = { mandatory: {},\n            optional: [] };\n\n        if (options.cameraDeviceId) {\n            if (isNewStyleConstraintsSupported) {\n                // New style of setting device id.\n                constraints.video.deviceId = options.cameraDeviceId;\n            }\n\n            // Old style.\n            constraints.video.mandatory.sourceId = options.cameraDeviceId;\n        } else {\n            // Prefer the front i.e. user-facing camera (to the back i.e.\n            // environment-facing camera, for example).\n            // TODO: Maybe use \"exact\" syntax if options.facingMode is defined,\n            // but this probably needs to be decided when updating other\n            // constraints, as we currently don't use \"exact\" syntax anywhere.\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            if (isNewStyleConstraintsSupported) {\n                constraints.video.facingMode = facingMode;\n            }\n            constraints.video.optional.push({\n                facingMode\n            });\n        }\n\n        if (options.minFps || options.maxFps || options.fps) {\n            // for some cameras it might be necessary to request 30fps\n            // so they choose 30fps mjpg over 10fps yuy2\n            if (options.minFps || options.fps) {\n                // Fall back to options.fps for backwards compatibility\n                options.minFps = options.minFps || options.fps;\n                constraints.video.mandatory.minFrameRate = options.minFps;\n            }\n            if (options.maxFps) {\n                constraints.video.mandatory.maxFrameRate = options.maxFps;\n            }\n        }\n\n        setResolutionConstraints(\n            constraints, isNewStyleConstraintsSupported, options.resolution);\n    }\n    if (um.indexOf('audio') >= 0) {\n        if (browser.isReactNative()) {\n            // The react-native-webrtc project that we're currently using\n            // expects the audio constraint to be a boolean.\n            constraints.audio = true;\n        } else if (browser.isFirefox()) {\n            if (options.micDeviceId) {\n                constraints.audio = {\n                    mandatory: {},\n                    deviceId: options.micDeviceId, // new style\n                    optional: [ {\n                        sourceId: options.micDeviceId // old style\n                    } ] };\n            } else {\n                constraints.audio = true;\n            }\n        } else {\n            // same behaviour as true\n            constraints.audio = { mandatory: {},\n                optional: [] };\n            if (options.micDeviceId) {\n                if (isNewStyleConstraintsSupported) {\n                    // New style of setting device id.\n                    constraints.audio.deviceId = options.micDeviceId;\n                }\n\n                // Old style.\n                constraints.audio.optional.push({\n                    sourceId: options.micDeviceId\n                });\n            }\n\n            // if it is good enough for hangouts...\n            constraints.audio.optional.push(\n                { echoCancellation: !disableAEC && !disableAP },\n                { googEchoCancellation: !disableAEC && !disableAP },\n                { googAutoGainControl: !disableAGC && !disableAP },\n                { googNoiseSuppression: !disableNS && !disableAP },\n                { googHighpassFilter: !disableHPF && !disableAP },\n                { googNoiseSuppression2: !disableNS && !disableAP },\n                { googEchoCancellation2: !disableAEC && !disableAP },\n                { googAutoGainControl2: !disableAGC && !disableAP }\n            );\n        }\n    }\n    if (um.indexOf('screen') >= 0) {\n        if (browser.isChrome()) {\n            constraints.video = {\n                mandatory: getSSConstraints({\n                    ...options,\n                    source: 'screen'\n                }),\n                optional: []\n            };\n\n        } else if (browser.isFirefox()) {\n            constraints.video = {\n                mozMediaSource: 'window',\n                mediaSource: 'window',\n                frameRate: options.frameRate || {\n                    min: SS_DEFAULT_FRAME_RATE,\n                    max: SS_DEFAULT_FRAME_RATE\n                }\n            };\n\n        } else {\n            const errmsg\n                = '\\'screen\\' WebRTC media source is supported only in Chrome'\n                    + ' and Firefox';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg);\n        }\n    }\n    if (um.indexOf('desktop') >= 0) {\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            }),\n            optional: []\n        };\n    }\n\n    if (options.bandwidth) {\n        if (!constraints.video) {\n            // same behaviour as true\n            constraints.video = { mandatory: {},\n                optional: [] };\n        }\n        constraints.video.optional.push({ bandwidth: options.bandwidth });\n    }\n\n    // we turn audio for both audio and video tracks, the fake audio & video\n    // seems to work only when enabled in one getUserMedia call, we cannot get\n    // fake audio separate by fake video this later can be a problem with some\n    // of the tests\n    if (browser.isFirefox() && options.firefox_fake_device) {\n        // seems to be fixed now, removing this experimental fix, as having\n        // multiple audio tracks brake the tests\n        // constraints.audio = true;\n        constraints.fake = true;\n    }\n\n    return constraints;\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted\n * types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video\n * capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use\n * as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which\n * to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is\n * pointing to.\n * @param {string} options.micDeviceId - The device id for the audio capture\n * device to get audio from.\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @private\n * @returns {Object}\n */\nfunction newGetConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = JSON.parse(JSON.stringify(\n        options.constraints || DEFAULT_CONSTRAINTS));\n\n    if (um.indexOf('video') >= 0) {\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        // NOTE(brian): the new-style ('advanced' instead of 'optional')\n        // doesn't seem to carry through the googXXX constraints\n        // Changing back to 'optional' here (even with video using\n        // the 'advanced' style) allows them to be passed through\n        // but also requires the device id to capture to be set in optional\n        // as sourceId otherwise the constraints are considered malformed.\n        if (!constraints.audio.optional) {\n            constraints.audio.optional = [];\n        }\n\n        constraints.audio.optional.push(\n            { sourceId: options.micDeviceId },\n            { echoCancellation: !disableAEC && !disableAP },\n            { googEchoCancellation: !disableAEC && !disableAP },\n            { googAutoGainControl: !disableAGC && !disableAP },\n            { googNoiseSuppression: !disableNS && !disableAP },\n            { googHighpassFilter: !disableHPF && !disableAP },\n            { googNoiseSuppression2: !disableNS && !disableAP },\n            { googEchoCancellation2: !disableAEC && !disableAP },\n            { googAutoGainControl2: !disableAGC && !disableAP }\n        );\n    } else {\n        constraints.audio = false;\n    }\n\n    if (um.indexOf('desktop') >= 0) {\n        if (!constraints.video || typeof constraints.video === 'boolean') {\n            constraints.video = {};\n        }\n\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            })\n        };\n    }\n\n    return constraints;\n}\n\n/**\n * Generates GUM constraints for screen sharing.\n *\n * @param {Object} options - The options passed to\n * <tt>obtainAudioAndVideoPermissions</tt>.\n * @returns {Object} - GUM constraints.\n *\n * TODO: Currently only the new GUM flow and Chrome is using the method. We\n * should make it work for all use cases.\n */\nfunction getSSConstraints(options = {}) {\n    const {\n        desktopStream,\n        frameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: SS_DEFAULT_FRAME_RATE\n        }\n    } = options;\n    const { max, min } = frameRate;\n\n    const constraints = {\n        chromeMediaSource: options.source,\n        maxWidth: window.screen.width,\n        maxHeight: window.screen.height\n    };\n\n    if (typeof min === 'number') {\n        constraints.minFrameRate = min;\n    }\n\n    if (typeof max === 'number') {\n        constraints.maxFrameRate = max;\n    }\n\n    if (typeof desktopStream !== 'undefined') {\n        constraints.chromeMediaSourceId = desktopStream;\n    }\n\n    return constraints;\n}\n\n/**\n * Generates constraints for screen sharing when using getDisplayMedia.\n * The constraints(MediaTrackConstraints) are applied to the resulting track.\n *\n * @returns {Object} - MediaTrackConstraints constraints.\n */\nfunction getTrackSSConstraints(options = {}) {\n    // we used to set height and width in the constraints, but this can lead\n    // to inconsistencies if the browser is on a lower resolution screen\n    // and we share a screen with bigger resolution, so they are now not set\n    const constraints = {\n        frameRate: SS_DEFAULT_FRAME_RATE\n    };\n    const { desktopSharingFrameRate } = options;\n\n    if (desktopSharingFrameRate && desktopSharingFrameRate.max) {\n        constraints.frameRate = desktopSharingFrameRate.max;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.GRANTED_PERMISSIONS, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info(\n        'list of media devices has changed:',\n        availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, devicesReceived);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, devicesReceived);\n}\n\n/**\n * Handles the newly created Media Streams.\n * @param streams the new Media Streams\n * @param resolution the resolution of the video streams\n * @returns {*[]} object that describes the new streams\n */\nfunction handleLocalStream(streams, resolution) {\n    let audioStream, desktopStream, videoStream;\n    const res = [];\n\n    // XXX The function obtainAudioAndVideoPermissions has examined the type of\n    // the browser, its capabilities, etc. and has taken the decision whether to\n    // invoke getUserMedia per device (e.g. Firefox) or once for both audio and\n    // video (e.g. Chrome). In order to not duplicate the logic here, examine\n    // the specified streams and figure out what we've received based on\n    // obtainAudioAndVideoPermissions' decision.\n    if (streams) {\n        // As mentioned above, certian types of browser (e.g. Chrome) support\n        // (with a result which meets our requirements expressed bellow) calling\n        // getUserMedia once for both audio and video.\n        const audioVideo = streams.audioVideo;\n\n        if (audioVideo) {\n            const audioTracks = audioVideo.getAudioTracks();\n\n            if (audioTracks.length) {\n                audioStream = new MediaStream();\n                for (let i = 0; i < audioTracks.length; i++) {\n                    audioStream.addTrack(audioTracks[i]);\n                }\n            }\n\n            const videoTracks = audioVideo.getVideoTracks();\n\n            if (videoTracks.length) {\n                videoStream = new MediaStream();\n                for (let j = 0; j < videoTracks.length; j++) {\n                    videoStream.addTrack(videoTracks[j]);\n                }\n            }\n        } else {\n            // On other types of browser (e.g. Firefox) we choose (namely,\n            // obtainAudioAndVideoPermissions) to call getUserMedia per device\n            // (type).\n            audioStream = streams.audio;\n            videoStream = streams.video;\n        }\n\n        desktopStream = streams.desktop;\n    }\n\n    if (desktopStream) {\n        const { stream, sourceId, sourceType } = desktopStream;\n\n        res.push({\n            stream,\n            sourceId,\n            sourceType,\n            track: stream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.DESKTOP\n        });\n    }\n    if (audioStream) {\n        res.push({\n            stream: audioStream,\n            track: audioStream.getAudioTracks()[0],\n            mediaType: MediaType.AUDIO,\n            videoType: null\n        });\n    }\n    if (videoStream) {\n        res.push({\n            stream: videoStream,\n            track: videoStream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.CAMERA,\n            resolution\n        });\n    }\n\n    return res;\n}\n\n/**\n * Represents a default implementation of setting a <tt>MediaStream</tt> as the\n * source of a video element that tries to be browser-agnostic through feature\n * checking. Note though that it was not completely clear from the predating\n * browser-specific implementations what &quot;videoSrc&quot; was because one\n * implementation of {@link RTCUtils#getVideoSrc} would return\n * <tt>MediaStream</tt> (e.g. Firefox), another a <tt>string</tt> representation\n * of the <tt>URL</tt> of the <tt>MediaStream</tt> (e.g. Chrome) and the return\n * value was only used by {@link RTCUIHelper#getVideoId} which itself did not\n * appear to be used anywhere. Generally, the implementation will try to follow\n * the related standards i.e. work with the <tt>srcObject</tt> and <tt>src</tt>\n * properties of the specified <tt>element</tt> taking into account vender\n * prefixes.\n *\n * @param element the element whose video source/src is to be set to the\n * specified <tt>stream</tt>\n * @param {MediaStream} stream the <tt>MediaStream</tt> to set as the video\n * source/src of <tt>element</tt>\n */\nfunction defaultSetVideoSrc(element, stream) {\n    // srcObject\n    let srcObjectPropertyName = 'srcObject';\n\n    if (!(srcObjectPropertyName in element)) {\n        srcObjectPropertyName = 'mozSrcObject';\n        if (!(srcObjectPropertyName in element)) {\n            srcObjectPropertyName = null;\n        }\n    }\n    if (srcObjectPropertyName) {\n        element[srcObjectPropertyName] = stream;\n\n        return;\n    }\n\n    // src\n    let src;\n\n    if (stream) {\n        src = stream.jitsiObjectURL;\n\n        // Save the created URL for stream so we can reuse it and not keep\n        // creating URLs.\n        if (!src) {\n            stream.jitsiObjectURL = src = URL.createObjectURL(stream);\n        }\n    }\n    element.src = src || '';\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.disableHPF === 'boolean') {\n            disableHPF = options.disableHPF;\n            logger.info(`Disable HPF: ${disableHPF}`);\n        }\n\n        availableDevices = undefined;\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        this.enumerateDevices = initEnumerateDevicesWithCallback();\n\n        if (browser.usesNewGumFlow()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        } else if (browser.isChromiumBased() // this is chrome < 61\n                || browser.isReactNative()) {\n\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    defaultSetVideoSrc(element, stream);\n\n                    return element;\n                });\n\n            this.getStreamID = function({ id }) {\n                // A. MediaStreams from FF endpoints have the characters '{' and\n                // '}' that make jQuery choke.\n                // B. The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n\n            if (!MediaStream.prototype.getVideoTracks) {\n                MediaStream.prototype.getVideoTracks = function() {\n                    return this.videoTracks;\n                };\n            }\n            if (!MediaStream.prototype.getAudioTracks) {\n                MediaStream.prototype.getAudioTracks = function() {\n                    return this.audioTracks;\n                };\n            }\n        } else {\n            const message = 'Endpoint does not appear to be WebRTC-capable';\n\n            logger.error(message);\n            throw new Error(message);\n        }\n\n        this._initPCConstraints(options);\n\n        screenObtainer.init(\n            options,\n            this.getUserMediaWithConstraints.bind(this));\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.splice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n\n                // Use a shared callback to handle both the devicechange event\n                // and the polling implementations. This prevents duplication\n                // and works around a chrome bug (verified to occur on 68) where\n                // devicechange fires twice in a row, which can cause async post\n                // devicechange processing to collide.\n                const updateKnownDevices = () => this.enumerateDevices(pds => {\n                    if (compareAvailableMediaDevices(pds)) {\n                        onMediaDevicesListChanged(pds);\n                    }\n                });\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        updateKnownDevices);\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        updateKnownDevices,\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     * Creates instance objects for peer connection constraints both for p2p\n     * and outside of p2p.\n     *\n     * @params {Object} options - Configuration for setting RTCUtil's instance\n     * objects for peer connection constraints.\n     * @params {boolean} options.useIPv6 - Set to true if IPv6 should be used.\n     * @params {boolean} options.disableSuspendVideo - Whether or not video\n     * should become suspended if bandwidth estimation becomes low.\n     * @params {Object} options.testing - Additional configuration for work in\n     * development.\n     * @params {Object} options.testing.forceP2PSuspendVideoRatio - True if\n     * video should become suspended if bandwidth estimation becomes low while\n     * in peer to peer connection mode.\n     */\n    _initPCConstraints(options) {\n        if (browser.isFirefox()) {\n            this.pcConstraints = {};\n        } else if (browser.isChromiumBased() || browser.isReactNative()) {\n            this.pcConstraints = { optional: [\n                { googHighStartBitrate: 0 },\n                { googPayloadPadding: true },\n                { googScreencastMinBitrate: 400 },\n                { googCpuOveruseDetection: true },\n                { googCpuOveruseEncodeUsage: true },\n                { googCpuUnderuseThreshold: 55 },\n                { googCpuOveruseThreshold: 85 }\n            ] };\n\n            if (options.useIPv6) {\n                // https://code.google.com/p/webrtc/issues/detail?id=2828\n                this.pcConstraints.optional.push({ googIPv6: true });\n            }\n\n            this.p2pPcConstraints\n                = JSON.parse(JSON.stringify(this.pcConstraints));\n\n            // Allows sending of video to be suspended if the bandwidth\n            // estimation is too low.\n            if (!options.disableSuspendVideo) {\n                this.pcConstraints.optional.push(\n                    { googSuspendBelowMinBitrate: true });\n            }\n\n            // There's no reason not to use this for p2p\n            this.p2pPcConstraints.optional.push({\n                googSuspendBelowMinBitrate: true\n            });\n        }\n\n        this.p2pPcConstraints = this.p2pPcConstraints || this.pcConstraints;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n    * @param {string[]} um required user media types\n    * @param {Object} [options] optional parameters\n    * @param {string} options.resolution\n    * @param {number} options.bandwidth\n    * @param {number} options.fps\n    * @param {string} options.desktopStream\n    * @param {string} options.cameraDeviceId\n    * @param {string} options.micDeviceId\n    * @param {Object} options.frameRate - used only for dekstop sharing.\n    * @param {Object} options.frameRate.min - Minimum fps\n    * @param {Object} options.frameRate.max - Maximum fps\n    * @returns {Promise} Returns a media stream on success or a JitsiTrackError\n    * on failure.\n    **/\n    getUserMediaWithConstraints(um, options = {}) {\n        const constraints = getConstraints(um, options);\n\n        logger.info('Get media constraints', constraints);\n\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(um, stream);\n                    resolve(stream);\n                })\n                .catch(error => {\n                    logger.warn('Failed to get access to local media. '\n                        + ` ${error} ${constraints} `);\n                    updateGrantedPermissions(um, undefined);\n                    reject(new JitsiTrackError(error, constraints, um));\n                });\n        });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @returns {Promise}\n     */\n    _newGetUserMediaWithConstraints(umDevices, constraints = {}) {\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    resolve(stream);\n                })\n                .catch(error => {\n                    logger.warn('Failed to get access to local media. '\n                        + ` ${error} ${constraints} `);\n                    updateGrantedPermissions(umDevices, undefined);\n                    reject(new JitsiTrackError(error, constraints, umDevices));\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_newGetUserMediaWithConstraints.\n     *\n     * @param {Object} options\n     * @param {Object} options.desktopSharingExtensionExternalInstallation\n     * @param {string[]} options.desktopSharingSources\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _newGetDesktopMedia(options) {\n        if (!screenObtainer.isSupported() || !browser.supportsVideo()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                this._parseDesktopSharingOptions(options),\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {Object} [options] optional parameters\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    obtainAudioAndVideoPermissions(options = {}) {\n        options.devices = options.devices || [ ...OLD_GUM_DEFAULT_DEVICES ];\n        options.resolution = options.resolution || OLD_GUM_DEFAULT_RESOLUTION;\n\n        const requestingDesktop = options.devices.includes('desktop');\n\n        if (requestingDesktop && !screenObtainer.isSupported()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        let gumPromise;\n\n        if (browser.supportsMediaStreamConstructor()) {\n            gumPromise = this._getAudioAndVideoStreams(options);\n        } else {\n            // If the MediaStream constructor is not supported, then get tracks\n            // in separate GUM calls in order to keep different tracks separate.\n            gumPromise = this._getAudioAndVideoStreamsSeparately(options);\n        }\n\n        return gumPromise.then(streams =>\n            handleLocalStream(streams, options.resolution));\n    }\n\n    /**\n     * Performs one call to getUserMedia for audio and/or video and another call\n     * for desktop.\n     *\n     * @param {Object} options - An object describing how the gUM request should\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\n     * @returns {*} Promise object that will receive the new JitsiTracks on\n     * success or a JitsiTrackError on failure.\n     */\n    _getAudioAndVideoStreams(options) {\n        const requestingDesktop = options.devices.includes('desktop');\n\n        options.devices = options.devices.filter(device =>\n            device !== 'desktop');\n\n        const gumPromise = options.devices.length\n            ? this.getUserMediaWithConstraints(options.devices, options)\n            : Promise.resolve(null);\n\n        return gumPromise\n            .then(avStream => {\n                // If any requested devices are missing, call gum again in\n                // an attempt to obtain the actual error. For example, the\n                // requested video device is missing or permission was\n                // denied.\n                const missingTracks\n                    = this._getMissingTracks(options.devices, avStream);\n\n                if (missingTracks.length) {\n                    this.stopMediaStream(avStream);\n\n                    return this.getUserMediaWithConstraints(\n                        missingTracks, options)\n\n                        // GUM has already failed earlier and this success\n                        // handling should not be reached.\n                        .then(() => Promise.reject(new JitsiTrackError(\n                            { name: 'UnknownError' },\n                            getConstraints(options.devices, options),\n                            missingTracks)));\n                }\n\n                return avStream;\n            })\n            .then(audioVideo => {\n                if (!requestingDesktop) {\n                    return { audioVideo };\n                }\n\n                if (options.desktopSharingSourceDevice) {\n                    this.stopMediaStream(audioVideo);\n\n                    throw new Error('Using a camera as screenshare source is'\n                        + 'not supported on this browser.');\n                }\n\n                return new Promise((resolve, reject) => {\n                    screenObtainer.obtainStream(\n                        this._parseDesktopSharingOptions(options),\n                        desktop => resolve({\n                            audioVideo,\n                            desktop\n                        }),\n                        error => {\n                            if (audioVideo) {\n                                this.stopMediaStream(audioVideo);\n                            }\n                            reject(error);\n                        });\n                });\n            });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Performs separate getUserMedia calls for audio and video instead of in\n     * one call. Will also request desktop if specified.\n     *\n     * @param {Object} options - An object describing how the gUM request should\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\n     * @returns {*} Promise object that will receive the new JitsiTracks on\n     * success or a JitsiTrackError on failure.\n     */\n    _getAudioAndVideoStreamsSeparately(options) {\n        return new Promise((resolve, reject) => {\n            const deviceGUM = {\n                audio: (...args) =>\n                    this.getUserMediaWithConstraints([ 'audio' ], ...args),\n                video: (...args) =>\n                    this.getUserMediaWithConstraints([ 'video' ], ...args),\n                desktop: (...args) =>\n                    screenObtainer.obtainStream(\n                        this._parseDesktopSharingOptions(options), ...args)\n            };\n\n            obtainDevices({\n                options,\n                streams: {},\n                successCallback: resolve,\n                errorCallback: reject,\n                deviceGUM\n            });\n        });\n    }\n\n    /**\n     * Returns an object formatted for specifying desktop sharing parameters.\n     *\n     * @param {Object} options - Takes in the same options object as\n     * {@link obtainAudioAndVideoPermissions}.\n     * @returns {Object}\n     */\n    _parseDesktopSharingOptions(options) {\n        return {\n            ...options.desktopSharingExtensionExternalInstallation,\n            desktopSharingSources: options.desktopSharingSources,\n            gumOptions: {\n                frameRate: options.desktopSharingFrameRate\n            },\n            trackOptions: getTrackSSConstraints(options)\n        };\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    newObtainAudioAndVideoPermissions(options) {\n        logger.info('Using the new gUM flow');\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = options.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingExtensionExternalInstallation,\n                desktopSharingSourceDevice,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            } = options;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n                const requestedDevices = [ 'video' ];\n\n                // Leverage the helper used by {@link _newGetDesktopMedia} to\n                // get constraints for the desktop stream.\n                const { gumOptions, trackOptions }\n                    = this._parseDesktopSharingOptions(options);\n\n                // Create a custom constraints object to use exact device\n                // matching to make sure there is no fallthrough to another\n                // camera device. If a matching device could not be found, try\n                // anyways and let the caller handle errors.\n                const constraints = {\n                    video: {\n                        ...gumOptions,\n                        deviceId: {\n                            exact: (matchingDevice && matchingDevice.deviceId)\n                                || desktopSharingSourceDevice\n                        }\n                    }\n                };\n\n                return this._newGetUserMediaWithConstraints(\n                    requestedDevices, constraints)\n                    .then(stream => {\n                        const track = stream && stream.getTracks()[0];\n                        const applyConstrainsPromise\n                            = track && track.applyConstraints\n                                ? track.applyConstraints(trackOptions)\n                                : Promise.resolve();\n\n                        return applyConstrainsPromise\n                            .then(() => {\n                                return {\n                                    sourceType: 'device',\n                                    stream\n                                };\n                            });\n                    });\n            }\n\n            return this._newGetDesktopMedia({\n                desktopSharingExtensionExternalInstallation,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            mediaStreamsMetaData.push({\n                stream,\n                sourceId,\n                sourceType,\n                track: stream.getVideoTracks()[0],\n                videoType: VideoType.DESKTOP\n            });\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = options.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device =>\n                device === 'audio'\n                || (device === 'video' && browser.supportsVideo()));\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = newGetConstraints(\n                requestedCaptureDevices, options);\n\n            logger.info('Got media constraints: ', constraints);\n\n            return this._newGetUserMediaWithConstraints(\n                requestedCaptureDevices, constraints);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0]\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return deviceType === 'output' || deviceType === 'audiooutput'\n            ? isAudioOutputDeviceChangeAvailable\n            : browser.isChromiumBased()\n                || browser.isFirefox() || browser.isEdge();\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n\n        // if we have done createObjectURL, lets clean it\n        const url = mediaStream.jitsiObjectURL;\n\n        if (url) {\n            delete mediaStream.jitsiObjectURL;\n            URL.revokeObjectURL(url);\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n *\n * @param context Execution context, containing options and callbacks\n */\nfunction obtainDevices(context) {\n    if (!context.options.devices || context.options.devices.length === 0) {\n        return context.successCallback(context.streams || {});\n    }\n\n    const device = context.options.devices.splice(0, 1);\n\n    context.deviceGUM[device](context.options)\n        .then(stream => {\n            context.streams = context.streams || {};\n            context.streams[device] = stream;\n            obtainDevices(context);\n        }, error => {\n            Object.keys(context.streams).forEach(\n                d => rtcUtils.stopMediaStream(context.streams[d]));\n            logger.error(\n                `failed to obtain ${device} stream - stop`, error);\n\n            context.errorCallback(error);\n        });\n}\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * Generic error for jidesha extension for Chrome.\n */\nexport const CHROME_EXTENSION_GENERIC_ERROR\n    = 'gum.chrome_extension_generic_error';\n\n/**\n * An error which indicates that the jidesha extension for Chrome is\n * failed to install.\n */\nexport const CHROME_EXTENSION_INSTALLATION_ERROR\n    = 'gum.chrome_extension_installation_error';\n\n/**\n * This error indicates that the attempt to start screensharing was initiated by\n * a script which did not originate in user gesture handler. It means that\n * you should to trigger the action again in response to a button click for\n * example.\n * @type {string}\n */\nexport const CHROME_EXTENSION_USER_GESTURE_REQUIRED\n    = 'gum.chrome_extension_user_gesture_required';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog in jidesha extension for Chrome.\n */\nexport const CHROME_EXTENSION_USER_CANCELED\n    = 'gum.chrome_extension_user_canceled';\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * An error which indicates that the jidesha extension for Firefox is\n * needed to proceed with screen sharing, and that it is not installed.\n */\nexport const FIREFOX_EXTENSION_NEEDED = 'gum.firefox_extension_needed';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n\n/**\n * Indicates that the track is no receiving any data without reason(the\n * stream was stopped, etc)\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport BridgeChannel from './BridgeChannel';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RTCUtils from './RTCUtils';\nimport Statistics from '../statistics/statistics';\nimport TraceablePeerConnection from './TraceablePeerConnection';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n *\n * @param tracksInfo\n * @param options\n */\nfunction createLocalTracks(tracksInfo, options) {\n    const newTracks = [];\n    let deviceId = null;\n\n    tracksInfo.forEach(trackInfo => {\n        if (trackInfo.mediaType === MediaType.AUDIO) {\n            deviceId = options.micDeviceId;\n        } else if (trackInfo.videoType === VideoType.CAMERA) {\n            deviceId = options.cameraDeviceId;\n        }\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n        const localTrack = new JitsiLocalTrack({\n            ...trackInfo,\n            deviceId,\n            facingMode: options.facingMode,\n            rtcId: rtcTrackIdCounter\n        });\n\n        newTracks.push(localTrack);\n    });\n\n    return newTracks;\n}\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type\n * }}\n */\nfunction _newCreateLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        // A flag whether we had received that the channel had opened we can\n        // get this flag out of sync if for some reason channel got closed\n        // from server, a desired behaviour so we can see errors when this\n        // happen.\n        // @private\n        // @type {boolean}\n        this._channelOpen = false;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = -1;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint ID of currently pinned participant or <tt>null</tt> if\n         * no user is pinned.\n         * @type {string|null}\n         * @private\n         */\n        this._pinnedEndpoint = null;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = [];\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(\n            RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n            this._updateAudioOutputForAudioTracks\n        );\n\n        RTCUtils.removeListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            this._onDeviceListChanged\n        );\n\n        this.removeListener(\n            RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener\n        );\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static newCreateLocalTracks(tracksInfo) {\n        return _newCreateLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        const usesNewGumFlow = browser.usesNewGumFlow();\n        const obtainMediaPromise = usesNewGumFlow\n            ? RTCUtils.newObtainAudioAndVideoPermissions(options)\n            : RTCUtils.obtainAudioAndVideoPermissions(options);\n\n        return obtainMediaPromise.then(\n            tracksInfo => {\n                const tracks = usesNewGumFlow\n                    ? _newCreateLocalTracks(tracksInfo)\n                    : createLocalTracks(tracksInfo, options);\n\n                return tracks.some(track => !track._isReceivingData())\n                    ? Promise.reject(\n                        new JitsiTrackError(\n                            JitsiTrackErrors.NO_DATA_FROM_SOURCE))\n                    : tracks;\n            });\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(\n            peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            // Mark that channel as opened.\n            this._channelOpen = true;\n\n            // When the channel becomes available, tell the bridge about\n            // video selections so that it can do adaptive simulcast,\n            // we want the notification to trigger even if userJid\n            // is undefined, or null.\n            try {\n                this._channel.sendPinnedEndpointMessage(\n                    this._pinnedEndpoint);\n                this._channel.sendSelectedEndpointsMessage(\n                    this._selectedEndpoints);\n\n                if (typeof this._maxFrameHeight !== 'undefined') {\n                    this._channel.sendReceiverVideoConstraintMessage(\n                        this._maxFrameHeight);\n                }\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    `Cannot send selected(${this._selectedEndpoint})`\n                    + `pinned(${this._pinnedEndpoint})`\n                    + `frameHeight(${this._maxFrameHeight}) endpoint message`,\n                    error);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener);\n            this._channelOpenListener = null;\n\n            // If setLastN was invoked before the bridge channel completed\n            // opening, apply the specified value now that the channel\n            // is open. NOTE that -1 is the default value assumed by both\n            // RTC module and the JVB.\n            if (this._lastN !== -1) {\n                this._channel.sendSetLastNMessage(this._lastN);\n            }\n        };\n\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN,\n            this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n            this._channelOpen = false;\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     * Elects the participant with the given id to be the pinned participant in\n     * order to always receive video for this participant (even when last n is\n     * enabled).\n     * @param {stirng} id The user id.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     */\n    pinEndpoint(id) {\n        // Cache the value if channel is missing, till we open it.\n        this._pinnedEndpoint = id;\n        if (this._channel && this._channelOpen) {\n            this._channel.sendPinnedEndpointMessage(id);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will\n     *      provide information about the media or participants which is not\n     *      carried over SDP.\n     * @param {object} iceConfig An object describing the ICE config like\n     *      defined in the WebRTC specification.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\n     *      in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\n     *      the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\n     *      RTX.\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\n     *      disabled by removing it from the SDP.\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\n     *      preferred over other video codecs.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\n        const pcConstraints = RTC.getPCConstraints(isP2P);\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        // FIXME: We should rename iceConfig to pcConfig.\n        if (browser.supportsSdpSemantics()) {\n            iceConfig.sdpSemantics = 'plan-b';\n        }\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                iceConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Returns the current value for \"lastN\" - the amount of videos are going\n     * to be delivered. When set to -1 for unlimited or all available videos.\n     * @return {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     * Removes all JitsiRemoteTracks associated with given MUC nickname\n     * (resource part of the JID). Returns array of removed tracks.\n     *\n     * @param {string} Owner The resource part of the MUC JID.\n     * @returns {JitsiRemoteTrack[]}\n     */\n    removeRemoteTracks(owner) {\n        let removedTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemovedTracks = tpc.removeRemoteTracks(owner);\n\n            removedTracks = removedTracks.concat(pcRemovedTracks);\n        }\n\n        logger.debug(\n            `Removed remote tracks for ${owner}`\n                + ` count: ${removedTracks.length}`);\n\n        return removedTracks;\n    }\n\n    /**\n     *\n     */\n    static getPCConstraints(isP2P) {\n        const pcConstraints\n            = isP2P ? RTCUtils.p2pPcConstraints : RTCUtils.pcConstraints;\n\n        if (!pcConstraints) {\n            return {};\n        }\n\n        return JSON.parse(JSON.stringify(pcConstraints));\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channelOpen = false;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channelOpen) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_INSTALLATION_ERROR]\n    = 'Failed to install Chrome extension';\nTRACK_ERROR_TO_MESSAGE_MAP[\n    JitsiTrackErrors.CHROME_EXTENSION_USER_GESTURE_REQUIRED]\n    = 'Failed to install Chrome extension - installations can only be initiated'\n        + ' by a user gesture.';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED]\n    = 'User canceled Chrome\\'s screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR]\n    = 'Unknown error from Chrome extension';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NO_DATA_FROM_SOURCE]\n    = 'The track has stopped receiving data from it\\'s source';\n\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n","/* global $ */\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const self = this;\n    const mediaSSRCs = {};\n    let tmp;\n\n    for (let mediaindex = 0; mediaindex < self.media.length; mediaindex++) {\n        tmp = SDPUtil.findLines(self.media[mediaindex], 'a=ssrc:');\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(self.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n        tmp.forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        tmp = SDPUtil.findLines(self.media[mediaindex], 'a=ssrc-group:');\n        tmp.forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// remove iSAC and CN from SDP\nSDP.prototype.mangle = function() {\n    let i, j, lines, mline, newdesc, rtpmap;\n\n    for (i = 0; i < this.media.length; i++) {\n        lines = this.media[i].split('\\r\\n');\n        lines.pop(); // remove empty last element\n        mline = SDPUtil.parseMLine(lines.shift());\n        if (mline.media !== 'audio') {\n            continue; // eslint-disable-line no-continue\n        }\n        newdesc = '';\n        mline.fmt.length = 0;\n        for (j = 0; j < lines.length; j++) {\n            if (lines[j].substr(0, 9) === 'a=rtpmap:') {\n                rtpmap = SDPUtil.parseRTPMap(lines[j]);\n                if (rtpmap.name === 'CN' || rtpmap.name === 'ISAC') {\n                    continue; // eslint-disable-line no-continue\n                }\n                mline.fmt.push(rtpmap.id);\n            }\n            newdesc += `${lines[j]}\\r\\n`;\n        }\n        this.media[i] = `${SDPUtil.buildMLine(mline)}\\r\\n${newdesc}`;\n    }\n    this.raw = this.session + this.media.join('');\n};\n\n// remove lines matching prefix from session section\nSDP.prototype.removeSessionLines = function(prefix) {\n    const self = this;\n    const lines = SDPUtil.findLines(this.session, prefix);\n\n    lines.forEach(line => {\n        self.session = self.session.replace(`${line}\\r\\n`, '');\n    });\n    this.raw = this.session + this.media.join('');\n\n    return lines;\n};\n\n// remove lines matching prefix from a media section specified by mediaindex\n// TODO: non-numeric mediaindex could match mid\nSDP.prototype.removeMediaLines = function(mediaindex, prefix) {\n    const self = this;\n    const lines = SDPUtil.findLines(this.media[mediaindex], prefix);\n\n    lines.forEach(line => {\n        self.media[mediaindex]\n            = self.media[mediaindex].replace(`${line}\\r\\n`, '');\n    });\n    this.raw = this.session + this.media.join('');\n\n    return lines;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    let i, j, k, lines, mline, rtpmap, ssrc, tmp;\n\n    // new bundle plan\n\n    lines = SDPUtil.findLines(this.session, 'a=group:');\n    if (lines.length) {\n        for (i = 0; i < lines.length; i++) {\n            tmp = lines[i].split(' ');\n            const semantics = tmp.shift().substr(8);\n\n            elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n                semantics });\n            for (j = 0; j < tmp.length; j++) {\n                elem.c('content', { name: tmp[j] }).up();\n            }\n            elem.up();\n        }\n    }\n    for (i = 0; i < this.media.length; i++) {\n        mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (SDPUtil.findLine(this.media[i], 'a=rtpmap:').length) {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (j = 0; j < mline.fmt.length; j++) {\n                rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    tmp = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (k = 0; k < tmp.length; k++) {\n                        elem.c('parameter', tmp[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n            const crypto\n                = SDPUtil.findLines(this.media[i], 'a=crypto:', this.session);\n\n            if (crypto.length) {\n                elem.c('encryption', { required: 1 });\n                crypto.forEach(\n                    line => elem.c('crypto', SDPUtil.parseCrypto(line)).up());\n                elem.up(); // end of encryption\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    ssrcParameters.forEach(ssrcSdpLine => {\n                        // get everything after first space\n                        const idx = ssrcSdpLine.indexOf(' ');\n                        const kv = ssrcSdpLine.substr(idx + 1);\n\n                        elem.c('parameter');\n                        if (kv.indexOf(':') === -1) {\n                            elem.attrs({ name: kv });\n                        } else {\n                            const name = kv.split(':', 2)[0];\n\n                            elem.attrs({ name });\n\n                            let v = kv.split(':', 2)[1];\n\n                            v = SDPUtil.filterSpecialChars(v);\n                            elem.attrs({ value: v });\n                        }\n                        elem.up();\n                    });\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid');\n\n            if (ridLines.length) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            lines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n            if (lines.length) {\n                for (j = 0; j < lines.length; j++) {\n                    tmp = SDPUtil.parseExtmap(lines[j]);\n                    elem.c('rtp-hdrext', {\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                        uri: tmp.uri,\n                        id: tmp.value\n                    });\n\n                    // eslint-disable-next-line max-depth\n                    if (tmp.hasOwnProperty('direction')) {\n\n                        // eslint-disable-next-line max-depth\n                        switch (tmp.direction) {\n                        case 'sendonly':\n                            elem.attrs({ senders: 'responder' });\n                            break;\n                        case 'recvonly':\n                            elem.attrs({ senders: 'initiator' });\n                            break;\n                        case 'sendrecv':\n                            elem.attrs({ senders: 'both' });\n                            break;\n                        case 'inactive':\n                            elem.attrs({ senders: 'none' });\n                            break;\n                        }\n                    }\n\n                    // TODO: handle params\n                    elem.up();\n                }\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n        if (mline.port === '0') {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    let tmp;\n    const self = this;\n\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', self.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        tmp = SDPUtil.parseFingerprint(line);\n        tmp.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(tmp.fingerprint);\n        delete tmp.fingerprint;\n\n        // eslint-disable-next-line no-param-reassign\n        line\n            = SDPUtil.findLine(\n                self.media[mediaindex],\n                'a=setup:',\n                self.session);\n        if (line) {\n            tmp.setup = line.substr(8);\n        }\n        elem.attrs(tmp);\n        elem.up(); // end of fingerprint\n    });\n    tmp = SDPUtil.iceparams(this.media[mediaindex], this.session);\n    if (tmp) {\n        tmp.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(tmp);\n\n        // XEP-0176\n        const lines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        if (lines.length) { // add any a=candidate lines\n            lines.forEach(line => {\n                const candidate = SDPUtil.candidateToJingle(line);\n\n                if (self.failICE) {\n                    candidate.ip = '1.1.1.1';\n                }\n                const protocol\n                    = candidate && typeof candidate.protocol === 'string'\n                        ? candidate.protocol.toLowerCase()\n                        : '';\n\n                if ((self.removeTcpCandidates\n                        && (protocol === 'tcp' || protocol === 'ssltcp'))\n                    || (self.removeUdpCandidates && protocol === 'udp')) {\n                    return;\n                }\n                elem.c('candidate', candidate).up();\n            });\n        }\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const tmp = SDPUtil.parseRTCPFB(line);\n\n        if (tmp.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: tmp.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: tmp.type\n            });\n            if (tmp.params.length > 0) {\n                elem.attrs({ 'subtype': tmp.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let media = '';\n    let tmp\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (tmp.length) {\n        media += 'a=rtcp-fb:* trr-int ';\n        if (tmp.attr('value')) {\n            media += tmp.attr('value');\n        } else {\n            media += '0';\n        }\n        media += '\\r\\n';\n    }\n    tmp = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        media += `a=rtcp-fb:${payloadtype} ${$(this).attr('type')}`;\n        if ($(this).attr('subtype')) {\n            media += ` ${$(this).attr('subtype')}`;\n        }\n        media += '\\r\\n';\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    return media;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const self = this;\n\n    this.raw = 'v=0\\r\\n'\n        + 'o=- 1923518516 2 IN IP4 0.0.0.0\\r\\n'// FIXME\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                self.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each(function() {\n        // eslint-disable-next-line no-invalid-this\n        const m = self.jingle2media($(this));\n\n        self.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('description');\n    let media = '';\n    const self = this;\n    const sctp = content.find(\n        '>transport>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    let tmp = { media: desc.attr('media') };\n\n    tmp.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        tmp.port = '0';\n    }\n    if (content.find('>transport>fingerprint').length\n            || desc.find('encryption').length) {\n        tmp.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        tmp.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        media += `m=application ${tmp.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        media += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            media += ` ${streamCount}\\r\\n`;\n        } else {\n            media += '\\r\\n';\n        }\n    } else {\n        tmp.fmt\n            = desc\n                .find('payload-type')\n                .map(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    return this.getAttribute('id');\n                })\n                .get();\n        media += `${SDPUtil.buildMLine(tmp)}\\r\\n`;\n    }\n\n    media += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        media += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n    tmp\n        = content.find(\n            '>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    if (tmp.length) {\n        if (tmp.attr('ufrag')) {\n            media += `${SDPUtil.buildICEUfrag(tmp.attr('ufrag'))}\\r\\n`;\n        }\n        if (tmp.attr('pwd')) {\n            media += `${SDPUtil.buildICEPwd(tmp.attr('pwd'))}\\r\\n`;\n        }\n        tmp.find('>fingerprint').each(function() {\n            /* eslint-disable no-invalid-this */\n            // FIXME: check namespace at some point\n            media += `a=fingerprint:${this.getAttribute('hash')}`;\n            media += ` ${$(this).text()}`;\n            media += '\\r\\n';\n            if (this.getAttribute('setup')) {\n                media += `a=setup:${this.getAttribute('setup')}\\r\\n`;\n            }\n\n            /* eslint-enable no-invalid-this */\n        });\n    }\n    switch (content.attr('senders')) {\n    case 'initiator':\n        media += 'a=sendonly\\r\\n';\n        break;\n    case 'responder':\n        media += 'a=recvonly\\r\\n';\n        break;\n    case 'none':\n        media += 'a=inactive\\r\\n';\n        break;\n    case 'both':\n        media += 'a=sendrecv\\r\\n';\n        break;\n    }\n    media += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('rtcp-mux').length) {\n        media += 'a=rtcp-mux\\r\\n';\n    }\n\n    if (desc.find('encryption').length) {\n        desc.find('encryption>crypto').each(function() {\n            /* eslint-disable no-invalid-this */\n            media += `a=crypto:${this.getAttribute('tag')}`;\n            media += ` ${this.getAttribute('crypto-suite')}`;\n            media += ` ${this.getAttribute('key-params')}`;\n            if (this.getAttribute('session-params')) {\n                media += ` ${this.getAttribute('session-params')}`;\n            }\n            media += '\\r\\n';\n\n            /* eslint-enable no-invalid-this */\n        });\n    }\n    desc.find('payload-type').each(function() {\n        /* eslint-disable no-invalid-this */\n        media += `${SDPUtil.buildRTPMap(this)}\\r\\n`;\n        if ($(this).find('>parameter').length) {\n            media += `a=fmtp:${this.getAttribute('id')} `;\n            media\n                += $(this)\n                    .find('parameter')\n                    .map(function() {\n                        const name = this.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + this.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            media += '\\r\\n';\n        }\n\n        // xep-0293\n        media += self.rtcpFbFromJingle($(this), this.getAttribute('id'));\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    // xep-0293\n    media += self.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    tmp\n        = desc.find(\n            '>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        media\n            += `a=extmap:${this.getAttribute('id')} ${\n                this.getAttribute('uri')}\\r\\n`;\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    content\n        .find(\n            '>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]'\n                + '>candidate')\n        .each(function() {\n            /* eslint-disable no-invalid-this */\n            let protocol = this.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((self.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (self.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (self.failICE) {\n                this.setAttribute('ip', '1.1.1.1');\n            }\n\n            media += SDPUtil.candidateFromJingle(this);\n\n            /* eslint-enable no-invalid-this */\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    content\n        .find('description>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each(function() {\n            /* eslint-disable no-invalid-this */\n            const semantics = this.getAttribute('semantics');\n            const ssrcs\n                = $(this)\n                    .find('>source')\n                    .map(function() {\n                        return this.getAttribute('ssrc');\n                    })\n                    .get();\n\n            if (ssrcs.length) {\n                media += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n\n            /* eslint-enable no-invalid-this */\n        });\n\n    tmp\n        = content.find(\n            'description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        const ssrc = this.getAttribute('ssrc');\n\n        // eslint-disable-next-line newline-per-chained-call\n        $(this).find('>parameter').each(function() {\n            const name = this.getAttribute('name');\n            let value = this.getAttribute('value');\n\n            value = SDPUtil.filterSpecialChars(value);\n            media += `a=ssrc:${ssrc} ${name}`;\n            if (value && value.length) {\n                media += `:${value}`;\n            }\n            media += '\\r\\n';\n        });\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    return media;\n};\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const EDGE = 'edge';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    EDGE,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Microsoft Edge': EDGE,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n * \n * NOTE: Here we cannot check solely for \"Chrome\" in the UA string and the\n * \"window.chrome\" property, because Edge has both, so we add an explicit\n * check for NOT Edge.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n\n    if (Boolean(window.chrome)\n            && !userAgent.match(/Edge/) && userAgent.match(/Chrome/)) {\n        const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n        return {\n            name: CHROME,\n            version\n        };\n    }\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n *\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect() {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const { name, version } = bowser;\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect();\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Microsoft Edge.\n     * @returns {boolean}\n     */\n    isEdge() {\n        return this._name === EDGE;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     * {@see https://github.com/lancedikson/bowser}\n     */\n    static compareVersions = bowser.compareVersions;\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {number|undefined} - Returns 0 if the version is equal to the\n     * current one, 1 if the version is greater than the current one, -1 if the\n     * version is lower than the current one and undefined if the current\n     * browser version is unknown.\n     */\n    compareVersion(version) {\n        if (this._version) {\n            return bowser.compareVersions([ String(version), this._version ]);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this.compareVersion(version) === -1;\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this.compareVersion(version) === 1;\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionEqualTo(version) {\n        return this.compareVersion(version) === 0;\n    }\n}\n","export * from './browser-capabilities';\nexport * from './browser-detection';\nexport * from './avatar';\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that jingle fatal error happened.\n */\nexport const JINGLE_FATAL_ERROR = 'conference.jingleFatalError';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that the conference setup failed.\n */\nexport const SETUP_FAILED = 'conference.setup_failed';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            const localStorage = getLocalStorage();\n\n            if (localStorage) {\n                _callStatsUserName = localStorage.getItem('callStatsUserName');\n            }\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                if (localStorage) {\n                    localStorage.setItem(\n                        'callStatsUserName',\n                        _callStatsUserName);\n                }\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const localStorage = getLocalStorage();\n\n            if (localStorage) {\n                _machineId = localStorage.getItem('jitsiMeetId');\n            }\n            if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                if (localStorage) {\n                    localStorage.setItem('jitsiMeetId', _machineId);\n                }\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        const localStorage = getLocalStorage();\n\n        return localStorage ? localStorage.getItem('sessionId') : undefined;\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        const localStorage = getLocalStorage();\n\n        if (localStorage) {\n            if (sessionId) {\n                localStorage.setItem('sessionId', sessionId);\n            } else {\n                localStorage.removeItem('sessionId');\n            }\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n * Gets the localStorage of the browser. (Technically, gets the localStorage of\n * the global object because there may be no browser but React Native for\n * example).\n * @returns {Storage} the local Storage object (if any)\n */\nfunction getLocalStorage() {\n    let storage;\n\n    try {\n        // eslint-disable-next-line no-invalid-this\n        storage = (window || this).localStorage;\n    } catch (error) {\n        logger.error(error);\n    }\n\n    return storage;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","const Resolutions = {\n    '1080': {\n        width: 1920,\n        height: 1080,\n        order: 7\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080,\n        order: 7\n    },\n    '720': {\n        width: 1280,\n        height: 720,\n        order: 6\n    },\n    'hd': {\n        width: 1280,\n        height: 720,\n        order: 6\n    },\n    '960': {\n        width: 960,\n        height: 720,\n        order: 5\n    },\n\n    // 16:9 resolution first.\n    '360': {\n        width: 640,\n        height: 360,\n        order: 4\n    },\n    '640': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n    'vga': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n\n    // 16:9 resolution first.\n    '180': {\n        width: 320,\n        height: 180,\n        order: 2\n    },\n    '320': {\n        width: 320,\n        height: 240,\n        order: 1\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection the the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            let configParams;\n\n            if (options.applicationName) {\n                configParams = {\n                    applicationVersion:\n                        `${options.applicationName} (${\n                            browser.getName()})`\n                };\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        if (CallStats.backend) {\n            CallStats.backend.sendUserFeedback(\n                conferenceID, {\n                    userID: CallStats.userID,\n                    overall,\n                    comment\n                });\n        } else {\n            logger.error('Failed to submit feedback to CallStats - no backend');\n        }\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport RandomUtil from '../util/RandomUtil';\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport browser from '../browser';\nimport initEmuc from './strophe.emuc';\nimport initJingle from './strophe.jingle';\nimport initStropheUtil from './strophe.util';\nimport initPing from './strophe.ping';\nimport initRayo from './strophe.rayo';\nimport initStropheLogger from './strophe.logger';\nimport Listenable from '../util/Listenable';\nimport Caps from './Caps';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param token\n * @param bosh\n */\nfunction createConnection(token, bosh = '/http-bind') {\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        bosh += `${bosh.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    const conn = new Strophe.Connection(bosh);\n\n    // The default maxRetries is 5, which is too long.\n    conn.maxRetries = 3;\n\n    return conn;\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'stun:stun1.l.google.com:19302' },\n    { urls: 'stun:stun2.l.google.com:19302' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {Array<Object>} options.p2pStunServers see\n     * {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n        this._initStrophePlugins(this);\n\n        this.connection = createConnection(token, options.bosh);\n\n        this.caps = new Caps(this.connection, this.options.clientNode);\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on('beforeunload unload', this.disconnect.bind(this));\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n\n        if (!this.options.disableRtx && browser.supportsRtx()) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChrome() && this.options.enableLipSync !== false) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n    }\n\n    /**\n     * Returns {@code true} if the PING functionality is supported by the server\n     * or {@code false} otherwise.\n     * @returns {boolean}\n     */\n    isPingSupported() {\n        return this._pingSupported !== false;\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n        if (status === Strophe.Status.CONNECTED\n            || status === Strophe.Status.ATTACHED) {\n            if (this.options.useStunTurn\n                || (this.options.p2p && this.options.p2p.useStunTurn)) {\n                this.connection.jingle.getStunAndTurnCredentials();\n            }\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // Schedule ping ?\n            const pingJid = this.connection.domain;\n\n            this.caps.getFeaturesAndIdentities(pingJid)\n                .then(({ features, identities }) => {\n                    if (features.has(Strophe.NS.PING)) {\n                        this._pingSupported = true;\n                        this.connection.ping.startInterval(pingJid);\n                    } else {\n                        logger.warn(`Ping NOT supported by ${pingJid}`);\n                    }\n\n                    // check for speakerstats\n                    identities.forEach(identity => {\n                        if (identity.type === 'speakerstats') {\n                            this.speakerStatsComponentAddress = identity.name;\n\n                            this.connection.addHandler(\n                                this._onPrivateMessage.bind(this), null,\n                                'message', null, null);\n                        }\n                    });\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = this.disconnectInProgress;\n            const errMsg = msg || this.lastErrorMsg;\n\n            this.disconnectInProgress = false;\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error');\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error');\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg,\n                credentials);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log(`(TIME) Strophe Attaching\\t:${now}`);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     *\n     * @param roomName\n     * @param options\n     */\n    createRoom(roomName, options) {\n        // By default MUC nickname is the resource part of the JID\n        let mucNickname = Strophe.getNodeFromJid(this.connection.jid);\n        let roomjid = `${roomName}@${this.options.hosts.muc}/`;\n        const cfgNickname\n            = options.useNicks && options.nick ? options.nick : null;\n\n        if (cfgNickname) {\n            // Use nick if it's defined\n            mucNickname = options.nick;\n        } else if (!this.authenticatedUser) {\n            // node of the anonymous JID is very long - here we trim it a bit\n            mucNickname = mucNickname.substr(0, 8);\n        }\n\n        // Constant JIDs need some random part to be appended in order to be\n        // able to join the MUC more than once.\n        if (this.authenticatedUser || cfgNickname !== null) {\n            mucNickname += `-${RandomUtil.randomHexString(6)}`;\n        }\n\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server. Remember to check {@link isPingSupported} before using\n     * this method.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            if (this.isPingSupported()) {\n                this.connection.ping\n                    .ping(this.connection.domain, resolve, reject, timeout);\n            } else {\n                reject('PING operation is not supported by the server');\n            }\n        });\n    }\n\n    /**\n     *\n     * @param jid\n     * @param mute\n     */\n    setMute(jid, mute) {\n        this.connection.moderate.setMute(jid, mute);\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    eject(jid) {\n        this.connection.moderate.eject(jid);\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param ev optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress || !this.connection) {\n            this.eventEmitter.emit(JitsiConnectionEvents.WRONG_STATE);\n\n            return;\n        }\n\n        this.disconnectInProgress = true;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send an unavailable\n        // presence or disconnect at all. Switching Strophe to synchronous\n        // sending is not much of an option because it may lead to a noticeable\n        // delay in navigating away from the current location. As a compromise,\n        // we will try to increase the chances of sending an unavailable\n        // presence and/or disconecting within the short time span that we have\n        // upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attemtp to have its unavailable\n        // presence at the top of the send queue. We flush() once more after\n        // disconnect() in order to attempt to have its unavailable presence\n        // sent as soon as possible.\n        this.connection.flush();\n\n        if (ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best\n                // (known) way to properly disconnect from the XMPP server.\n                // Consequently, it may be fine to have the source code and\n                // comment it in or out depending on whether we want to run with\n                // it for some time.\n                this.connection.options.sync = true;\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        initEmuc(this);\n        initJingle(this, this.eventEmitter, iceConfig);\n        initStropheUtil();\n        initPing(this);\n        initRayo();\n        initStropheLogger();\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection._proto\n            && this.connection._proto.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection._proto.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from speaker stats component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!this.speakerStatsComponentAddress\n            || from !== this.speakerStatsComponentAddress) {\n            return;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\n            && parsedJson.users) {\n            this.eventEmitter.emit(\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        }\n\n        return true;\n    }\n}\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","/* global chrome, $, alert */\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\n/**\n * Indicates whether the Chrome desktop sharing extension is installed.\n * @type {boolean}\n */\nlet chromeExtInstalled = false;\n\n/**\n * Indicates whether an update of the Chrome desktop sharing extension is\n * required.\n * @type {boolean}\n */\nlet chromeExtUpdateRequired = false;\n\nlet gumFunction = null;\n\n/**\n * The error message returned by chrome when the extension is installed.\n */\nconst CHROME_NO_EXTENSION_ERROR_MSG // eslint-disable-line no-unused-vars\n    = 'Could not establish connection. Receiving end does not exist.';\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n    intChromeExtPromise: null,\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     * @param {boolean} [options.desktopSharingChromeDisabled]\n     * @param {boolean} [options.desktopSharingChromeExtId]\n     * @param {boolean} [options.desktopSharingFirefoxDisabled]\n     * @param {Function} gum GUM method\n     */\n    init(options = {\n        desktopSharingChromeDisabled: false,\n        desktopSharingChromeExtId: null,\n        desktopSharingFirefoxDisabled: false\n    }, gum) {\n        this.options = options;\n        gumFunction = gum;\n\n        this.obtainStream = this._createObtainStreamMethod(options);\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @param {object} options passed from {@link init} - check description\n     * there\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod(options) {\n        if (browser.isNWJS()) {\n            return (_, onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isChrome() || browser.isOpera()) {\n            if (browser.supportsGetDisplayMedia()\n                    && !options.desktopSharingChromeDisabled) {\n\n                return this.obtainScreenFromGetDisplayMedia;\n            } else if (options.desktopSharingChromeDisabled\n                || !options.desktopSharingChromeExtId) {\n\n                return null;\n            }\n\n            logger.info('Using Chrome extension for desktop sharing');\n            this.intChromeExtPromise\n                = initChromeExtension(options).then(() => {\n                    this.intChromeExtPromise = null;\n                });\n\n            return this.obtainScreenFromExtension;\n        } else if (browser.isFirefox()) {\n            if (options.desktopSharingFirefoxDisabled) {\n                return null;\n            } else if (browser.supportsGetDisplayMedia()) {\n                // Firefox 66 support getDisplayMedia\n                return this.obtainScreenFromGetDisplayMedia;\n            }\n\n            // Legacy Firefox\n            return this.obtainScreenOnFirefox;\n        } else if (browser.isEdge() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n\n        logger.log(\n            'Screen sharing not supported by the current browser: ',\n            browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Firefox.\n     * @param callback\n     * @param errorCallback\n     */\n    obtainScreenOnFirefox(options, callback, errorCallback) {\n        obtainWebRTCScreen(options.gumOptions, callback, errorCallback);\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param {Object} [options] - Screen sharing options.\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\n     * sources that have to be displayed in the desktop picker window ('screen',\n     * 'window', etc.).\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingSources, gumOptions } = options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources\n                        || this.options.desktopSharingChromeSources\n                },\n                (streamId, streamType) =>\n                    onGetStreamResponse(\n                        {\n                            response: {\n                                streamId,\n                                streamType\n                            },\n                            gumOptions\n                        },\n                        onSuccess,\n                        onFailure\n                    ),\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Asks Chrome extension to call chooseDesktopMedia and gets chrome\n     * 'desktop' stream for returned stream token.\n     */\n    obtainScreenFromExtension(options, streamCallback, failCallback) {\n        if (this.intChromeExtPromise !== null) {\n            this.intChromeExtPromise.then(() => {\n                this.obtainScreenFromExtension(\n                    options, streamCallback, failCallback);\n            });\n\n            return;\n        }\n\n        const {\n            desktopSharingChromeExtId,\n            desktopSharingChromeSources\n        } = this.options;\n\n        const {\n            gumOptions\n        } = options;\n\n        const doGetStreamFromExtensionOptions = {\n            desktopSharingChromeExtId,\n            desktopSharingChromeSources:\n                options.desktopSharingSources || desktopSharingChromeSources,\n            gumOptions\n        };\n\n        if (chromeExtInstalled) {\n            doGetStreamFromExtension(\n                doGetStreamFromExtensionOptions,\n                streamCallback,\n                failCallback);\n        } else {\n            if (chromeExtUpdateRequired) {\n                /* eslint-disable no-alert */\n                alert(\n                    'Jitsi Desktop Streamer requires update. '\n                    + 'Changes will take effect after next Chrome restart.');\n\n                /* eslint-enable no-alert */\n            }\n\n            this.handleExternalInstall(options, streamCallback,\n                failCallback);\n        }\n    },\n\n    /* eslint-disable max-params */\n\n    handleExternalInstall(options, streamCallback, failCallback, e) {\n        const webStoreInstallUrl = getWebStoreInstallUrl(this.options);\n\n        options.listener('waitingForExtension', webStoreInstallUrl);\n        this.checkForChromeExtensionOnInterval(options, streamCallback,\n            failCallback, e);\n    },\n\n    /* eslint-enable max-params */\n\n    checkForChromeExtensionOnInterval(options, streamCallback, failCallback) {\n        if (options.checkAgain() === false) {\n            failCallback(new JitsiTrackError(\n                JitsiTrackErrors.CHROME_EXTENSION_INSTALLATION_ERROR));\n\n            return;\n        }\n        waitForExtensionAfterInstall(this.options, options.interval, 1)\n            .then(() => {\n                chromeExtInstalled = true;\n                options.listener('extensionFound');\n                this.obtainScreenFromExtension(options,\n                    streamCallback, failCallback);\n            })\n            .catch(() => {\n                this.checkForChromeExtensionOnInterval(options,\n                    streamCallback, failCallback);\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(options, callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        getDisplayMedia({ video: true })\n            .then(stream => {\n                let applyConstraintsPromise;\n\n                if (stream\n                    && stream.getTracks()\n                    && stream.getTracks().length > 0) {\n                    applyConstraintsPromise = stream.getTracks()[0]\n                        .applyConstraints(options.trackOptions);\n                } else {\n                    applyConstraintsPromise = Promise.resolve();\n                }\n\n                applyConstraintsPromise.then(() =>\n                    callback({\n                        stream,\n                        sourceId: stream.id\n                    }));\n            })\n            .catch(() =>\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .CHROME_EXTENSION_USER_CANCELED)));\n    }\n};\n\n/**\n * Obtains a desktop stream using getUserMedia.\n * For this to work on Chrome, the\n * 'chrome://flags/#enable-usermedia-screen-capture' flag must be enabled.\n *\n * On firefox, the document's domain must be white-listed in the\n * 'media.getusermedia.screensharing.allowed_domains' preference in\n * 'about:config'.\n */\nfunction obtainWebRTCScreen(options, streamCallback, failCallback) {\n    gumFunction([ 'screen' ], options)\n        .then(stream => streamCallback({ stream }), failCallback);\n}\n\n/**\n * Constructs inline install URL for Chrome desktop streaming extension.\n * The 'chromeExtensionId' must be defined in options parameter.\n * @param options supports \"desktopSharingChromeExtId\"\n * @returns {string}\n */\nfunction getWebStoreInstallUrl(options) {\n    return (\n        `https://chrome.google.com/webstore/detail/${\n            options.desktopSharingChromeExtId}`);\n}\n\n/**\n * Checks whether an update of the Chrome extension is required.\n * @param minVersion minimal required version\n * @param extVersion current extension version\n * @returns {boolean}\n */\nfunction isUpdateRequired(minVersion, extVersion) {\n    try {\n        const s1 = minVersion.split('.');\n        const s2 = extVersion.split('.');\n\n        const len = Math.max(s1.length, s2.length);\n\n        for (let i = 0; i < len; i++) {\n            let n1 = 0,\n                n2 = 0;\n\n            if (i < s1.length) {\n                n1 = parseInt(s1[i], 10);\n            }\n            if (i < s2.length) {\n                n2 = parseInt(s2[i], 10);\n            }\n\n            if (isNaN(n1) || isNaN(n2)) {\n                return true;\n            } else if (n1 !== n2) {\n                return n1 > n2;\n            }\n        }\n\n        // will happen if both versions have identical numbers in\n        // their components (even if one of them is longer, has more components)\n        return false;\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error('Failed to parse extension version', e);\n\n        return true;\n    }\n}\n\n/**\n *\n * @param callback\n * @param options\n */\nfunction checkChromeExtInstalled(callback, options) {\n    if (typeof chrome === 'undefined' || !chrome || !chrome.runtime) {\n        // No API, so no extension for sure\n        callback(false, false);\n\n        return;\n    }\n    chrome.runtime.sendMessage(\n        options.desktopSharingChromeExtId,\n        { getVersion: true },\n        response => {\n            if (!response || !response.version) {\n                // Communication failure - assume that no endpoint exists\n                logger.warn(\n                    'Extension not installed?: ', chrome.runtime.lastError);\n                callback(false, false);\n\n                return;\n            }\n\n            // Check installed extension version\n            const extVersion = response.version;\n\n            logger.log(`Extension version is: ${extVersion}`);\n            const updateRequired\n                = isUpdateRequired(\n                    options.desktopSharingChromeMinExtVersion,\n                    extVersion);\n\n            callback(!updateRequired, updateRequired);\n        }\n    );\n}\n\n/**\n *\n * @param options\n * @param streamCallback\n * @param failCallback\n */\nfunction doGetStreamFromExtension(options, streamCallback, failCallback) {\n    const {\n        desktopSharingChromeSources,\n        desktopSharingChromeExtId,\n        gumOptions\n    } = options;\n\n    // Sends 'getStream' msg to the extension.\n    // Extension id must be defined in the config.\n    chrome.runtime.sendMessage(\n        desktopSharingChromeExtId,\n        {\n            getStream: true,\n            sources: desktopSharingChromeSources\n        },\n        response => {\n            if (!response) {\n                // possibly re-wraping error message to make code consistent\n                const lastError = chrome.runtime.lastError;\n\n                failCallback(lastError instanceof Error\n                    ? lastError\n                    : new JitsiTrackError(\n                        JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR,\n                        lastError));\n\n                return;\n            }\n            logger.log('Response from extension: ', response);\n            onGetStreamResponse(\n                {\n                    response,\n                    gumOptions\n                },\n                streamCallback,\n                failCallback\n            );\n        }\n    );\n}\n\n/**\n * Initializes <link rel=chrome-webstore-item /> with extension id set in\n * config.js to support inline installs. Host site must be selected as main\n * website of published extension.\n * @param options supports \"desktopSharingChromeExtId\"\n */\nfunction initInlineInstalls(options) {\n    if ($('link[rel=chrome-webstore-item]').length === 0) {\n        $('head').append('<link rel=\"chrome-webstore-item\">');\n    }\n    $('link[rel=chrome-webstore-item]').attr('href',\n        getWebStoreInstallUrl(options));\n}\n\n/**\n *\n * @param options\n *\n * @return {Promise} - a Promise resolved once the initialization process is\n * finished.\n */\nfunction initChromeExtension(options) {\n    // Initialize Chrome extension inline installs\n    initInlineInstalls(options);\n\n    return new Promise(resolve => {\n        // Check if extension is installed\n        checkChromeExtInstalled((installed, updateRequired) => {\n            chromeExtInstalled = installed;\n            chromeExtUpdateRequired = updateRequired;\n            logger.info(\n                `Chrome extension installed: ${\n                    chromeExtInstalled} updateRequired: ${\n                    chromeExtUpdateRequired}`);\n            resolve();\n        }, options);\n    });\n}\n\n/**\n * Checks \"retries\" times on every \"waitInterval\"ms whether the ext is alive.\n * @param {Object} options the options passed to ScreanObtainer.obtainStream\n * @param {int} waitInterval the number of ms between retries\n * @param {int} retries the number of retries\n * @returns {Promise} returns promise that will be resolved when the extension\n * is alive and rejected if the extension is not alive even after \"retries\"\n * checks\n */\nfunction waitForExtensionAfterInstall(options, waitInterval, retries) {\n    if (retries === 0) {\n        return Promise.reject();\n    }\n\n    return new Promise((resolve, reject) => {\n        let currentRetries = retries;\n        const interval = window.setInterval(() => {\n            checkChromeExtInstalled(installed => {\n                if (installed) {\n                    window.clearInterval(interval);\n                    resolve();\n                } else {\n                    currentRetries--;\n                    if (currentRetries === 0) {\n                        reject();\n                        window.clearInterval(interval);\n                    }\n                }\n            }, options);\n        }, waitInterval);\n    });\n}\n\n/**\n * Handles response from external application / extension and calls GUM to\n * receive the desktop streams or reports error.\n * @param {object} options\n * @param {object} options.response\n * @param {string} options.response.streamId - the streamId for the desktop\n * stream.\n * @param {string} options.response.error - error to be reported.\n * @param {object} options.gumOptions - options passed to GUM.\n * @param {Function} onSuccess - callback for success.\n * @param {Function} onFailure - callback for failure.\n * @param {object} gumOptions - options passed to GUM.\n */\nfunction onGetStreamResponse(\n        options = {\n            response: {},\n            gumOptions: {}\n        },\n        onSuccess,\n        onFailure) {\n    const { streamId, streamType, error } = options.response || {};\n\n    if (streamId) {\n        const gumOptions = {\n            desktopStream: streamId,\n            ...options.gumOptions\n        };\n\n        gumFunction([ 'desktop' ], gumOptions)\n            .then(stream => onSuccess({\n                stream,\n                sourceId: streamId,\n                sourceType: streamType\n            }), onFailure);\n    } else {\n        // As noted in Chrome Desktop Capture API:\n        // If user didn't select any source (i.e. canceled the prompt)\n        // then the callback is called with an empty streamId.\n        if (streamId === '') {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED));\n\n            return;\n        }\n\n        onFailure(new JitsiTrackError(\n            JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR,\n            error));\n    }\n}\n\nexport default ScreenObtainer;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar logDisabled_ = true;\nvar deprecationWarnings_ = true;\n\n// Utility methods.\nvar utils = {\n  disableLog: function(bool) {\n    if (typeof bool !== 'boolean') {\n      return new Error('Argument type: ' + typeof bool +\n          '. Please use a boolean.');\n    }\n    logDisabled_ = bool;\n    return (bool) ? 'adapter.js logging disabled' :\n        'adapter.js logging enabled';\n  },\n\n  /**\n   * Disable or enable deprecation warnings\n   * @param {!boolean} bool set to true to disable warnings.\n   */\n  disableWarnings: function(bool) {\n    if (typeof bool !== 'boolean') {\n      return new Error('Argument type: ' + typeof bool +\n          '. Please use a boolean.');\n    }\n    deprecationWarnings_ = !bool;\n    return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n  },\n\n  log: function() {\n    if (typeof window === 'object') {\n      if (logDisabled_) {\n        return;\n      }\n      if (typeof console !== 'undefined' && typeof console.log === 'function') {\n        console.log.apply(console, arguments);\n      }\n    }\n  },\n\n  /**\n   * Shows a deprecation warning suggesting the modern and spec-compatible API.\n   */\n  deprecated: function(oldMethod, newMethod) {\n    if (!deprecationWarnings_) {\n      return;\n    }\n    console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n        ' instead.');\n  },\n\n  /**\n   * Extract browser version out of the provided user agent string.\n   *\n   * @param {!string} uastring userAgent string.\n   * @param {!string} expr Regular expression used as match criteria.\n   * @param {!number} pos position in the version string to be returned.\n   * @return {!number} browser version.\n   */\n  extractVersion: function(uastring, expr, pos) {\n    var match = uastring.match(expr);\n    return match && match.length >= pos && parseInt(match[pos], 10);\n  },\n\n  /**\n   * Browser detector.\n   *\n   * @return {object} result containing browser and version\n   *     properties.\n   */\n  detectBrowser: function(window) {\n    var navigator = window && window.navigator;\n\n    // Returned result object.\n    var result = {};\n    result.browser = null;\n    result.version = null;\n\n    // Fail early if it's not a browser\n    if (typeof window === 'undefined' || !window.navigator) {\n      result.browser = 'Not a browser.';\n      return result;\n    }\n\n    // Firefox.\n    if (navigator.mozGetUserMedia) {\n      result.browser = 'firefox';\n      result.version = this.extractVersion(navigator.userAgent,\n          /Firefox\\/(\\d+)\\./, 1);\n    } else if (navigator.webkitGetUserMedia) {\n      // Chrome, Chromium, Webview, Opera, all use the chrome shim for now\n      if (window.webkitRTCPeerConnection) {\n        result.browser = 'chrome';\n        result.version = this.extractVersion(navigator.userAgent,\n          /Chrom(e|ium)\\/(\\d+)\\./, 2);\n      } else { // Safari (in an unpublished version) or unknown webkit-based.\n        if (navigator.userAgent.match(/Version\\/(\\d+).(\\d+)/)) {\n          result.browser = 'safari';\n          result.version = this.extractVersion(navigator.userAgent,\n            /AppleWebKit\\/(\\d+)\\./, 1);\n        } else { // unknown webkit-based browser.\n          result.browser = 'Unsupported webkit-based browser ' +\n              'with GUM support but no WebRTC support.';\n          return result;\n        }\n      }\n    } else if (navigator.mediaDevices &&\n        navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\n      result.browser = 'edge';\n      result.version = this.extractVersion(navigator.userAgent,\n          /Edge\\/(\\d+).(\\d+)$/, 2);\n    } else if (navigator.mediaDevices &&\n        navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) {\n        // Safari, with webkitGetUserMedia removed.\n      result.browser = 'safari';\n      result.version = this.extractVersion(navigator.userAgent,\n          /AppleWebKit\\/(\\d+)\\./, 1);\n    } else { // Default fallthrough: not supported.\n      result.browser = 'Not a supported browser.';\n      return result;\n    }\n\n    return result;\n  },\n\n};\n\n// Export.\nmodule.exports = {\n  log: utils.log,\n  deprecated: utils.deprecated,\n  disableLog: utils.disableLog,\n  disableWarnings: utils.disableWarnings,\n  extractVersion: utils.extractVersion,\n  shimCreateObjectURL: utils.shimCreateObjectURL,\n  detectBrowser: utils.detectBrowser.bind(utils)\n};\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2000 milliseconds for\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 2000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 5000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId the endpoint ID(MUC nickname/resource JID)\n     * @param {boolean} isActive true if the connection is OK or false otherwise\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId the participant for which the \"connection\n     * interrupted\" timeout was scheduled\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack the {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack the remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id the participant's id (MUC nickname or Colibri endpoint\n     * ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print the warning for\n            // debugging purpose\n            logger.warn(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.rtc.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            logger.debug('Assuming connection active by JVB - no notification');\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track the video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track the video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track the remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/* global __filename, $ */\n\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport async from 'async';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\nimport { integerHash } from '../util/StringUtils';\n\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport SDP from './SDP';\nimport SDPDiffer from './SDPDiffer';\nimport SDPUtil from './SDPUtil';\nimport SignalingLayerImpl from './SignalingLayerImpl';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} p2p.disableH264 - Described in the config.js[1].\n * @property {boolean} p2p.preferH264 - Described in the config.js[1].\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} testing.enableFirefoxSimulcast - Described in the\n * config.js[1].\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which\n     * identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {Strophe.Connection} connection Strophe XMPP connection instance\n     * used to send packets.\n     * @param mediaConstraints the media constraints object passed to\n     * createOffer/Answer, as defined by the WebRTC standard\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\n     * standard.\n     * @param {boolean} isP2P indicates whether this instance is\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\n     * if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        this.modificationQueue\n            = async.queue(this._processQueueTasks.bind(this), 1);\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance has been ended and eventually\n     * logs a message which mentions that given <tt>actionName</tt> was\n     * cancelled.\n     * @param {string} actionName\n     * @return {boolean} <tt>true</tt> if this {@link JingleSessionPC} has\n     * entered {@link JingleSessionState.ENDED} or <tt>false</tt> otherwise.\n     * @private\n     */\n    _assertNotEnded(actionName) {\n        if (this.state === JingleSessionState.ENDED) {\n            logger.log(\n                `The session has ended - cancelling action: ${actionName}`);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            pcOptions.disableH264 = options.p2p && options.p2p.disableH264;\n            pcOptions.preferH264 = options.p2p && options.p2p.preferH264;\n\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264);\n            pcOptions.preferH264 = options.preferH264;\n            pcOptions.enableFirefoxSimulcast\n                = options.testing && options.testing.enableFirefoxSimulcast;\n            pcOptions.enableLayerSuspension = options.enableLayerSuspension;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.iceConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (!this.peerconnection) {\n                return;\n            }\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (\n                (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed')\n                && !this.closed) {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            if (!this.peerconnection\n                    || !this._assertNotEnded('oniceconnectionstatechange')) {\n                return;\n            }\n            const now = window.performance.now();\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\n                    + ` P2P? ${this.isP2P}:\\t`,\n                now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been\n                // restored.\n                if (this.peerconnection.signalingState === 'stable') {\n                    if (this.isReconnect) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                if (!this.wasConnected && this.wasstable) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                if (this.closed) {\n                    break;\n                }\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n        this.peerconnection.onnegotiationneeded = () => {\n            this.room.eventEmitter.emit(XMPPEvents.PEERCONNECTION_READY, this);\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n\n        if (!this.isP2P && options.enableLayerSuspension) {\n            // If this is the bridge session, we'll listen for\n            // IS_SELECTED_CHANGED events and notify the peer connection\n            this.rtc.addListener(RTCEvents.IS_SELECTED_CHANGED,\n                isSelected => {\n                    this.peerconnection.setIsSelected(isSelected);\n                    logger.info('Doing local O/A due to '\n                        + 'IS_SELECTED_CHANGED event');\n                    this.modificationQueue.push(finishedCallback => {\n                        this._renegotiate()\n                            .then(finishedCallback)\n                            .catch(finishedCallback);\n                    });\n                }\n            );\n        }\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && !this.lasticecandidate) {\n            const ice\n                = SDPUtil.iceparams(\n                    localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    // start 20ms callout\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, 20);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log('sendIceCandidate: last candidate.');\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log('sendIceCandidates', candidates);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ(\n            sessionInfo,\n            null,\n            this.newJingleErrorHandler(sessionInfo),\n            /*\n             * This message will be often sent when there are connectivity\n             * issues, so make it slightly longer than Prosody's default BOSH\n             * inactivity timeout of 60 seconds.\n             */ 65);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn('Ignored add ICE candidate when in closed state');\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug('addIceCandidate ok!'),\n                        err => logger.error('addIceCandidate failed!', err));\n            }\n\n            finishedCallback();\n        };\n\n        logger.debug(\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(\n                                    `Invalid SSRC ${ssrc} value received`\n                                        + ` for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    Strophe.getResourceFromJid(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(\n                'Unable to generate recvonly SSRC - no peerconnection');\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            for (const localTrack of localTracks) {\n                this.peerconnection.addTrack(localTrack);\n            }\n            this.peerconnection.createOffer(this.mediaConstraints)\n                .then(offerSdp => {\n                    this.peerconnection.setLocalDescription(offerSdp)\n                        .then(() => {\n                            // NOTE that the offer is obtained from\n                            // the localDescription getter as it needs to go\n                            // though the transformation chain.\n                            this.sendSessionInitiate(\n                                this.peerconnection.localDescription.sdp);\n                            finishedCallback();\n                        }, error => {\n                            logger.error(\n                                'Failed to set local SDP', error, offerSdp);\n                            finishedCallback(error);\n                        });\n                }, error => {\n                    logger.error(\n                        'Failed to create an offer',\n                        error,\n                        this.mediaConstraints);\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('invite error', error);\n                } else {\n                    logger.debug('invite executed - OK');\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.info('Session-initiate: ', init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info('Got RESULT for \"session-initiate\"');\n            },\n            error => {\n                logger.error('\"session-initiate\" error', error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info('setAnswer - succeeded');\n            },\n            error => {\n                logger.error('setAnswer failed: ', error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks) {\n        const workFunction = finishedCallback => {\n\n            if (localTracks) {\n                for (const track of localTracks) {\n                    this.peerconnection.addTrack(track);\n                }\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        if (this.isP2P && !this._localVideoActive) {\n                            this.sendContentModify(this._localVideoActive);\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n\n                    finishedCallback();\n                }, error => {\n                    logger.error(\n                        `Error renegotiating after setting new remote ${\n                            this.isInitiator ? 'answer: ' : 'offer: '}${error}`,\n                        newRemoteSdp);\n\n                    this._onJingleFatalError(error);\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                error ? failure(error) : success();\n            });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        let accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\n            null);\n\n        // Calling tree() to print something useful\n        accept = accept.tree();\n        logger.info('Sending session-accept', accept);\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media.\n     * @param {boolean} videoTransferActive <tt>false</tt> to let the other peer\n     * know that we're not sending nor interested in receiving video contents.\n     * When set to <tt>true</tt> remote peer will be asked to resume video\n     * transfer.\n     * @private\n     */\n    sendContentModify(videoTransferActive) {\n        const newSendersValue = videoTransferActive ? 'both' : 'none';\n\n        const sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders: newSendersValue\n                });\n\n        logger.info(\n            `Sending content-modify, video senders: ${newSendersValue}`);\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        let transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        // Calling tree() to print something useful to the logger\n        transportAccept = transportAccept.tree();\n        logger.info('Sending transport-accept: ', transportAccept);\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        let transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        transportReject = transportReject.tree();\n        logger.info('Sending \\'transport-reject', transportReject);\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            let sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success');\n\n            if (options && options.reasonDescription) {\n                sessionTerminate.up()\n                    .c('text')\n                    .t(options.reasonDescription);\n            }\n\n            // Calling tree() to print something useful\n            sessionTerminate = sessionTerminate.tree();\n            logger.info('Sending session-terminate', sessionTerminate);\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`Skipped sending session-terminate for ${this}`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\n\n        this.close();\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n                    logger.warn(\n                        `Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`Processing ${logPrefix}`);\n            logger.log(\n                'ICE connection state: ',\n                this.peerconnection.iceConnectionState);\n\n            const oldLocalSdp\n                = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    const newLocalSdp\n                        = new SDP(this.peerconnection.localDescription.sdp);\n\n                    logger.log(\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    finishedCallback();\n                }, error => {\n                    logger.error(`${logPrefix} failed:`, error);\n                    finishedCallback(error);\n                });\n        };\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass a handler to the .push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     */\n    _processQueueTasks(task, finishedCallback) {\n        task(finishedCallback);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            lines.forEach(line => {\n                remoteSdp.media[idx]\n                    = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n            });\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            return Promise.reject('Attempted to renegotiate in state closed');\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            return Promise.reject(\n                'Can not renegotiate without remote description,'\n                    + `- current state: ${this.state}`);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: setting remote description');\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug('Renegotiate: creating answer');\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug('Renegotiate: setting local description');\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        if (this.peerconnection.signalingState === 'have-local-offer') {\n            // Skip createOffer and setLocalDescription or FF will fail\n            logger.debug(\n                'Renegotiate: setting remote description');\n\n            /* eslint-disable arrow-body-style */\n\n            return this.peerconnection.setRemoteDescription(remoteDescription)\n                .then(() => {\n                    // In case when the answer is being set for the first time,\n                    // full sRD/sLD cycle is required to have the local\n                    // description updated and SSRCs synchronized correctly.\n                    // Otherwise SSRCs for streams added after invite, but\n                    // before the answer was accepted will not be detected.\n                    // The reason for that is that renegotiate can not be called\n                    // when adding tracks and they will not be reflected in\n                    // the local SDP.\n                    return this._initiatorRenegotiate(remoteDescription);\n                });\n            /* eslint-enable arrow-body-style */\n        }\n\n        logger.debug('Renegotiate: creating offer');\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug('Renegotiate: setting local description');\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(\n                            'Renegotiate: setting remote description');\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            // Check if the connection was closed and pretend everything is OK.\n            // This can happen if a track removal is scheduled but takes place\n            // after the connection is closed.\n            if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed'\n                || this.closed) {\n\n                finishedCallback();\n\n                return;\n            }\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            // NOTE the code below assumes that no more than 1 video track\n            // can be added to the peer connection.\n            // Transition from no video to video (possibly screen sharing)\n            if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                // Clearing current primary SSRC will make\n                // the SdpConsistency generate a new one which will result\n                // with:\n                // 1. source-remove for the recvonly\n                // 2. source-add for the new video stream\n                this.peerconnection.clearRecvonlySsrc();\n\n            // Transition from video to no video\n            } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                // Clearing current primary SSRC and generating the recvonly\n                // will result in:\n                // 1. source-remove for the old video stream\n                // 2. source-add for the recvonly stream\n                this.peerconnection.clearRecvonlySsrc();\n                this.peerconnection.generateRecvonlySsrc();\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n            .then(shouldRenegotiate => {\n                if (shouldRenegotiate\n                    && (oldTrack || newTrack)\n                    && this.state === JingleSessionState.ACTIVE) {\n                    this._renegotiate()\n                        .then(() => {\n                            const newLocalSDP\n                                = new SDP(\n                                    this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(\n                                new SDP(oldLocalSdp), newLocalSDP);\n                            finishedCallback();\n                        },\n                        finishedCallback /* will be called with en error */);\n                } else {\n                    finishedCallback();\n                }\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error('Replace track error:', error);\n                        reject(error);\n                    } else {\n                        logger.info('Replace track done!');\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(\n                `${this} - some SSRC were added on ${operationName}`,\n                addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(\n                `${this} - some SSRCs were removed on ${operationName}`,\n                removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track);\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const tpcOperation\n                = isMute\n                    ? tpc.removeTrackMute.bind(tpc, track)\n                    : tpc.addTrackUnmute.bind(tpc, track);\n\n            if (!tpcOperation()) {\n                finishedCallback(`${operationName} failed!`);\n            } else if (!oldLocalSDP || !tpc.remoteDescription.sdp) {\n                finishedCallback();\n            } else {\n                this._renegotiate()\n                    .then(() => {\n                        // The results are ignored, as this check failure is not\n                        // enough to fail the whole operation. It will log\n                        // an error inside.\n                        this._verifyNoSSRCChanged(\n                            operationName, new SDP(oldLocalSDP));\n                        finishedCallback();\n                    },\n                    finishedCallback /* will be called with an error */);\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify(videoActive);\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(\n            `${this} queued \"content-modify\" task`\n                + `(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('\"content-modify\" failed', error);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(\n                `${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info('Sending source-remove', remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        } else {\n            logger.log('removal not necessary');\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info('Sending source-add', add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        } else {\n            logger.log('addition not necessary');\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     *\n     * @param error\n     * @private\n     */\n    _onJingleFatalError(error) {\n        if (this.room) {\n            this.room.eventEmitter.emit(\n                XMPPEvents.CONFERENCE_SETUP_FAILED, this, error);\n            this.room.eventEmitter.emit(\n                XMPPEvents.JINGLE_FATAL_ERROR, this, error);\n        }\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.closed = true;\n\n        // The signaling layer will remove it's listeners\n        this.signalingLayer.setChatRoom(null);\n\n        // do not try to close if already closed.\n        this.peerconnection\n            && ((this.peerconnection.signalingState\n                    && this.peerconnection.signalingState !== 'closed')\n                || (this.peerconnection.connectionState\n                    && this.peerconnection.connectionState !== 'closed'))\n            && this.peerconnection.close();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[p2p=${this.isP2P},`\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n","/*!\n * Bowser - a browser detector\n * https://github.com/ded/bowser\n * MIT License | (c) Dustin Diaz 2015\n */\n\n!function (root, name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(name, definition)\n  else root[name] = definition()\n}(this, 'bowser', function () {\n  /**\n    * See useragents.js for examples of navigator.userAgent\n    */\n\n  var t = true\n\n  function detect(ua) {\n\n    function getFirstMatch(regex) {\n      var match = ua.match(regex);\n      return (match && match.length > 1 && match[1]) || '';\n    }\n\n    function getSecondMatch(regex) {\n      var match = ua.match(regex);\n      return (match && match.length > 1 && match[2]) || '';\n    }\n\n    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()\n      , likeAndroid = /like android/i.test(ua)\n      , android = !likeAndroid && /android/i.test(ua)\n      , nexusMobile = /nexus\\s*[0-6]\\s*/i.test(ua)\n      , nexusTablet = !nexusMobile && /nexus\\s*[0-9]+/i.test(ua)\n      , chromeos = /CrOS/.test(ua)\n      , silk = /silk/i.test(ua)\n      , sailfish = /sailfish/i.test(ua)\n      , tizen = /tizen/i.test(ua)\n      , webos = /(web|hpw)os/i.test(ua)\n      , windowsphone = /windows phone/i.test(ua)\n      , samsungBrowser = /SamsungBrowser/i.test(ua)\n      , windows = !windowsphone && /windows/i.test(ua)\n      , mac = !iosdevice && !silk && /macintosh/i.test(ua)\n      , linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua)\n      , edgeVersion = getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.\\d+)?)/i)\n      , versionIdentifier = getFirstMatch(/version\\/(\\d+(\\.\\d+)?)/i)\n      , tablet = /tablet/i.test(ua) && !/tablet pc/i.test(ua)\n      , mobile = !tablet && /[^-]mobi/i.test(ua)\n      , xbox = /xbox/i.test(ua)\n      , result\n\n    if (/opera/i.test(ua)) {\n      //  an old Opera\n      result = {\n        name: 'Opera'\n      , opera: t\n      , version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    } else if (/opr\\/|opios/i.test(ua)) {\n      // a new Opera\n      result = {\n        name: 'Opera'\n        , opera: t\n        , version: getFirstMatch(/(?:opr|opios)[\\s\\/](\\d+(\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (/SamsungBrowser/i.test(ua)) {\n      result = {\n        name: 'Samsung Internet for Android'\n        , samsungBrowser: t\n        , version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/coast/i.test(ua)) {\n      result = {\n        name: 'Opera Coast'\n        , coast: t\n        , version: versionIdentifier || getFirstMatch(/(?:coast)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/yabrowser/i.test(ua)) {\n      result = {\n        name: 'Yandex Browser'\n      , yandexbrowser: t\n      , version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/ucbrowser/i.test(ua)) {\n      result = {\n          name: 'UC Browser'\n        , ucbrowser: t\n        , version: getFirstMatch(/(?:ucbrowser)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/mxios/i.test(ua)) {\n      result = {\n        name: 'Maxthon'\n        , maxthon: t\n        , version: getFirstMatch(/(?:mxios)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/epiphany/i.test(ua)) {\n      result = {\n        name: 'Epiphany'\n        , epiphany: t\n        , version: getFirstMatch(/(?:epiphany)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/puffin/i.test(ua)) {\n      result = {\n        name: 'Puffin'\n        , puffin: t\n        , version: getFirstMatch(/(?:puffin)[\\s\\/](\\d+(?:\\.\\d+)?)/i)\n      }\n    }\n    else if (/sleipnir/i.test(ua)) {\n      result = {\n        name: 'Sleipnir'\n        , sleipnir: t\n        , version: getFirstMatch(/(?:sleipnir)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/k-meleon/i.test(ua)) {\n      result = {\n        name: 'K-Meleon'\n        , kMeleon: t\n        , version: getFirstMatch(/(?:k-meleon)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (windowsphone) {\n      result = {\n        name: 'Windows Phone'\n      , osname: 'Windows Phone'\n      , windowsphone: t\n      }\n      if (edgeVersion) {\n        result.msedge = t\n        result.version = edgeVersion\n      }\n      else {\n        result.msie = t\n        result.version = getFirstMatch(/iemobile\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/msie|trident/i.test(ua)) {\n      result = {\n        name: 'Internet Explorer'\n      , msie: t\n      , version: getFirstMatch(/(?:msie |rv:)(\\d+(\\.\\d+)?)/i)\n      }\n    } else if (chromeos) {\n      result = {\n        name: 'Chrome'\n      , osname: 'Chrome OS'\n      , chromeos: t\n      , chromeBook: t\n      , chrome: t\n      , version: getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)/i)\n      }\n    } else if (/edg([ea]|ios)/i.test(ua)) {\n      result = {\n        name: 'Microsoft Edge'\n      , msedge: t\n      , version: edgeVersion\n      }\n    }\n    else if (/vivaldi/i.test(ua)) {\n      result = {\n        name: 'Vivaldi'\n        , vivaldi: t\n        , version: getFirstMatch(/vivaldi\\/(\\d+(\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (sailfish) {\n      result = {\n        name: 'Sailfish'\n      , osname: 'Sailfish OS'\n      , sailfish: t\n      , version: getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/seamonkey\\//i.test(ua)) {\n      result = {\n        name: 'SeaMonkey'\n      , seamonkey: t\n      , version: getFirstMatch(/seamonkey\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/firefox|iceweasel|fxios/i.test(ua)) {\n      result = {\n        name: 'Firefox'\n      , firefox: t\n      , version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \\/](\\d+(\\.\\d+)?)/i)\n      }\n      if (/\\((mobile|tablet);[^\\)]*rv:[\\d\\.]+\\)/i.test(ua)) {\n        result.firefoxos = t\n        result.osname = 'Firefox OS'\n      }\n    }\n    else if (silk) {\n      result =  {\n        name: 'Amazon Silk'\n      , silk: t\n      , version : getFirstMatch(/silk\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/phantom/i.test(ua)) {\n      result = {\n        name: 'PhantomJS'\n      , phantom: t\n      , version: getFirstMatch(/phantomjs\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/slimerjs/i.test(ua)) {\n      result = {\n        name: 'SlimerJS'\n        , slimer: t\n        , version: getFirstMatch(/slimerjs\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/blackberry|\\bbb\\d+/i.test(ua) || /rim\\stablet/i.test(ua)) {\n      result = {\n        name: 'BlackBerry'\n      , osname: 'BlackBerry OS'\n      , blackberry: t\n      , version: versionIdentifier || getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (webos) {\n      result = {\n        name: 'WebOS'\n      , osname: 'WebOS'\n      , webos: t\n      , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\\/(\\d+(\\.\\d+)?)/i)\n      };\n      /touchpad\\//i.test(ua) && (result.touchpad = t)\n    }\n    else if (/bada/i.test(ua)) {\n      result = {\n        name: 'Bada'\n      , osname: 'Bada'\n      , bada: t\n      , version: getFirstMatch(/dolfin\\/(\\d+(\\.\\d+)?)/i)\n      };\n    }\n    else if (tizen) {\n      result = {\n        name: 'Tizen'\n      , osname: 'Tizen'\n      , tizen: t\n      , version: getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.\\d+)?)/i) || versionIdentifier\n      };\n    }\n    else if (/qupzilla/i.test(ua)) {\n      result = {\n        name: 'QupZilla'\n        , qupzilla: t\n        , version: getFirstMatch(/(?:qupzilla)[\\s\\/](\\d+(?:\\.\\d+)+)/i) || versionIdentifier\n      }\n    }\n    else if (/chromium/i.test(ua)) {\n      result = {\n        name: 'Chromium'\n        , chromium: t\n        , version: getFirstMatch(/(?:chromium)[\\s\\/](\\d+(?:\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (/chrome|crios|crmo/i.test(ua)) {\n      result = {\n        name: 'Chrome'\n        , chrome: t\n        , version: getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (android) {\n      result = {\n        name: 'Android'\n        , version: versionIdentifier\n      }\n    }\n    else if (/safari|applewebkit/i.test(ua)) {\n      result = {\n        name: 'Safari'\n      , safari: t\n      }\n      if (versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    }\n    else if (iosdevice) {\n      result = {\n        name : iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'\n      }\n      // WTF: version is not part of user agent in web apps\n      if (versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    }\n    else if(/googlebot/i.test(ua)) {\n      result = {\n        name: 'Googlebot'\n      , googlebot: t\n      , version: getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i) || versionIdentifier\n      }\n    }\n    else {\n      result = {\n        name: getFirstMatch(/^(.*)\\/(.*) /),\n        version: getSecondMatch(/^(.*)\\/(.*) /)\n     };\n   }\n\n    // set webkit or gecko flag for browsers based on these engines\n    if (!result.msedge && /(apple)?webkit/i.test(ua)) {\n      if (/(apple)?webkit\\/537\\.36/i.test(ua)) {\n        result.name = result.name || \"Blink\"\n        result.blink = t\n      } else {\n        result.name = result.name || \"Webkit\"\n        result.webkit = t\n      }\n      if (!result.version && versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    } else if (!result.opera && /gecko\\//i.test(ua)) {\n      result.name = result.name || \"Gecko\"\n      result.gecko = t\n      result.version = result.version || getFirstMatch(/gecko\\/(\\d+(\\.\\d+)?)/i)\n    }\n\n    // set OS flags for platforms that have multiple browsers\n    if (!result.windowsphone && (android || result.silk)) {\n      result.android = t\n      result.osname = 'Android'\n    } else if (!result.windowsphone && iosdevice) {\n      result[iosdevice] = t\n      result.ios = t\n      result.osname = 'iOS'\n    } else if (mac) {\n      result.mac = t\n      result.osname = 'macOS'\n    } else if (xbox) {\n      result.xbox = t\n      result.osname = 'Xbox'\n    } else if (windows) {\n      result.windows = t\n      result.osname = 'Windows'\n    } else if (linux) {\n      result.linux = t\n      result.osname = 'Linux'\n    }\n\n    function getWindowsVersion (s) {\n      switch (s) {\n        case 'NT': return 'NT'\n        case 'XP': return 'XP'\n        case 'NT 5.0': return '2000'\n        case 'NT 5.1': return 'XP'\n        case 'NT 5.2': return '2003'\n        case 'NT 6.0': return 'Vista'\n        case 'NT 6.1': return '7'\n        case 'NT 6.2': return '8'\n        case 'NT 6.3': return '8.1'\n        case 'NT 10.0': return '10'\n        default: return undefined\n      }\n    }\n\n    // OS version extraction\n    var osVersion = '';\n    if (result.windows) {\n      osVersion = getWindowsVersion(getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i))\n    } else if (result.windowsphone) {\n      osVersion = getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i);\n    } else if (result.mac) {\n      osVersion = getFirstMatch(/Mac OS X (\\d+([_\\.\\s]\\d+)*)/i);\n      osVersion = osVersion.replace(/[_\\s]/g, '.');\n    } else if (iosdevice) {\n      osVersion = getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i);\n      osVersion = osVersion.replace(/[_\\s]/g, '.');\n    } else if (android) {\n      osVersion = getFirstMatch(/android[ \\/-](\\d+(\\.\\d+)*)/i);\n    } else if (result.webos) {\n      osVersion = getFirstMatch(/(?:web|hpw)os\\/(\\d+(\\.\\d+)*)/i);\n    } else if (result.blackberry) {\n      osVersion = getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i);\n    } else if (result.bada) {\n      osVersion = getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i);\n    } else if (result.tizen) {\n      osVersion = getFirstMatch(/tizen[\\/\\s](\\d+(\\.\\d+)*)/i);\n    }\n    if (osVersion) {\n      result.osversion = osVersion;\n    }\n\n    // device type extraction\n    var osMajorVersion = !result.windows && osVersion.split('.')[0];\n    if (\n         tablet\n      || nexusTablet\n      || iosdevice == 'ipad'\n      || (android && (osMajorVersion == 3 || (osMajorVersion >= 4 && !mobile)))\n      || result.silk\n    ) {\n      result.tablet = t\n    } else if (\n         mobile\n      || iosdevice == 'iphone'\n      || iosdevice == 'ipod'\n      || android\n      || nexusMobile\n      || result.blackberry\n      || result.webos\n      || result.bada\n    ) {\n      result.mobile = t\n    }\n\n    // Graded Browser Support\n    // http://developer.yahoo.com/yui/articles/gbs\n    if (result.msedge ||\n        (result.msie && result.version >= 10) ||\n        (result.yandexbrowser && result.version >= 15) ||\n\t\t    (result.vivaldi && result.version >= 1.0) ||\n        (result.chrome && result.version >= 20) ||\n        (result.samsungBrowser && result.version >= 4) ||\n        (result.firefox && result.version >= 20.0) ||\n        (result.safari && result.version >= 6) ||\n        (result.opera && result.version >= 10.0) ||\n        (result.ios && result.osversion && result.osversion.split(\".\")[0] >= 6) ||\n        (result.blackberry && result.version >= 10.1)\n        || (result.chromium && result.version >= 20)\n        ) {\n      result.a = t;\n    }\n    else if ((result.msie && result.version < 10) ||\n        (result.chrome && result.version < 20) ||\n        (result.firefox && result.version < 20.0) ||\n        (result.safari && result.version < 6) ||\n        (result.opera && result.version < 10.0) ||\n        (result.ios && result.osversion && result.osversion.split(\".\")[0] < 6)\n        || (result.chromium && result.version < 20)\n        ) {\n      result.c = t\n    } else result.x = t\n\n    return result\n  }\n\n  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '')\n\n  bowser.test = function (browserList) {\n    for (var i = 0; i < browserList.length; ++i) {\n      var browserItem = browserList[i];\n      if (typeof browserItem=== 'string') {\n        if (browserItem in bowser) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get version precisions count\n   *\n   * @example\n   *   getVersionPrecision(\"1.10.3\") // 3\n   *\n   * @param  {string} version\n   * @return {number}\n   */\n  function getVersionPrecision(version) {\n    return version.split(\".\").length;\n  }\n\n  /**\n   * Array::map polyfill\n   *\n   * @param  {Array} arr\n   * @param  {Function} iterator\n   * @return {Array}\n   */\n  function map(arr, iterator) {\n    var result = [], i;\n    if (Array.prototype.map) {\n      return Array.prototype.map.call(arr, iterator);\n    }\n    for (i = 0; i < arr.length; i++) {\n      result.push(iterator(arr[i]));\n    }\n    return result;\n  }\n\n  /**\n   * Calculate browser version weight\n   *\n   * @example\n   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1\n   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1\n   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0\n   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1\n   *\n   * @param  {Array<String>} versions versions to compare\n   * @return {Number} comparison result\n   */\n  function compareVersions(versions) {\n    // 1) get common precision for both versions, for example for \"10.0\" and \"9\" it should be 2\n    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));\n    var chunks = map(versions, function (version) {\n      var delta = precision - getVersionPrecision(version);\n\n      // 2) \"9\" -> \"9.0\" (for precision = 2)\n      version = version + new Array(delta + 1).join(\".0\");\n\n      // 3) \"9.0\" -> [\"000000000\"\", \"000000009\"]\n      return map(version.split(\".\"), function (chunk) {\n        return new Array(20 - chunk.length).join(\"0\") + chunk;\n      }).reverse();\n    });\n\n    // iterate in reverse order by reversed chunks array\n    while (--precision >= 0) {\n      // 4) compare: \"000000009\" > \"000000010\" = false (but \"9\" > \"10\" = true)\n      if (chunks[0][precision] > chunks[1][precision]) {\n        return 1;\n      }\n      else if (chunks[0][precision] === chunks[1][precision]) {\n        if (precision === 0) {\n          // all version chunks are same\n          return 0;\n        }\n      }\n      else {\n        return -1;\n      }\n    }\n  }\n\n  /**\n   * Check if browser is unsupported\n   *\n   * @example\n   *   bowser.isUnsupportedBrowser({\n   *     msie: \"10\",\n   *     firefox: \"23\",\n   *     chrome: \"29\",\n   *     safari: \"5.1\",\n   *     opera: \"16\",\n   *     phantom: \"534\"\n   *   });\n   *\n   * @param  {Object}  minVersions map of minimal version to browser\n   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map\n   * @param  {String}  [ua] user agent string\n   * @return {Boolean}\n   */\n  function isUnsupportedBrowser(minVersions, strictMode, ua) {\n    var _bowser = bowser;\n\n    // make strictMode param optional with ua param usage\n    if (typeof strictMode === 'string') {\n      ua = strictMode;\n      strictMode = void(0);\n    }\n\n    if (strictMode === void(0)) {\n      strictMode = false;\n    }\n    if (ua) {\n      _bowser = detect(ua);\n    }\n\n    var version = \"\" + _bowser.version;\n    for (var browser in minVersions) {\n      if (minVersions.hasOwnProperty(browser)) {\n        if (_bowser[browser]) {\n          if (typeof minVersions[browser] !== 'string') {\n            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));\n          }\n\n          // browser version and min supported version.\n          return compareVersions([version, minVersions[browser]]) < 0;\n        }\n      }\n    }\n\n    return strictMode; // not found\n  }\n\n  /**\n   * Check if browser is supported\n   *\n   * @param  {Object} minVersions map of minimal version to browser\n   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map\n   * @param  {String}  [ua] user agent string\n   * @return {Boolean}\n   */\n  function check(minVersions, strictMode, ua) {\n    return !isUnsupportedBrowser(minVersions, strictMode, ua);\n  }\n\n  bowser.isUnsupportedBrowser = isUnsupportedBrowser;\n  bowser.compareVersions = compareVersions;\n  bowser.check = check;\n\n  /*\n   * Set our detect method to the main bowser object so we can\n   * reuse it to test other user agents.\n   * This is needed to implement future tests.\n   */\n  bowser._detect = detect;\n\n  /*\n   * Set our detect public method to the main bowser object\n   * This is needed to implement bowser in server side\n   */\n  bowser.detect = detect;\n  return bowser\n});\n","import SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\n\n            // iterate over ssrc lines\n            mediaSsrc.lines.forEach(line => {\n                const idx = line.indexOf(' ');\n                const kv = line.substr(idx + 1);\n\n                modify.c('parameter');\n                if (kv.indexOf(':') === -1) {\n                    modify.attrs({ name: kv });\n                } else {\n                    const nv = kv.split(':', 2);\n                    const name = nv[0];\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\n\n                    modify.attrs({ name });\n                    modify.attrs({ value });\n                }\n                modify.up(); // end of parameter\n            });\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n\n    const self = this;\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            if (audioLevel !== self.audioLevel) {\n                self.audioLevel = animateLevel(audioLevel, self.audioLevel);\n                self.callback(self.audioLevel);\n            }\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Adds onended/oninactive handler to a MediaStream.\n * @param mediaStream a MediaStream to attach onended/oninactive handler\n * @param handler the handler\n */\nfunction addMediaStreamInactiveHandler(mediaStream, handler) {\n    mediaStream.oninactive = handler;\n}\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            // FIXME Why only video tracks?\n            for (const track of this.stream.getVideoTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            addMediaStreamInactiveHandler(this.stream, undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                addMediaStreamInactiveHandler(\n                    this.stream, this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        if (this.audioLevel !== audioLevel) {\n            this.audioLevel = audioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                audioLevel,\n                tpc);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","\n\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport JitsiTrack from './JitsiTrack';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport browser from '../browser';\nimport RTCUtils from './RTCUtils';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        if (browser.usesNewGumFlow()) {\n            // Get the resolution from the track itself because it cannot be\n            // certain which resolution webrtc has fallen back to using.\n            this.resolution = track.getSettings().height;\n\n            // Cache the constraints of the track in case of any this track\n            // model needs to call getUserMedia again, such as when unmuting.\n            this._constraints = track.getConstraints();\n        } else {\n            // FIXME Currently, Firefox is ignoring our constraints about\n            // resolutions so we do not store it, to avoid wrong reporting of\n            // local track resolution.\n            this.resolution = browser.isFirefox() ? null : resolution;\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        /**\n         * On mute event we are waiting for 3s to check if the stream is going\n         * to be still muted before firing the event for camera issue detected\n         * (NO_DATA_FROM_SOURCE).\n         */\n        this._noDataFromSourceTimeout = null;\n\n        this._onDeviceListWillChange = devices => {\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            // Mark track as ended for those browsers that do not support\n            // \"readyState\" property. We do not touch tracks created with\n            // default device ID \"\".\n            if (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId)) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            const _onNoDataFromSourceError\n                = this._onNoDataFromSourceError.bind(this);\n\n            this._setHandler('track_mute', () => {\n                if (this._checkForCameraIssues()) {\n                    const now = window.performance.now();\n\n                    this._noDataFromSourceTimeout\n                        = setTimeout(_onNoDataFromSourceError, 5000);\n                    this._setHandler('track_unmute', () => {\n                        this._clearNoDataFromSourceMuteResources();\n                        Statistics.sendAnalyticsAndLog(\n                            TRACK_UNMUTED,\n                            {\n                                'media_type': this.getType(),\n                                'track_type': 'local',\n                                value: window.performance.now() - now\n                            });\n                    });\n                }\n            });\n            this._setHandler('track_ended', _onNoDataFromSourceError);\n        }\n    }\n\n    /**\n     * Clears all timeouts and handlers set on MediaStreamTrack mute event.\n     * FIXME: Change the name of the method with better one.\n     */\n    _clearNoDataFromSourceMuteResources() {\n        if (this._noDataFromSourceTimeout) {\n            clearTimeout(this._noDataFromSourceTimeout);\n            this._noDataFromSourceTimeout = null;\n        }\n        this._setHandler('track_unmute', undefined);\n    }\n\n    /**\n     * Called when potential camera issue is detected. Clears the handlers and\n     * timeouts set on MediaStreamTrack muted event. Verifies that the camera\n     * issue persists and fires NO_DATA_FROM_SOURCE event.\n     */\n    _onNoDataFromSourceError() {\n        this._clearNoDataFromSourceMuteResources();\n        if (this._checkForCameraIssues()) {\n            this._fireNoDataFromSourceEvent();\n        }\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        this.emit(NO_DATA_FROM_SOURCE);\n\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType()));\n        const log = { name: NO_DATA_FROM_SOURCE };\n\n        if (this.isAudioTrack()) {\n            log.isReceivingData = this._isReceivingData();\n        }\n        Statistics.sendLog(JSON.stringify(log));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n            if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            if (browser.usesNewGumFlow()) {\n                promise\n                    = RTCUtils.newObtainAudioAndVideoPermissions(Object.assign(\n                        {},\n                        streamOptions,\n                        { constraints: { video: this._constraints } }));\n            } else {\n                if (this.resolution) {\n                    streamOptions.resolution = this.resolution;\n                }\n\n                promise\n                    = RTCUtils.obtainAudioAndVideoPermissions(streamOptions);\n            }\n\n            promise.then(streamsInfo => {\n                const mediaType = this.getType();\n                const streamInfo\n                    = browser.usesNewGumFlow()\n                        ? streamsInfo.find(\n                            info => info.track.kind === mediaType)\n                        : streamsInfo.find(\n                            info => info.mediaType === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => this._sendMuteStatus(muted))\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {Promise}\n     */\n    _sendMuteStatus(mute) {\n        if (!this.conference || !this.conference.room) {\n            return Promise.resolve();\n        }\n\n        return new Promise(resolve => {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute, resolve);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        if (this.conference) {\n            promise = this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${this._bytesSent}`);\n\n                    // we are not receiving anything from the microphone\n                    this._fireNoDataFromSourceEvent();\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            let trackSettings;\n\n            try {\n                trackSettings = this.track.getSettings();\n            } catch (e) {\n                // XXX React-native-webrtc, for example, defines\n                // MediaStreamTrack#getSettings() but the implementation throws\n                // a \"Not implemented\" Error.\n            }\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Detects camera issues, i.e. returns true if we expect this track to be\n     * receiving data from its source, but it isn't receiving data.\n     *\n     * @returns {boolean} true if an issue is detected and false otherwise\n     */\n    _checkForCameraIssues() {\n        if (!this.isVideoTrack()\n                || this._stopStreamInProgress\n                || this.videoType === VideoType.DESKTOP) {\n            return false;\n        }\n\n        return !this._isReceivingData();\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    _isReceivingData() {\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n        return this.stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as MediaType from './service/RTC/MediaType';\nimport browser from './modules/browser';\nimport RTC from './modules/RTC/RTC';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport Statistics from './modules/statistics/statistics';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._grantedPermissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n        RTC.addListener(\n            RTCEvents.GRANTED_PERMISSIONS,\n            grantedPermissions =>\n                this._handleGrantedPermissions(grantedPermissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and\n        // 'microphone' permissions are implemented. (Testing for at least one\n        // of them seems sufficient).\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(() => resolve(true), () => resolve(false));\n        });\n    }\n\n    /**\n     * Updated the local granted permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} grantedPermissions - Array with the permissions\n     * which were granted.\n     */\n    _handleGrantedPermissions(grantedPermissions) {\n        this._grantedPermissions = {\n            ...this._grantedPermissions,\n            ...grantedPermissions\n        };\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._grantedPermissions) {\n                resolve(this._grantedPermissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        // The status attribute is deprecated, and state\n                        // should be used instead, but check both for now\n                        // for backwards compatibility.\n                        const grantStatus = permissionStatus.state\n                            || permissionStatus.status;\n\n                        return grantStatus === PERMISSION_GRANTED_STATUS;\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio\n     * from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !browser.isFirefox();\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices && availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // Defer to the browser capabilities to allow exposure of the api to the\n        // consumer but prevent other files from having to import\n        // JitsiMediaDevices.\n        return browser.supportsVideo();\n    }\n}\n\nexport default new JitsiMediaDevices();\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n"," /* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n          ? '/' + headerExtension.direction\n          : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function(ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n      'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  // Search in session part, too.\n  lines = lines.concat(SDPUtils.splitLines(sessionpart));\n  var iceParameters = {\n    usernameFragment: lines.filter(function(line) {\n      return line.indexOf('a=ice-ufrag:') === 0;\n    })[0].substr(12),\n    password: lines.filter(function(line) {\n      return line.indexOf('a=ice-pwd:') === 0;\n    })[0].substr(10)\n  };\n  return iceParameters;\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n          mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n          mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function(extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n  .map(function(line) {\n    return SDPUtils.parseSsrcMedia(line);\n  })\n  .filter(function(parts) {\n    return parts.attribute === 'cname';\n  });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n  .map(function(line) {\n    var parts = line.substr(17).split(' ');\n    return parts.map(function(part) {\n      return parseInt(part, 10);\n    });\n  });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n      .map(function(line) {\n        return SDPUtils.parseSsrcMedia(line);\n      })\n      .filter(function(obj) {\n        return obj.attribute === 'cname';\n      })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n  .map(function(line) {\n    return SDPUtils.parseSsrcMedia(line);\n  })\n  .filter(function(msidParts) {\n    return msidParts.attribute === 'msid';\n  });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = createEmptyStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * Creates a empty MediaStream object which can be used\n * to add MediaStreamTracks to\n * @returns MediaStream\n */\nfunction createEmptyStream() {\n    if (typeof MediaStream !== 'undefined') {\n        return new MediaStream();\n    }\n    throw new Error('cannot create a clean mediaStream');\n}\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","import {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    this.xmpp.disconnect(...args);\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    return this.xmpp.caps.addFeature(feature, submit);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    return this.xmpp.caps.removeFeature(feature, submit);\n};\n","/* global __filename, $, Promise */\nimport { Strophe } from 'strophe.js';\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport JitsiDTMFManager from './modules/DTMF/JitsiDTMFManager';\nimport P2PDominantSpeakerDetection from './modules/P2PDominantSpeakerDetection';\nimport RTC from './modules/RTC/RTC';\nimport TalkMutedDetection from './modules/TalkMutedDetection';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedNotification\n    from './modules/connectivity/IceFailedNotification';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport RttMonitor from './modules/rttmonitor/rttmonitor';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport { JITSI_MEET_MUC_TYPE } from './modules/xmpp/xmpp';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @param {*} [options.config.openBridgeChannel] Which kind of communication to\n * open with the videobridge. Values can be \"datachannel\", \"websocket\", true\n * (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false\n * (don't open any channel).\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    // Override connection and xmpp properties (Useful if the connection\n    // reloaded)\n    if (options.connection) {\n        this.connection = options.connection;\n        this.xmpp = this.connection.xmpp;\n\n        // Setup XMPP events only if we have new connection object.\n        this.eventManager.setupXMPPListeners();\n    }\n\n    const { config } = this.options;\n\n    this.room = this.xmpp.createRoom(this.options.name, config);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this.rttMonitor = new RttMonitor(config.rttMonitor || {});\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send a ping request or response.');\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // Both these options are not public API, leaving it here only\n                // as an entry point through config for tuning up purposes.\n                // Default values should be adjusted as soon as optimal values\n                // are discovered.\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    if (!this.statistics) {\n        // XXX The property location on the global variable window is not\n        // defined in all execution environments (e.g. react-native). While\n        // jitsi-meet may polyfill it when executing on react-native, it is\n        // better for the cross-platform support to not require window.location\n        // especially when there is a worthy alternative (as demonstrated\n        // bellow).\n        const windowLocation = window.location;\n\n        let callStatsAliasName = this.myUserId();\n\n        if (config.enableDisplayNameInStats && config.displayName) {\n            callStatsAliasName = config.displayName;\n        }\n\n        this.statistics = new Statistics(this.xmpp, {\n            callStatsAliasName,\n            callStatsConfIDNamespace:\n                config.callStatsConfIDNamespace\n                    || (windowLocation && windowLocation.hostname)\n                    || (config.hosts && config.hosts.domain),\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            roomName: this.options.name,\n            swapUserNameAndAlias: config.enableStatsID,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod\n        });\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    if (config.enableTalkWhileMuted) {\n        // eslint-disable-next-line no-new\n        new TalkMutedDetection(\n            this,\n            () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n    }\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n */\nJitsiConference.prototype.join = function(password) {\n    if (this.room) {\n        this.room.join(password).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(...args) {\n    return authenticateAndUpgradeRole.apply(this, args);\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this.rttMonitor) {\n        this.rttMonitor.stop();\n        this.rttMonitor = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command) {\n    if (this.room) {\n        this.room.removePresenceListener(command);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addToPresence(name, values);\n        this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        // remove previously set nickname\n        this.room.removeFromPresence('nick');\n\n        this.room.addToPresence('nick', {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        });\n        this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (track.isVideoTrack()) {\n        // Ensure there's exactly 1 local video track in the conference.\n        const localVideoTrack = this.rtc.getLocalVideoTrack();\n\n        if (localVideoTrack) {\n            // Don't be excessively harsh and severe if the API client happens\n            // to attempt to add the same local video track twice.\n            if (track === localVideoTrack) {\n                return Promise.resolve(track);\n            }\n\n            return Promise.reject(new Error(\n                'cannot add second video track to the conference'));\n\n        }\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false);\n    }\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track);\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrack) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrack, newTrack)\n        .then(() => {\n            if (oldTrack) {\n                this.onLocalTrackRemoved(oldTrack);\n            }\n            if (newTrack) {\n                // Now handle the addition of the newTrack at the\n                // JitsiConference level\n                this._setupNewTrack(newTrack);\n            }\n\n            return Promise.resolve();\n        }, error => Promise.reject(new Error(error)));\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        this.removeCommand('videoType');\n        this.sendCommand('videoType', {\n            value: newTrack.videoType,\n            attributes: {\n                xmlns: 'http://jitsi.org/jitmeet/video'\n            }\n        });\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no P2P Jingle session started yet');\n    }\n\n    return Promise.all(addAsUnmutePromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(\n            this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(\n            this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.all(removeAsMutePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject();\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.rtc.selectEndpoints(participantIds);\n};\n\n/**\n * Elects the participant with the given id to be the pinned participant in\n * order to always receive video for this participant (even when last n is\n * enabled).\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n */\nJitsiConference.prototype.pinParticipant = function(participantId) {\n    this.rtc.pinEndpoint(participantId);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.rtc.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.rtc.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.keys(this.participants).map(function(key) {\n        return this.participants[key];\n    }, this);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid());\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status);\n\n    participant._role = role;\n    participant._botType = botType;\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n    this.xmpp.caps.getFeatures(jid)\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n        },\n        error => logger.warn(`Failed to discover features of ${jid}`, error));\n\n    this._maybeStartOrStopP2P();\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant._botType = botType;\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant._botType) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    const removedTracks = this.rtc.removeRemoteTracks(id);\n\n    removedTracks.forEach(\n        track =>\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track));\n\n    // there can be no participant in case the member that left is focus\n    if (participant) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    this._maybeStartOrStopP2P(true /* triggered by user left event */);\n    this._maybeClearSITimeout();\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n\n    // Maybe start P2P\n    this._maybeStartOrStopP2P();\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant._role = role;\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n        this.p2pJingleSession.setAnswer(answer);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n    const role = this.room.getMemberRole(jingleSession.remoteJid);\n\n    if (role !== 'moderator') {\n        rejectReason = {\n            reason: 'security-error',\n            reasonDescription: 'Only focus can start new sessions',\n            errorMsg: 'Rejecting session-initiate from non-focus and'\n                        + `non-moderator user: ${jingleSession.remoteJid}`\n        };\n    } else if (!browser.supportsP2P()) {\n        rejectReason = {\n            reason: 'unsupported-applications',\n            reasonDescription: 'P2P not supported',\n            errorMsg: 'This client does not support P2P connections'\n        };\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n    try {\n        jingleSession.initialize(this.room, this.rtc, this.options.config);\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    // Add local tracks to the session\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            this.getLocalTracks()\n        );\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    let bridgeChannelType;\n\n    switch (this.options.config.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        bridgeChannelType = 'datachannel';\n        break;\n    case 'websocket':\n        bridgeChannelType = 'websocket';\n        break;\n    }\n\n    if (bridgeChannelType === 'datachannel'\n        && !browser.supportsDataChannels()) {\n        bridgeChannelType = 'websocket';\n    }\n\n    if (bridgeChannelType === 'datachannel') {\n        this.rtc.initializeBridgeChannel(pc, null);\n    } else if (bridgeChannelType === 'websocket' && wsUrl) {\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    if (!this.dtmfManager) {\n        const peerConnection = this.getActivePeerConnection();\n\n        if (!peerConnection) {\n            logger.warn('cannot sendTones: no peer connection');\n\n            return;\n        }\n\n        const localAudio = this.getLocalAudioTrack();\n\n        if (!localAudio) {\n            logger.warn('cannot sendTones: no local audio stream');\n\n            return;\n        }\n        this.dtmfManager = new JitsiDTMFManager(localAudio, peerConnection);\n    }\n\n    this.dtmfManager.sendTones(tones, duration, pause);\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection;\n    }\n\n    return this.jvbJingleSession ? this.jvbJingleSession.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.removeFromPresence('startmuted');\n    this.room.addToPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    });\n    this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConference.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\n * focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype._isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        if (this.xmpp.isPingSupported()) {\n            this._delayedIceFailed = new IceFailedNotification(this);\n            this._delayedIceFailed.start(session);\n        } else {\n            // Let Jicofo know that the JVB's ICE connection has failed\n            logger.info('PING not supported - sending ICE failed immediately');\n            session.sendIceFailedNotification();\n        }\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    if (this.options.config.enableStatsID) {\n        const participant = this.participants[remoteID];\n\n        if (participant) {\n            remoteID = participant.getStatsID() || remoteID;\n        }\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms',\n            'octo-enabled'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.rtc.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    if (this.options.config.enableStatsID) {\n        const participant = this.participants[remoteID];\n\n        if (participant) {\n            remoteID = participant.getStatsID() || remoteID;\n        }\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    // NOTE one may consider to start P2P with the local tracks detached,\n    // but no data will be sent until ICE succeeds anyway. And we switch\n    // immediately once the P2P ICE connects.\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!browser.supportsP2P()\n        || !this.isP2PEnabled()\n        || this.isP2PTestModeEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const isModerator = this.isModerator();\n    const hasBotPeer\n        = peers.find(p => p._botType === 'poltergeist') !== undefined;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(\n        `P2P? isModerator: ${isModerator}, peerCount: ${\n            peerCount}, hasBotPeer: ${hasBotPeer} => ${\n            shouldBeInP2P}`);\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (isModerator && !this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n        // Everyone is a moderator ?\n        if (isModerator && peer.getRole() === 'moderator') {\n            const myId = this.myUserId();\n            const peersId = peer.getId();\n\n            if (myId > peersId) {\n                logger.debug(\n                    'Everyone\\'s a moderator - '\n                    + 'the other peer should start P2P', myId, peersId);\n\n                return;\n            } else if (myId === peersId) {\n                logger.error('The same IDs ? ', myId, peersId);\n\n                return;\n            }\n        }\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(\n        maxFrameHeight) {\n    this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/* global __filename */\nimport { Strophe } from 'strophe.js';\n\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport Statistics from './modules/statistics/statistics';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        () => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent());\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                },\n                () =>\n                    logger.warn(\n                        'Error while audio muting due to focus request'));\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.JINGLE_FATAL_ERROR,\n        (session, error) => {\n            if (!session.isP2P) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.JINGLE_FATAL_ERROR, error);\n            }\n        });\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RECORDER_STATE_CHANGED,\n        JitsiConferenceEvents.RECORDER_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.addListener(\n        XMPPEvents.CONFERENCE_SETUP_FAILED,\n        (jingleSession, error) => {\n            if (!jingleSession.isP2P) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.SETUP_FAILED,\n                    error);\n            }\n        });\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.KICKED,\n        JitsiConferenceEvents.KICKED);\n    chatRoom.addListener(XMPPEvents.KICKED,\n        () => {\n            conference.leave();\n        });\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\n                    + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        id => {\n            if (conference.lastDominantSpeaker !== id && conference.room) {\n                conference.lastDominantSpeaker = id;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, id);\n            }\n            if (conference.statistics && conference.myUserId() === id) {\n                // We are the new dominant speaker.\n                conference.statistics.sendDominantSpeakerEvent(\n                    conference.room.roomjid);\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    conference.xmpp.caps.removeListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]);\n    delete this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED];\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    const featuresChangedListener = from => {\n        const participant\n            = conference.getParticipantById(\n            Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED,\n                participant);\n        }\n    };\n\n    conference.xmpp.caps.addListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        featuresChangedListener);\n    this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]\n        = featuresChangedListener;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n    conference.statistics.addByteSentStatsListener((tpc, stats) => {\n        conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n            const ssrc = tpc.getLocalSSRC(track);\n\n            if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                return;\n            }\n\n            track._onByteSentStatsReceived(tpc, stats[ssrc]);\n        });\n    });\n};\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","import {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'callstats_name': Settings.callStatsUserName,\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","import { getLogger } from 'jitsi-meet-logger';\nimport { BrowserDetection } from 'js-utils';\n\nconst logger = getLogger(__filename);\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\n     * off the camera device).\n     * @return {boolean} <tt>true</tt> if the current browser supports this\n     * strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return !(\n            this.isFirefox()\n            || this.isEdge()\n            || this.isReactNative()\n            || this.isSafariWithWebrtc()\n        );\n    }\n\n    /**\n     * Check whether or not the current browser support peer to peer connections\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\n     * otherwise.\n     */\n    supportsP2P() {\n        return !this.isEdge() && !this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, that is, it's either\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\n     * Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\n     *   such as Brave and Vivaldi\n     * - Browsers which are NOT Chrome but use it as their engine, and have\n     *   custom detection code: Opera, Electron and NW.JS\n     */\n    isChromiumBased() {\n        return this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera();\n    }\n\n    /**\n     * Checks if current browser is a Safari and a version of Safari that\n     * supports native webrtc.\n     *\n     * @returns {boolean}\n     */\n    isSafariWithWebrtc() {\n        return this.isSafari()\n            && !this.isVersionLessThan('11');\n    }\n\n    /**\n     * Checks if current browser is a Safari and a version of Safari that\n     * supports VP8.\n     *\n     * @returns {boolean}\n     */\n    isSafariWithVP8() {\n        return this.isSafari()\n            && !this.isVersionLessThan('12.1');\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return this.isChromiumBased()\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative()\n            || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isEdge()\n            && !this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Checks if the current browser supports WebRTC datachannels.\n     * @return {boolean}\n     */\n    supportsDataChannels() {\n        // NOTE: Edge does not yet implement DataChannel.\n        return !this.isEdge();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports the MediaStream constructor as\n     * defined by https://www.w3.org/TR/mediacapture-streams/#constructors. In\n     * cases where there is no support, it maybe be necessary to get audio\n     * and video in two distinct GUM calls.\n     * @return {boolean}\n     */\n    supportsMediaStreamConstructor() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser supports RTP statictics collecting.\n     * Required by {@link RTPStatsCollector}.\n     *\n     * @returns {boolean} true if they are supported, false otherwise.\n     */\n    supportsRtpStatistics() {\n        return this.isChromiumBased()\n            || this.isEdge()\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative()\n            || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox() && !this.isEdge();\n    }\n\n    /**\n     * Checks whether the browser supports RTPSender.\n     *\n     * @returns {boolean}\n     */\n    supportsRtpSender() {\n        return this.isFirefox() || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks whether the browser supports RTX.\n     *\n     * @returns {boolean}\n     */\n    supportsRtx() {\n        return !this.isFirefox() && !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Whether jitsi-meet supports simulcast on the current browser.\n     * @returns {boolean}\n     */\n    supportsSimulcast() {\n        return this.isChromiumBased() || this.isFirefox()\n            || this.isSafariWithVP8() || this.isReactNative();\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // FIXME: Check if we can use supportsVideoOut and supportsVideoIn. I\n        // leave the old implementation here in order not to brake something.\n\n        // Older versions of Safari using webrtc/adapter do not support video\n        // due in part to Safari only supporting H264 and the bridge sending VP8\n        // Newer Safari support VP8 and other WebRTC features.\n        return !this.isSafariWithWebrtc()\n            || (this.isSafariWithVP8() && this.usesPlanB());\n    }\n\n    /**\n     * Checks if the browser uses plan B.\n     *\n     * @returns {boolean}\n     */\n    usesPlanB() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the browser uses unified plan.\n     *\n     * @returns {boolean}\n     */\n    usesUnifiedPlan() {\n        if (this.isFirefox()) {\n            return true;\n        }\n\n        if (this.isSafariWithVP8()) {\n            // eslint-disable-next-line max-len\n            // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n            // eslint-disable-next-line no-undef\n            return Object.keys(RTCRtpTransceiver.prototype)\n                   .indexOf('currentDirection') > -1;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns whether or not the current browser should be using the new\n     * getUserMedia flow, which utilizes the adapter shim. This method should\n     * be temporary and used while migrating all browsers to use adapter and\n     * the new getUserMedia.\n     *\n     * @returns {boolean}\n     */\n    usesNewGumFlow() {\n        const REQUIRED_CHROME_VERSION = 61;\n\n        if (this.isChrome()) {\n            return !this.isVersionLessThan(REQUIRED_CHROME_VERSION);\n        }\n\n        if (this.isFirefox() || this.isSafariWithWebrtc()) {\n            return true;\n        }\n\n        if (this.isChromiumBased()) {\n            return this._getChromiumBasedVersion() >= REQUIRED_CHROME_VERSION;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\n     * getUserMedia flow and Edge.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return this.usesNewGumFlow() || this.isEdge();\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\n     * https://webrtc.org/web-apis/chrome/unified-plan/\n     *\n     * @returns {boolean}\n     */\n    supportsSdpSemantics() {\n        return this.isChromiumBased() && this._getChromiumBasedVersion() >= 65;\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","import browser from '../browser';\nimport { browsers } from 'js-utils';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport * as MediaType from '../../service/RTC/MediaType';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The lib-jitsi-meet browser-agnostic names of the browser-specific keys\n * reported by RTCPeerConnection#getStats mapped by browser.\n */\nconst KEYS_BY_BROWSER_TYPE = {};\n\nKEYS_BY_BROWSER_TYPE[browsers.FIREFOX] = {\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsLost': 'packetsLost',\n    'packetsSent': 'packetsSent',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'framerateMean': 'framerateMean',\n    'ip': 'ipAddress',\n    'port': 'portNumber',\n    'protocol': 'transport'\n};\nKEYS_BY_BROWSER_TYPE[browsers.CHROME] = {\n    'receiveBandwidth': 'googAvailableReceiveBandwidth',\n    'sendBandwidth': 'googAvailableSendBandwidth',\n    'remoteAddress': 'googRemoteAddress',\n    'transportType': 'googTransportType',\n    'localAddress': 'googLocalAddress',\n    'activeConnection': 'googActiveConnection',\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsSent': 'packetsSent',\n    'packetsLost': 'packetsLost',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'googFrameHeightReceived': 'googFrameHeightReceived',\n    'googFrameWidthReceived': 'googFrameWidthReceived',\n    'googFrameHeightSent': 'googFrameHeightSent',\n    'googFrameWidthSent': 'googFrameWidthSent',\n    'googFrameRateReceived': 'googFrameRateReceived',\n    'googFrameRateSent': 'googFrameRateSent',\n    'audioInputLevel': 'audioInputLevel',\n    'audioOutputLevel': 'audioOutputLevel',\n    'currentRoundTripTime': 'googRtt',\n    'remoteCandidateType': 'googRemoteCandidateType',\n    'localCandidateType': 'googLocalCandidateType',\n    'ip': 'ip',\n    'port': 'port',\n    'protocol': 'protocol'\n};\nKEYS_BY_BROWSER_TYPE[browsers.EDGE] = {\n    'sendBandwidth': 'googAvailableSendBandwidth',\n    'remoteAddress': 'remoteAddress',\n    'transportType': 'protocol',\n    'localAddress': 'localAddress',\n    'activeConnection': 'activeConnection',\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsSent': 'packetsSent',\n    'packetsLost': 'packetsLost',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'googFrameHeightReceived': 'frameHeight',\n    'googFrameWidthReceived': 'frameWidth',\n    'googFrameHeightSent': 'frameHeight',\n    'googFrameWidthSent': 'frameWidth',\n    'googFrameRateReceived': 'framesPerSecond',\n    'googFrameRateSent': 'framesPerSecond',\n    'audioInputLevel': 'audioLevel',\n    'audioOutputLevel': 'audioLevel',\n    'currentRoundTripTime': 'roundTripTime'\n};\nKEYS_BY_BROWSER_TYPE[browsers.OPERA]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.NWJS]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.ELECTRON]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.SAFARI]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.REACT_NATIVE]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(\n        peerconnection,\n        audioLevelsInterval,\n        statsInterval,\n        eventEmitter) {\n    // StatsCollector depends entirely on the format of the reports returned by\n    // RTCPeerConnection#getStats. Given that the value of\n    // browser#getName() is very unlikely to change at runtime, it\n    // makes sense to discover whether StatsCollector supports the executing\n    // browser as soon as possible. Otherwise, (1) getStatValue would have to\n    // needlessly check a \"static\" condition multiple times very very often and\n    // (2) the lack of support for the executing browser would be discovered and\n    // reported multiple times very very often too late in the execution in some\n    // totally unrelated callback.\n    /**\n     * The browser type supported by this StatsCollector. In other words, the\n     * type of the browser which initialized this StatsCollector\n     * instance.\n     * @private\n     */\n    this._browserType = browser.getName();\n    const keys = KEYS_BY_BROWSER_TYPE[this._browserType];\n\n    if (!keys) {\n        // eslint-disable-next-line no-throw-literal\n        throw `The browser type '${this._browserType}' isn't supported!`;\n    }\n\n    /**\n     * Whether to use the Promise-based getStats API or not.\n     * @type {boolean}\n     */\n    this._usesPromiseGetStats\n        = browser.isSafariWithWebrtc() || browser.isFirefox();\n\n    /**\n     * The function which is to be used to retrieve the value associated in a\n     * report returned by RTCPeerConnection#getStats with a lib-jitsi-meet\n     * browser-agnostic name/key.\n     *\n     * @function\n     * @private\n     */\n    this._getStatValue\n        = this._usesPromiseGetStats\n            ? this._defineNewGetStatValueMethod(keys)\n            : this._defineGetStatValueMethod(keys);\n\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/* eslint-enable max-params */\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    const self = this;\n\n    if (startAudioLevelStats) {\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                // Interval updates\n                self.peerconnection.getStats(\n                    report => {\n                        let results = null;\n\n                        if (!report || !report.result\n                            || typeof report.result !== 'function') {\n                            results = report;\n                        } else {\n                            results = report.result();\n                        }\n                        self.currentAudioLevelsReport = results;\n                        if (this._usesPromiseGetStats) {\n                            self.processNewAudioLevelReport();\n                        } else {\n                            self.processAudioLevelReport();\n                        }\n\n                        self.baselineAudioLevelsReport\n                            = self.currentAudioLevelsReport;\n                    },\n                    error => self.errorCallback(error)\n                );\n            },\n            self.audioLevelsIntervalMilis\n        );\n    }\n\n    if (browser.supportsRtpStatistics()) {\n        this.statsIntervalId = setInterval(\n            () => {\n                // Interval updates\n                self.peerconnection.getStats(\n                    report => {\n                        let results = null;\n\n                        if (!report || !report.result\n                            || typeof report.result !== 'function') {\n                            // firefox\n                            results = report;\n                        } else {\n                            // chrome\n                            results = report.result();\n                        }\n\n                        self.currentStatsReport = results;\n                        try {\n                            if (this._usesPromiseGetStats) {\n                                self.processNewStatsReport();\n                            } else {\n                                self.processStatsReport();\n                            }\n                        } catch (e) {\n                            GlobalOnErrorHandler.callErrorHandler(e);\n                            logger.error(`Unsupported key:${e}`, e);\n                        }\n\n                        self.previousStatsReport = self.currentStatsReport;\n                    },\n                    error => self.errorCallback(error)\n                );\n            },\n            self.statsIntervalMilis\n        );\n    }\n};\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Define the function which retrieves the value from a specific report\n    // returned by RTCPeerConnection#getStats associated with a given\n    // browser-specific key.\n    let itemStatByKey;\n\n    switch (this._browserType) {\n    case browsers.CHROME:\n    case browsers.OPERA:\n    case browsers.NWJS:\n    case browsers.ELECTRON:\n        // TODO What about other types of browser which are based on Chrome such\n        // as NW.js? Every time we want to support a new type browser we have to\n        // go and add more conditions (here and in multiple other places).\n        // Cannot we do a feature detection instead of a browser type check? For\n        // example, if item has a stat property of type function, then it's very\n        // likely that whoever defined it wanted you to call it in order to\n        // retrieve the value associated with a specific key.\n        itemStatByKey = (item, key) => item.stat(key);\n        break;\n    case browsers.REACT_NATIVE:\n        // The implementation provided by react-native-webrtc follows the\n        // Objective-C WebRTC API: RTCStatsReport has a values property of type\n        // Array in which each element is a key-value pair.\n        itemStatByKey = function(item, key) {\n            let value;\n\n            item.values.some(pair => {\n                if (pair.hasOwnProperty(key)) {\n                    value = pair[key];\n\n                    return true;\n                }\n\n                return false;\n\n            });\n\n            return value;\n        };\n        break;\n    case browsers.EDGE:\n        itemStatByKey = (item, key) => item[key];\n        break;\n    default:\n        itemStatByKey = (item, key) => item[key];\n    }\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => itemStatByKey(item, keyFromName(name));\n};\n\n/**\n * Obtains a stat value from given stat and converts it to a non-negative\n * number. If the value is either invalid or negative then 0 will be returned.\n * @param report\n * @param {string} name\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeStat = function(report, name) {\n    let value = this._getStatValue(report, name);\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/* eslint-disable no-continue */\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    for (const idx in this.currentStatsReport) {\n        if (!this.currentStatsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n        const now = this.currentStatsReport[idx];\n\n        // The browser API may return \"undefined\" values in the array\n        if (!now) {\n            continue;\n        }\n\n        try {\n            const receiveBandwidth = getStatValue(now, 'receiveBandwidth');\n            const sendBandwidth = getStatValue(now, 'sendBandwidth');\n\n            if (receiveBandwidth || sendBandwidth) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(receiveBandwidth / 1000),\n                    'upload': Math.round(sendBandwidth / 1000)\n                };\n            }\n        } catch (e) { /* not supported*/ }\n\n        if (now.type === 'googCandidatePair') {\n            let active, ip, localCandidateType, localip,\n                remoteCandidateType, rtt, type;\n\n            try {\n                active = getStatValue(now, 'activeConnection');\n                if (!active) {\n                    continue;\n                }\n\n                ip = getStatValue(now, 'remoteAddress');\n                type = getStatValue(now, 'transportType');\n                localip = getStatValue(now, 'localAddress');\n                localCandidateType = getStatValue(now, 'localCandidateType');\n                remoteCandidateType = getStatValue(now, 'remoteCandidateType');\n                rtt = this.getNonNegativeStat(now, 'currentRoundTripTime');\n            } catch (e) { /* not supported*/ }\n            if (!ip || !type || !localip || active !== 'true') {\n                continue;\n            }\n\n            // Save the address unless it has been saved already.\n            const conferenceStatsTransport = this.conferenceStats.transport;\n\n            if (!conferenceStatsTransport.some(\n                    t =>\n                        t.ip === ip\n                            && t.type === type\n                            && t.localip === localip)) {\n                conferenceStatsTransport.push({\n                    ip,\n                    type,\n                    localip,\n                    p2p: this.peerconnection.isP2P,\n                    localCandidateType,\n                    remoteCandidateType,\n                    rtt\n                });\n            }\n            continue;\n        }\n\n        if (now.type === 'candidatepair') {\n            // we need succeeded and selected pairs only\n            if (now.state !== 'succeeded' || !now.selected) {\n                continue;\n            }\n\n            const local = this.currentStatsReport[now.localCandidateId];\n            const remote = this.currentStatsReport[now.remoteCandidateId];\n\n            this.conferenceStats.transport.push({\n                ip: `${remote.ipAddress}:${remote.portNumber}`,\n                type: local.transport,\n                localip: `${local.ipAddress}:${local.portNumber}`,\n                p2p: this.peerconnection.isP2P,\n                localCandidateType: local.candidateType,\n                remoteCandidateType: remote.candidateType\n            });\n        }\n\n        // NOTE: Edge's proprietary stats via RTCIceTransport.msGetStats().\n        if (now.msType === 'transportdiagnostics') {\n            this.conferenceStats.transport.push({\n                ip: now.remoteAddress,\n                type: now.protocol,\n                localip: now.localAddress,\n                p2p: this.peerconnection.isP2P\n            });\n        }\n\n        if (now.type !== 'ssrc' && now.type !== 'outboundrtp'\n            && now.type !== 'inboundrtp' && now.type !== 'track') {\n            continue;\n        }\n\n        // NOTE: In Edge, stats with type \"inboundrtp\" and \"outboundrtp\" are\n        // completely useless, so ignore them.\n        if (browser.isEdge()\n            && (now.type === 'inboundrtp' || now.type === 'outboundrtp')) {\n            continue;\n        }\n\n        const before = this.previousStatsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        // If type=\"track\", take the first SSRC from ssrcIds.\n        if (now.type === 'track' && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before || !ssrc) {\n            continue;\n        }\n\n        // isRemote is available only in FF and is ignored in case of chrome\n        // according to the spec\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcrtpstreamstats-isremote\n        // when isRemote is true indicates that the measurements were done at\n        // the remote endpoint and reported in an RTCP RR/XR.\n        // Fixes a problem where we are calculating local stats wrong adding\n        // the sent bytes to the local download bitrate.\n        // In new W3 stats spec, type=\"track\" has a remoteSource boolean\n        // property.\n        // Edge uses the new format, so skip this check.\n        if (!browser.isEdge()\n                && (now.isRemote === true || now.remoteSource === true)) {\n            continue;\n        }\n\n        let ssrcStats = this.ssrc2stats.get(ssrc);\n\n        if (!ssrcStats) {\n            ssrcStats = new SsrcStats();\n            this.ssrc2stats.set(ssrc, ssrcStats);\n        }\n\n        let isDownloadStream = true;\n        let key = 'packetsReceived';\n        let packetsNow = getStatValue(now, key);\n\n        if (typeof packetsNow === 'undefined'\n            || packetsNow === null || packetsNow === '') {\n            isDownloadStream = false;\n            key = 'packetsSent';\n            packetsNow = getStatValue(now, key);\n            if (typeof packetsNow === 'undefined' || packetsNow === null) {\n                logger.warn('No packetsReceived nor packetsSent stat found');\n            }\n        }\n        if (!packetsNow || packetsNow < 0) {\n            packetsNow = 0;\n        }\n\n        const packetsBefore = this.getNonNegativeStat(before, key);\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n        const packetsLostNow\n            = this.getNonNegativeStat(now, 'packetsLost');\n        const packetsLostBefore\n            = this.getNonNegativeStat(before, 'packetsLost');\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n        ssrcStats.setLoss({\n            packetsTotal: packetsDiff + packetsLostDiff,\n            packetsLost: packetsLostDiff,\n            isDownloadStream\n        });\n\n        const bytesReceivedNow\n            = this.getNonNegativeStat(now, 'bytesReceived');\n        const bytesReceivedBefore\n            = this.getNonNegativeStat(before, 'bytesReceived');\n        const bytesReceived\n            = Math.max(0, bytesReceivedNow - bytesReceivedBefore);\n\n        let bytesSent = 0;\n\n        // TODO: clean this mess up!\n        let nowBytesTransmitted = getStatValue(now, 'bytesSent');\n\n        if (typeof nowBytesTransmitted === 'number'\n            || typeof nowBytesTransmitted === 'string') {\n            nowBytesTransmitted = Number(nowBytesTransmitted);\n            if (!isNaN(nowBytesTransmitted)) {\n                byteSentStats[ssrc] = nowBytesTransmitted;\n                if (nowBytesTransmitted > 0) {\n                    bytesSent = nowBytesTransmitted\n                        - getStatValue(before, 'bytesSent');\n                }\n            }\n        }\n        bytesSent = Math.max(0, bytesSent);\n\n        const timeMs = now.timestamp - before.timestamp;\n        let bitrateReceivedKbps = 0, bitrateSentKbps = 0;\n\n        if (timeMs > 0) {\n            // TODO is there any reason to round here?\n            bitrateReceivedKbps = Math.round((bytesReceived * 8) / timeMs);\n            bitrateSentKbps = Math.round((bytesSent * 8) / timeMs);\n        }\n\n        ssrcStats.addBitrate({\n            'download': bitrateReceivedKbps,\n            'upload': bitrateSentKbps\n        });\n\n        const resolution = {\n            height: null,\n            width: null\n        };\n\n        try {\n            let height, width;\n\n            if ((height = getStatValue(now, 'googFrameHeightReceived'))\n                && (width = getStatValue(now, 'googFrameWidthReceived'))) {\n                resolution.height = height;\n                resolution.width = width;\n            } else if ((height = getStatValue(now, 'googFrameHeightSent'))\n                && (width = getStatValue(now, 'googFrameWidthSent'))) {\n                resolution.height = height;\n                resolution.width = width;\n            }\n        } catch (e) { /* not supported*/ }\n\n        // Tries to get frame rate\n        let frameRate;\n\n        try {\n            frameRate = getStatValue(now, 'googFrameRateReceived')\n                || getStatValue(now, 'googFrameRateSent') || 0;\n        } catch (e) {\n            // if it fails with previous properties(chrome),\n            // let's try with another one (FF)\n            try {\n                frameRate = this.getNonNegativeStat(now, 'framerateMean');\n            } catch (err) { /* not supported*/ }\n        }\n        ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n        if (resolution.height && resolution.width) {\n            ssrcStats.setResolution(resolution);\n        } else {\n            ssrcStats.setResolution(null);\n        }\n    }\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'transport': this.conferenceStats.transport\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n\n    for (const idx in this.currentAudioLevelsReport) {\n        if (!this.currentAudioLevelsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n\n        const now = this.currentAudioLevelsReport[idx];\n\n        if (now.type !== 'ssrc' && now.type !== 'track') {\n            continue;\n        }\n\n        const before = this.baselineAudioLevelsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        if (!ssrc && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before) {\n            logger.warn(`${ssrc} not enough data`);\n            continue;\n        }\n\n        if (!ssrc) {\n            if ((Date.now() - now.timestamp) < 3000) {\n                logger.warn('No ssrc: ');\n            }\n            continue;\n        }\n\n        // Audio level\n        let audioLevel;\n\n        try {\n            audioLevel\n                = getStatValue(now, 'audioInputLevel')\n                    || getStatValue(now, 'audioOutputLevel');\n        } catch (e) { /* not supported*/\n            logger.warn('Audio Levels are not available in the statistics.');\n            clearInterval(this.audioLevelsIntervalId);\n\n            return;\n        }\n\n        if (audioLevel) {\n            let isLocal;\n\n            // If type=\"ssrc\" (legacy) check whether they are received packets.\n            if (now.type === 'ssrc') {\n                isLocal = !getStatValue(now, 'packetsReceived');\n\n            // If type=\"track\", check remoteSource boolean property.\n            } else {\n                isLocal = !now.remoteSource;\n            }\n\n            // According to the W3C WebRTC Stats spec, audioLevel should be in\n            // 0..1 range (0 == silence). However browsers don't behave that\n            // way so we must convert it to 0..1.\n            //\n            // In Edge the range is -100..0 (-100 == silence) measured in dB,\n            // so convert to linear. The levels are set to 0 for remote tracks,\n            // so don't convert those, since 0 means \"the maximum\" in Edge.\n            if (browser.isEdge()) {\n                audioLevel = audioLevel < 0 ? Math.pow(10, audioLevel / 20) : 0;\n\n            // TODO: Can't find specs about what this value really is, but it\n            // seems to vary between 0 and around 32k.\n            } else {\n                audioLevel = audioLevel / 32767;\n            }\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    }\n};\n\n/* eslint-enable no-continue */\n\n/**\n * New promised based getStats report processing.\n * Tested with chrome, firefox and safari. Not switching it on for chrome as\n * frameRate stat is missing and calculating it using framesSent,\n * gives values double the values seen in webrtc-internals.\n * https://w3c.github.io/webrtc-stats/\n */\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name in case of using\n * Promised based getStats.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineNewGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => item[keyFromName(name)];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing new getStats logic.\n */\nStatsCollector.prototype.processNewStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n\n        // RTCIceCandidatePairStats\n        // https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair'\n            && now.nominated\n            && now.state === 'succeeded') {\n\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate\n                = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate\n                = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            // safari currently does not provide ice candidates in stats\n            if (remoteUsedCandidate && localUsedCandidate) {\n                // FF uses non-standard ipAddress, portNumber, transport\n                // instead of ip, port, protocol\n                const remoteIpAddress = getStatValue(remoteUsedCandidate, 'ip');\n                const remotePort = getStatValue(remoteUsedCandidate, 'port');\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = getStatValue(localUsedCandidate, 'ip');\n                const localPort = getStatValue(localUsedCandidate, 'port');\n\n                const localIp = `${localIpAddress}:${localPort}`;\n                const type = getStatValue(remoteUsedCandidate, 'protocol');\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(\n                        t =>\n                            t.ip === ip\n                            && t.type === type\n                            && t.localip === localIp)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localIp,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow\n                = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore\n                = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff\n                = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            if (now.type === 'inbound-rtp') {\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(\n                                    now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n\n                // RTCInboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#inboundrtpstats-dict*\n                // TODO: can we use framesDecoded for frame rate, available\n                // in chrome\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(\n                                now, before, 'bytesSent')\n                });\n\n                // RTCOutboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#outboundrtpstats-dict*\n                // TODO: can we use framesEncoded for frame rate, available\n                // in chrome\n            }\n\n            // FF has framerateMean out of spec\n            const framerateMean = now.framerateMean;\n\n            if (framerateMean) {\n                ssrcStats.setFramerate(Math.round(framerateMean || 0));\n            }\n\n        // track for resolution\n        // RTCVideoHandlerStats\n        // https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats\n        // https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track') {\n\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n\n            // Tries to get frame rate\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                // we need to calculate it\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore\n                            = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            const trackIdentifier = now.trackIdentifier;\n            const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            } else {\n                ssrcStats.setResolution(null);\n            }\n        }\n    });\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processNewAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n/**\n * End new promised based getStats processing methods.\n */\n","\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(timeout = 5000) {\n        return this._conference.xmpp.caps.getFeatures(this._jid, timeout);\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room\n                    = xmpp.createRoom(this.options.name, this.options.config);\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nclass MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.rooms[roomJid]) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // XXX What are the semantics of the return value? Why is it sometimes\n        // undefined and sometimes a boolean?\n        if (!room) {\n            return;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n}\n\n/**\n *\n * @param XMPP\n */\nexport default function(XMPP) {\n    Strophe.addConnectionPlugin('emuc', new MucConnectionPlugin(XMPP));\n}\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport Listenable from '../util/Listenable';\nimport Settings from '../settings/Settings';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param connection\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room. This is intended to be used only by\n     * jitsi-meet-spot.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this.joined = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.enableStatsID) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': Settings.callStatsUserName\n            });\n        }\n\n        // We need to broadcast 'videomuted' status from the beginning, cause\n        // Jicofo makes decisions based on that. Initialize it with 'false'\n        // here.\n        this.addVideoInfoToPresence(false);\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n    }\n\n    /**\n     * Joins the chat room.\n     * @param password\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password) {\n        this.password = password;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info('Conference focus disabled');\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        const self = this;\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: self.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            self.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            }\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n            }\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, jid);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                memberOfThis.isFocus = true;\n                this._initFocus(from, jid);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param mucJid the jid of the focus in the muc\n     */\n    _initFocus(from, mucJid) {\n        this.focusMucJid = from;\n\n        logger.info(`Ignore focus: ${from}, real JID: ${mucJid}`);\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendMessage(message, elementName, nickname) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendPrivateMessage(id, message, elementName, nickname) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>destroy').length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n\n        if (!isSelfPresence) {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        } else if (membersKeys.length > 0) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        }\n\n        if (isKick && this.myroomjid === from) {\n            this.eventEmitter.emit(XMPPEvents.KICKED);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const nick\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\n                .text()\n            || Strophe.getResourceFromJid(from);\n\n        const txt = $(msg).find('>body').text();\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED,\n                $(msg).find('>text').text(), txt);\n\n            return true;\n        }\n\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid\n                && $(msg)\n                    .find(\n                        '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                            + '>status[code=\"104\"]')\n                    .length) {\n            this.discoRoomInfo();\n        }\n        const jsonMessage = $(msg).find('>json-message').text();\n        const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n        // We emit this event if the message is a valid json, and is not\n        // delivered after a delay, i.e. stamp is undefined.\n        // e.g. - subtitles should not be displayed if delayed.\n        if (parsedJson && stamp === undefined) {\n            this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                from, parsedJson);\n\n            return;\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    kick(jid) {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t('You have been kicked.').up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    // FIXME: is muc#roomconfig_passwordprotectedroom required?\n                    this.connection.sendIQ(formsubmit, onSuccess, onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param key\n     * @param values\n     */\n    addToPresence(key, values) {\n        values.tagName = key;\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n    }\n\n    /**\n     *\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setVideoMute(mute, callback) {\n        this.sendVideoInfoPresence(mute);\n        if (callback) {\n            callback(mute);\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setAudioMute(mute, callback) {\n        return this.sendAudioInfoPresence(mute, callback);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        this.removeFromPresence('audiomuted');\n        this.addToPresence(\n            'audiomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/audio' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    sendAudioInfoPresence(mute, callback) {\n        this.addAudioInfoToPresence(mute);\n        if (this.connection) {\n            this.sendPresence();\n        }\n        if (callback) {\n            callback();\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        this.removeFromPresence('videomuted');\n        this.addToPresence(\n            'videomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/video' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute);\n        if (!this.connection) {\n            return;\n        }\n        this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: false, // unmuted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        data.muted = mutedNode.length > 0 && mutedNode[0].value === 'true';\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     */\n    muteParticipant(jid, mute) {\n        logger.info('set mute', mute);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: 'http://jitsi.org/jitmeet/audio',\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS);\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $, Promise */\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nimport { $iq, Strophe } from 'strophe.js';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Sip gateway can be enabled by configuring Jigasi host in config.js or\n    // it will be enabled automatically if focus detects the component through\n    // service discovery.\n    this.sipGatewayEnabled\n        = this.options.connection.hosts\n            && this.options.connection.hosts.call_control !== undefined;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    logger.info(`Someone left is it focus ? ${jid}`);\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n    if (this.options.connection.enforcedBridge !== undefined) {\n        elem.c(\n            'property', {\n                name: 'enforcedBridge',\n                value: this.options.connection.enforcedBridge\n            }).up();\n    }\n\n    // Tell the focus we have Jigasi configured\n    if (this.options.connection.hosts !== undefined\n        && this.options.connection.hosts.call_control !== undefined) {\n        elem.c(\n            'property', {\n                name: 'call_control',\n                value: this.options.connection.hosts.call_control\n            }).up();\n    }\n    if (config.channelLastN !== undefined) {\n        elem.c(\n            'property', {\n                name: 'channelLastN',\n                value: config.channelLastN\n            }).up();\n    }\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.enableTcc !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableTcc',\n                    value: Boolean(config.enableTcc)\n                }).up();\n    }\n    if (config.enableRemb !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableRemb',\n                    value: Boolean(config.enableRemb)\n                }).up();\n    }\n    if (config.minParticipants !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'minParticipants',\n                    value: config.minParticipants\n                }).up();\n    }\n\n    elem.c(\n        'property', {\n            name: 'enableLipSync',\n            value: this.options.connection.enableLipSync !== false\n        }).up();\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n    if (config.testing && config.testing.octo\n        && typeof config.testing.octo.probability === 'number') {\n        if (Math.random() < config.testing.octo.probability) {\n            elem.c(\n                'property', {\n                    name: 'octo',\n                    value: true\n                }).up();\n        }\n    }\n\n    let openSctp;\n\n    switch (this.options.conference.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        openSctp = true;\n        break;\n    case 'websocket':\n        openSctp = false;\n        break;\n    }\n\n    if (openSctp && !browser.supportsDataChannels()) {\n        openSctp = false;\n    }\n\n    elem.c(\n        'property', {\n            name: 'openSctp',\n            value: openSctp\n        }).up();\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    if (this.options.conference.stereo !== undefined) {\n        elem.c(\n            'property', {\n                name: 'stereo',\n                value: this.options.conference.stereo\n            }).up();\n    }\n    if (this.options.conference.useRoomAsSharedDocumentName !== undefined) {\n        elem.c(\n            'property', {\n                name: 'useRoomAsSharedDocumentName',\n                value: this.options.conference.useRoomAsSharedDocumentName\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if focus has auto-detected Jigasi component(this will be also\n    // included if we have passed our host from the config)\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $, __filename */\n\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\nimport Statistics from '../statistics/statistics';\n\nimport JingleSessionPC from './JingleSessionPC';\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nclass JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn('invalid session id', iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            if (startMuted && startMuted.length > 0) {\n                const audioMuted = startMuted.attr('audio');\n                const videoMuted = startMuted.attr('video');\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n\n            logger.info(\n                `Marking session from ${fromJid\n                } as ${isP2P ? '' : '*not*'} P2P`);\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n                    isP2P ? this.p2pIceConfig : this.jvbIceConfig,\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\n                sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            this.eventEmitter.emit(\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            this.eventEmitter.emit(\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\n                sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace':\n            logger.info('(TIME) Start transport replace', now);\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success!', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        case 'addsource': // FIXME: proprietary, un-jingleish\n        case 'source-add': // FIXME: proprietary\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'removesource': // FIXME: proprietary, un-jingleish\n        case 'source-remove': // FIXME: proprietary\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.connection.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n            res => {\n                const iceservers = [];\n\n                $(res).find('>services>service').each((idx, el) => {\n                    // eslint-disable-next-line no-param-reassign\n                    el = $(el);\n                    const dict = {};\n                    const type = el.attr('type');\n\n                    switch (type) {\n                    case 'stun':\n                        dict.url = `stun:${el.attr('host')}`;\n                        if (el.attr('port')) {\n                            dict.url += `:${el.attr('port')}`;\n                        }\n                        iceservers.push(dict);\n                        break;\n                    case 'turn':\n                    case 'turns': {\n                        dict.url = `${type}:`;\n                        const username = el.attr('username');\n\n                        // https://code.google.com/p/webrtc/issues/detail\n                        // ?id=1508\n\n                        if (username) {\n                            const match\n                                = navigator.userAgent.match(\n                                    /Chrom(e|ium)\\/([0-9]+)\\./);\n\n                            if (match && parseInt(match[2], 10) < 28) {\n                                dict.url += `${username}@`;\n                            } else {\n                                // only works in M28\n                                dict.username = username;\n                            }\n                        }\n                        dict.url += el.attr('host');\n                        const port = el.attr('port');\n\n                        if (port) {\n                            dict.url += `:${el.attr('port')}`;\n                        }\n                        const transport = el.attr('transport');\n\n                        if (transport && transport !== 'udp') {\n                            dict.url += `?transport=${transport}`;\n                        }\n\n                        dict.credential = el.attr('password')\n                                || dict.credential;\n                        iceservers.push(dict);\n                        break;\n                    }\n                    }\n                });\n\n                const options = this.xmpp.options;\n\n                if (options.useStunTurn) {\n                    // we want to filter and leave only tcp/turns candidates\n                    // which make sense for the jvb connections\n                    this.jvbIceConfig.iceServers\n                        = iceservers.filter(s => s.url.startsWith('turns'));\n                }\n\n                if (options.p2p && options.p2p.useStunTurn) {\n                    this.p2pIceConfig.iceServers = iceservers;\n                }\n\n            }, err => {\n                logger.warn('getting turn credentials failed', err);\n                logger.warn('is mod_turncredentials or similar installed?');\n            });\n\n        // implement push?\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n\n/**\n *\n * @param XMPP\n * @param eventEmitter\n * @param iceConfig\n */\nexport default function initJingle(XMPP, eventEmitter, iceConfig) {\n    Strophe.addConnectionPlugin(\n        'jingle',\n        new JingleConnectionPlugin(XMPP, eventEmitter, iceConfig));\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {Strophe.Connection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\n     * @param {Object} iceConfig the ICE servers config object as defined by\n     * the WebRTC. Passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isInitiator) {\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.iceConfig = iceConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Ping every 10 sec\n */\nconst PING_INTERVAL = 10000;\n\n/**\n * Ping timeout error after 15 sec of waiting.\n */\nconst PING_TIMEOUT = 15000;\n\n/**\n * Will close the connection after 3 consecutive ping errors.\n */\nconst PING_THRESHOLD = 3;\n\n/**\n * The number of timestamps of send pings to keep.\n * The current value is 2 minutes.\n * @type {number} number of timestamps.\n */\nconst PING_TIMESTAMPS_TO_KEEP = 120000 / PING_INTERVAL;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nclass PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Contructs new object\n     * @param {XMPP} xmpp the xmpp module.\n     * @constructor\n     */\n    constructor(xmpp) {\n        super();\n        this.failedPings = 0;\n        this.xmpp = xmpp;\n        this.pingExecIntervals = new Array(PING_TIMESTAMPS_TO_KEEP);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ(iq, success, error, timeout);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     * @param interval task interval in ms.\n     */\n    startInterval(remoteJid, interval = PING_INTERVAL) {\n        if (this.intervalId) {\n            const errmsg = 'Ping task scheduled already';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg);\n\n            return;\n        }\n        this.intervalId = window.setInterval(() => {\n            this.ping(remoteJid, () => {\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= PING_THRESHOLD) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n\n                    // FIXME it doesn't help to disconnect when 3rd PING\n                    // times out, it only stops Strophe from retrying.\n                    // Not really sure what's the right thing to do in that\n                    // situation, but just closing the connection makes no\n                    // sense.\n                    // self.connection.disconnect();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, PING_TIMEOUT);\n        }, interval);\n        logger.info(`XMPP pings will be sent every ${interval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > PING_TIMESTAMPS_TO_KEEP) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= PING_INTERVAL;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n\n/**\n *\n * @param xmpp\n */\nexport default function(xmpp) {\n    Strophe.addConnectionPlugin('ping', new PingConnectionPlugin(xmpp));\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nclass RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n}\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.versionToCapabilities = Object.create(null);\n        this.jidToVersion = Object.create(null);\n        this.version = '';\n        this.rooms = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n        connection.addHandler(this._handleCaps.bind(this), Strophe.NS.CAPS);\n\n        this._onMucMemberLeft = this._removeJidToVersionEntry.bind(this);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    addFeature(feature, submit = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    removeFeature(feature, submit = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Returns a set with the features for a participant.\n     * @param {String} jid the jid of the participant\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(jid, timeout = 5000) {\n        const user\n            = jid in this.jidToVersion ? this.jidToVersion[jid] : null;\n\n        if (!user || !(user.version in this.versionToCapabilities)) {\n            const node = user ? `${user.node}#${user.version}` : null;\n\n            return this._getDiscoInfo(jid, node, timeout)\n                .then(({ features }) => {\n                    if (user) {\n                        // TODO: Maybe use the version + node + hash as keys?\n                        this.versionToCapabilities[user.version] = features;\n                    }\n\n                    return features;\n                });\n        }\n\n        return Promise.resolve(this.versionToCapabilities[user.version]);\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, timeout = 5000) {\n        return this._getDiscoInfo(jid, null, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                const features = new Set();\n                const identities = new Set();\n\n                $(response)\n                    .find('>query>feature')\n                    .each(\n                        (_, el) => features.add(el.getAttribute('var')));\n                $(response)\n                    .find('>query>identity')\n                    .each(\n                        (_, el) => identities.add({\n                            type: el.getAttribute('type'),\n                            name: el.getAttribute('name'),\n                            category: el.getAttribute('category')\n                        }));\n                resolve({\n                    features,\n                    identities });\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        room.addListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n        this._fixChatRoomPresenceMap(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n        room.removeListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addToPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n        this.submit();\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        const identities\n          = this.disco._identities.sort(compareIdentities).reduce(\n              (accumulatedValue, identity) =>\n                  `${\n                      IDENTITY_PROPERTIES.reduce(\n                          (tmp, key, idx) =>\n                              tmp\n                                  + (idx === 0 ? '' : '/')\n                                  + identity[key],\n                          '')\n                  }<`,\n              '');\n        const features\n            = this.disco._features.sort().reduce(\n                (tmp, feature) => `${tmp + feature}<`, '');\n\n        this.version = b64_sha1(identities + features);\n        this._notifyVersionChanged();\n    }\n\n    /**\n     * Parses the \"c\" xml node from presence.\n     * @param {DOMElement} stanza the presence packet\n     */\n    _handleCaps(stanza) {\n        const from = stanza.getAttribute('from');\n        const caps = stanza.querySelector('c');\n        const version = caps.getAttribute('ver');\n        const node = caps.getAttribute('node');\n        const oldVersion = this.jidToVersion[from];\n\n        this.jidToVersion[from] = { version,\n            node };\n        if (oldVersion && oldVersion.version !== version) {\n            this.eventEmitter.emit(XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n                from);\n        }\n\n        // return true to not remove the handler from Strophe\n        return true;\n    }\n\n    /**\n     * Removes entry from this.jidToVersion map.\n     * @param {String} jid the jid to be removed.\n     */\n    _removeJidToVersionEntry(jid) {\n        if (jid in this.jidToVersion) {\n            delete this.jidToVersion[jid];\n        }\n    }\n}\n","const logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n *\n * @param localAudio\n * @param peerConnection\n */\nfunction JitsiDTMFManager(localAudio, peerConnection) {\n    const audioTrack = localAudio.getTrack();\n\n    if (!audioTrack) {\n        throw new Error('Failed to initialize DTMFSender: no audio track.');\n    }\n    this.dtmfSender\n        = peerConnection.peerconnection.createDTMFSender(audioTrack);\n    logger.debug('Initialized DTMFSender');\n}\n\nJitsiDTMFManager.prototype.sendTones = function(tones, duration, pause) {\n    this.dtmfSender.insertDTMF(tones, duration || 200, pause || 200);\n};\n\nmodule.exports = JitsiDTMFManager;\n\n","import * as JitsiConferenceEvents from '../JitsiConferenceEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} eventEmitter EventEmitter instance.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError(\n                'At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError(\n                'Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            // Create a WebSocket instance.\n            const ws = new WebSocket(wsUrl);\n\n            // Handle the WebSocket.\n            this._handleChannel(ws);\n            this._mode = 'websocket';\n        }\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        const jsonObject = {\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        };\n\n        this._send(jsonObject);\n        logger.log(`Channel lastN set to: ${value}`);\n    }\n\n    /**\n     * Sends a \"pinned endpoint changed\" message via the channel.\n     * @param {string} endpointId The id of the pinned endpoint.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendPinnedEndpointMessage(endpointId) {\n        logger.log(\n            'sending pinned changed notification to the bridge for endpoint ',\n            endpointId);\n\n        this._send({\n            colibriClass: 'PinnedEndpointChangedEvent',\n            pinnedEndpoint: endpointId || null\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(\n            'sending selected changed notification to the bridge for endpoints',\n            endpointIds);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log('sending a ReceiverVideoConstraint message with '\n            + `a maxFrameHeight of ${maxFrameHeightPixels} pixels`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = error => {\n            logger.error('Channel error:', error);\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to parse channel message as JSON: ',\n                    data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                // Endpoint ID from the Videobridge.\n                const dominantSpeakerEndpoint = obj.dominantSpeakerEndpoint;\n\n                logger.info(\n                    'Channel new dominant speaker event: ',\n                    dominantSpeakerEndpoint);\n                emitter.emit(\n                    RTCEvents.DOMINANT_SPEAKER_CHANGED,\n                    dominantSpeakerEndpoint);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(\n                    `Endpoint connection status changed: ${endpoint} active ? ${\n                        isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n                    endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(\n                    RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from,\n                    obj.msgPayload);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs.\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info('Channel new last-n event: ',\n                    lastNEndpoints, obj);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                    lastNEndpoints, obj);\n\n                break;\n            }\n            case 'SelectedUpdateEvent': {\n                const isSelected = obj.isSelected;\n\n                logger.info(`SelectedUpdateEvent isSelected? ${isSelected}`);\n                emitter.emit(RTCEvents.IS_SELECTED_CHANGED, isSelected);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = () => {\n            logger.info('Channel closed');\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/* global __filename, RTCSessionDescription */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport LocalSdpMunger from './LocalSdpMunger';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RtxModifier from '../xmpp/RtxModifier';\n\n// FIXME SDP tools should end up in some kind of util module\nimport SDP from '../xmpp/SDP';\nimport SdpConsistency from '../xmpp/SdpConsistency';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\n\nconst logger = getLogger(__filename);\nconst SIMULCAST_LAYERS = 3;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\nconst SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used\n * in a peer to peer connection\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\n * the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\n * @param {boolean} options.enableFirefoxSimulcast if set to 'true' will enable\n * experimental simulcast support on Firefox.\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\n *      disabled by removing it from the SDP.\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\n * over other video codecs.\n * @param {boolean} options.enableLayerSuspension if set to 'true', we will\n * cap the video send bitrate when we are told we have not been selected by\n * any endpoints (and therefore the non-thumbnail streams are not in use).\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        iceConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = true;\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    this.peerconnection\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, constraints);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n    const Interop = require('@jitsi/sdp-interop').Interop;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast({ numOfLayers: SIMULCAST_LAYERS,\n        explodeRemoteSimulcast: false });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this);\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n    this.peerconnection.onaddstream\n        = event => this._remoteStreamAdded(event.stream);\n    this.peerconnection.onremovestream\n        = event => this._remoteStreamRemoved(event.stream);\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats(stats => {\n                if (stats.result\n                    && typeof stats.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            }, () => {\n\n                // empty error callback\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype._getDesiredMediaDirection = function(\n        mediaType) {\n    let mediaTransferActive = true;\n\n    if (mediaType === MediaType.AUDIO) {\n        mediaTransferActive = this.audioTransferActive;\n    } else if (mediaType === MediaType.VIDEO) {\n        mediaTransferActive = this.videoTransferActive;\n    }\n    if (mediaTransferActive) {\n        return this.hasAnyTracksOfType(mediaType) ? 'sendrecv' : 'recvonly';\n    }\n\n    return 'inactive';\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast\n        && browser.supportsSimulcast()\n\n        // Firefox has been added as supporting simulcast, but it is\n        // experimental so we only want to do it for firefox if the config\n        // option is set.  Unfortunately, browser::supportsSimulcast()\n        // doesn't have a reference to the config options, so we have\n        // to do it here\n        && (!browser.isFirefox()\n            || this.options.enableFirefoxSimulcast);\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error('On peerMuteChanged - no endpoint ID');\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased() || browser.isEdge()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    logger.info(`${this} remote track added:`, streamId, mediaType);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = new SDP(this.remoteDescription.sdp);\n    const mediaLines\n        = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No media lines for type ${\n                    mediaType} found in remote SDP for remote track: ${\n                    streamId}`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC lines for streamId ${\n                    streamId} for remote track, media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for: ${\n                    trackSsrc} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    logger.log(`${this} associated ssrc`, ownerEndpointId, trackSsrc);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `${this}: no peer media info available for ${\n                    ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from\n        // 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(\n            `${this} ignored duplicated remote track added event for: `\n                + `${ownerEndpointId}, ${mediaType}`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(\n            `${this} overwriting remote track for`\n                + `${ownerEndpointId} ${mediaType}`);\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    logger.info(`${this} - remote track removed: ${streamId}, ${trackId}`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(\n            `${this} Removed track not found for msid: ${streamId},\n             track id: ${trackId}`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n\n    logger.debug(\n        `${this} removed remote tracks for ${owner} count: ${\n            removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * @typedef {Object} SSRCGroupInfo\n * @property {Array<number>} ssrcs group's SSRCs\n * @property {string} semantics\n */\n/**\n * @typedef {Object} TrackSSRCInfo\n * @property {Array<number>} ssrcs track's SSRCs\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\n */\n/**\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\n * @param {Object} desc the WebRTC SDP instance.\n * @return {Map<string,TrackSSRCInfo>}\n */\nfunction extractSSRCMap(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    for (const mLine of session.media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs\n                        = group.ssrcs.split(' ').map(\n                            ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n        for (const ssrc of mLine.ssrcs) {\n            if (ssrc.attribute !== 'msid') {\n                continue; // eslint-disable-line no-continue\n            }\n\n            const msid = ssrc.value;\n            let ssrcInfo = ssrcMap.get(msid);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid\n                };\n                ssrcMap.set(msid, ssrcInfo);\n            }\n\n            const ssrcNumber = ssrc.id;\n\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n}\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `recvonly-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n */\nconst enforceSendRecv = function(localDescription) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia('audio');\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\n        audioMedia.direction = 'sendrecv';\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\n        videoMedia.direction = 'sendrecv';\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * NOTE: unlike plan B simulcast, the ssrcs in this inject ssrc-group will\n * NOT necessarily be in order of quality (low to high) because:\n * a) when translating between unified plan and plan b the order of the ssrcs\n * is not preserved and\n * b) it isn't guaranteed that firefox will give them to us in order to begin\n * with\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        if (video.simulcast_03) {\n            const ssrcs = [];\n\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n            video.ssrcGroups = video.ssrcGroups || [];\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug('getLocalDescription no localDescription found');\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        }\n\n        if (browser.doesVideoMuteByStreamRemove()) {\n            desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n            logger.debug(\n                'getLocalDescription::postTransform (munge local SDP)', desc);\n        }\n\n        // What comes out of this getter will be signalled over Jingle to\n        // the other peer, so we need to make sure the media direction is\n        // 'sendrecv' because we won't change the direction later and don't want\n        // the other peer to think we can't send or receive.\n        //\n        // Note that the description we set in chrome does have the accurate\n        // direction (e.g. 'recvonly'), since that is technically what is\n        // happening (check setLocalDescription impl).\n        desc = enforceSendRecv(desc);\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace(\n                'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n        }\n\n        return desc || {};\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n */\nTraceablePeerConnection.prototype.addTrack = function(track) {\n    const rtcId = track.rtcId;\n\n    logger.info(`add ${track} to: ${this}`);\n\n    if (this.localTracks.has(rtcId)) {\n        logger.error(`${track} is already in ${this}`);\n\n        return;\n    }\n\n    this.localTracks.set(rtcId, track);\n\n    const webrtcStream = track.getOriginalStream();\n\n    if (webrtcStream) {\n        this._addStream(webrtcStream);\n\n    // It's not ok for a track to not have a WebRTC stream if:\n    } else if (!browser.doesVideoMuteByStreamRemove()\n                || track.isAudioTrack()\n                || (track.isVideoTrack() && !track.isMuted())) {\n        logger.error(`${this} no WebRTC stream for: ${track}`);\n    }\n\n    // Muted video tracks do not have WebRTC stream\n    if (browser.doesVideoMuteByStreamRemove()\n            && track.isVideoTrack() && track.isMuted()) {\n        const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n        this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n        const simGroup\n            = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n        if (simGroup) {\n            this.simulcast.setSsrcCache(simGroup.ssrcs);\n        }\n        const fidGroups\n            = ssrcInfo.groups.filter(\n                groupInfo => groupInfo.semantics === 'FID');\n\n        if (fidGroups) {\n            const rtxSsrcMapping = new Map();\n\n            fidGroups.forEach(fidGroup => {\n                const primarySsrc = fidGroup.ssrcs[0];\n                const rtxSsrc = fidGroup.ssrcs[1];\n\n                rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n            });\n            this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n        }\n    }\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {boolean} <tt>true</tt> if the state of underlying PC has changed and\n * the renegotiation is required or <tt>false</tt> otherwise.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return false;\n    }\n\n    logger.info(`Adding ${track} as unmute to ${this}`);\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\n\n        return false;\n    }\n    this._addStream(webRtcStream);\n\n    return true;\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    if (browser.supportsRtpSender()) {\n        this._handleSenderRemoveStream(mediaStream);\n    } else {\n        this.peerconnection.removeStream(mediaStream);\n    }\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(\n            `${methodName}: ${localTrack} does not belong to ${this}`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        if (browser.supportsRtpSender()) {\n            this._handleSenderRemoveStream(webRtcStream);\n        } else {\n            this.peerconnection.removeStream(webRtcStream);\n        }\n    }\n};\n\n/**\n * Returns the sender corresponding to the given MediaStream.\n *\n * @param {MediaStream} stream - The media stream used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByStream = function(stream) {\n    const track = stream.getTracks()[0];\n\n    if (!track) {\n        logger.error('Cannot find sender: no tracks.');\n\n        return;\n    }\n\n    // Find the right sender (for audio or video)\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\n * replaced\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\n * @returns {Promise<boolean>} - If the promise resolves with true,\n * renegotiation will be needed. Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (browser.supportsRtpSender() && oldTrack && newTrack) {\n        // Add and than remove stream in FF leads to wrong local SDP. In order\n        // to workaround the issue we need to use sender.replaceTrack().\n        const sender = this.findSenderByStream(oldTrack.getOriginalStream());\n        const stream = newTrack.getOriginalStream();\n\n        if (sender && stream) {\n            const track = stream.getTracks()[0];\n\n            if (track) {\n                return sender.replaceTrack(track, stream).then(() => {\n                    // Since there is no need to do renegotiations we need to\n                    // fix all ssrc-msid mappings here.\n                    // NOTE: after sender.replaceTrack the sdp will remain the\n                    // same but the stream attach to the new JitsiLocalTrack\n                    // will have different msid. Luckily on FF we are not doing\n                    // all the transformations related to video mute.\n\n                    const ssrc = this.localSSRCs.get(oldTrack.rtcId);\n\n                    this.localTracks.delete(oldTrack.rtcId);\n                    this.localSSRCs.delete(oldTrack.rtcId);\n                    this._addedStreams\n                        = this._addedStreams.filter(s => s !== stream);\n\n                    this.localTracks.set(newTrack.rtcId, newTrack);\n\n                    // Override the msid of JitsiLocalTrack in order to be\n                    // consistent with the SDP values.\n                    newTrack.storedMSID = oldTrack.storedMSID;\n                    this._addedStreams.push(stream);\n\n                    this.localSSRCs.set(newTrack.rtcId, ssrc);\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n                        newTrack,\n                        extractPrimarySSRC(ssrc));\n\n                    return false;\n                });\n            }\n        }\n    }\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        this.addTrack(newTrack);\n    }\n\n    return Promise.resolve(true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {boolean} <tt>true</tt> if the underlying PeerConnection's state has\n * changed and the renegotiation is required or <tt>false</tt> otherwise.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return false;\n    }\n\n    if (webRtcStream) {\n        logger.info(\n            `Removing ${localTrack} as mute from ${this}`);\n        this._removeStream(webRtcStream);\n\n        return true;\n    }\n\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\n\n    return false;\n};\n\n/**\n * Remove stream handling for browsers supporting RTPSender\n * @param stream: webrtc media stream\n */\nTraceablePeerConnection.prototype._handleSenderRemoveStream = function(\n        stream) {\n    if (!stream) {\n        // There is nothing to be changed\n        return;\n    }\n\n    const sender = this.findSenderByStream(stream);\n\n    if (sender) {\n        this.peerconnection.removeTrack(sender);\n    } else {\n        logger.log('Cannot remove tracks: no RTPSender.');\n    }\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {Object} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\n        localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia('audio');\n\n    if (audioMedia) {\n        const desiredAudioDirection\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"audio\" media found int the local description');\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia) {\n        const desiredVideoDirection\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(\n                `Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"video\" media found in the local description');\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    if (this.options.disableH264 || this.options.preferH264) {\n        const parsedSdp = transform.parse(localSdp.sdp);\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n        if (this.options.disableH264) {\n            SDPUtil.stripVideoCodec(videoMLine, 'h264');\n        } else {\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\n        }\n\n        localSdp = new RTCSessionDescription({\n            type: localSdp.type,\n            sdp: transform.write(parsedSdp)\n        });\n\n        this.trace('setLocalDescription::postTransform (H264)',\n            dumpSDP(localSdp));\n    }\n\n    localSdp = this._adjustLocalMediaDirection(localSdp);\n\n    localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n\n    // if we're using unified plan, transform to it first.\n    if (browser.usesUnifiedPlan()) {\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Takes in a *unified plan* offer and inserts the appropriate\n * parameters for adding simulcast receive support.\n * @param {Object} desc - A session description object\n * @param {String} desc.type - the type (offer/answer)\n * @param {String} desc.sdp - the sdp content\n *\n * @return {Object} A session description (same format as above) object\n * with its sdp field modified to advertise simulcast receive support\n */\nTraceablePeerConnection.prototype._insertUnifiedPlanSimulcastReceive\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // In order of lowest to highest spatial quality\n        video.rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n        // eslint-disable-next-line camelcase\n        video.simulcast_03 = {\n            value: `recv rid=${SIM_LAYER_RIDS.join(';')}`\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // TODO the focus should squeze or explode the remote simulcast\n    // eslint-disable-next-line no-param-reassign\n    description = this.simulcast.mungeRemoteDescription(description);\n    this.trace(\n        'setRemoteDescription::postTransform (simulcast)',\n        dumpSDP(description));\n\n    if (this.options.preferH264) {\n        const parsedSdp = transform.parse(description.sdp);\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n        SDPUtil.preferVideoCodec(videoMLine, 'h264');\n\n        // eslint-disable-next-line no-param-reassign\n        description = new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    // If the browser uses unified plan, transform to it first\n    if (browser.usesUnifiedPlan()) {\n        // eslint-disable-next-line no-param-reassign\n        description = new RTCSessionDescription({\n            type: description.type,\n            sdp: this.rtxModifier.stripRtx(description.sdp)\n        });\n\n        this.trace(\n            'setRemoteDescription::postTransform (stripRtx)',\n            dumpSDP(description));\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description);\n        this.trace(\n            'setRemoteDescription::postTransform (Plan A)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this._insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n        }\n    } else {\n        // Plan B\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    }\n\n    // Safari WebRTC errors when no supported video codec is found in the offer.\n    // To prevent the error, inject H264 into the video mLine.\n    if (browser.isSafariWithWebrtc() && !browser.isSafariWithVP8()) {\n        logger.debug('Maybe injecting H264 into the remote description');\n\n        // eslint-disable-next-line no-param-reassign\n        description = this._injectH264IfNotPresent(description);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Inserts an H264 payload into the description if not already present. This is\n * need for Safari WebRTC, which errors when no supported video codec is found\n * in the offer. Related bug reports:\n * https://bugs.webkit.org/show_bug.cgi?id=173141\n * https://bugs.chromium.org/p/webrtc/issues/detail?id=4957\n *\n * @param {RTCSessionDescription} description - An RTCSessionDescription\n * to inject with an H264 payload.\n * @private\n * @returns {RTCSessionDescription}\n */\nTraceablePeerConnection.prototype._injectH264IfNotPresent = function(\n        description) {\n    const parsedSdp = transform.parse(description.sdp);\n    const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n    if (!videoMLine) {\n        logger.debug('No videoMLine found, no need to inject H264.');\n\n        return description;\n    }\n\n    if (videoMLine.rtp.some(rtp => rtp.codec.toLowerCase() === 'h264')) {\n        logger.debug('H264 codec found in video mLine, no need to inject.');\n\n        return description;\n    }\n\n    const { fmtp, payloads, rtp } = videoMLine;\n    const payloadsArray = payloads.toString().split(' ');\n    let dummyPayloadType;\n\n    for (let i = 127; i >= 96; i--) {\n        if (!payloadsArray.includes(i)) {\n            dummyPayloadType = i;\n            payloadsArray.push(i);\n            videoMLine.payloads = payloadsArray.join(' ');\n            break;\n        }\n    }\n\n    if (typeof dummyPayloadType === 'undefined') {\n        logger.error('Could not find valid payload type to inject.');\n\n        return description;\n    }\n\n    rtp.push({\n        codec: 'H264',\n        payload: dummyPayloadType,\n        rate: 90000\n    });\n\n    fmtp.push({\n        config: 'level-asymmetry-allowed=1;'\n            + 'packetization-mode=1;'\n            + 'profile-level-id=42e01f',\n        payload: dummyPayloadType\n    });\n\n    logger.debug(\n        `Injecting H264 payload type ${dummyPayloadType} into video mLine.`);\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info('Clearing primary video SSRC!');\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(\n        SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error('RTC._removePeerConnection returned false');\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`Closing ${this}...`);\n    this.peerconnection.close();\n};\n\n/**\n * Modifies the values of the setup attributes (defined by\n * {@link http://tools.ietf.org/html/rfc4145#section-4}) of a specific SDP\n * answer in order to overcome a delay of 1 second in the connection\n * establishment between some devices and Videobridge.\n *\n * @param {SDP} offer - the SDP offer to which the specified SDP answer is\n * being prepared to respond\n * @param {SDP} answer - the SDP to modify\n * @private\n */\nconst _fixAnswerRFC4145Setup = function(offer, answer) {\n    if (!(browser.isChromiumBased() || browser.isReactNative())) {\n        // It looks like Firefox doesn't agree with the fix (at least in its\n        // current implementation) because it effectively remains active even\n        // after we tell it to become passive. Apart from Firefox which I tested\n        // after the fix was deployed, I tested Chrome only. In order to prevent\n        // issues with other browsers, limit the fix to known devices for the\n        // time being.\n        return;\n    }\n\n    // XXX Videobridge is the (SDP) offerer and WebRTC (e.g. Chrome) is the\n    // answerer (as orchestrated by Jicofo). In accord with\n    // http://tools.ietf.org/html/rfc5245#section-5.2 and because both peers\n    // are ICE FULL agents, Videobridge will take on the controlling role and\n    // WebRTC will take on the controlled role. In accord with\n    // https://tools.ietf.org/html/rfc5763#section-5, Videobridge will use the\n    // setup attribute value of setup:actpass and WebRTC will be allowed to\n    // choose either the setup attribute value of setup:active or\n    // setup:passive. Chrome will by default choose setup:active because it is\n    // RECOMMENDED by the respective RFC since setup:passive adds additional\n    // latency. The case of setup:active allows WebRTC to send a DTLS\n    // ClientHello as soon as an ICE connectivity check of its succeeds.\n    // Unfortunately, Videobridge will be unable to respond immediately because\n    // may not have WebRTC's answer or may have not completed the ICE\n    // connectivity establishment. Even more unfortunate is that in the\n    // described scenario Chrome's DTLS implementation will insist on\n    // retransmitting its ClientHello after a second (the time is in accord\n    // with the respective RFC) and will thus cause the whole connection\n    // establishment to exceed at least 1 second. To work around Chrome's\n    // idiosyncracy, don't allow it to send a ClientHello i.e. change its\n    // default choice of setup:active to setup:passive.\n    if (offer && answer\n            && offer.media && answer.media\n            && offer.media.length === answer.media.length) {\n        answer.media.forEach((a, i) => {\n            if (SDPUtil.findLine(\n                    offer.media[i],\n                    'a=setup:actpass',\n                    offer.session)) {\n                answer.media[i]\n                    = a.replace(/a=setup:active/g, 'a=setup:passive');\n            }\n        });\n        answer.raw = answer.session + answer.media.join('');\n    }\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    if (browser.isFirefox() && this.isSimulcastOn()) {\n        const videoSender\n            = this.peerconnection.getSenders().find(sender =>\n                sender.track !== null && sender.track.kind === 'video');\n        const simParams = {\n            encodings: [\n                {\n                    rid: SIM_LAYER_1_RID,\n                    scaleResolutionDownBy: 4\n                },\n                {\n                    rid: SIM_LAYER_2_RID,\n                    scaleResolutionDownBy: 2\n                },\n                {\n                    rid: SIM_LAYER_3_RID\n                }\n            ]\n        };\n\n        videoSender.setParameters(simParams);\n    }\n\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            // if we're using unified plan, transform to Plan B.\n            if (browser.usesUnifiedPlan()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.interop.toPlanB(resultSdp);\n                this.trace(\n                    `create${logName}OnSuccess::postTransform (Plan B)`,\n                    dumpSDP(resultSdp));\n                if (this.isSimulcastOn()) {\n                    // eslint-disable-next-line no-param-reassign\n                    resultSdp\n                        = this._injectSsrcGroupForUnifiedSimulcast(resultSdp);\n                    this.trace(\n                        `create${logName}OnSuccess::postTransform`\n                        + '(inject ssrc group)', dumpSDP(resultSdp));\n                }\n            }\n\n            /**\n             * We don't keep ssrcs consitent for Firefox because rewriting\n             *  the ssrcs between createAnswer and setLocalDescription breaks\n             *  the caching in sdp-interop (sdp-interop must know about all\n             *  ssrcs, and it updates its cache in toPlanB so if we rewrite them\n             *  after that, when we try and go back to unified plan it will\n             *  complain about unmapped ssrcs)\n             */\n            if (!browser.usesUnifiedPlan()) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Add simulcast streams if simulcast is enabled\n            if (this.isSimulcastOn()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.supportsRtx()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Fix the setup attribute (see _fixAnswerRFC4145Setup for\n            //  details)\n            if (!isOffer) {\n                const remoteDescription\n                    = new SDP(this.remoteDescription.sdp);\n                const localDescription = new SDP(resultSdp.sdp);\n\n                _fixAnswerRFC4145Setup(remoteDescription, localDescription);\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: localDescription.raw\n                });\n            }\n\n            const ssrcMap = extractSSRCMap(resultSdp);\n\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nfunction extractPrimarySSRC(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n}\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const trackMSID = track.storedMSID;\n\n        if (ssrcMap.has(trackMSID)) {\n            const newSSRC = ssrcMap.get(trackMSID);\n\n            if (!newSSRC) {\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                if (oldSSRCNum === null) {\n                    logger.info(\n                        `Storing new local SSRC for ${track} in ${this}`,\n                        newSSRC);\n                } else {\n                    logger.error(\n                        `Overwriting SSRC for ${track} ${trackMSID} in ${this\n                        } with: `, newSSRC);\n                }\n                this.localSSRCs.set(track.rtcId, newSSRC);\n\n                this.eventEmitter.emit(\n                    RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            } else {\n                logger.debug(\n                    `The local SSRC(${newSSRCNum}) for ${track} ${trackMSID}`\n                     + `is still up to date in ${this}`);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @param {Function} callback - The function to invoke after successfully\n * obtaining stats.\n * @param {Function} errback - The function to invoke after failing to obtain\n * stats.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\n    // TODO (brian): After moving all browsers to adapter, check if adapter is\n    // accounting for different getStats apis, making the browser-checking-if\n    // unnecessary.\n    if (browser.isSafariWithWebrtc() || browser.isFirefox()\n            || browser.isReactNative()) {\n        // uses the new Promise based getStats\n        this.peerconnection.getStats()\n            .then(callback)\n            .catch(errback || (() => {\n\n                // Making sure that getStats won't fail if error callback is\n                // not passed.\n            }));\n    } else {\n        this.peerconnection.getStats(callback);\n    }\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\n    }\n    if (this.isSimulcastOn()) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIMULCAST_LAYERS; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx && browser.supportsRtx()) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\nconst handleLayerSuspension = function(peerConnection, isSelected) {\n    if (!peerConnection.getSenders) {\n        logger.debug('Browser doesn\\'t support RTPSender');\n\n        return;\n    }\n\n    const videoSender = peerConnection.getSenders()\n        .find(sender => sender.track.kind === 'video');\n\n    if (!videoSender) {\n        logger.warn('handleLayerSuspension unable to find video sender');\n\n        return;\n    }\n    if (!videoSender.getParameters) {\n        logger.debug('Browser doesn\\'t support RTPSender parameters');\n\n        return;\n    }\n    const parameters = videoSender.getParameters();\n\n    if (isSelected) {\n        logger.debug('Currently selected, enabling all sim layers');\n\n        // Make sure all encodings are enabled\n        parameters.encodings.forEach(e => {\n            e.active = true;\n        });\n    } else {\n        logger.debug('Not currently selected, disabling upper layers');\n\n        // Turn off the upper simulcast layers\n        [ 1, 2 ].forEach(simIndex => {\n            if (parameters.encodings[simIndex]) {\n                parameters.encodings[simIndex].active = false;\n            }\n        });\n    }\n    videoSender.setParameters(parameters);\n};\n\n/**\n * Set whether or not the endpoint is 'selected' by other endpoints, meaning\n * it appears on their main stage\n */\nTraceablePeerConnection.prototype.setIsSelected = function(isSelected) {\n    if (this.options.enableLayerSuspension) {\n        logger.debug('Layer suspension enabled,'\n            + `currently selected? ${isSelected}`);\n        handleLayerSuspension(this.peerconnection, isSelected);\n    }\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\n};\n","import { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiTrack from './JitsiTrack';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindMuteHandlers();\n        }\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track muted handlers.\n     *\n     * @returns {void}\n     */\n    _bindMuteHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(\n            `\"onmute\" event(${Date.now()}): `,\n            this.getParticipantId(), this.getType(), this.getSSRC());\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(\n            `\"onunmute\" event(${Date.now()}): `,\n            this.getParticipantId(), this.getType(), this.getSSRC());\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[${\n            this.ownerEndpointId}, ${\n            this.getType()}, p2p: ${\n            this.isP2P}]`;\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     */\n    constructor(tpc) {\n        this.tpc = tpc;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = muted || !isInPeerConnection;\n\n            logger.debug(\n                `${this.tpc} ${videoTrack} muted: ${\n                    muted}, is in PeerConnection: ${\n                    isInPeerConnection} => should fake sdp ? : ${\n                    shouldFakeSdp}`);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = 'sendrecv';\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                logger.debug(\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\n                        videoTrack}`);\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    logger.debug(\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\n                        group);\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        const streamId = streamAndTrackIDs[0];\n                        const trackId = streamAndTrackIDs[1];\n\n                        ssrcLine.value\n                            = `${streamId}-${pcId} ${trackId}-${pcId}`;\n                    } else {\n                        logger.warn(\n                            'Unable to munge local MSID'\n                                + `- weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\nimport SDPUtil from './SDPUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    logger.debug(\n        `Updating mline to associate ${rtxSsrc}`\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\n\n        return;\n    }\n    if (previousRtxSSRC) {\n        logger.debug(\n            `${primarySsrc} was previously associated with rtx`\n            + `${previousRtxSSRC}, removing all references to it`);\n\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\n        logger.debug(mLine.dumpSSRCGroups());\n\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return false;\n        }\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\n            ' making sure all have rtx streams');\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (correspondingRtxSsrc) {\n                logger.debug(\n                    'Already have an associated rtx ssrc for'\n                    + `video ssrc ${ssrc}: ${correspondingRtxSsrc}`);\n            } else {\n                logger.debug(\n                    `No previously associated rtx ssrc for video ssrc ${ssrc}`);\n\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    logger.debug(\n                        `Rtx stream ${previousAssociatedRtxStream} `\n                        + 'already existed in the sdp as an rtx stream for '\n                        + `${ssrc}`);\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\n                                 + `for ssrc ${ssrc}`);\n                }\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\n                             + `for video ssrc ${ssrc}`);\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.logPrefix} no 'video' media found in the sdp: `\n                    + `${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(\n                    `${this.logPrefix} no SSRC found for the recvonly video`\n                        + 'stream!');\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency couldn't`\n                        + ' parse new primary ssrc');\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\n                        + `${newPrimarySsrc} with cached `\n                        + `${this.cachedPrimarySsrc}`);\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n                logger.info(\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\n                        + `${this.cachedPrimarySsrc}`);\n            }\n\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as JitsiConferenceEvents from '../JitsiConferenceEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * Detect user trying to speek while is locally muted and fires an event.\n */\nexport default class TalkMutedDetection {\n    /**\n     * Creates TalkMutedDetection\n     * @param conference the JitsiConference instance that created us.\n     * @param callback the callback to call when detected that the local user is\n     * talking while her microphone is muted.\n     * @constructor\n     */\n    constructor(conference, callback) {\n        /**\n         * The callback to call when detected that the local user is talking\n         * while her microphone is muted.\n         *\n         * @private\n         */\n        this._callback = callback;\n\n        /**\n         * The indicator which determines whether <tt>callback</tt> has been\n         * invoked for the current local audio track of <tt>conference</tt> so\n         * that it is invoked once only.\n         *\n         * @private\n         */\n        this._eventFired = false;\n\n        // XXX I went back and forth on the subject of where to put the access\n        // to statistics. On the one had, (1) statistics is likely intended to\n        // be private to conference and (2) there is a desire to keep the\n        // dependencies of modules to the minimum (i.e. not have\n        // TalkMutedDetection depend on statistics). On the other hand, (1)\n        // statistics is technically not private because\n        // JitsiConferenceEventManager accesses it and (2) TalkMutedDetection\n        // works exactly because it knows that there are no audio levels for\n        // JitsiLocalTrack but there are audio levels for the local participant\n        // through statistics.\n        conference.statistics.addAudioLevelListener(\n            this._audioLevel.bind(this));\n\n        conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n        conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            this._trackAdded.bind(this));\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Receives audio level events for all send and receive streams.\n     *\n     * @param {TraceablePeerConnection} pc - WebRTC PeerConnection object of the\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of\n     * the endpoint/participant/stream being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt>.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> represents a\n     * local/send stream or <tt>false</tt> for a remote/receive stream.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio stream only and if event is not\n        // sent yet.\n        if (!isLocal || !this.audioTrack || this._eventFired) {\n            return;\n        }\n\n        if (this.audioTrack.isMuted()\n            && audioLevel > SPEECH_DETECT_THRESHOLD) {\n            this._eventFired = true;\n            this._callback();\n        }\n    }\n    /* eslint-enable max-params */\n\n    /**\n     * Determines whether a specific {@link JitsiTrack} represents a local audio\n     * track.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> to be checked whether\n     * it represents a local audio track.\n     * @private\n     * @return {boolean} - <tt>true</tt> if the specified <tt>track</tt>\n     * represents a local audio track; otherwise, <tt>false</tt>.\n     */\n    _isLocalAudioTrack(track) {\n        return track.isAudioTrack() && track.isLocal();\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that a {@link JitsiTrack} was\n     * added to the associated {@link JitsiConference}. Looks for the local\n     * audio track only.\n     *\n     * @param {JitsiTrack} track - The added <tt>JitsiTrack</tt>.\n     * @private\n     */\n    _trackAdded(track) {\n        if (this._isLocalAudioTrack(track)) {\n            this.audioTrack = track;\n        }\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that the mute state of a\n     * {@link JitsiTrack} has changed. Looks for the local audio track only.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> whose mute state has\n     * changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (this._isLocalAudioTrack(track) && track.isMuted()) {\n            this._eventFired = false;\n        }\n    }\n}\n","import * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst VideoType = require('../../service/RTC/VideoType');\nconst Resolutions = require('../../service/RTC/Resolutions');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * See media/engine/simulcast.ss from webrtc.org\n */\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        max: 5000,\n        target: 4000,\n        min: 800 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        max: 2500,\n        target: 2500,\n        min: 600 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        max: 900,\n        target: 900,\n        min: 450 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        max: 700,\n        target: 500,\n        min: 150 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        max: 450,\n        target: 350,\n        min: 150 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        max: 200,\n        target: 150,\n        min: 30 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n\n/**\n * The current cap (in kbps) put on the video stream (or null if there isn't\n * a cap).  If there is a cap, we'll take it into account when calculating\n * the current quality.\n */\nlet videoBitrateCap = null;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video started.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart) {\n    // Completely ignore the bitrate in the first 5 seconds, as the first\n    // event seems to fire very early and the value is suspicious and causes\n    // false positives.\n    if (millisSinceStart < 15000) {\n        return 1;\n    }\n\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    if (simulcast) {\n        // Find the first format with height no bigger than ours.\n        let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n        if (simulcastFormat) {\n            // Sum the target fields from all simulcast layers for the given\n            // resolution (e.g. 720p + 360p + 180p).\n            for (height = simulcastFormat.height; height >= 180; height /= 2) {\n                const targetHeight = height;\n\n                simulcastFormat\n                    = kSimulcastFormats.find(f => f.height === targetHeight);\n                if (simulcastFormat) {\n                    target += simulcastFormat.target;\n                } else {\n                    break;\n                }\n            }\n        }\n    } else {\n        // See GetMaxDefaultVideoBitrateKbps in\n        // media/engine/webrtcvideoengine2.cc from webrtc.org\n        const pixels = resolution.width * resolution.height;\n\n        if (pixels <= 320 * 240) {\n            target = 600;\n        } else if (pixels <= 640 * 480) {\n            target = 1700;\n        } else if (pixels <= 960 * 540) {\n            target = 2000;\n        } else {\n            target = 2500;\n        }\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second.\n    return Math.min(target, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        /**\n         * The time at which a video bitrate cap was last removed.  We use\n         * this to calculate how much time we, as a sender, have had to\n         * ramp-up\n         */\n        this._timeLastBwCapRemoved = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (options.startBitrate && options.startBitrate > 0) {\n            startBitrate = options.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module\n        // and update the _localStats field.\n        // Oh, and by the way, the resolutions of all remote participants are\n        // also piggy-backed in these \"local\" statistics. It's obvious, really,\n        // if one carefully reads the *code* (but not the docs) in\n        // UI/VideoLayout/VideoLayout.js#updateLocalConnectionStats in\n        // jitsi-meet\n        // TODO: We should keep track of the remote resolution in _remoteStats,\n        // and notify about changes via separate events.\n        conference.statistics.addConnectionStatsListener(\n            this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or\n     * a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the\n     * camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the sending bitrate.\n\n            // Figure out if simulcast is in use\n            const activeTPC = this._conference.getActivePeerConnection();\n            const isSimulcastOn\n                = Boolean(activeTPC && activeTPC.isSimulcastOn());\n\n            const newVideoBitrateCap\n                = activeTPC && activeTPC.bandwidthLimiter\n                && activeTPC.bandwidthLimiter.getBandwidthLimit('video');\n\n            // If we had a cap set but there isn't one now, then it has\n            // just been 'lifted', so we should treat this like a new\n            // ramp up.\n            if (!newVideoBitrateCap && videoBitrateCap) {\n                this._timeLastBwCapRemoved = window.performance.now();\n\n                // Set the start bitrate to whatever we were just capped to\n                startBitrate = videoBitrateCap;\n            }\n            videoBitrateCap = newVideoBitrateCap;\n\n            // time since sending of video was enabled.\n            const millisSinceStart = window.performance.now()\n                - Math.max(this._timeVideoUnmuted,\n                    this._timeIceConnected,\n                    this._timeLastBwCapRemoved);\n\n            // expected sending bitrate in perfect conditions\n            let target\n                = getTarget(isSimulcastOn, resolution, millisSinceStart);\n\n            target = Math.min(0.9 * target, MAX_TARGET_BITRATE);\n\n            if (videoBitrateCap) {\n                target = Math.min(target, videoBitrateCap);\n            }\n\n            quality = 100 * this._localStats.bitrate.upload / target;\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds\n                = (window.performance.now() - this._lastConnectionQualityUpdate)\n                    / 1000;\n\n            quality\n                = Math.min(\n                    quality,\n                    prevConnectionQuality\n                        + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion\n        };\n\n        try {\n            this._conference.broadcastEndpointMessage({\n                type: STATS_MESSAGE_TYPE,\n                values: data });\n        } catch (e) {\n            // We often hit this in the beginning of a call, before the data\n            // channel is ready. It is not a big problem, because we will\n            // send the statistics again after a few seconds, and the error is\n            // already logged elsewhere. So just ignore it.\n\n            // let errorMsg = \"Failed to broadcast local stats\";\n            // logger.error(errorMsg, e);\n            // GlobalOnErrorHandler.callErrorHandler(\n            //    new Error(errorMsg + \": \" + e));\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack ? localVideoTrack.resolution : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A delayed ICE failed notification which is triggered only if the ICE\n * connection does not recover soon after or before the XMPP connection is\n * restored (if it was ever broken). If ICE fails while the XMPP connection is\n * not broken then the notifications will be sent after 2 seconds delay. This\n * extra delay is not intentional just a side effect of the code.\n * NOTE that this delayed task can only be used if PING is supported by the XMPP\n * server.\n */\nexport default class IceFailedNotification {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * Starts the task.\n     * @param {JingleSessionPC} session - the JVB Jingle session.\n     */\n    start(session) {\n        // The 65 seconds are greater than the default Prosody's BOSH\n        // timeout of 60. This gives some time for the XMPP connection\n        // to recover.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (this._canceled) {\n                    return;\n                }\n\n                if (this._conference.isJvbConnectionInterrupted) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        logger.info(\n                            'Sending ICE failed'\n                            + ' - the connection has not recovered');\n                        this._iceFailedTimeout = undefined;\n                        session.sendIceFailedNotification();\n                    }, 2000);\n                } else {\n                    logger.info(\n                        'ICE connection restored - not sending ICE failed');\n                }\n            },\n            error => {\n                logger.error(\n                    'PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        if (this._iceFailedTimeout) {\n            window.clearTimeout(this._iceFailedTimeout);\n        }\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     */\n    _emitSessionUpdate(session) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { sessionID, status, error, recordingMode } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import browser from '../browser';\nimport { createRttByRegionEvent }\n    from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport RTCUtils from '../RTC/RTCUtils';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The options to pass to createOffer (we need to offer to receive *something*\n * for the PC to gather candidates.\n */\nconst offerOptions = {\n    offerToReceiveAudio: 1,\n    offerToReceiveVideo: 0\n};\n\n\n/**\n * The interval at which the webrtc engine sends STUN keep alive requests.\n * @type {number}\n */\nconst stunKeepAliveIntervalMs = 10000;\n\n/**\n * Wraps a PeerConnection with one specific STUN server and measures the RTT\n * to the STUN server.\n */\nclass PCMonitor {\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {String} region - The region of the STUN server.\n     * @param {String} address - The address of the STUN server.\n     * @param {number} getStatsIntervalMs how often to call getStats.\n     * @param {number} delay the delay after which the PeerConnection will be\n     * started (that is, createOffer and setLocalDescription will be invoked).\n     *\n     */\n    constructor(region, address, getStatsIntervalMs, delay) {\n        /* eslint-disable max-params */\n        this.region = region;\n        this.getStatsIntervalMs = getStatsIntervalMs;\n        this.getStatsInterval = null;\n\n        // What we consider the current RTT. It is Math.min(this.rtts).\n        this.rtt = Infinity;\n\n        // The RTT measurements we've made from the latest getStats() calls.\n        this.rtts = [];\n\n        const iceServers = [ { 'url': `stun:${address}` } ];\n\n        this.pc = new RTCUtils.RTCPeerConnectionType(\n            {\n                'iceServers': iceServers\n            });\n\n        // Maps a key consisting of the IP address, port and priority of a\n        // candidate to some state related to it. If we have more than one\n        // network interface we will might multiple srflx candidates and this\n        // helps to distinguish between then.\n        this.candidates = {};\n\n        this.stopped = false;\n\n        this.start = this.start.bind(this);\n        this.stop = this.stop.bind(this);\n        this.startStatsInterval = this.startStatsInterval.bind(this);\n        this.handleCandidateRtt = this.handleCandidateRtt.bind(this);\n\n        window.setTimeout(this.start, delay);\n    }\n\n    /**\n     * Starts this PCMonitor. That is, invokes createOffer and\n     * setLocalDescription on the PeerConnection and starts an interval which\n     * calls getStats.\n     */\n    start() {\n        if (this.stopped) {\n            return;\n        }\n\n        this.pc.createOffer(offerOptions).then(offer => {\n            this.pc.setLocalDescription(\n                offer,\n                () => {\n                    logger.info(\n                        `setLocalDescription success for ${this.region}`);\n                    this.startStatsInterval();\n                },\n                error => {\n                    logger.warn(\n                        `setLocalDescription failed for ${this.region}: ${\n                            error}`);\n                }\n            );\n        });\n    }\n\n    /**\n     * Starts an interval which invokes getStats on the PeerConnection and\n     * measures the RTTs for the different candidates.\n     */\n    startStatsInterval() {\n        this.getStatsInterval = window.setInterval(\n            () => {\n                // Note that the data that we use to measure the RTT is only\n                // available in the legacy (callback based) getStats API.\n                this.pc.getStats(stats => {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n                        const rttTotal\n                            = Number(res.stat('stunKeepaliveRttTotal'));\n\n                        // We recognize the results that we care for (local\n                        // candidates of type srflx) by the existance of the\n                        // stunKeepaliveRttTotal stat.\n                        if (rttTotal > 0) {\n                            const candidateKey\n                                = `${res.stat('ipAddress')}_${\n                                    res.stat('portNumber')}_${\n                                    res.stat('priority')}`;\n\n                            this.handleCandidateRtt(\n                                candidateKey,\n                                rttTotal,\n                                Number(\n                                    res.stat('stunKeepaliveResponsesReceived')),\n                                Number(\n                                    res.stat('stunKeepaliveRequestsSent')));\n                        }\n                    }\n\n                    // After we've measured the RTT for all candidates we,\n                    // update the state of the PC with the shortest one.\n                    let rtt = Infinity;\n\n                    for (const key in this.candidates) {\n                        if (this.candidates.hasOwnProperty(key)\n                            && this.candidates[key].rtt > 0) {\n                            rtt = Math.min(rtt, this.candidates[key].rtt);\n                        }\n                    }\n\n                    // We keep the last 6 measured RTTs and choose the shortest\n                    // one to export to analytics. This is because we often see\n                    // failures get a real measurement which end up as Infinity.\n                    this.rtts.push(rtt);\n                    if (this.rtts.length > 6) {\n                        this.rtts = this.rtts.splice(1, 7);\n                    }\n                    this.rtt = Math.min(...this.rtts);\n                });\n            },\n            this.getStatsIntervalMs\n        );\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Updates the RTT for a candidate identified by \"key\" based on the values\n     * from getStats() and the previously saved state (i.e. old values).\n     *\n     * @param {String} key the ID for the candidate\n     * @param {number} rttTotal the value of the 'stunKeepaliveRttTotal' just\n     * measured.\n     * @param {number} responsesReceived the value of the\n     * 'stunKeepaliveResponsesReceived' stat just measured.\n     * @param {number} requestsSent the value of the 'stunKeepaliveRequestsSent'\n     * stat just measured.\n     */\n    handleCandidateRtt(key, rttTotal, responsesReceived, requestsSent) {\n        /* eslist-enable max-params */\n        if (!this.candidates[key]) {\n            this.candidates[key] = {\n                rttTotal: 0,\n                responsesReceived: 0,\n                requestsSent: 0,\n                rtt: NaN\n            };\n        }\n\n        const rttTotalDiff = rttTotal - this.candidates[key].rttTotal;\n        const responsesReceivedDiff\n            = responsesReceived - this.candidates[key].responsesReceived;\n\n        // We observe that when the difference between the number of requests\n        // and responses has grown (i.q. when the value below is positive), the\n        // the RTT measurements are incorrect (too low). For this reason we\n        // ignore these measurement (setting rtt=NaN), but update our state.\n        const requestsResponsesDiff\n            = (requestsSent - responsesReceived)\n            - (this.candidates[key].requestsSent\n                - this.candidates[key].responsesReceived);\n        let rtt = NaN;\n\n        if (responsesReceivedDiff > 0 && requestsResponsesDiff === 0) {\n            rtt = rttTotalDiff / responsesReceivedDiff;\n        }\n\n        this.candidates[key].rttTotal = rttTotal;\n        this.candidates[key].responsesReceived = responsesReceived;\n        this.candidates[key].requestsSent = requestsSent;\n        this.candidates[key].rtt = rtt;\n    }\n\n\n    /**\n     * Stops this PCMonitor, clearing its intervals and stopping the\n     * PeerConnection.\n     */\n    stop() {\n        if (this.getStatsInterval) {\n            window.clearInterval(this.getStatsInterval);\n        }\n\n        this.pc.close();\n\n        this.stopped = true;\n    }\n}\n\n/**\n * A class which monitors the round-trip time (RTT) to a set of STUN servers.\n * The measured RTTs are sent as analytics events. It uses a separate\n * PeerConnection (represented as a PCMonitor) for each STUN server.\n */\nexport default class RttMonitor {\n    /**\n     * Initializes a new RttMonitor.\n     * @param {Object} config the object holding the configuration.\n     */\n    constructor(config) {\n        if (!config || !config.enabled\n            || !browser.supportsLocalCandidateRttStatistics()) {\n            return;\n        }\n\n        // Maps a region to the PCMonitor instance for that region.\n        this.pcMonitors = {};\n\n        this.startPCMonitors = this.startPCMonitors.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n        this.stop = this.stop.bind(this);\n\n        this.analyticsInterval = null;\n        this.stopped = false;\n\n        const initialDelay = config.initialDelay || 60000;\n\n\n        logger.info(\n            `Starting RTT monitor with an initial delay of ${initialDelay}`);\n\n\n        window.setTimeout(\n            () => this.startPCMonitors(config),\n            initialDelay);\n    }\n\n    /**\n     * Starts the PCMonitors according to the configuration.\n     */\n    startPCMonitors(config) {\n        if (!config.stunServers) {\n            logger.warn('No stun servers configured.');\n\n            return;\n        }\n\n        if (this.stopped) {\n            return;\n        }\n\n        const getStatsIntervalMs\n            = config.getStatsInterval || stunKeepAliveIntervalMs;\n        const analyticsIntervalMs\n            = config.analyticsInterval || getStatsIntervalMs;\n        const count = Object.keys(config.stunServers).length;\n        const offset = getStatsIntervalMs / count;\n\n        // We delay the initialization of each PC so that they are uniformly\n        // distributed across the getStatsIntervalMs.\n        let i = 0;\n\n        for (const region in config.stunServers) {\n            if (config.stunServers.hasOwnProperty(region)) {\n                const address = config.stunServers[region];\n\n                this.pcMonitors[region]\n                    = new PCMonitor(\n                        region,\n                        address,\n                        getStatsIntervalMs,\n                        offset * i);\n                i++;\n            }\n        }\n\n        window.setTimeout(\n            () => {\n                if (!this.stopped) {\n                    this.analyticsInterval\n                        = window.setInterval(\n                        this.sendAnalytics, analyticsIntervalMs);\n                }\n            },\n            1000);\n    }\n\n    /**\n     * Sends an analytics event with the measured RTT to each region/STUN\n     * server.\n     */\n    sendAnalytics() {\n        const rtts = {};\n\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                const rtt = this.pcMonitors[region].rtt;\n\n                if (!isNaN(rtt) && rtt !== Infinity) {\n                    rtts[region.replace('-', '_')] = rtt;\n                }\n            }\n        }\n\n        if (rtts) {\n            Statistics.sendAnalytics(createRttByRegionEvent(rtts));\n        }\n    }\n\n    /**\n     * Stops this RttMonitor, clearing all intervals and closing all\n     * PeerConnections.\n     */\n    stop() {\n        logger.info('Stopping RttMonitor.');\n        this.stopped = true;\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                this.pcMonitors[region].stop();\n            }\n        }\n        this.pcMonitors = {};\n\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n}\n","/* global __filename */\n\nimport { createRtpStatsEvent } from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport Statistics from './statistics';\nimport * as VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._onLocalStatsUpdated = data => this._calculateAvgStats(data);\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport SpeakerStats from './SpeakerStats';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        let savedUser = this.stats.users[userId];\n\n        if (!savedUser) {\n            savedUser = this.stats.users[userId]\n                = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n\n            if (this.stats.users[userId]) {\n                speakerStatsToUpdate = this.stats.users[userId];\n\n                if (!speakerStatsToUpdate.getDisplayName()) {\n                    speakerStatsToUpdate\n                        .setDisplayName(newStats[userId].displayName);\n                }\n            } else {\n                speakerStatsToUpdate = new SpeakerStats(\n                    userId, newStats[userId].displayName);\n                this.stats.users[userId] = speakerStatsToUpdate;\n                speakerStatsToUpdate.markAsHasLeft();\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n        }\n    }\n}\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio the the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The constant for the name of the focus component.\n * @type {string}\n */\nComponentsVersions.FOCUS_COMPONENT = 'focus';\n\n/**\n * The constant for the name of the videobridge component.\n * @type {string}\n */\nComponentsVersions.VIDEOBRIDGE_COMPONENT = 'videobridge';\n\n/**\n * The constant for the name of the XMPP server component.\n * @type {string}\n */\nComponentsVersions.XMPP_SERVER_COMPONENT = 'xmpp';\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processPresence.bind(this));\n}\n\nComponentsVersions.prototype.processPresence\n    = function(node, mucResource, mucJid) {\n        if (node.attributes.xmlns !== 'http://jitsi.org/jitmeet') {\n            logger.warn('Ignored presence versions node - invalid xmlns', node);\n\n            return;\n        }\n\n        if (!this.conference._isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${node}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        node.children.forEach(item => {\n\n            const componentName = item.attributes.name;\n\n            if (componentName !== ComponentsVersions.FOCUS_COMPONENT\n            && componentName !== ComponentsVersions.XMPP_SERVER_COMPONENT\n            && componentName !== ComponentsVersions.VIDEOBRIDGE_COMPONENT) {\n                logger.warn(\n                    `Received version for not supported component name: ${\n                        componentName}`);\n\n                return;\n            }\n\n            const version = item.value;\n\n            if (this.versions[componentName] !== version) {\n                this.versions[componentName] = version;\n                logger.info(`Got ${componentName} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: componentName,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\n     * video should be returned as a desktop stream. Defaults to false.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\n     * the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote video stream has been received and converted to a\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out. The arguments passed in are the\n     * jid to send the message to and the message\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            iceConfig: jitsiConnection\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            iceConfig: this._options.iceConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTC from '../RTC/RTC';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should\n     * send offers. If false, the local client should send answers. Defaults to\n     * false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote media stream has been received through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which\n     * the peer connection is being establish and which should receive direct\n     * messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\n     * connection should accept incoming video streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            iceConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const iceConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.iceConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference} to be passed in. {@code ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ }\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(this, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            iceConfigStub, // iceConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/* global __filename */\n\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport AuthUtil from './modules/util/AuthUtil';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport Logger from 'jitsi-meet-logger';\nimport * as MediaType from './service/RTC/MediaType';\nimport Resolutions from './service/RTC/Resolutions';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport Statistics from './modules/statistics/statistics';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_PERMISSION_PROMPT_TIMEOUT = 1000;\n\n/**\n * Gets the next lowest desirable resolution to try for a camera. If the given\n * resolution is already the lowest acceptable resolution, returns {@code null}.\n *\n * @param resolution the current resolution\n * @return the next lowest resolution from the given one, or {@code null} if it\n * is already the lowest acceptable resolution.\n */\nfunction getLowerResolution(resolution) {\n    if (!Resolutions[resolution]) {\n        return null;\n    }\n    const order = Resolutions[resolution].order;\n    let res = null;\n    let resName = null;\n\n    Object.keys(Resolutions).forEach(r => {\n        const value = Resolutions[r];\n\n        if (!res || (res.order < value.order && value.order < order)) {\n            resName = r;\n            res = value;\n        }\n    });\n\n    if (resName === resolution) {\n        resName = null;\n    }\n\n    return resName;\n}\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Statistics.init(options);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {object} options.desktopSharingExtensionExternalInstallation -\n     * enables external installation process for desktop sharing extension if\n     * the inline installation is not posible. The following properties should\n     * be provided:\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @param {boolean} (firePermissionPromptIsShownEvent) - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param originalOptions - internal use only, to be able to store the\n     * originally requested options.\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(\n            options = {}, firePermissionPromptIsShownEvent, originalOptions) {\n        let promiseFulfilled = false;\n\n        if (firePermissionPromptIsShownEvent === true) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(\n                        JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                        browser.getName());\n                }\n            }, USER_MEDIA_PERMISSION_PROMPT_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(options)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(options)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.UNSUPPORTED_RESOLUTION\n                    && !browser.usesNewGumFlow()) {\n                    const oldResolution = options.resolution || '720';\n                    const newResolution = getLowerResolution(oldResolution);\n\n                    if (newResolution !== null) {\n                        options.resolution = newResolution;\n\n                        logger.debug(\n                            'Retry createLocalTracks with resolution',\n                            newResolution);\n\n                        Statistics.sendAnalytics(createGetUserMediaEvent(\n                            'warning',\n                            {\n                                'old_resolution': oldResolution,\n                                'new_resolution': newResolution,\n                                reason: 'unsupported resolution'\n                            }));\n\n                        return this.createLocalTracks(\n                            options,\n                            undefined,\n                            originalOptions || Object.assign({}, options));\n                    }\n\n                    // We tried everything. If there is a mandatory device id,\n                    // remove it and let gum find a device to use.\n                    if (originalOptions\n                        && error.gum.constraints\n                        && error.gum.constraints.video\n                        && error.gum.constraints.video.mandatory\n                        && error.gum.constraints.video.mandatory.sourceId) {\n                        originalOptions.cameraDeviceId = undefined;\n\n                        return this.createLocalTracks(originalOptions);\n                    }\n                }\n\n                if (error.name\n                        === JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'chrome_extension_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","module.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\nstrophe_js.Strophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), strophe_js.Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), strophe_js.Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = strophe_js.$iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n\n})));\n//# sourceMappingURL=strophe.disco.js.map\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n'use strict';\n\nvar adapterFactory = require('./adapter_factory.js');\nmodule.exports = adapterFactory({window: global.window});\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n'use strict';\n\nvar utils = require('./utils');\n// Shimming starts here.\nmodule.exports = function(dependencies, opts) {\n  var window = dependencies && dependencies.window;\n\n  var options = {\n    shimChrome: true,\n    shimFirefox: true,\n    shimEdge: true,\n    shimSafari: true,\n  };\n\n  for (var key in opts) {\n    if (hasOwnProperty.call(opts, key)) {\n      options[key] = opts[key];\n    }\n  }\n\n  // Utils.\n  var logging = utils.log;\n  var browserDetails = utils.detectBrowser(window);\n\n  // Export to the adapter global object visible in the browser.\n  var adapter = {\n    browserDetails: browserDetails,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings\n  };\n\n  // Uncomment the line below if you want logging to occur, including logging\n  // for the switch statement below. Can also be turned on in the browser via\n  // adapter.disableLog(false), but then logging from the switch statement below\n  // will not appear.\n  // require('./utils').disableLog(false);\n\n  // Browser shims.\n  var chromeShim = require('./chrome/chrome_shim') || null;\n  var edgeShim = require('./edge/edge_shim') || null;\n  var firefoxShim = require('./firefox/firefox_shim') || null;\n  var safariShim = require('./safari/safari_shim') || null;\n  var commonShim = require('./common_shim') || null;\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n      commonShim.shimCreateObjectURL(window);\n\n      chromeShim.shimGetUserMedia(window);\n      chromeShim.shimMediaStream(window);\n      chromeShim.shimSourceObject(window);\n      chromeShim.shimPeerConnection(window);\n      chromeShim.shimOnTrack(window);\n      chromeShim.shimAddTrackRemoveTrack(window);\n      chromeShim.shimGetSendersWithDtmf(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n      commonShim.shimCreateObjectURL(window);\n\n      firefoxShim.shimGetUserMedia(window);\n      firefoxShim.shimSourceObject(window);\n      firefoxShim.shimPeerConnection(window);\n      firefoxShim.shimOnTrack(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n        logging('MS edge shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming edge.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = edgeShim;\n      commonShim.shimCreateObjectURL(window);\n\n      edgeShim.shimGetUserMedia(window);\n      edgeShim.shimPeerConnection(window);\n      edgeShim.shimReplaceTrack(window);\n\n      // the edge shim implements the full RTCIceCandidate object.\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n      commonShim.shimCreateObjectURL(window);\n\n      safariShim.shimRTCIceServerUrls(window);\n      safariShim.shimCallbacksAPI(window);\n      safariShim.shimLocalStreamsAPI(window);\n      safariShim.shimRemoteStreamsAPI(window);\n      safariShim.shimTrackEventTransceiver(window);\n      safariShim.shimGetUserMedia(window);\n      safariShim.shimCreateOfferLegacy(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n};\n","\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nvar utils = require('../utils.js');\nvar logging = utils.log;\n\nvar chromeShim = {\n  shimMediaStream: function(window) {\n    window.MediaStream = window.MediaStream || window.webkitMediaStream;\n  },\n\n  shimOnTrack: function(window) {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n        window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function() {\n          return this._ontrack;\n        },\n        set: function(f) {\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n          }\n          this.addEventListener('track', this._ontrack = f);\n        }\n      });\n      var origSetRemoteDescription =\n          window.RTCPeerConnection.prototype.setRemoteDescription;\n      window.RTCPeerConnection.prototype.setRemoteDescription = function() {\n        var pc = this;\n        if (!pc._ontrackpoly) {\n          pc._ontrackpoly = function(e) {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', function(te) {\n              var receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = pc.getReceivers().find(function(r) {\n                  return r.track && r.track.id === te.track.id;\n                });\n              } else {\n                receiver = {track: te.track};\n              }\n\n              var event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver: receiver};\n              event.streams = [e.stream];\n              pc.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(function(track) {\n              var receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = pc.getReceivers().find(function(r) {\n                  return r.track && r.track.id === track.id;\n                });\n              } else {\n                receiver = {track: track};\n              }\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver: receiver};\n              event.streams = [e.stream];\n              pc.dispatchEvent(event);\n            });\n          };\n          pc.addEventListener('addstream', pc._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n    }\n  },\n\n  shimGetSendersWithDtmf: function(window) {\n    // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n    if (typeof window === 'object' && window.RTCPeerConnection &&\n        !('getSenders' in window.RTCPeerConnection.prototype) &&\n        'createDTMFSender' in window.RTCPeerConnection.prototype) {\n      var shimSenderWithDtmf = function(pc, track) {\n        return {\n          track: track,\n          get dtmf() {\n            if (this._dtmf === undefined) {\n              if (track.kind === 'audio') {\n                this._dtmf = pc.createDTMFSender(track);\n              } else {\n                this._dtmf = null;\n              }\n            }\n            return this._dtmf;\n          },\n          _pc: pc\n        };\n      };\n\n      // augment addTrack when getSenders is not available.\n      if (!window.RTCPeerConnection.prototype.getSenders) {\n        window.RTCPeerConnection.prototype.getSenders = function() {\n          this._senders = this._senders || [];\n          return this._senders.slice(); // return a copy of the internal state.\n        };\n        var origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n        window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n          var pc = this;\n          var sender = origAddTrack.apply(pc, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(pc, track);\n            pc._senders.push(sender);\n          }\n          return sender;\n        };\n\n        var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n        window.RTCPeerConnection.prototype.removeTrack = function(sender) {\n          var pc = this;\n          origRemoveTrack.apply(pc, arguments);\n          var idx = pc._senders.indexOf(sender);\n          if (idx !== -1) {\n            pc._senders.splice(idx, 1);\n          }\n        };\n      }\n      var origAddStream = window.RTCPeerConnection.prototype.addStream;\n      window.RTCPeerConnection.prototype.addStream = function(stream) {\n        var pc = this;\n        pc._senders = pc._senders || [];\n        origAddStream.apply(pc, [stream]);\n        stream.getTracks().forEach(function(track) {\n          pc._senders.push(shimSenderWithDtmf(pc, track));\n        });\n      };\n\n      var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n      window.RTCPeerConnection.prototype.removeStream = function(stream) {\n        var pc = this;\n        pc._senders = pc._senders || [];\n        origRemoveStream.apply(pc, [stream]);\n\n        stream.getTracks().forEach(function(track) {\n          var sender = pc._senders.find(function(s) {\n            return s.track === track;\n          });\n          if (sender) {\n            pc._senders.splice(pc._senders.indexOf(sender), 1); // remove sender\n          }\n        });\n      };\n    } else if (typeof window === 'object' && window.RTCPeerConnection &&\n               'getSenders' in window.RTCPeerConnection.prototype &&\n               'createDTMFSender' in window.RTCPeerConnection.prototype &&\n               window.RTCRtpSender &&\n               !('dtmf' in window.RTCRtpSender.prototype)) {\n      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n      window.RTCPeerConnection.prototype.getSenders = function() {\n        var pc = this;\n        var senders = origGetSenders.apply(pc, []);\n        senders.forEach(function(sender) {\n          sender._pc = pc;\n        });\n        return senders;\n      };\n\n      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n        get: function() {\n          if (this._dtmf === undefined) {\n            if (this.track.kind === 'audio') {\n              this._dtmf = this._pc.createDTMFSender(this.track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        }\n      });\n    }\n  },\n\n  shimSourceObject: function(window) {\n    var URL = window && window.URL;\n\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement &&\n        !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function() {\n            return this._srcObject;\n          },\n          set: function(stream) {\n            var self = this;\n            // Use _srcObject as a private property for this shim\n            this._srcObject = stream;\n            if (this.src) {\n              URL.revokeObjectURL(this.src);\n            }\n\n            if (!stream) {\n              this.src = '';\n              return undefined;\n            }\n            this.src = URL.createObjectURL(stream);\n            // We need to recreate the blob url when a track is added or\n            // removed. Doing it manually since we want to avoid a recursion.\n            stream.addEventListener('addtrack', function() {\n              if (self.src) {\n                URL.revokeObjectURL(self.src);\n              }\n              self.src = URL.createObjectURL(stream);\n            });\n            stream.addEventListener('removetrack', function() {\n              if (self.src) {\n                URL.revokeObjectURL(self.src);\n              }\n              self.src = URL.createObjectURL(stream);\n            });\n          }\n        });\n      }\n    }\n  },\n\n  shimAddTrackRemoveTrack: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n    // shim addTrack and removeTrack.\n    if (window.RTCPeerConnection.prototype.addTrack &&\n        browserDetails.version >= 63) {\n      return;\n    }\n\n    // also shim pc.getLocalStreams when addTrack is shimmed\n    // to return the original streams.\n    var origGetLocalStreams = window.RTCPeerConnection.prototype\n        .getLocalStreams;\n    window.RTCPeerConnection.prototype.getLocalStreams = function() {\n      var self = this;\n      var nativeStreams = origGetLocalStreams.apply(this);\n      self._reverseStreams = self._reverseStreams || {};\n      return nativeStreams.map(function(stream) {\n        return self._reverseStreams[stream.id];\n      });\n    };\n\n    var origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function(stream) {\n      var pc = this;\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n\n      stream.getTracks().forEach(function(track) {\n        var alreadyExists = pc.getSenders().find(function(s) {\n          return s.track === track;\n        });\n        if (alreadyExists) {\n          throw new DOMException('Track already exists.',\n              'InvalidAccessError');\n        }\n      });\n      // Add identity mapping for consistency with addTrack.\n      // Unless this is being used with a stream from addTrack.\n      if (!pc._reverseStreams[stream.id]) {\n        var newStream = new window.MediaStream(stream.getTracks());\n        pc._streams[stream.id] = newStream;\n        pc._reverseStreams[newStream.id] = stream;\n        stream = newStream;\n      }\n      origAddStream.apply(pc, [stream]);\n    };\n\n    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream = function(stream) {\n      var pc = this;\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n\n      origRemoveStream.apply(pc, [(pc._streams[stream.id] || stream)]);\n      delete pc._reverseStreams[(pc._streams[stream.id] ?\n          pc._streams[stream.id].id : stream.id)];\n      delete pc._streams[stream.id];\n    };\n\n    window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n      var pc = this;\n      if (pc.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      var streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(function(t) {\n            return t === track;\n          })) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      var alreadyExists = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n      var oldStream = pc._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(function() {\n          pc.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        var newStream = new window.MediaStream([track]);\n        pc._streams[stream.id] = newStream;\n        pc._reverseStreams[newStream.id] = stream;\n        pc.addStream(newStream);\n      }\n      return pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n    };\n\n    // replace the internal stream id with the external one and\n    // vice versa.\n    function replaceInternalStreamId(pc, description) {\n      var sdp = description.sdp;\n      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {\n        var externalStream = pc._reverseStreams[internalId];\n        var internalStream = pc._streams[externalStream.id];\n        sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n            externalStream.id);\n      });\n      return new RTCSessionDescription({\n        type: description.type,\n        sdp: sdp\n      });\n    }\n    function replaceExternalStreamId(pc, description) {\n      var sdp = description.sdp;\n      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {\n        var externalStream = pc._reverseStreams[internalId];\n        var internalStream = pc._streams[externalStream.id];\n        sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n            internalStream.id);\n      });\n      return new RTCSessionDescription({\n        type: description.type,\n        sdp: sdp\n      });\n    }\n    ['createOffer', 'createAnswer'].forEach(function(method) {\n      var nativeMethod = window.RTCPeerConnection.prototype[method];\n      window.RTCPeerConnection.prototype[method] = function() {\n        var pc = this;\n        var args = arguments;\n        var isLegacyCall = arguments.length &&\n            typeof arguments[0] === 'function';\n        if (isLegacyCall) {\n          return nativeMethod.apply(pc, [\n            function(description) {\n              var desc = replaceInternalStreamId(pc, description);\n              args[0].apply(null, [desc]);\n            },\n            function(err) {\n              if (args[1]) {\n                args[1].apply(null, err);\n              }\n            }, arguments[2]\n          ]);\n        }\n        return nativeMethod.apply(pc, arguments)\n        .then(function(description) {\n          return replaceInternalStreamId(pc, description);\n        });\n      };\n    });\n\n    var origSetLocalDescription =\n        window.RTCPeerConnection.prototype.setLocalDescription;\n    window.RTCPeerConnection.prototype.setLocalDescription = function() {\n      var pc = this;\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(pc, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(pc, arguments[0]);\n      return origSetLocalDescription.apply(pc, arguments);\n    };\n\n    // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n    var origLocalDescription = Object.getOwnPropertyDescriptor(\n        window.RTCPeerConnection.prototype, 'localDescription');\n    Object.defineProperty(window.RTCPeerConnection.prototype,\n        'localDescription', {\n          get: function() {\n            var pc = this;\n            var description = origLocalDescription.get.apply(this);\n            if (description.type === '') {\n              return description;\n            }\n            return replaceInternalStreamId(pc, description);\n          }\n        });\n\n    window.RTCPeerConnection.prototype.removeTrack = function(sender) {\n      var pc = this;\n      if (pc.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      var isLocal = sender._pc === pc;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      pc._streams = pc._streams || {};\n      var stream;\n      Object.keys(pc._streams).forEach(function(streamid) {\n        var hasTrack = pc._streams[streamid].getTracks().find(function(track) {\n          return sender.track === track;\n        });\n        if (hasTrack) {\n          stream = pc._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          pc.removeStream(pc._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        pc.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n  },\n\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    // The RTCPeerConnection object.\n    if (!window.RTCPeerConnection) {\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        // Translate iceTransportPolicy to iceTransports,\n        // see https://code.google.com/p/webrtc/issues/detail?id=4869\n        // this was fixed in M56 along with unprefixing RTCPeerConnection.\n        logging('PeerConnection');\n        if (pcConfig && pcConfig.iceTransportPolicy) {\n          pcConfig.iceTransports = pcConfig.iceTransportPolicy;\n        }\n\n        return new window.webkitRTCPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype =\n          window.webkitRTCPeerConnection.prototype;\n      // wrap static methods. Currently just generateCertificate.\n      if (window.webkitRTCPeerConnection.generateCertificate) {\n        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n          get: function() {\n            return window.webkitRTCPeerConnection.generateCertificate;\n          }\n        });\n      }\n    } else {\n      // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n      var OrigPeerConnection = window.RTCPeerConnection;\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        if (pcConfig && pcConfig.iceServers) {\n          var newIceServers = [];\n          for (var i = 0; i < pcConfig.iceServers.length; i++) {\n            var server = pcConfig.iceServers[i];\n            if (!server.hasOwnProperty('urls') &&\n                server.hasOwnProperty('url')) {\n              utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n              server = JSON.parse(JSON.stringify(server));\n              server.urls = server.url;\n              newIceServers.push(server);\n            } else {\n              newIceServers.push(pcConfig.iceServers[i]);\n            }\n          }\n          pcConfig.iceServers = newIceServers;\n        }\n        return new OrigPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n      // wrap static methods. Currently just generateCertificate.\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n        get: function() {\n          return OrigPeerConnection.generateCertificate;\n        }\n      });\n    }\n\n    var origGetStats = window.RTCPeerConnection.prototype.getStats;\n    window.RTCPeerConnection.prototype.getStats = function(selector,\n        successCallback, errorCallback) {\n      var self = this;\n      var args = arguments;\n\n      // If selector is a function then we are in the old style stats so just\n      // pass back the original getStats format to avoid breaking old users.\n      if (arguments.length > 0 && typeof selector === 'function') {\n        return origGetStats.apply(this, arguments);\n      }\n\n      // When spec-style getStats is supported, return those when called with\n      // either no arguments or the selector argument is null.\n      if (origGetStats.length === 0 && (arguments.length === 0 ||\n          typeof arguments[0] !== 'function')) {\n        return origGetStats.apply(this, []);\n      }\n\n      var fixChromeStats_ = function(response) {\n        var standardReport = {};\n        var reports = response.result();\n        reports.forEach(function(report) {\n          var standardStats = {\n            id: report.id,\n            timestamp: report.timestamp,\n            type: {\n              localcandidate: 'local-candidate',\n              remotecandidate: 'remote-candidate'\n            }[report.type] || report.type\n          };\n          report.names().forEach(function(name) {\n            standardStats[name] = report.stat(name);\n          });\n          standardReport[standardStats.id] = standardStats;\n        });\n\n        return standardReport;\n      };\n\n      // shim getStats with maplike support\n      var makeMapStats = function(stats) {\n        return new Map(Object.keys(stats).map(function(key) {\n          return [key, stats[key]];\n        }));\n      };\n\n      if (arguments.length >= 2) {\n        var successCallbackWrapper_ = function(response) {\n          args[1](makeMapStats(fixChromeStats_(response)));\n        };\n\n        return origGetStats.apply(this, [successCallbackWrapper_,\n          arguments[0]]);\n      }\n\n      // promise-support\n      return new Promise(function(resolve, reject) {\n        origGetStats.apply(self, [\n          function(response) {\n            resolve(makeMapStats(fixChromeStats_(response)));\n          }, reject]);\n      }).then(successCallback, errorCallback);\n    };\n\n    // add promise support -- natively available in Chrome 51\n    if (browserDetails.version < 51) {\n      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n          .forEach(function(method) {\n            var nativeMethod = window.RTCPeerConnection.prototype[method];\n            window.RTCPeerConnection.prototype[method] = function() {\n              var args = arguments;\n              var self = this;\n              var promise = new Promise(function(resolve, reject) {\n                nativeMethod.apply(self, [args[0], resolve, reject]);\n              });\n              if (args.length < 2) {\n                return promise;\n              }\n              return promise.then(function() {\n                args[1].apply(null, []);\n              },\n              function(err) {\n                if (args.length >= 3) {\n                  args[2].apply(null, [err]);\n                }\n              });\n            };\n          });\n    }\n\n    // promise support for createOffer and createAnswer. Available (without\n    // bugs) since M52: crbug/619289\n    if (browserDetails.version < 52) {\n      ['createOffer', 'createAnswer'].forEach(function(method) {\n        var nativeMethod = window.RTCPeerConnection.prototype[method];\n        window.RTCPeerConnection.prototype[method] = function() {\n          var self = this;\n          if (arguments.length < 1 || (arguments.length === 1 &&\n              typeof arguments[0] === 'object')) {\n            var opts = arguments.length === 1 ? arguments[0] : undefined;\n            return new Promise(function(resolve, reject) {\n              nativeMethod.apply(self, [resolve, reject, opts]);\n            });\n          }\n          return nativeMethod.apply(this, arguments);\n        };\n      });\n    }\n\n    // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          var nativeMethod = window.RTCPeerConnection.prototype[method];\n          window.RTCPeerConnection.prototype[method] = function() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          };\n        });\n\n    // support for addIceCandidate(null or undefined)\n    var nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate = function() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n  }\n};\n\n\n// Expose public methods.\nmodule.exports = {\n  shimMediaStream: chromeShim.shimMediaStream,\n  shimOnTrack: chromeShim.shimOnTrack,\n  shimAddTrackRemoveTrack: chromeShim.shimAddTrackRemoveTrack,\n  shimGetSendersWithDtmf: chromeShim.shimGetSendersWithDtmf,\n  shimSourceObject: chromeShim.shimSourceObject,\n  shimPeerConnection: chromeShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nvar utils = require('../utils.js');\nvar logging = utils.log;\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var browserDetails = utils.detectBrowser(window);\n  var navigator = window && window.navigator;\n\n  var constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    var cc = {};\n    Object.keys(c).forEach(function(key) {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      var oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        var oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(function(mix) {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  var shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      var remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      var face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      var getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        var matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(function(devices) {\n            devices = devices.filter(function(d) {\n              return d.kind === 'videoinput';\n            });\n            var dev = devices.find(function(d) {\n              return matches.some(function(match) {\n                return d.label.toLowerCase().indexOf(match) !== -1;\n              });\n            });\n            if (!dev && devices.length && matches.indexOf('back') !== -1) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  var shimError_ = function(e) {\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        InvalidStateError: 'NotReadableError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotReadableError',\n        MediaDeviceKillSwitchOn: 'NotReadableError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraintName,\n      toString: function() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  var getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, function(c) {\n      navigator.webkitGetUserMedia(c, onSuccess, function(e) {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n\n  navigator.getUserMedia = getUserMedia_;\n\n  // Returns the result of getUserMedia as a Promise.\n  var getUserMediaPromise_ = function(constraints) {\n    return new Promise(function(resolve, reject) {\n      navigator.getUserMedia(constraints, resolve, reject);\n    });\n  };\n\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {\n      getUserMedia: getUserMediaPromise_,\n      enumerateDevices: function() {\n        return new Promise(function(resolve) {\n          var kinds = {audio: 'audioinput', video: 'videoinput'};\n          return window.MediaStreamTrack.getSources(function(devices) {\n            resolve(devices.map(function(device) {\n              return {label: device.label,\n                kind: kinds[device.kind],\n                deviceId: device.id,\n                groupId: ''};\n            }));\n          });\n        });\n      },\n      getSupportedConstraints: function() {\n        return {\n          deviceId: true, echoCancellation: true, facingMode: true,\n          frameRate: true, height: true, width: true\n        };\n      }\n    };\n  }\n\n  // A shim for getUserMedia method on the mediaDevices object.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (!navigator.mediaDevices.getUserMedia) {\n    navigator.mediaDevices.getUserMedia = function(constraints) {\n      return getUserMediaPromise_(constraints);\n    };\n  } else {\n    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n    // function which returns a Promise, it does not accept spec-style\n    // constraints.\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, function(c) {\n        return origGetUserMedia(c).then(function(stream) {\n          if (c.audio && !stream.getAudioTracks().length ||\n              c.video && !stream.getVideoTracks().length) {\n            stream.getTracks().forEach(function(track) {\n              track.stop();\n            });\n            throw new DOMException('', 'NotFoundError');\n          }\n          return stream;\n        }, function(e) {\n          return Promise.reject(shimError_(e));\n        });\n      });\n    };\n  }\n\n  // Dummy devicechange event methods.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {\n    navigator.mediaDevices.addEventListener = function() {\n      logging('Dummy mediaDevices.addEventListener called.');\n    };\n  }\n  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {\n    navigator.mediaDevices.removeEventListener = function() {\n      logging('Dummy mediaDevices.removeEventListener called.');\n    };\n  }\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\nvar shimRTCPeerConnection = require('rtcpeerconnection-shim');\n\nmodule.exports = {\n  shimGetUserMedia: require('./getusermedia'),\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    if (window.RTCIceGatherer) {\n      // ORTC defines an RTCIceCandidate object but no constructor.\n      // Not implemented in Edge.\n      if (!window.RTCIceCandidate) {\n        window.RTCIceCandidate = function(args) {\n          return args;\n        };\n      }\n      // ORTC does not have a session description object but\n      // other browsers (i.e. Chrome) that will support both PC and ORTC\n      // in the future might have this defined already.\n      if (!window.RTCSessionDescription) {\n        window.RTCSessionDescription = function(args) {\n          return args;\n        };\n      }\n      // this adds an additional event listener to MediaStrackTrack that signals\n      // when a tracks enabled property was changed. Workaround for a bug in\n      // addStream, see below. No longer required in 15025+\n      if (browserDetails.version < 15025) {\n        var origMSTEnabled = Object.getOwnPropertyDescriptor(\n            window.MediaStreamTrack.prototype, 'enabled');\n        Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\n          set: function(value) {\n            origMSTEnabled.set.call(this, value);\n            var ev = new Event('enabled');\n            ev.enabled = value;\n            this.dispatchEvent(ev);\n          }\n        });\n      }\n    }\n\n    // ORTC defines the DTMF sender a bit different.\n    // https://github.com/w3c/ortc/issues/714\n    if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n        get: function() {\n          if (this._dtmf === undefined) {\n            if (this.track.kind === 'audio') {\n              this._dtmf = new window.RTCDtmfSender(this);\n            } else if (this.track.kind === 'video') {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        }\n      });\n    }\n\n    window.RTCPeerConnection =\n        shimRTCPeerConnection(window, browserDetails.version);\n  },\n  shimReplaceTrack: function(window) {\n    // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\n    if (window.RTCRtpSender &&\n        !('replaceTrack' in window.RTCRtpSender.prototype)) {\n      window.RTCRtpSender.prototype.replaceTrack =\n          window.RTCRtpSender.prototype.setTrack;\n    }\n  }\n};\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\n\nfunction fixStatsType(stat) {\n  return {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  }[stat.type] || stat.type;\n}\n\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    var trackId = transceiver.rtpSender._initialTrackId ||\n        transceiver.rtpSender.track.id;\n    transceiver.rtpSender._initialTrackId = trackId;\n    // spec.\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\n        trackId + '\\r\\n';\n    sdp += 'a=' + msid;\n    // for Chrome. Legacy should no longer be required.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n\n    // RTX\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n}\n\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nfunction filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function(server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n      }\n      var isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(function(url) {\n        var validTurn = url.indexOf('turn:') === 0 &&\n            url.indexOf('transport=udp') !== -1 &&\n            url.indexOf('turn:[') === -1 &&\n            !hasTurn;\n\n        if (validTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\n            url.indexOf('?transport=udp') === -1;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n\n// Determines the intersection of local and remote capabilities.\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\n  var commonCapabilities = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: []\n  };\n\n  var findCodecByPayloadType = function(pt, codecs) {\n    pt = parseInt(pt, 10);\n    for (var i = 0; i < codecs.length; i++) {\n      if (codecs[i].payloadType === pt ||\n          codecs[i].preferredPayloadType === pt) {\n        return codecs[i];\n      }\n    }\n  };\n\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n    return lCodec && rCodec &&\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n  };\n\n  localCapabilities.codecs.forEach(function(lCodec) {\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n      var rCodec = remoteCapabilities.codecs[i];\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n          lCodec.clockRate === rCodec.clockRate) {\n        if (lCodec.name.toLowerCase() === 'rtx' &&\n            lCodec.parameters && rCodec.parameters.apt) {\n          // for RTX we need to find the local rtx that has a apt\n          // which points to the same local codec as the remote one.\n          if (!rtxCapabilityMatches(lCodec, rCodec,\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\n            continue;\n          }\n        }\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n        // number of channels is the highest common number of channels\n        rCodec.numChannels = Math.min(lCodec.numChannels,\n            rCodec.numChannels);\n        // push rCodec so we reply with offerer payload type\n        commonCapabilities.codecs.push(rCodec);\n\n        // determine common feedback mechanisms\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n              return true;\n            }\n          }\n          return false;\n        });\n        // FIXME: also need to determine .parameters\n        //  see https://github.com/openpeer/ortc/issues/569\n        break;\n      }\n    }\n  });\n\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n         i++) {\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\n        break;\n      }\n    }\n  });\n\n  // FIXME: fecMechanisms\n  return commonCapabilities;\n}\n\n// is action=setLocalDescription with type allowed in signalingState\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\n  return {\n    offer: {\n      setLocalDescription: ['stable', 'have-local-offer'],\n      setRemoteDescription: ['stable', 'have-remote-offer']\n    },\n    answer: {\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n    }\n  }[type][action].indexOf(signalingState) !== -1;\n}\n\nfunction maybeAddCandidate(iceTransport, candidate) {\n  // Edge's internal representation adds some fields therefore\n  // not all fieldѕ are taken into account.\n  var alreadyAdded = iceTransport.getRemoteCandidates()\n      .find(function(remoteCandidate) {\n        return candidate.foundation === remoteCandidate.foundation &&\n            candidate.ip === remoteCandidate.ip &&\n            candidate.port === remoteCandidate.port &&\n            candidate.priority === remoteCandidate.priority &&\n            candidate.protocol === remoteCandidate.protocol &&\n            candidate.type === remoteCandidate.type;\n      });\n  if (!alreadyAdded) {\n    iceTransport.addRemoteCandidate(candidate);\n  }\n  return !alreadyAdded;\n}\n\n\nfunction makeError(name, description) {\n  var e = new Error(description);\n  e.name = name;\n  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\n  e.code = {\n    NotSupportedError: 9,\n    InvalidStateError: 11,\n    InvalidAccessError: 15,\n    TypeError: undefined,\n    OperationError: undefined\n  }[name];\n  return e;\n}\n\nmodule.exports = function(window, edgeVersion) {\n  // https://w3c.github.io/mediacapture-main/#mediastream\n  // Helper function to add the track to the stream and\n  // dispatch the event ourselves.\n  function addTrackToStreamAndFireEvent(track, stream) {\n    stream.addTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\n        {track: track}));\n  }\n\n  function removeTrackFromStreamAndFireEvent(track, stream) {\n    stream.removeTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\n        {track: track}));\n  }\n\n  function fireAddTrack(pc, track, receiver, streams) {\n    var trackEvent = new Event('track');\n    trackEvent.track = track;\n    trackEvent.receiver = receiver;\n    trackEvent.transceiver = {receiver: receiver};\n    trackEvent.streams = streams;\n    window.setTimeout(function() {\n      pc._dispatchEvent('track', trackEvent);\n    });\n  }\n\n  var RTCPeerConnection = function(config) {\n    var pc = this;\n\n    var _eventTarget = document.createDocumentFragment();\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\n        .forEach(function(method) {\n          pc[method] = _eventTarget[method].bind(_eventTarget);\n        });\n\n    this.canTrickleIceCandidates = null;\n\n    this.needNegotiation = false;\n\n    this.localStreams = [];\n    this.remoteStreams = [];\n\n    this._localDescription = null;\n    this._remoteDescription = null;\n\n    this.signalingState = 'stable';\n    this.iceConnectionState = 'new';\n    this.connectionState = 'new';\n    this.iceGatheringState = 'new';\n\n    config = JSON.parse(JSON.stringify(config || {}));\n\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\n    if (config.rtcpMuxPolicy === 'negotiate') {\n      throw(makeError('NotSupportedError',\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\n    } else if (!config.rtcpMuxPolicy) {\n      config.rtcpMuxPolicy = 'require';\n    }\n\n    switch (config.iceTransportPolicy) {\n      case 'all':\n      case 'relay':\n        break;\n      default:\n        config.iceTransportPolicy = 'all';\n        break;\n    }\n\n    switch (config.bundlePolicy) {\n      case 'balanced':\n      case 'max-compat':\n      case 'max-bundle':\n        break;\n      default:\n        config.bundlePolicy = 'balanced';\n        break;\n    }\n\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n\n    this._iceGatherers = [];\n    if (config.iceCandidatePoolSize) {\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n        this._iceGatherers.push(new window.RTCIceGatherer({\n          iceServers: config.iceServers,\n          gatherPolicy: config.iceTransportPolicy\n        }));\n      }\n    } else {\n      config.iceCandidatePoolSize = 0;\n    }\n\n    this._config = config;\n\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n    // everything that is needed to describe a SDP m-line.\n    this.transceivers = [];\n\n    this._sdpSessionId = SDPUtils.generateSessionId();\n    this._sdpSessionVersion = 0;\n\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n    this._isClosed = false;\n  };\n\n  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {\n    configurable: true,\n    get: function() {\n      return this._localDescription;\n    }\n  });\n  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {\n    configurable: true,\n    get: function() {\n      return this._remoteDescription;\n    }\n  });\n\n  // set up event handlers on prototype\n  RTCPeerConnection.prototype.onicecandidate = null;\n  RTCPeerConnection.prototype.onaddstream = null;\n  RTCPeerConnection.prototype.ontrack = null;\n  RTCPeerConnection.prototype.onremovestream = null;\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n  RTCPeerConnection.prototype.onconnectionstatechange = null;\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\n  RTCPeerConnection.prototype.ondatachannel = null;\n\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\n    if (this._isClosed) {\n      return;\n    }\n    this.dispatchEvent(event);\n    if (typeof this['on' + name] === 'function') {\n      this['on' + name](event);\n    }\n  };\n\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\n    var event = new Event('icegatheringstatechange');\n    this._dispatchEvent('icegatheringstatechange', event);\n  };\n\n  RTCPeerConnection.prototype.getConfiguration = function() {\n    return this._config;\n  };\n\n  RTCPeerConnection.prototype.getLocalStreams = function() {\n    return this.localStreams;\n  };\n\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\n    return this.remoteStreams;\n  };\n\n  // internal helper to create a transceiver object.\n  // (which is not yet the same as the WebRTC 1.0 transceiver)\n  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {\n    var hasBundleTransport = this.transceivers.length > 0;\n    var transceiver = {\n      track: null,\n      iceGatherer: null,\n      iceTransport: null,\n      dtlsTransport: null,\n      localCapabilities: null,\n      remoteCapabilities: null,\n      rtpSender: null,\n      rtpReceiver: null,\n      kind: kind,\n      mid: null,\n      sendEncodingParameters: null,\n      recvEncodingParameters: null,\n      stream: null,\n      associatedRemoteMediaStreams: [],\n      wantReceive: true\n    };\n    if (this.usingBundle && hasBundleTransport) {\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n    } else {\n      var transports = this._createIceAndDtlsTransports();\n      transceiver.iceTransport = transports.iceTransport;\n      transceiver.dtlsTransport = transports.dtlsTransport;\n    }\n    if (!doNotAdd) {\n      this.transceivers.push(transceiver);\n    }\n    return transceiver;\n  };\n\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call addTrack on a closed peerconnection.');\n    }\n\n    var alreadyExists = this.transceivers.find(function(s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw makeError('InvalidAccessError', 'Track already exists.');\n    }\n\n    var transceiver;\n    for (var i = 0; i < this.transceivers.length; i++) {\n      if (!this.transceivers[i].track &&\n          this.transceivers[i].kind === track.kind) {\n        transceiver = this.transceivers[i];\n      }\n    }\n    if (!transceiver) {\n      transceiver = this._createTransceiver(track.kind);\n    }\n\n    this._maybeFireNegotiationNeeded();\n\n    if (this.localStreams.indexOf(stream) === -1) {\n      this.localStreams.push(stream);\n    }\n\n    transceiver.track = track;\n    transceiver.stream = stream;\n    transceiver.rtpSender = new window.RTCRtpSender(track,\n        transceiver.dtlsTransport);\n    return transceiver.rtpSender;\n  };\n\n  RTCPeerConnection.prototype.addStream = function(stream) {\n    var pc = this;\n    if (edgeVersion >= 15025) {\n      stream.getTracks().forEach(function(track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      // Fixed in 15025 (or earlier)\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function(track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function(event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      clonedStream.getTracks().forEach(function(track) {\n        pc.addTrack(track, clonedStream);\n      });\n    }\n  };\n\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call removeTrack on a closed peerconnection.');\n    }\n\n    if (!(sender instanceof window.RTCRtpSender)) {\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\n          'does not implement interface RTCRtpSender.');\n    }\n\n    var transceiver = this.transceivers.find(function(t) {\n      return t.rtpSender === sender;\n    });\n\n    if (!transceiver) {\n      throw makeError('InvalidAccessError',\n          'Sender was not created by this connection.');\n    }\n    var stream = transceiver.stream;\n\n    transceiver.rtpSender.stop();\n    transceiver.rtpSender = null;\n    transceiver.track = null;\n    transceiver.stream = null;\n\n    // remove the stream from the set of local streams\n    var localStreams = this.transceivers.map(function(t) {\n      return t.stream;\n    });\n    if (localStreams.indexOf(stream) === -1 &&\n        this.localStreams.indexOf(stream) > -1) {\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n    }\n\n    this._maybeFireNegotiationNeeded();\n  };\n\n  RTCPeerConnection.prototype.removeStream = function(stream) {\n    var pc = this;\n    stream.getTracks().forEach(function(track) {\n      var sender = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (sender) {\n        pc.removeTrack(sender);\n      }\n    });\n  };\n\n  RTCPeerConnection.prototype.getSenders = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpSender;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpSender;\n    });\n  };\n\n  RTCPeerConnection.prototype.getReceivers = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpReceiver;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpReceiver;\n    });\n  };\n\n\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\n      usingBundle) {\n    var pc = this;\n    if (usingBundle && sdpMLineIndex > 0) {\n      return this.transceivers[0].iceGatherer;\n    } else if (this._iceGatherers.length) {\n      return this._iceGatherers.shift();\n    }\n    var iceGatherer = new window.RTCIceGatherer({\n      iceServers: this._config.iceServers,\n      gatherPolicy: this._config.iceTransportPolicy\n    });\n    Object.defineProperty(iceGatherer, 'state',\n        {value: 'new', writable: true}\n    );\n\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\n      // polyfill since RTCIceGatherer.state is not implemented in\n      // Edge 10547 yet.\n      iceGatherer.state = end ? 'completed' : 'gathering';\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n      }\n    };\n    iceGatherer.addEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    return iceGatherer;\n  };\n\n  // start gathering from an RTCIceGatherer.\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\n    var pc = this;\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer.onlocalcandidate) {\n      return;\n    }\n    var bufferedCandidateEvents =\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n    iceGatherer.removeEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    iceGatherer.onlocalcandidate = function(evt) {\n      if (pc.usingBundle && sdpMLineIndex > 0) {\n        // if we know that we use bundle we can drop candidates with\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\n        // confused since we dispose the extra ice gatherer.\n        return;\n      }\n      var event = new Event('icecandidate');\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n      var cand = evt.candidate;\n      // Edge emits an empty object for RTCIceCandidateComplete‥\n      var end = !cand || Object.keys(cand).length === 0;\n      if (end) {\n        // polyfill since RTCIceGatherer.state is not implemented in\n        // Edge 10547 yet.\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n          iceGatherer.state = 'completed';\n        }\n      } else {\n        if (iceGatherer.state === 'new') {\n          iceGatherer.state = 'gathering';\n        }\n        // RTCIceCandidate doesn't have a component, needs to be added\n        cand.component = 1;\n        // also the usernameFragment. TODO: update SDP to take both variants.\n        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\n\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\n        event.candidate = Object.assign(event.candidate,\n            SDPUtils.parseCandidate(serializedCandidate));\n\n        event.candidate.candidate = serializedCandidate;\n        event.candidate.toJSON = function() {\n          return {\n            candidate: event.candidate.candidate,\n            sdpMid: event.candidate.sdpMid,\n            sdpMLineIndex: event.candidate.sdpMLineIndex,\n            usernameFragment: event.candidate.usernameFragment\n          };\n        };\n      }\n\n      // update local description.\n      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);\n      if (!end) {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=' + event.candidate.candidate + '\\r\\n';\n      } else {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=end-of-candidates\\r\\n';\n      }\n      pc._localDescription.sdp =\n          SDPUtils.getDescription(pc._localDescription.sdp) +\n          sections.join('');\n      var complete = pc.transceivers.every(function(transceiver) {\n        return transceiver.iceGatherer &&\n            transceiver.iceGatherer.state === 'completed';\n      });\n\n      if (pc.iceGatheringState !== 'gathering') {\n        pc.iceGatheringState = 'gathering';\n        pc._emitGatheringStateChange();\n      }\n\n      // Emit candidate. Also emit null candidate when all gatherers are\n      // complete.\n      if (!end) {\n        pc._dispatchEvent('icecandidate', event);\n      }\n      if (complete) {\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n        pc.iceGatheringState = 'complete';\n        pc._emitGatheringStateChange();\n      }\n    };\n\n    // emit already gathered candidates.\n    window.setTimeout(function() {\n      bufferedCandidateEvents.forEach(function(e) {\n        iceGatherer.onlocalcandidate(e);\n      });\n    }, 0);\n  };\n\n  // Create ICE transport and DTLS transport.\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\n    var pc = this;\n    var iceTransport = new window.RTCIceTransport(null);\n    iceTransport.onicestatechange = function() {\n      pc._updateIceConnectionState();\n      pc._updateConnectionState();\n    };\n\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n    dtlsTransport.ondtlsstatechange = function() {\n      pc._updateConnectionState();\n    };\n    dtlsTransport.onerror = function() {\n      // onerror does not set state to failed by itself.\n      Object.defineProperty(dtlsTransport, 'state',\n          {value: 'failed', writable: true});\n      pc._updateConnectionState();\n    };\n\n    return {\n      iceTransport: iceTransport,\n      dtlsTransport: dtlsTransport\n    };\n  };\n\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\n  // Without triggering the callbacks.\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\n      sdpMLineIndex) {\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer) {\n      delete iceGatherer.onlocalcandidate;\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\n    }\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n    if (iceTransport) {\n      delete iceTransport.onicestatechange;\n      delete this.transceivers[sdpMLineIndex].iceTransport;\n    }\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n    if (dtlsTransport) {\n      delete dtlsTransport.ondtlsstatechange;\n      delete dtlsTransport.onerror;\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\n    }\n  };\n\n  // Start the RTP Sender and Receiver for a transceiver.\n  RTCPeerConnection.prototype._transceive = function(transceiver,\n      send, recv) {\n    var params = getCommonCapabilities(transceiver.localCapabilities,\n        transceiver.remoteCapabilities);\n    if (send && transceiver.rtpSender) {\n      params.encodings = transceiver.sendEncodingParameters;\n      params.rtcp = {\n        cname: SDPUtils.localCName,\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.recvEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpSender.send(params);\n    }\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n      // remove RTX field in Edge 14942\n      if (transceiver.kind === 'video'\n          && transceiver.recvEncodingParameters\n          && edgeVersion < 15019) {\n        transceiver.recvEncodingParameters.forEach(function(p) {\n          delete p.rtx;\n        });\n      }\n      if (transceiver.recvEncodingParameters.length) {\n        params.encodings = transceiver.recvEncodingParameters;\n      } else {\n        params.encodings = [{}];\n      }\n      params.rtcp = {\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.rtcpParameters.cname) {\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\n      }\n      if (transceiver.sendEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpReceiver.receive(params);\n    }\n  };\n\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setLocalDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set local ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var sections;\n    var sessionpart;\n    if (description.type === 'offer') {\n      // VERY limited support for SDP munging. Limited to:\n      // * changing the order of codecs\n      sections = SDPUtils.splitSections(description.sdp);\n      sessionpart = sections.shift();\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n      });\n\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n        pc._gather(transceiver.mid, sdpMLineIndex);\n      });\n    } else if (description.type === 'answer') {\n      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);\n      sessionpart = sections.shift();\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\n          'a=ice-lite').length > 0;\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        var iceGatherer = transceiver.iceGatherer;\n        var iceTransport = transceiver.iceTransport;\n        var dtlsTransport = transceiver.dtlsTransport;\n        var localCapabilities = transceiver.localCapabilities;\n        var remoteCapabilities = transceiver.remoteCapabilities;\n\n        // treat bundle-only as not-rejected.\n        var rejected = SDPUtils.isRejected(mediaSection) &&\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n        if (!rejected && !transceiver.rejected) {\n          var remoteIceParameters = SDPUtils.getIceParameters(\n              mediaSection, sessionpart);\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n              mediaSection, sessionpart);\n          if (isIceLite) {\n            remoteDtlsParameters.role = 'server';\n          }\n\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\n            pc._gather(transceiver.mid, sdpMLineIndex);\n            if (iceTransport.state === 'new') {\n              iceTransport.start(iceGatherer, remoteIceParameters,\n                  isIceLite ? 'controlling' : 'controlled');\n            }\n            if (dtlsTransport.state === 'new') {\n              dtlsTransport.start(remoteDtlsParameters);\n            }\n          }\n\n          // Calculate intersection of capabilities.\n          var params = getCommonCapabilities(localCapabilities,\n              remoteCapabilities);\n\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\n          // transceiver has already been started in setRemoteDescription.\n          pc._transceive(transceiver,\n              params.codecs.length > 0,\n              false);\n        }\n      });\n    }\n\n    pc._localDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-local-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set remote ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var streams = {};\n    pc.remoteStreams.forEach(function(stream) {\n      streams[stream.id] = stream;\n    });\n    var receiverList = [];\n    var sections = SDPUtils.splitSections(description.sdp);\n    var sessionpart = sections.shift();\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-lite').length > 0;\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\n        'a=group:BUNDLE ').length > 0;\n    pc.usingBundle = usingBundle;\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-options:')[0];\n    if (iceOptions) {\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\n          .indexOf('trickle') >= 0;\n    } else {\n      pc.canTrickleIceCandidates = false;\n    }\n\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      var kind = SDPUtils.getKind(mediaSection);\n      // treat bundle-only as not-rejected.\n      var rejected = SDPUtils.isRejected(mediaSection) &&\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n      var protocol = lines[0].substr(2).split(' ')[2];\n\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\n\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\n\n      // Reject datachannels which are not implemented yet.\n      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||\n          protocol === 'UDP/DTLS/SCTP'))) {\n        // TODO: this is dangerous in the case where a non-rejected m-line\n        //     becomes rejected.\n        pc.transceivers[sdpMLineIndex] = {\n          mid: mid,\n          kind: kind,\n          protocol: protocol,\n          rejected: true\n        };\n        return;\n      }\n\n      if (!rejected && pc.transceivers[sdpMLineIndex] &&\n          pc.transceivers[sdpMLineIndex].rejected) {\n        // recycle a rejected transceiver.\n        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\n      }\n\n      var transceiver;\n      var iceGatherer;\n      var iceTransport;\n      var dtlsTransport;\n      var rtpReceiver;\n      var sendEncodingParameters;\n      var recvEncodingParameters;\n      var localCapabilities;\n\n      var track;\n      // FIXME: ensure the mediaSection has rtcp-mux set.\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n      var remoteIceParameters;\n      var remoteDtlsParameters;\n      if (!rejected) {\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters.role = 'client';\n      }\n      recvEncodingParameters =\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\n          'a=end-of-candidates', sessionpart).length > 0;\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n          .map(function(cand) {\n            return SDPUtils.parseCandidate(cand);\n          })\n          .filter(function(cand) {\n            return cand.component === 1;\n          });\n\n      // Check if we can use BUNDLE and dispose transports.\n      if ((description.type === 'offer' || description.type === 'answer') &&\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\n          pc.transceivers[sdpMLineIndex]) {\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n        pc.transceivers[sdpMLineIndex].iceGatherer =\n            pc.transceivers[0].iceGatherer;\n        pc.transceivers[sdpMLineIndex].iceTransport =\n            pc.transceivers[0].iceTransport;\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\n            pc.transceivers[0].dtlsTransport;\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n      }\n      if (description.type === 'offer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex] ||\n            pc._createTransceiver(kind);\n        transceiver.mid = mid;\n\n        if (!transceiver.iceGatherer) {\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n              usingBundle);\n        }\n\n        if (cands.length && transceiver.iceTransport.state === 'new') {\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n            transceiver.iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\n\n        // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n        if (edgeVersion < 15019) {\n          localCapabilities.codecs = localCapabilities.codecs.filter(\n              function(codec) {\n                return codec.name !== 'rtx';\n              });\n        }\n\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\n        }];\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        var isNewTrack = false;\n        if (direction === 'sendrecv' || direction === 'sendonly') {\n          isNewTrack = !transceiver.rtpReceiver;\n          rtpReceiver = transceiver.rtpReceiver ||\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n          if (isNewTrack) {\n            var stream;\n            track = rtpReceiver.track;\n            // FIXME: does not work with Plan B.\n            if (remoteMsid && remoteMsid.stream === '-') {\n              // no-op. a stream id of '-' means: no associated stream.\n            } else if (remoteMsid) {\n              if (!streams[remoteMsid.stream]) {\n                streams[remoteMsid.stream] = new window.MediaStream();\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                  get: function() {\n                    return remoteMsid.stream;\n                  }\n                });\n              }\n              Object.defineProperty(track, 'id', {\n                get: function() {\n                  return remoteMsid.track;\n                }\n              });\n              stream = streams[remoteMsid.stream];\n            } else {\n              if (!streams.default) {\n                streams.default = new window.MediaStream();\n              }\n              stream = streams.default;\n            }\n            if (stream) {\n              addTrackToStreamAndFireEvent(track, stream);\n              transceiver.associatedRemoteMediaStreams.push(stream);\n            }\n            receiverList.push([track, rtpReceiver, stream]);\n          }\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\n            var nativeTrack = s.getTracks().find(function(t) {\n              return t.id === transceiver.rtpReceiver.track.id;\n            });\n            if (nativeTrack) {\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\n            }\n          });\n          transceiver.associatedRemoteMediaStreams = [];\n        }\n\n        transceiver.localCapabilities = localCapabilities;\n        transceiver.remoteCapabilities = remoteCapabilities;\n        transceiver.rtpReceiver = rtpReceiver;\n        transceiver.rtcpParameters = rtcpParameters;\n        transceiver.sendEncodingParameters = sendEncodingParameters;\n        transceiver.recvEncodingParameters = recvEncodingParameters;\n\n        // Start the RTCRtpReceiver now. The RTPSender is started in\n        // setLocalDescription.\n        pc._transceive(pc.transceivers[sdpMLineIndex],\n            false,\n            isNewTrack);\n      } else if (description.type === 'answer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex];\n        iceGatherer = transceiver.iceGatherer;\n        iceTransport = transceiver.iceTransport;\n        dtlsTransport = transceiver.dtlsTransport;\n        rtpReceiver = transceiver.rtpReceiver;\n        sendEncodingParameters = transceiver.sendEncodingParameters;\n        localCapabilities = transceiver.localCapabilities;\n\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\n            recvEncodingParameters;\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\n            remoteCapabilities;\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n        if (cands.length && iceTransport.state === 'new') {\n          if ((isIceLite || isComplete) &&\n              (!usingBundle || sdpMLineIndex === 0)) {\n            iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        if (!usingBundle || sdpMLineIndex === 0) {\n          if (iceTransport.state === 'new') {\n            iceTransport.start(iceGatherer, remoteIceParameters,\n                'controlling');\n          }\n          if (dtlsTransport.state === 'new') {\n            dtlsTransport.start(remoteDtlsParameters);\n          }\n        }\n\n        // If the offer contained RTX but the answer did not,\n        // remove RTX from sendEncodingParameters.\n        var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n        var hasRtx = commonCapabilities.codecs.filter(function(c) {\n          return c.name.toLowerCase() === 'rtx';\n        }).length;\n        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n          delete transceiver.sendEncodingParameters[0].rtx;\n        }\n\n        pc._transceive(transceiver,\n            direction === 'sendrecv' || direction === 'recvonly',\n            direction === 'sendrecv' || direction === 'sendonly');\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        if (rtpReceiver &&\n            (direction === 'sendrecv' || direction === 'sendonly')) {\n          track = rtpReceiver.track;\n          if (remoteMsid) {\n            if (!streams[remoteMsid.stream]) {\n              streams[remoteMsid.stream] = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n          } else {\n            if (!streams.default) {\n              streams.default = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams.default);\n            receiverList.push([track, rtpReceiver, streams.default]);\n          }\n        } else {\n          // FIXME: actually the receiver should be created later.\n          delete transceiver.rtpReceiver;\n        }\n      }\n    });\n\n    if (pc._dtlsRole === undefined) {\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n    }\n\n    pc._remoteDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-remote-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n    Object.keys(streams).forEach(function(sid) {\n      var stream = streams[sid];\n      if (stream.getTracks().length) {\n        if (pc.remoteStreams.indexOf(stream) === -1) {\n          pc.remoteStreams.push(stream);\n          var event = new Event('addstream');\n          event.stream = stream;\n          window.setTimeout(function() {\n            pc._dispatchEvent('addstream', event);\n          });\n        }\n\n        receiverList.forEach(function(item) {\n          var track = item[0];\n          var receiver = item[1];\n          if (stream.id !== item[2].id) {\n            return;\n          }\n          fireAddTrack(pc, track, receiver, [stream]);\n        });\n      }\n    });\n    receiverList.forEach(function(item) {\n      if (item[2]) {\n        return;\n      }\n      fireAddTrack(pc, item[0], item[1], []);\n    });\n\n    // check whether addIceCandidate({}) was called within four seconds after\n    // setRemoteDescription.\n    window.setTimeout(function() {\n      if (!(pc && pc.transceivers)) {\n        return;\n      }\n      pc.transceivers.forEach(function(transceiver) {\n        if (transceiver.iceTransport &&\n            transceiver.iceTransport.state === 'new' &&\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\n              'an end-of-candidates notification');\n          transceiver.iceTransport.addRemoteCandidate({});\n        }\n      });\n    }, 4000);\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.close = function() {\n    this.transceivers.forEach(function(transceiver) {\n      /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n      if (transceiver.iceTransport) {\n        transceiver.iceTransport.stop();\n      }\n      if (transceiver.dtlsTransport) {\n        transceiver.dtlsTransport.stop();\n      }\n      if (transceiver.rtpSender) {\n        transceiver.rtpSender.stop();\n      }\n      if (transceiver.rtpReceiver) {\n        transceiver.rtpReceiver.stop();\n      }\n    });\n    // FIXME: clean up tracks, local streams, remote streams, etc\n    this._isClosed = true;\n    this._updateSignalingState('closed');\n  };\n\n  // Update the signaling state.\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\n    this.signalingState = newState;\n    var event = new Event('signalingstatechange');\n    this._dispatchEvent('signalingstatechange', event);\n  };\n\n  // Determine whether to fire the negotiationneeded event.\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\n    var pc = this;\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n      return;\n    }\n    this.needNegotiation = true;\n    window.setTimeout(function() {\n      if (pc.needNegotiation) {\n        pc.needNegotiation = false;\n        var event = new Event('negotiationneeded');\n        pc._dispatchEvent('negotiationneeded', event);\n      }\n    }, 0);\n  };\n\n  // Update the ice connection state.\n  RTCPeerConnection.prototype._updateIceConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      checking: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n      }\n    });\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.checking > 0) {\n      newState = 'checking';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    } else if (states.completed > 0) {\n      newState = 'completed';\n    }\n\n    if (newState !== this.iceConnectionState) {\n      this.iceConnectionState = newState;\n      var event = new Event('iceconnectionstatechange');\n      this._dispatchEvent('iceconnectionstatechange', event);\n    }\n  };\n\n  // Update the connection state.\n  RTCPeerConnection.prototype._updateConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      connecting: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && transceiver.dtlsTransport &&\n          !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n        states[transceiver.dtlsTransport.state]++;\n      }\n    });\n    // ICETransport.completed and connected are the same for this purpose.\n    states.connected += states.completed;\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.connecting > 0) {\n      newState = 'connecting';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    }\n\n    if (newState !== this.connectionState) {\n      this.connectionState = newState;\n      var event = new Event('connectionstatechange');\n      this._dispatchEvent('connectionstatechange', event);\n    }\n  };\n\n  RTCPeerConnection.prototype.createOffer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createOffer after close'));\n    }\n\n    var numAudioTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'audio';\n    }).length;\n    var numVideoTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'video';\n    }).length;\n\n    // Determine number of audio and video tracks we need to send/recv.\n    var offerOptions = arguments[0];\n    if (offerOptions) {\n      // Reject Chrome legacy constraints.\n      if (offerOptions.mandatory || offerOptions.optional) {\n        throw new TypeError(\n            'Legacy mandatory/optional constraints not supported.');\n      }\n      if (offerOptions.offerToReceiveAudio !== undefined) {\n        if (offerOptions.offerToReceiveAudio === true) {\n          numAudioTracks = 1;\n        } else if (offerOptions.offerToReceiveAudio === false) {\n          numAudioTracks = 0;\n        } else {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n      }\n      if (offerOptions.offerToReceiveVideo !== undefined) {\n        if (offerOptions.offerToReceiveVideo === true) {\n          numVideoTracks = 1;\n        } else if (offerOptions.offerToReceiveVideo === false) {\n          numVideoTracks = 0;\n        } else {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n    }\n\n    pc.transceivers.forEach(function(transceiver) {\n      if (transceiver.kind === 'audio') {\n        numAudioTracks--;\n        if (numAudioTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      } else if (transceiver.kind === 'video') {\n        numVideoTracks--;\n        if (numVideoTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      }\n    });\n\n    // Create M-lines for recvonly streams.\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\n      if (numAudioTracks > 0) {\n        pc._createTransceiver('audio');\n        numAudioTracks--;\n      }\n      if (numVideoTracks > 0) {\n        pc._createTransceiver('video');\n        numVideoTracks--;\n      }\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      // For each track, create an ice gatherer, ice transport,\n      // dtls transport, potentially rtpsender and rtpreceiver.\n      var track = transceiver.track;\n      var kind = transceiver.kind;\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\n      transceiver.mid = mid;\n\n      if (!transceiver.iceGatherer) {\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n            pc.usingBundle);\n      }\n\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\n      // filter RTX until additional stuff needed for RTX is implemented\n      // in adapter.js\n      if (edgeVersion < 15019) {\n        localCapabilities.codecs = localCapabilities.codecs.filter(\n            function(codec) {\n              return codec.name !== 'rtx';\n            });\n      }\n      localCapabilities.codecs.forEach(function(codec) {\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n        // by adding level-asymmetry-allowed=1\n        if (codec.name === 'H264' &&\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\n          codec.parameters['level-asymmetry-allowed'] = '1';\n        }\n\n        // for subsequent offers, we might have to re-use the payload\n        // type of the last offer.\n        if (transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.codecs) {\n          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\n                codec.clockRate === remoteCodec.clockRate) {\n              codec.preferredPayloadType = remoteCodec.payloadType;\n            }\n          });\n        }\n      });\n      localCapabilities.headerExtensions.forEach(function(hdrExt) {\n        var remoteExtensions = transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.headerExtensions || [];\n        remoteExtensions.forEach(function(rHdrExt) {\n          if (hdrExt.uri === rHdrExt.uri) {\n            hdrExt.id = rHdrExt.id;\n          }\n        });\n      });\n\n      // generate an ssrc now, to be used later in rtpSender.send\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\n      }];\n      if (track) {\n        // add RTX\n        if (edgeVersion >= 15019 && kind === 'video' &&\n            !sendEncodingParameters[0].rtx) {\n          sendEncodingParameters[0].rtx = {\n            ssrc: sendEncodingParameters[0].ssrc + 1\n          };\n        }\n      }\n\n      if (transceiver.wantReceive) {\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\n            transceiver.dtlsTransport, kind);\n      }\n\n      transceiver.localCapabilities = localCapabilities;\n      transceiver.sendEncodingParameters = sendEncodingParameters;\n    });\n\n    // always offer BUNDLE and dispose on return if not supported.\n    if (pc._config.bundlePolicy !== 'max-compat') {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\n          'offer', transceiver.stream, pc._dtlsRole);\n      sdp += 'a=rtcp-rsize\\r\\n';\n\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\n          cand.component = 1;\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n        });\n\n        if (transceiver.iceGatherer.state === 'completed') {\n          sdp += 'a=end-of-candidates\\r\\n';\n        }\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'offer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.createAnswer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer after close'));\n    }\n\n    if (!(pc.signalingState === 'have-remote-offer' ||\n        pc.signalingState === 'have-local-pranswer')) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer in signalingState ' + pc.signalingState));\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    if (pc.usingBundle) {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(\n        pc._remoteDescription.sdp).length;\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n        return;\n      }\n      if (transceiver.rejected) {\n        if (transceiver.kind === 'application') {\n          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt\n            sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\n          } else {\n            sdp += 'm=application 0 ' + transceiver.protocol +\n                ' webrtc-datachannel\\r\\n';\n          }\n        } else if (transceiver.kind === 'audio') {\n          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' +\n              'a=rtpmap:0 PCMU/8000\\r\\n';\n        } else if (transceiver.kind === 'video') {\n          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' +\n              'a=rtpmap:120 VP8/90000\\r\\n';\n        }\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n' +\n            'a=inactive\\r\\n' +\n            'a=mid:' + transceiver.mid + '\\r\\n';\n        return;\n      }\n\n      // FIXME: look at direction.\n      if (transceiver.stream) {\n        var localTrack;\n        if (transceiver.kind === 'audio') {\n          localTrack = transceiver.stream.getAudioTracks()[0];\n        } else if (transceiver.kind === 'video') {\n          localTrack = transceiver.stream.getVideoTracks()[0];\n        }\n        if (localTrack) {\n          // add RTX\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\n              !transceiver.sendEncodingParameters[0].rtx) {\n            transceiver.sendEncodingParameters[0].rtx = {\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n            };\n          }\n        }\n      }\n\n      // Calculate intersection of capabilities.\n      var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\n        return c.name.toLowerCase() === 'rtx';\n      }).length;\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n        delete transceiver.sendEncodingParameters[0].rtx;\n      }\n\n      sdp += writeMediaSection(transceiver, commonCapabilities,\n          'answer', transceiver.stream, pc._dtlsRole);\n      if (transceiver.rtcpParameters &&\n          transceiver.rtcpParameters.reducedSize) {\n        sdp += 'a=rtcp-rsize\\r\\n';\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'answer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n    var pc = this;\n    var sections;\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\n        candidate.sdpMid)) {\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n    }\n\n    // TODO: needs to go into ops queue.\n    return new Promise(function(resolve, reject) {\n      if (!pc._remoteDescription) {\n        return reject(makeError('InvalidStateError',\n            'Can not add ICE candidate without a remote description'));\n      } else if (!candidate || candidate.candidate === '') {\n        for (var j = 0; j < pc.transceivers.length; j++) {\n          if (pc.transceivers[j].rejected) {\n            continue;\n          }\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[j] += 'a=end-of-candidates\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n          if (pc.usingBundle) {\n            break;\n          }\n        }\n      } else {\n        var sdpMLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < pc.transceivers.length; i++) {\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\n              sdpMLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        if (transceiver) {\n          if (transceiver.rejected) {\n            return resolve();\n          }\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return resolve();\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component && cand.component !== 1) {\n            return resolve();\n          }\n          // when using bundle, avoid adding candidates to the wrong\n          // ice transport. And avoid adding candidates added in the SDP.\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n              return reject(makeError('OperationError',\n                  'Can not add ICE candidate'));\n            }\n          }\n\n          // update the remoteDescription.\n          var candidateString = candidate.candidate.trim();\n          if (candidateString.indexOf('a=') === 0) {\n            candidateString = candidateString.substr(2);\n          }\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[sdpMLineIndex] += 'a=' +\n              (cand.type ? candidateString : 'end-of-candidates')\n              + '\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n        } else {\n          return reject(makeError('OperationError',\n              'Can not add ICE candidate'));\n        }\n      }\n      resolve();\n    });\n  };\n\n  RTCPeerConnection.prototype.getStats = function(selector) {\n    if (selector && selector instanceof window.MediaStreamTrack) {\n      var senderOrReceiver = null;\n      this.transceivers.forEach(function(transceiver) {\n        if (transceiver.rtpSender &&\n            transceiver.rtpSender.track === selector) {\n          senderOrReceiver = transceiver.rtpSender;\n        } else if (transceiver.rtpReceiver &&\n            transceiver.rtpReceiver.track === selector) {\n          senderOrReceiver = transceiver.rtpReceiver;\n        }\n      });\n      if (!senderOrReceiver) {\n        throw makeError('InvalidAccessError', 'Invalid selector.');\n      }\n      return senderOrReceiver.getStats();\n    }\n\n    var promises = [];\n    this.transceivers.forEach(function(transceiver) {\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n          'dtlsTransport'].forEach(function(method) {\n            if (transceiver[method]) {\n              promises.push(transceiver[method].getStats());\n            }\n          });\n    });\n    return Promise.all(promises).then(function(allStats) {\n      var results = new Map();\n      allStats.forEach(function(stats) {\n        stats.forEach(function(stat) {\n          results.set(stat.id, stat);\n        });\n      });\n      return results;\n    });\n  };\n\n  // fix low-level stat names and return Map instead of object.\n  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',\n    'RTCIceTransport', 'RTCDtlsTransport'];\n  ortcObjects.forEach(function(ortcObjectName) {\n    var obj = window[ortcObjectName];\n    if (obj && obj.prototype && obj.prototype.getStats) {\n      var nativeGetstats = obj.prototype.getStats;\n      obj.prototype.getStats = function() {\n        return nativeGetstats.apply(this)\n        .then(function(nativeStats) {\n          var mapStats = new Map();\n          Object.keys(nativeStats).forEach(function(id) {\n            nativeStats[id].type = fixStatsType(nativeStats[id]);\n            mapStats.set(id, nativeStats[id]);\n          });\n          return mapStats;\n        });\n      };\n    }\n  });\n\n  // legacy callback shims. Should be moved to adapter.js some days.\n  var methods = ['createOffer', 'createAnswer'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[0] === 'function' ||\n          typeof args[1] === 'function') { // legacy\n        return nativeMethod.apply(this, [arguments[2]])\n        .then(function(description) {\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, [description]);\n          }\n        }, function(error) {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function' ||\n          typeof args[2] === 'function') { // legacy\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        }, function(error) {\n          if (typeof args[2] === 'function') {\n            args[2].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  // getStats is special. It doesn't have a spec legacy method yet we support\n  // getStats(something, cb) without error callbacks.\n  ['getStats'].forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function') {\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  return RTCPeerConnection;\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var navigator = window && window.navigator;\n\n  var shimError_ = function(e) {\n    return {\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString: function() {\n        return this.name;\n      }\n    };\n  };\n\n  // getUserMedia error shim.\n  var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n  navigator.mediaDevices.getUserMedia = function(c) {\n    return origGetUserMedia(c).catch(function(e) {\n      return Promise.reject(shimError_(e));\n    });\n  };\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\n\nvar firefoxShim = {\n  shimOnTrack: function(window) {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n        window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function() {\n          return this._ontrack;\n        },\n        set: function(f) {\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n            this.removeEventListener('addstream', this._ontrackpoly);\n          }\n          this.addEventListener('track', this._ontrack = f);\n          this.addEventListener('addstream', this._ontrackpoly = function(e) {\n            e.stream.getTracks().forEach(function(track) {\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = {track: track};\n              event.transceiver = {receiver: event.receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            }.bind(this));\n          }.bind(this));\n        }\n      });\n    }\n    if (typeof window === 'object' && window.RTCTrackEvent &&\n        ('receiver' in window.RTCTrackEvent.prototype) &&\n        !('transceiver' in window.RTCTrackEvent.prototype)) {\n      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n        get: function() {\n          return {receiver: this.receiver};\n        }\n      });\n    }\n  },\n\n  shimSourceObject: function(window) {\n    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement &&\n        !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function() {\n            return this.mozSrcObject;\n          },\n          set: function(stream) {\n            this.mozSrcObject = stream;\n          }\n        });\n      }\n    }\n  },\n\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    if (typeof window !== 'object' || !(window.RTCPeerConnection ||\n        window.mozRTCPeerConnection)) {\n      return; // probably media.peerconnection.enabled=false in about:config\n    }\n    // The RTCPeerConnection object.\n    if (!window.RTCPeerConnection) {\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        if (browserDetails.version < 38) {\n          // .urls is not supported in FF < 38.\n          // create RTCIceServers with a single url.\n          if (pcConfig && pcConfig.iceServers) {\n            var newIceServers = [];\n            for (var i = 0; i < pcConfig.iceServers.length; i++) {\n              var server = pcConfig.iceServers[i];\n              if (server.hasOwnProperty('urls')) {\n                for (var j = 0; j < server.urls.length; j++) {\n                  var newServer = {\n                    url: server.urls[j]\n                  };\n                  if (server.urls[j].indexOf('turn') === 0) {\n                    newServer.username = server.username;\n                    newServer.credential = server.credential;\n                  }\n                  newIceServers.push(newServer);\n                }\n              } else {\n                newIceServers.push(pcConfig.iceServers[i]);\n              }\n            }\n            pcConfig.iceServers = newIceServers;\n          }\n        }\n        return new window.mozRTCPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype =\n          window.mozRTCPeerConnection.prototype;\n\n      // wrap static methods. Currently just generateCertificate.\n      if (window.mozRTCPeerConnection.generateCertificate) {\n        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n          get: function() {\n            return window.mozRTCPeerConnection.generateCertificate;\n          }\n        });\n      }\n\n      window.RTCSessionDescription = window.mozRTCSessionDescription;\n      window.RTCIceCandidate = window.mozRTCIceCandidate;\n    }\n\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          var nativeMethod = window.RTCPeerConnection.prototype[method];\n          window.RTCPeerConnection.prototype[method] = function() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          };\n        });\n\n    // support for addIceCandidate(null or undefined)\n    var nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate = function() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n\n    // shim getStats with maplike support\n    var makeMapStats = function(stats) {\n      var map = new Map();\n      Object.keys(stats).forEach(function(key) {\n        map.set(key, stats[key]);\n        map[key] = stats[key];\n      });\n      return map;\n    };\n\n    var modernStatsTypes = {\n      inboundrtp: 'inbound-rtp',\n      outboundrtp: 'outbound-rtp',\n      candidatepair: 'candidate-pair',\n      localcandidate: 'local-candidate',\n      remotecandidate: 'remote-candidate'\n    };\n\n    var nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n    window.RTCPeerConnection.prototype.getStats = function(\n      selector,\n      onSucc,\n      onErr\n    ) {\n      return nativeGetStats.apply(this, [selector || null])\n        .then(function(stats) {\n          if (browserDetails.version < 48) {\n            stats = makeMapStats(stats);\n          }\n          if (browserDetails.version < 53 && !onSucc) {\n            // Shim only promise getStats with spec-hyphens in type names\n            // Leave callback version alone; misc old uses of forEach before Map\n            try {\n              stats.forEach(function(stat) {\n                stat.type = modernStatsTypes[stat.type] || stat.type;\n              });\n            } catch (e) {\n              if (e.name !== 'TypeError') {\n                throw e;\n              }\n              // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n              stats.forEach(function(stat, i) {\n                stats.set(i, Object.assign({}, stat, {\n                  type: modernStatsTypes[stat.type] || stat.type\n                }));\n              });\n            }\n          }\n          return stats;\n        })\n        .then(onSucc, onErr);\n    };\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimOnTrack: firefoxShim.shimOnTrack,\n  shimSourceObject: firefoxShim.shimSourceObject,\n  shimPeerConnection: firefoxShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\nvar logging = utils.log;\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var browserDetails = utils.detectBrowser(window);\n  var navigator = window && window.navigator;\n  var MediaStreamTrack = window && window.MediaStreamTrack;\n\n  var shimError_ = function(e) {\n    return {\n      name: {\n        InternalError: 'NotReadableError',\n        NotSupportedError: 'TypeError',\n        PermissionDeniedError: 'NotAllowedError',\n        SecurityError: 'NotAllowedError'\n      }[e.name] || e.name,\n      message: {\n        'The operation is insecure.': 'The request is not allowed by the ' +\n        'user agent or the platform in the current context.'\n      }[e.message] || e.message,\n      constraint: e.constraint,\n      toString: function() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  // getUserMedia constraints shim.\n  var getUserMedia_ = function(constraints, onSuccess, onError) {\n    var constraintsToFF37_ = function(c) {\n      if (typeof c !== 'object' || c.require) {\n        return c;\n      }\n      var require = [];\n      Object.keys(c).forEach(function(key) {\n        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n          return;\n        }\n        var r = c[key] = (typeof c[key] === 'object') ?\n            c[key] : {ideal: c[key]};\n        if (r.min !== undefined ||\n            r.max !== undefined || r.exact !== undefined) {\n          require.push(key);\n        }\n        if (r.exact !== undefined) {\n          if (typeof r.exact === 'number') {\n            r. min = r.max = r.exact;\n          } else {\n            c[key] = r.exact;\n          }\n          delete r.exact;\n        }\n        if (r.ideal !== undefined) {\n          c.advanced = c.advanced || [];\n          var oc = {};\n          if (typeof r.ideal === 'number') {\n            oc[key] = {min: r.ideal, max: r.ideal};\n          } else {\n            oc[key] = r.ideal;\n          }\n          c.advanced.push(oc);\n          delete r.ideal;\n          if (!Object.keys(r).length) {\n            delete c[key];\n          }\n        }\n      });\n      if (require.length) {\n        c.require = require;\n      }\n      return c;\n    };\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (browserDetails.version < 38) {\n      logging('spec: ' + JSON.stringify(constraints));\n      if (constraints.audio) {\n        constraints.audio = constraintsToFF37_(constraints.audio);\n      }\n      if (constraints.video) {\n        constraints.video = constraintsToFF37_(constraints.video);\n      }\n      logging('ff37: ' + JSON.stringify(constraints));\n    }\n    return navigator.mozGetUserMedia(constraints, onSuccess, function(e) {\n      onError(shimError_(e));\n    });\n  };\n\n  // Returns the result of getUserMedia as a Promise.\n  var getUserMediaPromise_ = function(constraints) {\n    return new Promise(function(resolve, reject) {\n      getUserMedia_(constraints, resolve, reject);\n    });\n  };\n\n  // Shim for mediaDevices on older versions.\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,\n      addEventListener: function() { },\n      removeEventListener: function() { }\n    };\n  }\n  navigator.mediaDevices.enumerateDevices =\n      navigator.mediaDevices.enumerateDevices || function() {\n        return new Promise(function(resolve) {\n          var infos = [\n            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},\n            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}\n          ];\n          resolve(infos);\n        });\n      };\n\n  if (browserDetails.version < 41) {\n    // Work around http://bugzil.la/1169665\n    var orgEnumerateDevices =\n        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);\n    navigator.mediaDevices.enumerateDevices = function() {\n      return orgEnumerateDevices().then(undefined, function(e) {\n        if (e.name === 'NotFoundError') {\n          return [];\n        }\n        throw e;\n      });\n    };\n  }\n  if (browserDetails.version < 49) {\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      return origGetUserMedia(c).then(function(stream) {\n        // Work around https://bugzil.la/802326\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(function(track) {\n            track.stop();\n          });\n          throw new DOMException('The object can not be found here.',\n                                 'NotFoundError');\n        }\n        return stream;\n      }, function(e) {\n        return Promise.reject(shimError_(e));\n      });\n    };\n  }\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    var remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      var nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        var obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    if (browserDetails.version < 44) {\n      return getUserMedia_(constraints, onSuccess, onError);\n    }\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nvar utils = require('../utils');\n\nvar safariShim = {\n  // TODO: DrAlex, should be here, double check against LayoutTests\n\n  // TODO: once the back-end for the mac port is done, add.\n  // TODO: check for webkitGTK+\n  // shimPeerConnection: function() { },\n\n  shimLocalStreamsAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getLocalStreams = function() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n    }\n    if (!('getStreamById' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getStreamById = function(id) {\n        var result = null;\n        if (this._localStreams) {\n          this._localStreams.forEach(function(stream) {\n            if (stream.id === id) {\n              result = stream;\n            }\n          });\n        }\n        if (this._remoteStreams) {\n          this._remoteStreams.forEach(function(stream) {\n            if (stream.id === id) {\n              result = stream;\n            }\n          });\n        }\n        return result;\n      };\n    }\n    if (!('addStream' in window.RTCPeerConnection.prototype)) {\n      var _addTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addStream = function(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        if (this._localStreams.indexOf(stream) === -1) {\n          this._localStreams.push(stream);\n        }\n        var self = this;\n        stream.getTracks().forEach(function(track) {\n          _addTrack.call(self, track, stream);\n        });\n      };\n\n      window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n        if (stream) {\n          if (!this._localStreams) {\n            this._localStreams = [stream];\n          } else if (this._localStreams.indexOf(stream) === -1) {\n            this._localStreams.push(stream);\n          }\n        }\n        _addTrack.call(this, track, stream);\n      };\n    }\n    if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.removeStream = function(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        var index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        var self = this;\n        var tracks = stream.getTracks();\n        this.getSenders().forEach(function(sender) {\n          if (tracks.indexOf(sender.track) !== -1) {\n            self.removeTrack(sender);\n          }\n        });\n      };\n    }\n  },\n  shimRemoteStreamsAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getRemoteStreams = function() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n    }\n    if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n        get: function() {\n          return this._onaddstream;\n        },\n        set: function(f) {\n          if (this._onaddstream) {\n            this.removeEventListener('addstream', this._onaddstream);\n            this.removeEventListener('track', this._onaddstreampoly);\n          }\n          this.addEventListener('addstream', this._onaddstream = f);\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            var stream = e.streams[0];\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.indexOf(stream) >= 0) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            var event = new Event('addstream');\n            event.stream = e.streams[0];\n            this.dispatchEvent(event);\n          }.bind(this));\n        }\n      });\n    }\n  },\n  shimCallbacksAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    var prototype = window.RTCPeerConnection.prototype;\n    var createOffer = prototype.createOffer;\n    var createAnswer = prototype.createAnswer;\n    var setLocalDescription = prototype.setLocalDescription;\n    var setRemoteDescription = prototype.setRemoteDescription;\n    var addIceCandidate = prototype.addIceCandidate;\n\n    prototype.createOffer = function(successCallback, failureCallback) {\n      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      var promise = createOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    prototype.createAnswer = function(successCallback, failureCallback) {\n      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      var promise = createAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    var withCallback = function(description, successCallback, failureCallback) {\n      var promise = setLocalDescription.apply(this, [description]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.setLocalDescription = withCallback;\n\n    withCallback = function(description, successCallback, failureCallback) {\n      var promise = setRemoteDescription.apply(this, [description]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.setRemoteDescription = withCallback;\n\n    withCallback = function(candidate, successCallback, failureCallback) {\n      var promise = addIceCandidate.apply(this, [candidate]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.addIceCandidate = withCallback;\n  },\n  shimGetUserMedia: function(window) {\n    var navigator = window && window.navigator;\n\n    if (!navigator.getUserMedia) {\n      if (navigator.webkitGetUserMedia) {\n        navigator.getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n      } else if (navigator.mediaDevices &&\n          navigator.mediaDevices.getUserMedia) {\n        navigator.getUserMedia = function(constraints, cb, errcb) {\n          navigator.mediaDevices.getUserMedia(constraints)\n          .then(cb, errcb);\n        }.bind(navigator);\n      }\n    }\n  },\n  shimRTCIceServerUrls: function(window) {\n    // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n    var OrigPeerConnection = window.RTCPeerConnection;\n    window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        var newIceServers = [];\n        for (var i = 0; i < pcConfig.iceServers.length; i++) {\n          var server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n    window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n    // wrap static methods. Currently just generateCertificate.\n    if ('generateCertificate' in window.RTCPeerConnection) {\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n        get: function() {\n          return OrigPeerConnection.generateCertificate;\n        }\n      });\n    }\n  },\n  shimTrackEventTransceiver: function(window) {\n    // Add event.transceiver member over deprecated event.receiver\n    if (typeof window === 'object' && window.RTCPeerConnection &&\n        ('receiver' in window.RTCTrackEvent.prototype) &&\n        // can't check 'transceiver' in window.RTCTrackEvent.prototype, as it is\n        // defined for some reason even when window.RTCTransceiver is not.\n        !window.RTCTransceiver) {\n      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n        get: function() {\n          return {receiver: this.receiver};\n        }\n      });\n    }\n  },\n\n  shimCreateOfferLegacy: function(window) {\n    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n    window.RTCPeerConnection.prototype.createOffer = function(offerOptions) {\n      var pc = this;\n      if (offerOptions) {\n        var audioTransceiver = pc.getTransceivers().find(function(transceiver) {\n          return transceiver.sender.track &&\n              transceiver.sender.track.kind === 'audio';\n        });\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            audioTransceiver.setDirection('sendonly');\n          } else if (audioTransceiver.direction === 'recvonly') {\n            audioTransceiver.setDirection('inactive');\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          pc.addTransceiver('audio');\n        }\n\n        var videoTransceiver = pc.getTransceivers().find(function(transceiver) {\n          return transceiver.sender.track &&\n              transceiver.sender.track.kind === 'video';\n        });\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            videoTransceiver.setDirection('sendonly');\n          } else if (videoTransceiver.direction === 'recvonly') {\n            videoTransceiver.setDirection('inactive');\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          pc.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(pc, arguments);\n    };\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimCallbacksAPI: safariShim.shimCallbacksAPI,\n  shimLocalStreamsAPI: safariShim.shimLocalStreamsAPI,\n  shimRemoteStreamsAPI: safariShim.shimRemoteStreamsAPI,\n  shimGetUserMedia: safariShim.shimGetUserMedia,\n  shimRTCIceServerUrls: safariShim.shimRTCIceServerUrls,\n  shimTrackEventTransceiver: safariShim.shimTrackEventTransceiver,\n  shimCreateOfferLegacy: safariShim.shimCreateOfferLegacy\n  // TODO\n  // shimPeerConnection: safariShim.shimPeerConnection\n};\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\nvar utils = require('./utils');\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object.\nfunction wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  var proto = window.RTCPeerConnection.prototype;\n  var nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    var wrappedCallback = function(e) {\n      cb(wrapper(e));\n    };\n    this._eventMap = this._eventMap || {};\n    this._eventMap[cb] = wrappedCallback;\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  var nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[cb]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    var unwrappedCb = this._eventMap[cb];\n    delete this._eventMap[cb];\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get: function() {\n      return this['_on' + eventNameToWrap];\n    },\n    set: function(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    }\n  });\n}\n\nmodule.exports = {\n  shimRTCIceCandidate: function(window) {\n    // foundation is arbitrarily chosen as an indicator for full support for\n    // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n    if (window.RTCIceCandidate && 'foundation' in\n        window.RTCIceCandidate.prototype) {\n      return;\n    }\n\n    var NativeRTCIceCandidate = window.RTCIceCandidate;\n    window.RTCIceCandidate = function(args) {\n      // Remove the a= which shouldn't be part of the candidate string.\n      if (typeof args === 'object' && args.candidate &&\n          args.candidate.indexOf('a=') === 0) {\n        args = JSON.parse(JSON.stringify(args));\n        args.candidate = args.candidate.substr(2);\n      }\n\n      // Augment the native candidate with the parsed fields.\n      var nativeCandidate = new NativeRTCIceCandidate(args);\n      var parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      var augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    };\n\n    // Hook up the augmented candidate in onicecandidate and\n    // addEventListener('icecandidate', ...)\n    wrapPeerConnectionEvent(window, 'icecandidate', function(e) {\n      if (e.candidate) {\n        Object.defineProperty(e, 'candidate', {\n          value: new window.RTCIceCandidate(e.candidate),\n          writable: 'false'\n        });\n      }\n      return e;\n    });\n  },\n\n  // shimCreateObjectURL must be called before shimSourceObject to avoid loop.\n\n  shimCreateObjectURL: function(window) {\n    var URL = window && window.URL;\n\n    if (!(typeof window === 'object' && window.HTMLMediaElement &&\n          'srcObject' in window.HTMLMediaElement.prototype &&\n        URL.createObjectURL && URL.revokeObjectURL)) {\n      // Only shim CreateObjectURL using srcObject if srcObject exists.\n      return undefined;\n    }\n\n    var nativeCreateObjectURL = URL.createObjectURL.bind(URL);\n    var nativeRevokeObjectURL = URL.revokeObjectURL.bind(URL);\n    var streams = new Map(), newId = 0;\n\n    URL.createObjectURL = function(stream) {\n      if ('getTracks' in stream) {\n        var url = 'polyblob:' + (++newId);\n        streams.set(url, stream);\n        utils.deprecated('URL.createObjectURL(stream)',\n            'elem.srcObject = stream');\n        return url;\n      }\n      return nativeCreateObjectURL(stream);\n    };\n    URL.revokeObjectURL = function(url) {\n      nativeRevokeObjectURL(url);\n      streams.delete(url);\n    };\n\n    var dsc = Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype,\n                                              'src');\n    Object.defineProperty(window.HTMLMediaElement.prototype, 'src', {\n      get: function() {\n        return dsc.get.apply(this);\n      },\n      set: function(url) {\n        this.srcObject = streams.get(url) || null;\n        return dsc.set.apply(this, [url]);\n      }\n    });\n\n    var nativeSetAttribute = window.HTMLMediaElement.prototype.setAttribute;\n    window.HTMLMediaElement.prototype.setAttribute = function() {\n      if (arguments.length === 2 &&\n          ('' + arguments[0]).toLowerCase() === 'src') {\n        this.srcObject = streams.get(arguments[1]) || null;\n      }\n      return nativeSetAttribute.apply(this, arguments);\n    };\n  }\n};\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexports.Interop = require('./interop');\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* global RTCSessionDescription */\n/* global RTCIceCandidate */\n/* jshint -W097 */\n\"use strict\";\n\nvar transform = require('./transform');\nvar arrayEquals = require('./array-equals');\n\n/**\n * Unified Plan mids may be parsed as integers\n */\nfunction midToString(line) {\n    if (typeof line.mid === 'number') {\n        line.mid = line.mid.toString();\n    }\n}\n\n\nfunction Interop() {\n\n    /**\n     * This map holds the most recent Unified Plan offer/answer SDP that was\n     * converted to Plan B, with the SDP type ('offer' or 'answer') as keys and\n     * the SDP string as values.\n     *\n     * @type {{}}\n     */\n    this.cache = {\n        mlB2UMap : {},\n        mlU2BMap : {}\n    };\n}\n\nmodule.exports = Interop;\n\n/**\n * Changes the candidate args to match with the related Unified Plan\n */\nInterop.prototype.candidateToUnifiedPlan = function(candidate) {\n    var cand = new RTCIceCandidate(candidate);\n\n    cand.sdpMLineIndex = this.cache.mlB2UMap[cand.sdpMLineIndex];\n    /* TODO: change sdpMid to (audio|video)-SSRC */\n\n    return cand;\n};\n\n/**\n * Changes the candidate args to match with the related Plan B\n */\nInterop.prototype.candidateToPlanB = function(candidate) {\n    var cand = new RTCIceCandidate(candidate);\n\n    if (cand.sdpMid.indexOf('audio') === 0) {\n      cand.sdpMid = 'audio';\n    } else if (cand.sdpMid.indexOf('video') === 0) {\n      cand.sdpMid = 'video';\n    } else {\n      throw new Error('candidate with ' + cand.sdpMid + ' not allowed');\n    }\n\n    cand.sdpMLineIndex = this.cache.mlU2BMap[cand.sdpMLineIndex];\n\n    return cand;\n};\n\n/**\n * Returns the index of the first m-line with the given media type and with a\n * direction which allows sending, in the last Unified Plan description with\n * type \"answer\" converted to Plan B. Returns {null} if there is no saved\n * answer, or if none of its m-lines with the given type allow sending.\n * @param type the media type (\"audio\" or \"video\").\n * @returns {*}\n */\nInterop.prototype.getFirstSendingIndexFromAnswer = function(type) {\n    if (!this.cache.answer) {\n        return null;\n    }\n\n    var session = transform.parse(this.cache.answer);\n    if (session && session.media && Array.isArray(session.media)){\n        for (var i = 0; i < session.media.length; i++) {\n            if (session.media[i].type == type &&\n                (!session.media[i].direction /* default to sendrecv */ ||\n                    session.media[i].direction === 'sendrecv' ||\n                    session.media[i].direction === 'sendonly')){\n                return i;\n            }\n        }\n    }\n\n    return null;\n};\n\n/**\n * This method transforms a Unified Plan SDP to an equivalent Plan B SDP. A\n * PeerConnection wrapper transforms the SDP to Plan B before passing it to the\n * application.\n *\n * @param desc\n * @returns {*}\n */\nInterop.prototype.toPlanB = function(desc) {\n    var self = this;\n    //#region Preliminary input validation.\n\n    if (typeof desc !== 'object' || desc === null ||\n        typeof desc.sdp !== 'string') {\n        console.warn('An empty description was passed as an argument.');\n        return desc;\n    }\n\n    // Objectify the SDP for easier manipulation.\n    var session = transform.parse(desc.sdp);\n\n    // If the SDP contains no media, there's nothing to transform.\n    if (typeof session.media === 'undefined' ||\n        !Array.isArray(session.media) || session.media.length === 0) {\n        console.warn('The description has no media.');\n        return desc;\n    }\n\n    // Try some heuristics to \"make sure\" this is a Unified Plan SDP. Plan B\n    // SDP has a video, an audio and a data \"channel\" at most.\n    if (session.media.length <= 3 && session.media.every(function(m) {\n            return ['video', 'audio', 'data'].indexOf(m.mid) !== -1;\n        })) {\n        console.warn('This description does not look like Unified Plan.');\n        return desc;\n    }\n\n    //#endregion\n\n    // HACK https://bugzilla.mozilla.org/show_bug.cgi?id=1113443\n    var sdp = desc.sdp;\n    var rewrite = false;\n    for (var i = 0; i < session.media.length; i++) {\n        var uLine = session.media[i];\n        uLine.rtp.forEach(function(rtp) {\n            if (rtp.codec === 'NULL')\n            {\n                rewrite = true;\n                var offer = transform.parse(self.cache.offer);\n                rtp.codec = offer.media[i].rtp[0].codec;\n            }\n        });\n    }\n    if (rewrite) {\n        sdp = transform.write(session);\n    }\n\n    // Unified Plan SDP is our \"precious\". Cache it for later use in the Plan B\n    // -> Unified Plan transformation.\n    this.cache[desc.type] = sdp;\n\n    //#region Convert from Unified Plan to Plan B.\n\n    // We rebuild the session.media array.\n    var media = session.media;\n    session.media = [];\n\n    // Associative array that maps channel types to channel objects for fast\n    // access to channel objects by their type, e.g. type2bl['audio']->channel\n    // obj.\n    var type2bl = {};\n\n    // Used to build the group:BUNDLE value after the channels construction\n    // loop.\n    var types = [];\n\n    // Used to aggregate the directions of the m-lines.\n    var directionResult = {};\n\n    media.forEach(function(uLine) {\n        midToString(uLine);\n        // rtcp-mux is required in the Plan B SDP.\n        if ((typeof uLine.rtcpMux !== 'string' ||\n            uLine.rtcpMux !== 'rtcp-mux') &&\n            uLine.direction !== 'inactive' && uLine.type !== 'application') {\n            throw new Error('Cannot convert to Plan B because m-lines ' +\n                'without the rtcp-mux attribute were found.');\n        }\n\n        // If we don't have a channel for this uLine.type OR the selected is\n        // inactive, then select this uLine as the channel basis.\n        if (typeof type2bl[uLine.type] === 'undefined' ||\n            type2bl[uLine.type].direction === 'inactive') {\n            type2bl[uLine.type] = uLine;\n        }\n    });\n\n    // Implode the Unified Plan m-lines/tracks into Plan B channels.\n    media.forEach(function(uLine) {\n        var type = uLine.type;\n\n        if (type === 'application') {\n            uLine.mid = \"data\";\n            session.media.push(uLine);\n            types.push(uLine.mid);\n            return;\n        }\n\n        // Add sources to the channel and handle a=msid.\n        if (typeof uLine.sources === 'object') {\n            Object.keys(uLine.sources).forEach(function(ssrc) {\n                if (typeof type2bl[type].sources !== 'object')\n                    type2bl[type].sources = {};\n\n                // Assign the sources to the channel.\n                type2bl[type].sources[ssrc] = uLine.sources[ssrc];\n\n                if (typeof uLine.msid !== 'undefined') {\n                    // In Plan B the msid is an SSRC attribute. Also, we don't\n                    // care about the obsolete label and mslabel attributes.\n                    //\n                    // Note that it is not guaranteed that the uLine will\n                    // have an msid. recvonly channels in particular don't have\n                    // one.\n                    type2bl[type].sources[ssrc].msid = uLine.msid;\n                }\n                // NOTE ssrcs in ssrc groups will share msids, as\n                // draft-uberti-rtcweb-plan-00 mandates.\n            });\n        }\n\n        // Add ssrc groups to the channel.\n        if (typeof uLine.ssrcGroups !== 'undefined' &&\n                Array.isArray(uLine.ssrcGroups)) {\n\n            // Create the ssrcGroups array, if it's not defined.\n            if (typeof type2bl[type].ssrcGroups === 'undefined' ||\n                    !Array.isArray(type2bl[type].ssrcGroups)) {\n                type2bl[type].ssrcGroups = [];\n            }\n\n            // Different ssrc may belong to the same group\n            if (!arrayEquals.apply(type2bl[type].ssrcGroups,\n                                   [uLine.ssrcGroups])) {\n                type2bl[type].ssrcGroups\n                    = type2bl[type].ssrcGroups.concat(uLine.ssrcGroups);\n            }\n        }\n\n        var direction = uLine.direction;\n\n        directionResult[type]\n            = (directionResult[type] || 0 /* inactive */)\n                | directionMasks[direction || 'inactive'];\n\n        if (type2bl[type] === uLine) {\n            // Plan B mids are in ['audio', 'video', 'data']\n            uLine.mid = type;\n\n            // Plan B doesn't support/need the bundle-only attribute.\n            delete uLine.bundleOnly;\n\n            // In Plan B the msid is an SSRC attribute.\n            delete uLine.msid;\n\n            if (direction !== 'inactive') {\n              // Used to build the group:BUNDLE value after this loop.\n              types.push(type);\n            }\n\n            // Add the channel to the new media array.\n            session.media.push(uLine);\n        }\n    });\n\n    // We regenerate the BUNDLE group with the new mids.\n    session.groups.some(function(group) {\n        if (group.type === 'BUNDLE') {\n            group.mids = types.join(' ');\n            return true;\n        }\n    });\n\n    // msid semantic\n    session.msidSemantic = {\n        semantic: 'WMS',\n        token: '*'\n    };\n\n    var resStr = transform.write(session);\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n\n    //#endregion\n};\n\n/**\n * This method transforms a Plan B SDP to an equivalent Unified Plan SDP. A\n * PeerConnection wrapper transforms the SDP to Unified Plan before passing it\n * to FF.\n *\n * @param desc\n * @returns {*}\n */\nInterop.prototype.toUnifiedPlan = function(desc) {\n    var self = this;\n    //#region Preliminary input validation.\n\n    if (typeof desc !== 'object' || desc === null ||\n        typeof desc.sdp !== 'string') {\n        console.warn('An empty description was passed as an argument.');\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    // If the SDP contains no media, there's nothing to transform.\n    if (typeof session.media === 'undefined' ||\n        !Array.isArray(session.media) || session.media.length === 0) {\n        console.warn('The description has no media.');\n        return desc;\n    }\n\n    // Try some heuristics to \"make sure\" this is a Plan B SDP. Plan B SDP has\n    // a video, an audio and a data \"channel\" at most.\n    if (session.media.length > 3 || !session.media.every(function(m) {\n            return ['video', 'audio', 'data'].indexOf(m.mid) !== -1;\n        })) {\n        console.warn('This description does not look like Plan B.');\n        return desc;\n    }\n\n    // Make sure this Plan B SDP can be converted to a Unified Plan SDP.\n    var mids = [];\n    session.media.forEach(function(m) {\n        mids.push(m.mid);\n    });\n\n    var hasBundle = false;\n    if (typeof session.groups !== 'undefined' &&\n        Array.isArray(session.groups)) {\n        hasBundle = session.groups.every(function(g) {\n            return g.type !== 'BUNDLE' ||\n                arrayEquals.apply(g.mids.sort(), [mids.sort()]);\n        });\n    }\n\n    if (!hasBundle) {\n        throw new Error(\"Cannot convert to Unified Plan because m-lines that\" +\n            \" are not bundled were found.\");\n    }\n\n    //#endregion\n\n\n    //#region Convert from Plan B to Unified Plan.\n\n    // Unfortunately, a Plan B offer/answer doesn't have enough information to\n    // rebuild an equivalent Unified Plan offer/answer.\n    //\n    // For example, if this is a local answer (in Unified Plan style) that we\n    // convert to Plan B prior to handing it over to the application (the\n    // PeerConnection wrapper called us, for instance, after a successful\n    // createAnswer), we want to remember the m-line at which we've seen the\n    // (local) SSRC. That's because when the application wants to do call the\n    // SLD method, forcing us to do the inverse transformation (from Plan B to\n    // Unified Plan), we need to know to which m-line to assign the (local)\n    // SSRC. We also need to know all the other m-lines that the original\n    // answer had and include them in the transformed answer as well.\n    //\n    // Another example is if this is a remote offer that we convert to Plan B\n    // prior to giving it to the application, we want to remember the mid at\n    // which we've seen the (remote) SSRC.\n    //\n    // In the iteration that follows, we use the cached Unified Plan (if it\n    // exists) to assign mids to ssrcs.\n\n    var cached;\n    if (typeof this.cache[desc.type] !== 'undefined') {\n        cached = transform.parse(this.cache[desc.type]);\n    }\n\n    var recvonlySsrcs = {\n        audio: {},\n        video: {}\n    };\n\n    // A helper map that sends mids to m-line objects. We use it later to\n    // rebuild the Unified Plan style session.media array.\n    var mid2ul = {};\n    var bIdx = 0;\n    var uIdx = 0;\n\n    session.media.forEach(function(bLine) {\n\n        if ((typeof bLine.rtcpMux !== 'string' ||\n            bLine.rtcpMux !== 'rtcp-mux') &&\n            bLine.direction !== 'inactive' && bLine.type !== 'application') {\n            throw new Error(\"Cannot convert to Unified Plan because m-lines \" +\n                \"without the rtcp-mux attribute were found.\");\n        }\n\n        if (bLine.type === 'application') {\n            var uLineData = null;\n            if (cached && cached.media) {\n                uLineData = cached.media.find(function(uLine) {\n                    return uLine.type === 'application';\n                });\n            }\n            if (uLineData) {\n                mid2ul[uLineData.mid] = uLineData;\n            } else {\n                mid2ul[bLine.mid] = bLine;\n            }\n            return;\n        }\n\n        // With rtcp-mux and bundle all the channels should have the same ICE\n        // stuff.\n        var sources = bLine.sources;\n        var ssrcGroups = bLine.ssrcGroups;\n        var candidates = bLine.candidates;\n        var iceUfrag = bLine.iceUfrag;\n        var icePwd = bLine.icePwd;\n        var fingerprint = bLine.fingerprint;\n        var port = bLine.port;\n\n        // We'll use the \"bLine\" object as a prototype for each new \"mLine\"\n        // that we create, but first we need to clean it up a bit.\n        delete bLine.sources;\n        delete bLine.ssrcGroups;\n        delete bLine.candidates;\n        delete bLine.iceUfrag;\n        delete bLine.icePwd;\n        delete bLine.fingerprint;\n        delete bLine.port;\n        delete bLine.mid;\n\n        // inverted ssrc group map\n        var ssrc2group = {};\n        if (typeof ssrcGroups !== 'undefined' && Array.isArray(ssrcGroups)) {\n            ssrcGroups.forEach(function (ssrcGroup) {\n\n                // TODO(gp) find out how to receive simulcast with FF. For the\n                // time being, hide it.\n                if (ssrcGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                // XXX This might brake if an SSRC is in more than one group\n                // for some reason.\n                if (typeof ssrcGroup.ssrcs !== 'undefined' &&\n                    Array.isArray(ssrcGroup.ssrcs)) {\n                    ssrcGroup.ssrcs.forEach(function (ssrc) {\n                        if (typeof ssrc2group[ssrc] === 'undefined') {\n                            ssrc2group[ssrc] = [];\n                        }\n\n                        ssrc2group[ssrc].push(ssrcGroup);\n                    });\n                }\n            });\n        }\n\n        // ssrc to m-line index.\n        var ssrc2ml = {};\n\n        if (typeof sources === 'object') {\n\n            // Explode the Plan B channel sources with one m-line per source.\n            Object.keys(sources).forEach(function(ssrc) {\n\n                // The (unified) m-line for this SSRC. We either create it from\n                // scratch or, if it's a grouped SSRC, we re-use a related\n                // mline. In other words, if the source is grouped with another\n                // source, put the two together in the same m-line.\n                var uLine;\n\n                // We assume here that we are the answerer in the O/A, so any\n                // offers which we translate come from the remote side, while\n                // answers are local. So the check below is to make that we\n                // handle receive-only SSRCs in a special way only if they come\n                // from the remote side.\n                if (desc.type==='offer') {\n                    // We want to detect SSRCs which are used by a remote peer\n                    // in an m-line with direction=recvonly (i.e. they are\n                    // being used for RTCP only).\n                    // This information would have gotten lost if the remote\n                    // peer used Unified Plan and their local description was\n                    // translated to Plan B. So we use the lack of an MSID\n                    // attribute to deduce a \"receive only\" SSRC.\n                    if (!sources[ssrc].msid) {\n                        recvonlySsrcs[bLine.type][ssrc] = sources[ssrc];\n                        // Receive-only SSRCs must not create new m-lines. We\n                        // will assign them to an existing m-line later.\n                        return;\n                    }\n                }\n\n                if (typeof ssrc2group[ssrc] !== 'undefined' &&\n                    Array.isArray(ssrc2group[ssrc])) {\n                    ssrc2group[ssrc].some(function (ssrcGroup) {\n                        // ssrcGroup.ssrcs *is* an Array, no need to check\n                        // again here.\n                        return ssrcGroup.ssrcs.some(function (related) {\n                            if (typeof ssrc2ml[related] === 'object') {\n                                uLine = ssrc2ml[related];\n                                return true;\n                            }\n                        });\n                    });\n                }\n\n                if (typeof uLine === 'object') {\n                    // the m-line already exists. Just add the source.\n                    uLine.sources[ssrc] = sources[ssrc];\n                    delete sources[ssrc].msid;\n                } else {\n                    // Use the \"bLine\" as a prototype for the \"uLine\".\n                    uLine = Object.create(bLine);\n                    ssrc2ml[ssrc] = uLine;\n\n                    if (typeof sources[ssrc].msid !== 'undefined') {\n                        // Assign the msid of the source to the m-line. Note\n                        // that it is not guaranteed that the source will have\n                        // msid. In particular \"recvonly\" sources don't have an\n                        // msid. Note that \"recvonly\" is a term only defined\n                        // for m-lines.\n                        uLine.msid = sources[ssrc].msid;\n                        delete sources[ssrc].msid;\n                    }\n\n                    // We assign one SSRC per media line.\n                    uLine.sources = {};\n                    uLine.sources[ssrc] = sources[ssrc];\n                    uLine.ssrcGroups = ssrc2group[ssrc];\n\n                    // Use the cached Unified Plan SDP (if it exists) to assign\n                    // SSRCs to mids.\n                    if (typeof cached !== 'undefined' &&\n                        typeof cached.media !== 'undefined' &&\n                        Array.isArray(cached.media)) {\n\n                        cached.media.forEach(function (m) {\n                            if (typeof m.sources === 'object') {\n                                Object.keys(m.sources).forEach(function (s) {\n                                    if (s === ssrc) {\n                                        uLine.mid = m.mid;\n                                    }\n                                });\n                            }\n                        });\n                    }\n\n                    midToString(uLine);\n\n                    if (typeof uLine.mid === 'undefined') {\n\n                        // If this is an SSRC that we see for the first time\n                        // assign it a new mid. This is typically the case when\n                        // this method is called to transform a remote\n                        // description for the first time or when there is a\n                        // new SSRC in the remote description because a new\n                        // peer has joined the conference. Local SSRCs should\n                        // have already been added to the map in the toPlanB\n                        // method.\n                        //\n                        // Because FF generates answers in Unified Plan style,\n                        // we MUST already have a cached answer with all the\n                        // local SSRCs mapped to some m-line/mid.\n\n                        if (desc.type === 'answer') {\n                            throw new Error(\"An unmapped SSRC was found.\");\n                        }\n\n                        uLine.mid = [bLine.type, '-', ssrc].join('');\n                    }\n\n                    // Include the candidates in the 1st media line.\n                    uLine.candidates = candidates;\n                    uLine.iceUfrag = iceUfrag;\n                    uLine.icePwd = icePwd;\n                    uLine.fingerprint = fingerprint;\n                    uLine.port = port;\n\n                    mid2ul[uLine.mid] = uLine;\n\n                    self.cache.mlU2BMap[uIdx] = bIdx;\n                    if (typeof self.cache.mlB2UMap[bIdx] === 'undefined') {\n                      self.cache.mlB2UMap[bIdx] = uIdx;\n                    }\n                    uIdx++;\n                }\n            });\n        }\n\n        bIdx++;\n    });\n\n    // Rebuild the media array in the right order and add the missing mLines\n    // (missing from the Plan B SDP).\n    session.media = [];\n    mids = []; // reuse\n\n    if (desc.type === 'answer') {\n\n        // The media lines in the answer must match the media lines in the\n        // offer. The order is important too. Here we assume that Firefox is\n        // the answerer, so we merely have to use the reconstructed (unified)\n        // answer to update the cached (unified) answer accordingly.\n        //\n        // In the general case, one would have to use the cached (unified)\n        // offer to find the m-lines that are missing from the reconstructed\n        // answer, potentially grabbing them from the cached (unified) answer.\n        // One has to be careful with this approach because inactive m-lines do\n        // not always have an mid, making it tricky (impossible?) to find where\n        // exactly and which m-lines are missing from the reconstructed answer.\n\n        for (var i = 0; i < cached.media.length; i++) {\n            var uLine = cached.media[i];\n            midToString(uLine);\n\n            if (typeof mid2ul[uLine.mid] === 'undefined') {\n\n                // The mid isn't in the reconstructed (unified) answer.\n                // This is either a (unified) m-line containing a remote\n                // track only, or a (unified) m-line containing a remote\n                // track and a local track that has been removed.\n                // In either case, it MUST exist in the cached\n                // (unified) answer.\n                //\n                // In case this is a removed local track, clean-up\n                // the (unified) m-line and make sure it's 'recvonly' or\n                // 'inactive'.\n\n                delete uLine.msid;\n                delete uLine.sources;\n                delete uLine.ssrcGroups;\n                if (!uLine.direction\n                    || uLine.direction === 'sendrecv')\n                    uLine.direction = 'recvonly';\n                else if (uLine.direction === 'sendonly')\n                    uLine.direction = 'inactive';\n            } else {\n                // This is an (unified) m-line/channel that contains a local\n                // track (sendrecv or sendonly channel) or it's a unified\n                // recvonly m-line/channel. In either case, since we're\n                // going from PlanB -> Unified Plan this m-line MUST\n                // exist in the cached answer.\n            }\n\n            session.media.push(uLine);\n            if (typeof uLine.mid === 'string') {\n                // inactive lines don't/may not have an mid.\n                mids.push(uLine.mid);\n            }\n        }\n    } else {\n\n        // SDP offer/answer (and the JSEP spec) forbids removing an m-section\n        // under any circumstances. If we are no longer interested in sending a\n        // track, we just remove the msid and ssrc attributes and set it to\n        // either a=recvonly (as the reofferer, we must use recvonly if the\n        // other side was previously sending on the m-section, but we can also\n        // leave the possibility open if it wasn't previously in use), or\n        // a=inactive.\n\n        if (typeof cached !== 'undefined' &&\n            typeof cached.media !== 'undefined' &&\n            Array.isArray(cached.media)) {\n            cached.media.forEach(function(uLine) {\n                midToString(uLine);\n                mids.push(uLine.mid);\n                if (typeof mid2ul[uLine.mid] !== 'undefined') {\n                    session.media.push(mid2ul[uLine.mid]);\n                } else {\n                    delete uLine.msid;\n                    delete uLine.sources;\n                    delete uLine.ssrcGroups;\n                    if (!uLine.direction\n                        || uLine.direction === 'sendrecv')\n                        uLine.direction = 'recvonly';\n                    if (!uLine.direction\n                        || uLine.direction === 'sendonly')\n                        uLine.direction = 'inactive';\n                    session.media.push(uLine);\n                }\n            });\n        }\n\n        // Add all the remaining (new) m-lines of the transformed SDP.\n        Object.keys(mid2ul).forEach(function(mid) {\n            if (mids.indexOf(mid) === -1) {\n                mids.push(mid);\n                if (mid2ul[mid].direction === 'recvonly') {\n                    // This is a remote recvonly channel. Add its SSRC to the\n                    // appropriate sendrecv or sendonly channel.\n                    // TODO(gp) what if we don't have sendrecv/sendonly\n                    // channel?\n\n                    session.media.some(function (uLine) {\n                        if ((uLine.direction === 'sendrecv' ||\n                            uLine.direction === 'sendonly') &&\n                            uLine.type === mid2ul[mid].type) {\n\n                            // mid2ul[mid] shouldn't have any ssrc-groups\n                            Object.keys(mid2ul[mid].sources).forEach(\n                                function (ssrc) {\n                                uLine.sources[ssrc] =\n                                    mid2ul[mid].sources[ssrc];\n                            });\n\n                            return true;\n                        }\n                    });\n                } else {\n                    session.media.push(mid2ul[mid]);\n                }\n            }\n        });\n    }\n\n    // After we have constructed the Plan Unified m-lines we can figure out\n    // where (in which m-line) to place the 'recvonly SSRCs'.\n    // Note: we assume here that we are the answerer in the O/A, so any offers\n    // which we translate come from the remote side, while answers are local\n    // (and so our last local description is cached as an 'answer').\n    [\"audio\", \"video\"].forEach(function (type) {\n        if (!session || !session.media || !Array.isArray(session.media))\n            return;\n\n        var idx = null;\n        if (Object.keys(recvonlySsrcs[type]).length > 0) {\n            idx = self.getFirstSendingIndexFromAnswer(type);\n            if (idx === null){\n                // If this is the first offer we receive, we don't have a\n                // cached answer. Assume that we will be sending media using\n                // the first m-line for each media type.\n\n                for (var i = 0; i < session.media.length; i++) {\n                    if (session.media[i].type === type) {\n                        idx = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (idx && session.media.length > idx) {\n            var mLine = session.media[idx];\n            Object.keys(recvonlySsrcs[type]).forEach(function(ssrc) {\n                if (mLine.sources && mLine.sources[ssrc]) {\n                    console.warn(\"Replacing an existing SSRC.\");\n                }\n                if (!mLine.sources) {\n                    mLine.sources = {};\n                }\n\n                mLine.sources[ssrc] = recvonlySsrcs[type][ssrc];\n            });\n        }\n    });\n\n    // We regenerate the BUNDLE group (since we regenerated the mids)\n    session.groups.some(function(group) {\n        if (group.type === 'BUNDLE') {\n            group.mids = mids.join(' ');\n            return true;\n        }\n    });\n\n    // msid semantic\n    session.msidSemantic = {\n        semantic: 'WMS',\n        token: '*'\n    };\n\n    var resStr = transform.write(session);\n\n    // Cache the transformed SDP (Unified Plan) for later re-use in this\n    // function.\n    this.cache[desc.type] = resStr;\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n\n    //#endregion\n};\n\n/**\n * Maps the direction strings to their binary representation. The binary\n * representation of the directions will contain only 2 bits. The least\n * significant bit will indicate the receiving direction and the other bit will\n * indicate the sending direction.\n *\n * @type {Map<string, number>}\n */\nvar directionMasks = {\n    'inactive': 0, // 00\n    'recvonly': 1, // 01\n    'sendonly': 2, // 10\n    'sendrecv': 3  // 11\n};\n\n/**\n * Parses a number into direction string.\n *\n * @param {number} direction - The number to be parsed.\n * @returns {string} - The parsed direction string.\n */\nfunction parseDirection(direction) { // eslint-disable-line no-unused-vars\n    // Filter all other bits except the 2 less significant.\n    var directionMask = direction & 3;\n\n    switch (directionMask) {\n    case 0:\n        return 'inactive';\n    case 1:\n        return 'recvonly';\n    case 2:\n        return 'sendonly';\n    case 3:\n        return 'sendrecv';\n    }\n}\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\n\nexports.write = function(session, opts) {\n\n  if (typeof session !== 'undefined' &&\n      typeof session.media !== 'undefined' &&\n      Array.isArray(session.media)) {\n\n    session.media.forEach(function (mLine) {\n      // expand sources to ssrcs\n      if (typeof mLine.sources !== 'undefined' &&\n        Object.keys(mLine.sources).length !== 0) {\n          mLine.ssrcs = [];\n          Object.keys(mLine.sources).forEach(function (ssrc) {\n            var source = mLine.sources[ssrc];\n            Object.keys(source).forEach(function (attribute) {\n              mLine.ssrcs.push({\n                id: ssrc,\n                attribute: attribute,\n                value: source[attribute]\n              });\n            });\n          });\n          delete mLine.sources;\n        }\n\n      // join ssrcs in ssrc groups\n      if (typeof mLine.ssrcGroups !== 'undefined' &&\n        Array.isArray(mLine.ssrcGroups)) {\n          mLine.ssrcGroups.forEach(function (ssrcGroup) {\n            if (typeof ssrcGroup.ssrcs !== 'undefined' &&\n                Array.isArray(ssrcGroup.ssrcs)) {\n              ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n            }\n          });\n        }\n    });\n  }\n\n  // join group mids\n  if (typeof session !== 'undefined' &&\n      typeof session.groups !== 'undefined' && Array.isArray(session.groups)) {\n\n    session.groups.forEach(function (g) {\n      if (typeof g.mids !== 'undefined' && Array.isArray(g.mids)) {\n        g.mids = g.mids.join(' ');\n      }\n    });\n  }\n\n  return transform.write(session, opts);\n};\n\nexports.parse = function(sdp) {\n  var session = transform.parse(sdp);\n\n  if (typeof session !== 'undefined' && typeof session.media !== 'undefined' &&\n      Array.isArray(session.media)) {\n\n    session.media.forEach(function (mLine) {\n      // group sources attributes by ssrc\n      if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n        mLine.sources = {};\n        mLine.ssrcs.forEach(function (ssrc) {\n          if (!mLine.sources[ssrc.id])\n          mLine.sources[ssrc.id] = {};\n        mLine.sources[ssrc.id][ssrc.attribute] = ssrc.value;\n        });\n\n        delete mLine.ssrcs;\n      }\n\n      // split ssrcs in ssrc groups\n      if (typeof mLine.ssrcGroups !== 'undefined' &&\n        Array.isArray(mLine.ssrcGroups)) {\n          mLine.ssrcGroups.forEach(function (ssrcGroup) {\n            if (typeof ssrcGroup.ssrcs === 'string') {\n              ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n            }\n          });\n        }\n    });\n  }\n  // split group mids\n  if (typeof session !== 'undefined' &&\n      typeof session.groups !== 'undefined' && Array.isArray(session.groups)) {\n\n    session.groups.forEach(function (g) {\n      if (typeof g.mids === 'string') {\n        g.mids = g.mids.split(' ');\n      }\n    });\n  }\n\n  return session;\n};\n\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nmodule.exports = function arrayEquals(array) {\n    // if the other array is a falsy value, return\n    if (!array)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (this.length != array.length)\n        return false;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (this[i] instanceof Array && array[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!arrayEquals.apply(this[i], [array[i]]))\n                return false;\n        } else if (this[i] != array[i]) {\n            // Warning - two different object instances will never be equal:\n            // {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\n\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || !Array.isArray(mLine.invalid)) {\n        return;\n    }\n\n    var i = mLine.invalid.length;\n    while (i--) {\n        if (mLine.invalid[i].value == 'x-google-flag:conference') {\n            mLine.invalid.splice(i, 1);\n        }\n    }\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // If native simulcast is enabled, we must append the x-goog-conference\n        // attribute to the SDP.\n        if (self.ssrcCache.length < 1) {\n            removeGoogConference(mLine);\n        } else {\n            assertGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","/* global config */\n\nconst TranscriptionService = require('./AbstractTranscriptionService');\nconst Word = require('../word');\nconst audioRecorder = require('./../audioRecorder');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n"],"sourceRoot":""}